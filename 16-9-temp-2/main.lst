   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	init
  12               	init:
  13               	.LFB7:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 8000000UL
   2:main.c        **** 
   3:main.c        **** #include <avr/io.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include <avr/interrupt.h>
   6:main.c        **** 
   7:main.c        **** void getDigi(unsigned int);
   8:main.c        **** void displaySSD(unsigned int n);
   9:main.c        **** void init(void);
  10:main.c        **** 
  11:main.c        **** unsigned char SSD[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  12:main.c        **** unsigned char dig[] = {1,2,3,4};
  13:main.c        **** 
  14:main.c        **** 
  15:main.c        **** int main(void){
  16:main.c        **** 
  17:main.c        **** 	init();
  18:main.c        **** 
  19:main.c        **** 	sei();// Global interrupt enable
  20:main.c        **** 	
  21:main.c        **** 	ADCSRA |= (1<<ADSC);
  22:main.c        **** 
  23:main.c        **** 	while(1){
  24:main.c        **** 		
  25:main.c        **** 		
  26:main.c        **** 		//while(1);
  27:main.c        **** 		/*
  28:main.c        **** 		double c = ((ADCL | ADCH << 8)*256)/(1023);
  29:main.c        **** 		getDigi((int)c);
  30:main.c        **** 		displaySSD(1);*/
  31:main.c        **** 	}
  32:main.c        **** 
  33:main.c        **** 	return 0;
  34:main.c        **** }
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** void init(void){
  15               		.loc 1 37 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  38:main.c        **** 
  39:main.c        **** 	DDRC = 0xff;
  21               		.loc 1 39 0
  22 0000 8FEF      		ldi r24,lo8(-1)
  23 0002 84BB      		out 0x14,r24
  40:main.c        **** 	DDRA =  1<<3| 1<<4| 1<<5| 1<<6 | 1<<7 ;
  24               		.loc 1 40 0
  25 0004 88EF      		ldi r24,lo8(-8)
  26 0006 8ABB      		out 0x1a,r24
  41:main.c        **** 	DDRD = DDRD | ~(1<<2) | 1<<4 | 1<<5;
  27               		.loc 1 41 0
  28 0008 81B3      		in r24,0x11
  29 000a 8B6F      		ori r24,lo8(-5)
  30 000c 81BB      		out 0x11,r24
  42:main.c        **** 	
  43:main.c        **** 	//ADMUX = 1 << MUX1 | 1 << REFS0 | 1 << REFS1;
  44:main.c        **** 	//ADCSRA = 1 << ADEN | 1 << ADPS1 | 1 << ADPS2 ;
  45:main.c        **** 	//ADCSRA = 0b10000110;
  46:main.c        **** 	MCUCR = 0 << SM2 | 0 << SM1 | 1 << SM0;
  31               		.loc 1 46 0
  32 000e 80E1      		ldi r24,lo8(16)
  33 0010 85BF      		out 0x35,r24
  47:main.c        **** 	ADCSRA = 0x8F;
  34               		.loc 1 47 0
  35 0012 8FE8      		ldi r24,lo8(-113)
  36 0014 86B9      		out 0x6,r24
  48:main.c        **** 	ADMUX = 0b11000000;
  37               		.loc 1 48 0
  38 0016 80EC      		ldi r24,lo8(-64)
  39 0018 87B9      		out 0x7,r24
  40 001a 0895      		ret
  41               		.cfi_endproc
  42               	.LFE7:
  44               		.section	.text.startup,"ax",@progbits
  45               	.global	main
  47               	main:
  48               	.LFB6:
  15:main.c        **** int main(void){
  49               		.loc 1 15 0
  50               		.cfi_startproc
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 0 */
  54               	.L__stack_usage = 0
  17:main.c        **** 	init();
  55               		.loc 1 17 0
  56 0000 0E94 0000 		call init
  57               	.LVL0:
  19:main.c        **** 	sei();// Global interrupt enable
  58               		.loc 1 19 0
  59               	/* #APP */
  60               	 ;  19 "main.c" 1
  61 0004 7894      		sei
  62               	 ;  0 "" 2
  21:main.c        **** 	ADCSRA |= (1<<ADSC);
  63               		.loc 1 21 0
  64               	/* #NOAPP */
  65 0006 369A      		sbi 0x6,6
  66               	.L3:
  67 0008 00C0      		rjmp .L3
  68               		.cfi_endproc
  69               	.LFE6:
  71               		.text
  72               	.global	getDigi
  74               	getDigi:
  75               	.LFB8:
  49:main.c        **** }
  50:main.c        **** 
  51:main.c        **** 
  52:main.c        **** 
  53:main.c        **** void getDigi(unsigned int val){
  76               		.loc 1 53 0
  77               		.cfi_startproc
  78               	.LVL1:
  79 001c CF93      		push r28
  80               	.LCFI0:
  81               		.cfi_def_cfa_offset 3
  82               		.cfi_offset 28, -2
  83 001e DF93      		push r29
  84               	.LCFI1:
  85               		.cfi_def_cfa_offset 4
  86               		.cfi_offset 29, -3
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 2 */
  90               	.L__stack_usage = 2
  91 0020 9C01      		movw r18,r24
  54:main.c        **** 
  55:main.c        **** 	dig[0] = val%10;
  92               		.loc 1 55 0
  93 0022 EAE0      		ldi r30,lo8(10)
  94 0024 F0E0      		ldi r31,0
  95 0026 BF01      		movw r22,r30
  96 0028 0E94 0000 		call __udivmodhi4
  97               	.LVL2:
  98 002c 8093 0000 		sts dig,r24
  56:main.c        **** 	dig[1] = (val%100)/10;
  99               		.loc 1 56 0
 100 0030 C901      		movw r24,r18
 101 0032 64E6      		ldi r22,lo8(100)
 102 0034 70E0      		ldi r23,0
 103 0036 0E94 0000 		call __udivmodhi4
 104 003a EB01      		movw r28,r22
 105 003c BF01      		movw r22,r30
 106 003e 0E94 0000 		call __udivmodhi4
 107 0042 6093 0000 		sts dig+1,r22
  57:main.c        **** 	dig[2] = (val/100)%10;
 108               		.loc 1 57 0
 109 0046 CE01      		movw r24,r28
 110 0048 BF01      		movw r22,r30
 111 004a 0E94 0000 		call __udivmodhi4
 112 004e 8093 0000 		sts dig+2,r24
  58:main.c        **** 	dig[3] = val/1000;
 113               		.loc 1 58 0
 114 0052 C901      		movw r24,r18
 115 0054 68EE      		ldi r22,lo8(-24)
 116 0056 73E0      		ldi r23,lo8(3)
 117 0058 0E94 0000 		call __udivmodhi4
 118 005c 6093 0000 		sts dig+3,r22
 119               	/* epilogue start */
  59:main.c        **** }
 120               		.loc 1 59 0
 121 0060 DF91      		pop r29
 122 0062 CF91      		pop r28
 123 0064 0895      		ret
 124               		.cfi_endproc
 125               	.LFE8:
 127               	.global	displaySSD
 129               	displaySSD:
 130               	.LFB10:
  60:main.c        **** 
  61:main.c        **** ISR(ADC_vect)
  62:main.c        **** {
  63:main.c        ****  	double c = ((ADCL | ADCH << 8)*256)/(1023);
  64:main.c        **** 	getDigi((int)c);
  65:main.c        **** 	displaySSD(1);
  66:main.c        **** 				// Output ADCH to PortD
  67:main.c        **** 	ADCSRA |= 1<<ADSC;		// Start Conversion
  68:main.c        **** }
  69:main.c        **** 
  70:main.c        **** void displaySSD(unsigned int n){
 131               		.loc 1 70 0
 132               		.cfi_startproc
 133               	.LVL3:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
  71:main.c        **** 
  72:main.c        **** 	unsigned int j;
  73:main.c        **** 
  74:main.c        **** 	for(j=0;j<n;j++){
 138               		.loc 1 74 0
 139 0066 40E0      		ldi r20,0
 140 0068 50E0      		ldi r21,0
 141               	.LBB5:
  75:main.c        **** 		unsigned char i ;
  76:main.c        **** 
  77:main.c        **** 		for(i=0;i != 4;i++){
  78:main.c        **** 
  79:main.c        **** 
  80:main.c        **** 			if(i==3) {
  81:main.c        **** 				PORTC=SSD[dig[i]] ; //Displaying Dot
  82:main.c        **** 			}else{
  83:main.c        **** 				PORTC=SSD[dig[i]];
  84:main.c        **** 			}
  85:main.c        **** 			PORTA = (1<<i+4) ;
 142               		.loc 1 85 0
 143 006a 61E0      		ldi r22,lo8(1)
 144 006c 70E0      		ldi r23,0
 145               	.LVL4:
 146               	.L7:
 147               	.LBE5:
  74:main.c        **** 	for(j=0;j<n;j++){
 148               		.loc 1 74 0 discriminator 1
 149 006e 4817      		cp r20,r24
 150 0070 5907      		cpc r21,r25
 151 0072 01F0      		breq .L6
  74:main.c        **** 	for(j=0;j<n;j++){
 152               		.loc 1 74 0 is_stmt 0
 153 0074 24E0      		ldi r18,lo8(4)
 154 0076 30E0      		ldi r19,0
 155               	.L12:
 156               	.LVL5:
 157               	.LBB8:
  80:main.c        **** 			if(i==3) {
 158               		.loc 1 80 0 is_stmt 1
 159 0078 2730      		cpi r18,lo8(7)
 160 007a 01F4      		brne .L8
  81:main.c        **** 				PORTC=SSD[dig[i]] ; //Displaying Dot
 161               		.loc 1 81 0
 162 007c E091 0000 		lds r30,dig+3
 163 0080 00C0      		rjmp .L13
 164               	.L8:
 165 0082 F901      		movw r30,r18
 166 0084 E050      		subi r30,lo8(-(dig-4))
 167 0086 F040      		sbci r31,hi8(-(dig-4))
  83:main.c        **** 				PORTC=SSD[dig[i]];
 168               		.loc 1 83 0
 169 0088 E081      		ld r30,Z
 170               	.LVL6:
 171               	.L13:
 172 008a F0E0      		ldi r31,0
 173 008c E050      		subi r30,lo8(-(SSD))
 174 008e F040      		sbci r31,hi8(-(SSD))
 175 0090 E081      		ld r30,Z
 176 0092 E5BB      		out 0x15,r30
 177               		.loc 1 85 0
 178 0094 FB01      		movw r30,r22
 179 0096 022E      		mov r0,r18
 180 0098 00C0      		rjmp 2f
 181               		1:
 182 009a EE0F      		lsl r30
 183               		2:
 184 009c 0A94      		dec r0
 185 009e 02F4      		brpl 1b
 186 00a0 EBBB      		out 0x1b,r30
 187               	.LVL7:
 188               	.LBB6:
 189               	.LBB7:
 190               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 191               		.loc 2 164 0
 192 00a2 EFEC      		ldi r30,lo8(1999)
 193 00a4 F7E0      		ldi r31,hi8(1999)
 194 00a6 3197      		1: sbiw r30,1
 195 00a8 01F4      		brne 1b
 196 00aa 00C0      		rjmp .
 197 00ac 0000      		nop
 198               	.LBE7:
 199               	.LBE6:
  86:main.c        **** 			_delay_ms(1);
  87:main.c        **** 			PORTA=0;
 200               		.loc 1 87 0
 201 00ae 1BBA      		out 0x1b,__zero_reg__
 202               	.LVL8:
 203 00b0 2F5F      		subi r18,-1
 204 00b2 3F4F      		sbci r19,-1
 205               	.LVL9:
  77:main.c        **** 		for(i=0;i != 4;i++){
 206               		.loc 1 77 0
 207 00b4 2830      		cpi r18,8
 208 00b6 3105      		cpc r19,__zero_reg__
 209 00b8 01F4      		brne .L12
 210               	.LVL10:
 211               	.LBE8:
  74:main.c        **** 	for(j=0;j<n;j++){
 212               		.loc 1 74 0
 213 00ba 4F5F      		subi r20,-1
 214 00bc 5F4F      		sbci r21,-1
 215               	.LVL11:
 216 00be 00C0      		rjmp .L7
 217               	.LVL12:
 218               	.L6:
 219 00c0 0895      		ret
 220               		.cfi_endproc
 221               	.LFE10:
 223               	.global	__vector_16
 225               	__vector_16:
 226               	.LFB9:
  62:main.c        **** {
 227               		.loc 1 62 0
 228               		.cfi_startproc
 229 00c2 1F92      		push r1
 230               	.LCFI2:
 231               		.cfi_def_cfa_offset 3
 232               		.cfi_offset 1, -2
 233 00c4 0F92      		push r0
 234               	.LCFI3:
 235               		.cfi_def_cfa_offset 4
 236               		.cfi_offset 0, -3
 237 00c6 0FB6      		in r0,__SREG__
 238 00c8 0F92      		push r0
 239 00ca 1124      		clr __zero_reg__
 240 00cc 2F93      		push r18
 241               	.LCFI4:
 242               		.cfi_def_cfa_offset 5
 243               		.cfi_offset 18, -4
 244 00ce 3F93      		push r19
 245               	.LCFI5:
 246               		.cfi_def_cfa_offset 6
 247               		.cfi_offset 19, -5
 248 00d0 4F93      		push r20
 249               	.LCFI6:
 250               		.cfi_def_cfa_offset 7
 251               		.cfi_offset 20, -6
 252 00d2 5F93      		push r21
 253               	.LCFI7:
 254               		.cfi_def_cfa_offset 8
 255               		.cfi_offset 21, -7
 256 00d4 6F93      		push r22
 257               	.LCFI8:
 258               		.cfi_def_cfa_offset 9
 259               		.cfi_offset 22, -8
 260 00d6 7F93      		push r23
 261               	.LCFI9:
 262               		.cfi_def_cfa_offset 10
 263               		.cfi_offset 23, -9
 264 00d8 8F93      		push r24
 265               	.LCFI10:
 266               		.cfi_def_cfa_offset 11
 267               		.cfi_offset 24, -10
 268 00da 9F93      		push r25
 269               	.LCFI11:
 270               		.cfi_def_cfa_offset 12
 271               		.cfi_offset 25, -11
 272 00dc AF93      		push r26
 273               	.LCFI12:
 274               		.cfi_def_cfa_offset 13
 275               		.cfi_offset 26, -12
 276 00de BF93      		push r27
 277               	.LCFI13:
 278               		.cfi_def_cfa_offset 14
 279               		.cfi_offset 27, -13
 280 00e0 EF93      		push r30
 281               	.LCFI14:
 282               		.cfi_def_cfa_offset 15
 283               		.cfi_offset 30, -14
 284 00e2 FF93      		push r31
 285               	.LCFI15:
 286               		.cfi_def_cfa_offset 16
 287               		.cfi_offset 31, -15
 288               	/* prologue: Signal */
 289               	/* frame size = 0 */
 290               	/* stack size = 15 */
 291               	.L__stack_usage = 15
  63:main.c        ****  	double c = ((ADCL | ADCH << 8)*256)/(1023);
 292               		.loc 1 63 0
 293 00e4 84B1      		in r24,0x4
 294 00e6 95B1      		in r25,0x5
 295               	.LVL13:
 296 00e8 982F      		mov r25,r24
 297 00ea 80E0      		ldi r24,0
 298 00ec 6FEF      		ldi r22,lo8(-1)
 299 00ee 73E0      		ldi r23,lo8(3)
 300 00f0 0E94 0000 		call __divmodhi4
 301 00f4 CB01      		movw r24,r22
  64:main.c        **** 	getDigi((int)c);
 302               		.loc 1 64 0
 303 00f6 0E94 0000 		call getDigi
 304               	.LVL14:
  65:main.c        **** 	displaySSD(1);
 305               		.loc 1 65 0
 306 00fa 81E0      		ldi r24,lo8(1)
 307 00fc 90E0      		ldi r25,0
 308 00fe 0E94 0000 		call displaySSD
 309               	.LVL15:
  67:main.c        **** 	ADCSRA |= 1<<ADSC;		// Start Conversion
 310               		.loc 1 67 0
 311 0102 369A      		sbi 0x6,6
 312               	/* epilogue start */
  68:main.c        **** }
 313               		.loc 1 68 0
 314 0104 FF91      		pop r31
 315 0106 EF91      		pop r30
 316 0108 BF91      		pop r27
 317 010a AF91      		pop r26
 318 010c 9F91      		pop r25
 319 010e 8F91      		pop r24
 320 0110 7F91      		pop r23
 321 0112 6F91      		pop r22
 322 0114 5F91      		pop r21
 323 0116 4F91      		pop r20
 324 0118 3F91      		pop r19
 325 011a 2F91      		pop r18
 326 011c 0F90      		pop r0
 327 011e 0FBE      		out __SREG__,r0
 328 0120 0F90      		pop r0
 329 0122 1F90      		pop r1
 330 0124 1895      		reti
 331               		.cfi_endproc
 332               	.LFE9:
 334               	.global	dig
 335               		.data
 338               	dig:
 339 0000 01        		.byte	1
 340 0001 02        		.byte	2
 341 0002 03        		.byte	3
 342 0003 04        		.byte	4
 343               	.global	SSD
 346               	SSD:
 347 0004 3F        		.byte	63
 348 0005 06        		.byte	6
 349 0006 5B        		.byte	91
 350 0007 4F        		.byte	79
 351 0008 66        		.byte	102
 352 0009 6D        		.byte	109
 353 000a 7D        		.byte	125
 354 000b 07        		.byte	7
 355 000c 7F        		.byte	127
 356 000d 6F        		.byte	111
 357               		.text
 358               	.Letext0:
 359               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccH5hR9c.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccH5hR9c.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccH5hR9c.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccH5hR9c.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccH5hR9c.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccH5hR9c.s:12     .text:0000000000000000 init
     /tmp/ccH5hR9c.s:47     .text.startup:0000000000000000 main
     /tmp/ccH5hR9c.s:74     .text:000000000000001c getDigi
     /tmp/ccH5hR9c.s:338    .data:0000000000000000 dig
     /tmp/ccH5hR9c.s:129    .text:0000000000000066 displaySSD
     /tmp/ccH5hR9c.s:346    .data:0000000000000004 SSD
     /tmp/ccH5hR9c.s:225    .text:00000000000000c2 __vector_16

UNDEFINED SYMBOLS
__udivmodhi4
__divmodhi4
__do_copy_data
