
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000020ca  0000215e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  00800072  00800072  00002170  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000059b  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013b5  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  00003b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fc3  00000000  00000000  000042f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  000052bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000495  00000000  00000000  0000559c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000508  00000000  00000000  00005a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00005f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
       4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      18:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_6>
      1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      24:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_9>
      28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 07       	cpc	r19, r31
      82:	63 42       	sbci	r22, 0x23	; 35
      84:	36 b7       	in	r19, 0x36	; 54
      86:	9b d8       	rcall	.-3786   	; 0xfffff1be <__eeprom_end+0xff7ef1be>
      88:	a7 1a       	sub	r10, r23
      8a:	39 68       	ori	r19, 0x89	; 137
      8c:	56 18       	sub	r5, r6
      8e:	ae ba       	out	0x1e, r10	; 30
      90:	ab 55       	subi	r26, 0x5B	; 91
      92:	8c 1d       	adc	r24, r12
      94:	3c b7       	in	r19, 0x3c	; 60
      96:	cc 57       	subi	r28, 0x7C	; 124
      98:	63 bd       	out	0x23, r22	; 35
      9a:	6d ed       	ldi	r22, 0xDD	; 221
      9c:	fd 75       	andi	r31, 0x5D	; 93
      9e:	3e f6       	brtc	.-114    	; 0x2e <__zero_reg__+0x2d>
      a0:	17 72       	andi	r17, 0x27	; 39
      a2:	31 bf       	out	0x31, r19	; 49
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 08       	sbc	r3, r15
      aa:	00 00       	nop
      ac:	00 be       	out	0x30, r0	; 48
      ae:	92 24       	eor	r9, r2
      b0:	49 12       	cpse	r4, r25
      b2:	3e ab       	std	Y+54, r19	; 0x36
      b4:	aa aa       	std	Y+50, r10	; 0x32
      b6:	2a be       	out	0x3a, r2	; 58
      b8:	cd cc       	rjmp	.-1638   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
      ba:	cc 4c       	sbci	r28, 0xCC	; 204
      bc:	3e 00       	.word	0x003e	; ????
      be:	00 00       	nop
      c0:	80 be       	out	0x30, r8	; 48
      c2:	ab aa       	std	Y+51, r10	; 0x33
      c4:	aa aa       	std	Y+50, r10	; 0x32
      c6:	3e 00       	.word	0x003e	; ????
      c8:	00 00       	nop
      ca:	00 bf       	out	0x30, r16	; 48
      cc:	00 00       	nop
      ce:	00 80       	ld	r0, Z
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	08 41       	sbci	r16, 0x18	; 24
      d8:	78 d3       	rcall	.+1776   	; 0x7ca <transmitHex+0x4c>
      da:	bb 43       	sbci	r27, 0x3B	; 59
      dc:	87 d1       	rcall	.+782    	; 0x3ec <getHeading+0x8e>
      de:	13 3d       	cpi	r17, 0xD3	; 211
      e0:	19 0e       	add	r1, r25
      e2:	3c c3       	rjmp	.+1656   	; 0x75c <transmitString_F+0x6>
      e4:	bd 42       	sbci	r27, 0x2D	; 45
      e6:	82 ad       	ldd	r24, Z+58	; 0x3a
      e8:	2b 3e       	cpi	r18, 0xEB	; 235
      ea:	68 ec       	ldi	r22, 0xC8	; 200
      ec:	82 76       	andi	r24, 0x62	; 98
      ee:	be d9       	rcall	.-3204   	; 0xfffff46c <__eeprom_end+0xff7ef46c>
      f0:	8f e1       	ldi	r24, 0x1F	; 31
      f2:	a9 3e       	cpi	r26, 0xE9	; 233
      f4:	4c 80       	ldd	r4, Y+4	; 0x04
      f6:	ef ff       	.word	0xffef	; ????
      f8:	be 01       	movw	r22, r28
      fa:	c4 ff       	sbrs	r28, 4
      fc:	7f 3f       	cpi	r23, 0xFF	; 255
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	00 00       	nop
     104:	40 7a       	andi	r20, 0xA0	; 160
     106:	10 f3       	brcs	.-60     	; 0xcc <__SREG__+0x8d>
     108:	5a 00       	.word	0x005a	; ????
     10a:	a0 72       	andi	r26, 0x20	; 32
     10c:	4e 18       	sub	r4, r14
     10e:	09 00       	.word	0x0009	; ????
     110:	10 a5       	ldd	r17, Z+40	; 0x28
     112:	d4 e8       	ldi	r29, 0x84	; 132
     114:	00 00       	nop
     116:	e8 76       	andi	r30, 0x68	; 104
     118:	48 17       	cp	r20, r24
     11a:	00 00       	nop
     11c:	e4 0b       	sbc	r30, r20
     11e:	54 02       	muls	r21, r20
     120:	00 00       	nop
     122:	ca 9a       	sbi	0x19, 2	; 25
     124:	3b 00       	.word	0x003b	; ????
     126:	00 00       	nop
     128:	e1 f5       	brne	.+120    	; 0x1a2 <__SREG__+0x163>
     12a:	05 00       	.word	0x0005	; ????
     12c:	00 80       	ld	r0, Z
     12e:	96 98       	cbi	0x12, 6	; 18
     130:	00 00       	nop
     132:	00 40       	sbci	r16, 0x00	; 0
     134:	42 0f       	add	r20, r18
     136:	00 00       	nop
     138:	00 a0       	ldd	r0, Z+32	; 0x20
     13a:	86 01       	movw	r16, r12
     13c:	00 00       	nop
     13e:	00 10       	cpse	r0, r0
     140:	27 00       	.word	0x0027	; ????
     142:	00 00       	nop
     144:	00 e8       	ldi	r16, 0x80	; 128
     146:	03 00       	.word	0x0003	; ????
     148:	00 00       	nop
     14a:	00 64       	ori	r16, 0x40	; 64
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	00 0a       	sbc	r0, r16
     152:	00 00       	nop
     154:	00 00       	nop
     156:	00 01       	movw	r0, r0
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 2c       	mov	r0, r0
     15e:	76 d8       	rcall	.-3860   	; 0xfffff24c <__eeprom_end+0xff7ef24c>
     160:	88 dc       	rcall	.-1776   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     162:	67 4f       	sbci	r22, 0xF7	; 247
     164:	08 23       	and	r16, r24
     166:	df c1       	rjmp	.+958    	; 0x526 <__vector_6+0x16>
     168:	df ae       	std	Y+63, r13	; 0x3f
     16a:	59 e1       	ldi	r21, 0x19	; 25
     16c:	b1 b7       	in	r27, 0x31	; 49
     16e:	96 e5       	ldi	r25, 0x56	; 86
     170:	e3 e4       	ldi	r30, 0x43	; 67
     172:	53 c6       	rjmp	.+3238   	; 0xe1a <bmp085_getrawpressure+0x282>
     174:	3a e6       	ldi	r19, 0x6A	; 106
     176:	51 99       	sbic	0x0a, 1	; 10
     178:	76 96       	adiw	r30, 0x16	; 22
     17a:	e8 e6       	ldi	r30, 0x68	; 104
     17c:	c2 84       	ldd	r12, Z+10	; 0x0a
     17e:	26 eb       	ldi	r18, 0xB6	; 182
     180:	89 8c       	ldd	r8, Y+25	; 0x19
     182:	9b 62       	ori	r25, 0x2B	; 43
     184:	ed 40       	sbci	r30, 0x0D	; 13
     186:	7c 6f       	ori	r23, 0xFC	; 252
     188:	fc ef       	ldi	r31, 0xFC	; 252
     18a:	bc 9c       	mul	r11, r12
     18c:	9f 40       	sbci	r25, 0x0F	; 15
     18e:	f2 ba       	out	0x12, r15	; 18
     190:	a5 6f       	ori	r26, 0xF5	; 245
     192:	a5 f4       	brhc	.+40     	; 0x1bc <__SREG__+0x17d>
     194:	90 05       	cpc	r25, r0
     196:	5a 2a       	or	r5, r26
     198:	f7 5c       	subi	r31, 0xC7	; 199
     19a:	93 6b       	ori	r25, 0xB3	; 179
     19c:	6c f9       	.word	0xf96c	; ????
     19e:	67 6d       	ori	r22, 0xD7	; 215
     1a0:	c1 1b       	sub	r28, r17
     1a2:	fc e0       	ldi	r31, 0x0C	; 12
     1a4:	e4 0d       	add	r30, r4
     1a6:	47 fe       	sbrs	r4, 7
     1a8:	f5 20       	and	r15, r5
     1aa:	e6 b5       	in	r30, 0x26	; 38
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <__SREG__+0x16f>
     1ae:	ed 90       	ld	r14, X+
     1b0:	2e 03       	fmul	r18, r22
     1b2:	00 94       	com	r0
     1b4:	35 77       	andi	r19, 0x75	; 117
     1b6:	05 00       	.word	0x0005	; ????
     1b8:	80 84       	ldd	r8, Z+8	; 0x08
     1ba:	1e 08       	sbc	r1, r14
     1bc:	00 00       	nop
     1be:	20 4e       	sbci	r18, 0xE0	; 224
     1c0:	0a 00       	.word	0x000a	; ????
     1c2:	00 00       	nop
     1c4:	c8 0c       	add	r12, r8
     1c6:	33 33       	cpi	r19, 0x33	; 51
     1c8:	33 33       	cpi	r19, 0x33	; 51
     1ca:	0f 98       	cbi	0x01, 7	; 1
     1cc:	6e 12       	cpse	r6, r30
     1ce:	83 11       	cpse	r24, r3
     1d0:	41 ef       	ldi	r20, 0xF1	; 241
     1d2:	8d 21       	and	r24, r13
     1d4:	14 89       	ldd	r17, Z+20	; 0x14
     1d6:	3b e6       	ldi	r19, 0x6B	; 107
     1d8:	55 16       	cp	r5, r21
     1da:	cf fe       	.word	0xfecf	; ????
     1dc:	e6 db       	rcall	.-2100   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
     1de:	18 d1       	rcall	.+560    	; 0x410 <init_IR+0xc>
     1e0:	84 4b       	sbci	r24, 0xB4	; 180
     1e2:	38 1b       	sub	r19, r24
     1e4:	f7 7c       	andi	r31, 0xC7	; 199
     1e6:	1d 90       	ld	r1, X+
     1e8:	1d a4       	ldd	r1, Y+45	; 0x2d
     1ea:	bb e4       	ldi	r27, 0x4B	; 75
     1ec:	24 20       	and	r2, r4
     1ee:	32 84       	ldd	r3, Z+10	; 0x0a
     1f0:	72 5e       	subi	r23, 0xE2	; 226
     1f2:	22 81       	ldd	r18, Z+2	; 0x02
     1f4:	00 c9       	rjmp	.-3584   	; 0xfffff3f6 <__eeprom_end+0xff7ef3f6>
     1f6:	f1 24       	eor	r15, r1
     1f8:	ec a1       	ldd	r30, Y+36	; 0x24
     1fa:	e5 3d       	cpi	r30, 0xD5	; 213
     1fc:	27 00       	.word	0x0027	; ????

000001fe <__ctors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf e5       	ldi	r28, 0x5F	; 95
     204:	d8 e0       	ldi	r29, 0x08	; 8
     206:	de bf       	out	0x3e, r29	; 62
     208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	a0 e6       	ldi	r26, 0x60	; 96
     20e:	b0 e0       	ldi	r27, 0x00	; 0
     210:	ea ec       	ldi	r30, 0xCA	; 202
     212:	f0 e2       	ldi	r31, 0x20	; 32
     214:	02 c0       	rjmp	.+4      	; 0x21a <.do_copy_data_start>

00000216 <.do_copy_data_loop>:
     216:	05 90       	lpm	r0, Z+
     218:	0d 92       	st	X+, r0

0000021a <.do_copy_data_start>:
     21a:	a2 37       	cpi	r26, 0x72	; 114
     21c:	b1 07       	cpc	r27, r17
     21e:	d9 f7       	brne	.-10     	; 0x216 <.do_copy_data_loop>

00000220 <__do_clear_bss>:
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	a2 e7       	ldi	r26, 0x72	; 114
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
     228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
     22a:	a6 31       	cpi	r26, 0x16	; 22
     22c:	b1 07       	cpc	r27, r17
     22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
     230:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <main>
     234:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <_exit>

00000238 <__bad_interrupt>:
     238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <i2c_init>:
Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
TWSR = 0; /* no prescaler */
     23c:	11 b8       	out	0x01, r1	; 1
TWBR = ((F_CPU/SCL_CLOCK)-16)/2; /* must be > 10 for stable operation */
     23e:	88 e4       	ldi	r24, 0x48	; 72
     240:	80 b9       	out	0x00, r24	; 0
}/* i2c_init */
     242:	08 95       	ret

00000244 <i2c_start>:
/*************************************************************************
Issues a start condition and sends address and transfer direction.
return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     244:	98 2f       	mov	r25, r24
uint8_t twst;
// send START condition
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     246:	84 ea       	ldi	r24, 0xA4	; 164
     248:	86 bf       	out	0x36, r24	; 54
// wait until transmission completed
while(!(TWCR & (1<<TWINT)));
     24a:	06 b6       	in	r0, 0x36	; 54
     24c:	07 fe       	sbrs	r0, 7
     24e:	fd cf       	rjmp	.-6      	; 0x24a <i2c_start+0x6>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     250:	81 b1       	in	r24, 0x01	; 1
     252:	88 7f       	andi	r24, 0xF8	; 248
if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     254:	88 30       	cpi	r24, 0x08	; 8
     256:	21 f0       	breq	.+8      	; 0x260 <i2c_start+0x1c>
     258:	80 31       	cpi	r24, 0x10	; 16
     25a:	11 f0       	breq	.+4      	; 0x260 <i2c_start+0x1c>
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	08 95       	ret
// send device address
TWDR = address;
     260:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	86 bf       	out	0x36, r24	; 54
// wail until transmission completed and ACK/NACK has been received
while(!(TWCR & (1<<TWINT)));
     266:	06 b6       	in	r0, 0x36	; 54
     268:	07 fe       	sbrs	r0, 7
     26a:	fd cf       	rjmp	.-6      	; 0x266 <i2c_start+0x22>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     26c:	91 b1       	in	r25, 0x01	; 1
     26e:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     270:	98 31       	cpi	r25, 0x18	; 24
     272:	11 f4       	brne	.+4      	; 0x278 <i2c_start+0x34>
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 34       	cpi	r25, 0x40	; 64
     27c:	09 f0       	breq	.+2      	; 0x280 <i2c_start+0x3c>
     27e:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}/* i2c_start */
     280:	08 95       	ret

00000282 <i2c_start_wait>:
{
uint8_t twst;
while ( 1 )
{
// send START condition
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     282:	44 ea       	ldi	r20, 0xA4	; 164
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
// send device address
TWDR = address;
TWCR = (1<<TWINT) | (1<<TWEN);
     284:	34 e8       	ldi	r19, 0x84	; 132
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
{
/* device busy, send stop condition to terminate write operation */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     286:	24 e9       	ldi	r18, 0x94	; 148
{
uint8_t twst;
while ( 1 )
{
// send START condition
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     288:	46 bf       	out	0x36, r20	; 54
// wait until transmission completed
while(!(TWCR & (1<<TWINT)));
     28a:	06 b6       	in	r0, 0x36	; 54
     28c:	07 fe       	sbrs	r0, 7
     28e:	fd cf       	rjmp	.-6      	; 0x28a <i2c_start_wait+0x8>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     290:	91 b1       	in	r25, 0x01	; 1
     292:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     294:	98 30       	cpi	r25, 0x08	; 8
     296:	11 f0       	breq	.+4      	; 0x29c <i2c_start_wait+0x1a>
     298:	90 31       	cpi	r25, 0x10	; 16
     29a:	b1 f7       	brne	.-20     	; 0x288 <i2c_start_wait+0x6>
// send device address
TWDR = address;
     29c:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
     29e:	36 bf       	out	0x36, r19	; 54
// wail until transmission completed
while(!(TWCR & (1<<TWINT)));
     2a0:	06 b6       	in	r0, 0x36	; 54
     2a2:	07 fe       	sbrs	r0, 7
     2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <i2c_start_wait+0x1e>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     2a6:	91 b1       	in	r25, 0x01	; 1
     2a8:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
     2aa:	90 32       	cpi	r25, 0x20	; 32
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <i2c_start_wait+0x30>
     2ae:	98 35       	cpi	r25, 0x58	; 88
     2b0:	29 f4       	brne	.+10     	; 0x2bc <i2c_start_wait+0x3a>
{
/* device busy, send stop condition to terminate write operation */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2b2:	26 bf       	out	0x36, r18	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     2b4:	06 b6       	in	r0, 0x36	; 54
     2b6:	04 fc       	sbrc	r0, 4
     2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <i2c_start_wait+0x32>
     2ba:	e6 cf       	rjmp	.-52     	; 0x288 <i2c_start_wait+0x6>
     2bc:	08 95       	ret

000002be <i2c_rep_start>:
Return: 0 device accessible
1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
return i2c_start( address );
     2be:	0e 94 22 01 	call	0x244	; 0x244 <i2c_start>
}/* i2c_rep_start */
     2c2:	08 95       	ret

000002c4 <i2c_stop>:
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2c4:	84 e9       	ldi	r24, 0x94	; 148
     2c6:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     2c8:	06 b6       	in	r0, 0x36	; 54
     2ca:	04 fc       	sbrc	r0, 4
     2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <i2c_stop+0x4>
}/* i2c_stop */
     2ce:	08 95       	ret

000002d0 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
uint8_t twst;
// send data to the previously addressed device
TWDR = data;
     2d0:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
     2d2:	84 e8       	ldi	r24, 0x84	; 132
     2d4:	86 bf       	out	0x36, r24	; 54
// wait until transmission completed
while(!(TWCR & (1<<TWINT)));
     2d6:	06 b6       	in	r0, 0x36	; 54
     2d8:	07 fe       	sbrs	r0, 7
     2da:	fd cf       	rjmp	.-6      	; 0x2d6 <i2c_write+0x6>
// check value of TWI Status Register. Mask prescaler bits
twst = TW_STATUS & 0xF8;
     2dc:	81 b1       	in	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	88 7f       	andi	r24, 0xF8	; 248
     2e2:	88 32       	cpi	r24, 0x28	; 40
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <i2c_write+0x18>
     2e6:	91 e0       	ldi	r25, 0x01	; 1
if( twst != TW_MT_DATA_ACK) return 1;
return 0;
}/* i2c_write */
     2e8:	89 2f       	mov	r24, r25
     2ea:	08 95       	ret

000002ec <i2c_readAck>:
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2ec:	84 ec       	ldi	r24, 0xC4	; 196
     2ee:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     2f0:	06 b6       	in	r0, 0x36	; 54
     2f2:	07 fe       	sbrs	r0, 7
     2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <i2c_readAck+0x4>
return TWDR;
     2f6:	83 b1       	in	r24, 0x03	; 3
}/* i2c_readAck */
     2f8:	08 95       	ret

000002fa <i2c_readNak>:
Read one byte from the I2C device, read is followed by a stop condition
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
TWCR = (1<<TWINT) | (1<<TWEN);
     2fa:	84 e8       	ldi	r24, 0x84	; 132
     2fc:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     2fe:	06 b6       	in	r0, 0x36	; 54
     300:	07 fe       	sbrs	r0, 7
     302:	fd cf       	rjmp	.-6      	; 0x2fe <i2c_readNak+0x4>
return TWDR;
     304:	83 b1       	in	r24, 0x03	; 3
     306:	08 95       	ret

00000308 <init_HMC5883L>:
int16_t raw_x = 0;
int16_t raw_y = 0;
int16_t raw_z = 0;

void init_HMC5883L(void){
	i2c_start(HMC5883L_WRITE);
     308:	8c e3       	ldi	r24, 0x3C	; 60
     30a:	0e 94 22 01 	call	0x244	; 0x244 <i2c_start>
	i2c_write(0x00); // set pointer to CRA
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
	i2c_write(0x70); // write 0x70 to CRA
     314:	80 e7       	ldi	r24, 0x70	; 112
     316:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     31a:	84 e9       	ldi	r24, 0x94	; 148
     31c:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     31e:	06 b6       	in	r0, 0x36	; 54
     320:	04 fc       	sbrc	r0, 4
     322:	fd cf       	rjmp	.-6      	; 0x31e <init_HMC5883L+0x16>
	i2c_stop();
	i2c_start(HMC5883L_WRITE);
     324:	8c e3       	ldi	r24, 0x3C	; 60
     326:	0e 94 22 01 	call	0x244	; 0x244 <i2c_start>
	i2c_write(0x01); // set pointer to CRB
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
	i2c_write(0xA0);
     330:	80 ea       	ldi	r24, 0xA0	; 160
     332:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     336:	84 e9       	ldi	r24, 0x94	; 148
     338:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     33a:	06 b6       	in	r0, 0x36	; 54
     33c:	04 fc       	sbrc	r0, 4
     33e:	fd cf       	rjmp	.-6      	; 0x33a <init_HMC5883L+0x32>
	i2c_stop();
	i2c_start(HMC5883L_WRITE);
     340:	8c e3       	ldi	r24, 0x3C	; 60
     342:	0e 94 22 01 	call	0x244	; 0x244 <i2c_start>
	i2c_write(0x02); // set pointer to measurement mode
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
	i2c_write(0x00); // continous measurement
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     352:	84 e9       	ldi	r24, 0x94	; 148
     354:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     356:	06 b6       	in	r0, 0x36	; 54
     358:	04 fc       	sbrc	r0, 4
     35a:	fd cf       	rjmp	.-6      	; 0x356 <init_HMC5883L+0x4e>
	i2c_stop();
}
     35c:	08 95       	ret

0000035e <getHeading>:

void getHeading(void){
	i2c_start_wait(HMC5883L_WRITE);
     35e:	8c e3       	ldi	r24, 0x3C	; 60
     360:	0e 94 41 01 	call	0x282	; 0x282 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     36a:	84 e9       	ldi	r24, 0x94	; 148
     36c:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     36e:	06 b6       	in	r0, 0x36	; 54
     370:	04 fc       	sbrc	r0, 4
     372:	fd cf       	rjmp	.-6      	; 0x36e <getHeading+0x10>
Return: 0 device accessible
1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
return i2c_start( address );
     374:	8d e3       	ldi	r24, 0x3D	; 61
     376:	0e 94 22 01 	call	0x244	; 0x244 <i2c_start>
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     37a:	84 ec       	ldi	r24, 0xC4	; 196
     37c:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     37e:	06 b6       	in	r0, 0x36	; 54
     380:	07 fe       	sbrs	r0, 7
     382:	fd cf       	rjmp	.-6      	; 0x37e <getHeading+0x20>
return TWDR;
     384:	93 b1       	in	r25, 0x03	; 3
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     386:	84 ec       	ldi	r24, 0xC4	; 196
     388:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     38a:	06 b6       	in	r0, 0x36	; 54
     38c:	07 fe       	sbrs	r0, 7
     38e:	fd cf       	rjmp	.-6      	; 0x38a <getHeading+0x2c>
return TWDR;
     390:	83 b1       	in	r24, 0x03	; 3
	i2c_stop();
	i2c_rep_start(HMC5883L_READ);
	raw_x = ((uint8_t)i2c_readAck())<<8;
	raw_x |= i2c_readAck();
     392:	39 2f       	mov	r19, r25
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	28 2b       	or	r18, r24
     39a:	39 2b       	or	r19, r25
     39c:	30 93 73 00 	sts	0x0073, r19
     3a0:	20 93 72 00 	sts	0x0072, r18
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3a4:	84 ec       	ldi	r24, 0xC4	; 196
     3a6:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     3a8:	06 b6       	in	r0, 0x36	; 54
     3aa:	07 fe       	sbrs	r0, 7
     3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <getHeading+0x4a>
return TWDR;
     3ae:	93 b1       	in	r25, 0x03	; 3
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3b0:	84 ec       	ldi	r24, 0xC4	; 196
     3b2:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     3b4:	06 b6       	in	r0, 0x36	; 54
     3b6:	07 fe       	sbrs	r0, 7
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <getHeading+0x56>
return TWDR;
     3ba:	83 b1       	in	r24, 0x03	; 3
	raw_z = ((uint8_t)i2c_readAck())<<8;
	raw_z |= i2c_readAck();
     3bc:	39 2f       	mov	r19, r25
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	28 2b       	or	r18, r24
     3c4:	39 2b       	or	r19, r25
     3c6:	30 93 77 00 	sts	0x0077, r19
     3ca:	20 93 76 00 	sts	0x0076, r18
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3ce:	84 ec       	ldi	r24, 0xC4	; 196
     3d0:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     3d2:	06 b6       	in	r0, 0x36	; 54
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <getHeading+0x74>
return TWDR;
     3d8:	93 b1       	in	r25, 0x03	; 3
Read one byte from the I2C device, read is followed by a stop condition
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
TWCR = (1<<TWINT) | (1<<TWEN);
     3da:	84 e8       	ldi	r24, 0x84	; 132
     3dc:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     3de:	06 b6       	in	r0, 0x36	; 54
     3e0:	07 fe       	sbrs	r0, 7
     3e2:	fd cf       	rjmp	.-6      	; 0x3de <getHeading+0x80>
return TWDR;
     3e4:	83 b1       	in	r24, 0x03	; 3
	raw_y = ((uint8_t)i2c_readAck())<<8;
	raw_y |= i2c_readNak();
     3e6:	39 2f       	mov	r19, r25
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	28 2b       	or	r18, r24
     3ee:	39 2b       	or	r19, r25
     3f0:	30 93 75 00 	sts	0x0075, r19
     3f4:	20 93 74 00 	sts	0x0074, r18
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3f8:	84 e9       	ldi	r24, 0x94	; 148
     3fa:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     3fc:	06 b6       	in	r0, 0x36	; 54
     3fe:	04 fc       	sbrc	r0, 4
     400:	fd cf       	rjmp	.-6      	; 0x3fc <getHeading+0x9e>
	i2c_stop();
}
     402:	08 95       	ret

00000404 <init_IR>:

void init_IR(void){
	TCCR1B = (1<<CS11|1<<WGM12|1<<ICES1);
     404:	8a e4       	ldi	r24, 0x4A	; 74
     406:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<TOIE1|1<<TICIE1);
     408:	84 e2       	ldi	r24, 0x24	; 36
     40a:	89 bf       	out	0x39, r24	; 57
	TCNT1=0;
     40c:	1d bc       	out	0x2d, r1	; 45
     40e:	1c bc       	out	0x2c, r1	; 44
}
     410:	08 95       	ret

00000412 <calculate>:

void calculate(void){
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
	double cir = r*2*22/7;
	point = 3.6*(cir/(counts*0.000008)); // speed in Km/h
     41a:	20 91 63 00 	lds	r18, 0x0063
     41e:	30 91 64 00 	lds	r19, 0x0064
     422:	40 91 65 00 	lds	r20, 0x0065
     426:	50 91 66 00 	lds	r21, 0x0066
     42a:	ca 01       	movw	r24, r20
     42c:	b9 01       	movw	r22, r18
     42e:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 eb       	ldi	r20, 0xB0	; 176
     438:	51 e4       	ldi	r21, 0x41	; 65
     43a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 ee       	ldi	r20, 0xE0	; 224
     444:	50 e4       	ldi	r21, 0x40	; 64
     446:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     44a:	7b 01       	movw	r14, r22
     44c:	8c 01       	movw	r16, r24
     44e:	60 91 00 01 	lds	r22, 0x0100
     452:	70 91 01 01 	lds	r23, 0x0101
     456:	80 91 02 01 	lds	r24, 0x0102
     45a:	90 91 03 01 	lds	r25, 0x0103
     45e:	2d eb       	ldi	r18, 0xBD	; 189
     460:	37 e3       	ldi	r19, 0x37	; 55
     462:	46 e0       	ldi	r20, 0x06	; 6
     464:	57 e3       	ldi	r21, 0x37	; 55
     466:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     46a:	9b 01       	movw	r18, r22
     46c:	ac 01       	movw	r20, r24
     46e:	c8 01       	movw	r24, r16
     470:	b7 01       	movw	r22, r14
     472:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     476:	26 e6       	ldi	r18, 0x66	; 102
     478:	36 e6       	ldi	r19, 0x66	; 102
     47a:	46 e6       	ldi	r20, 0x66	; 102
     47c:	50 e4       	ldi	r21, 0x40	; 64
     47e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     482:	60 93 ec 00 	sts	0x00EC, r22
     486:	70 93 ed 00 	sts	0x00ED, r23
     48a:	80 93 ee 00 	sts	0x00EE, r24
     48e:	90 93 ef 00 	sts	0x00EF, r25
}
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	08 95       	ret

0000049c <__vector_9>:


ISR(TIMER1_OVF_vect){		
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	2f 93       	push	r18
     4a8:	3f 93       	push	r19
     4aa:	4f 93       	push	r20
     4ac:	5f 93       	push	r21
     4ae:	6f 93       	push	r22
     4b0:	7f 93       	push	r23
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	af 93       	push	r26
     4b8:	bf 93       	push	r27
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
	TCNT1=0;
     4be:	1d bc       	out	0x2d, r1	; 45
     4c0:	1c bc       	out	0x2c, r1	; 44
	rounds++;
     4c2:	60 91 e0 00 	lds	r22, 0x00E0
     4c6:	70 91 e1 00 	lds	r23, 0x00E1
     4ca:	80 91 e2 00 	lds	r24, 0x00E2
     4ce:	90 91 e3 00 	lds	r25, 0x00E3
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e8       	ldi	r20, 0x80	; 128
     4d8:	5f e3       	ldi	r21, 0x3F	; 63
     4da:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     4de:	60 93 e0 00 	sts	0x00E0, r22
     4e2:	70 93 e1 00 	sts	0x00E1, r23
     4e6:	80 93 e2 00 	sts	0x00E2, r24
     4ea:	90 93 e3 00 	sts	0x00E3, r25
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_6>:

ISR(TIMER1_CAPT_vect){
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	if (PIND & 0x40) {
     53a:	86 9b       	sbis	0x10, 6	; 16
     53c:	2f c0       	rjmp	.+94     	; 0x59c <__vector_6+0x8c>
			falling=ICR1;
     53e:	66 b5       	in	r22, 0x26	; 38
     540:	77 b5       	in	r23, 0x27	; 39
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     54a:	7b 01       	movw	r14, r22
     54c:	8c 01       	movw	r16, r24
     54e:	60 93 e8 00 	sts	0x00E8, r22
     552:	70 93 e9 00 	sts	0x00E9, r23
     556:	80 93 ea 00 	sts	0x00EA, r24
     55a:	90 93 eb 00 	sts	0x00EB, r25
			TCCR1B=(1<<CS11|1<<WGM12|0<<ICES1);
     55e:	8a e0       	ldi	r24, 0x0A	; 10
     560:	8e bd       	out	0x2e, r24	; 46
			counts=falling+(rounds*65535);
     562:	60 91 e0 00 	lds	r22, 0x00E0
     566:	70 91 e1 00 	lds	r23, 0x00E1
     56a:	80 91 e2 00 	lds	r24, 0x00E2
     56e:	90 91 e3 00 	lds	r25, 0x00E3
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     57e:	9b 01       	movw	r18, r22
     580:	ac 01       	movw	r20, r24
     582:	c8 01       	movw	r24, r16
     584:	b7 01       	movw	r22, r14
     586:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     58a:	60 93 00 01 	sts	0x0100, r22
     58e:	70 93 01 01 	sts	0x0101, r23
     592:	80 93 02 01 	sts	0x0102, r24
     596:	90 93 03 01 	sts	0x0103, r25
     59a:	10 c0       	rjmp	.+32     	; 0x5bc <__vector_6+0xac>
	}else{
		rounds=0;
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	80 93 e0 00 	sts	0x00E0, r24
     5a8:	90 93 e1 00 	sts	0x00E1, r25
     5ac:	a0 93 e2 00 	sts	0x00E2, r26
     5b0:	b0 93 e3 00 	sts	0x00E3, r27
		TCNT1=0;
     5b4:	1d bc       	out	0x2d, r1	; 45
     5b6:	1c bc       	out	0x2c, r1	; 44
		TCCR1B=(1<<CS11|1<<WGM12|1<<ICES1);
     5b8:	8a e4       	ldi	r24, 0x4A	; 74
     5ba:	8e bd       	out	0x2e, r24	; 46
	}
}
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	bf 91       	pop	r27
     5c2:	af 91       	pop	r26
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	7f 91       	pop	r23
     5ca:	6f 91       	pop	r22
     5cc:	5f 91       	pop	r21
     5ce:	4f 91       	pop	r20
     5d0:	3f 91       	pop	r19
     5d2:	2f 91       	pop	r18
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <main>:

int main(void){	
     5e6:	5f 92       	push	r5
     5e8:	6f 92       	push	r6
     5ea:	7f 92       	push	r7
     5ec:	8f 92       	push	r8
     5ee:	9f 92       	push	r9
     5f0:	af 92       	push	r10
     5f2:	bf 92       	push	r11
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	62 97       	sbiw	r28, 0x12	; 18
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
	//****************************************
		sei();	// interrupt 
     614:	78 94       	sei
	raw_y |= i2c_readNak();
	i2c_stop();
}

void init_IR(void){
	TCCR1B = (1<<CS11|1<<WGM12|1<<ICES1);
     616:	8a e4       	ldi	r24, 0x4A	; 74
     618:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<TOIE1|1<<TICIE1);
     61a:	84 e2       	ldi	r24, 0x24	; 36
     61c:	89 bf       	out	0x39, r24	; 57
	TCNT1=0;
     61e:	1d bc       	out	0x2d, r1	; 45
     620:	1c bc       	out	0x2c, r1	; 44
		char direction[8];
		char *lux;
	//****************************************
	
	//****************************************
		USART_Init(BAUD_PRESCALE);	// UART Init
     622:	87 e6       	ldi	r24, 0x67	; 103
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 9b 03 	call	0x736	; 0x736 <USART_Init>
			
			//d = bmp085_gettemperature();
			//dtostrf(d, 4,1, p_tmp);
			
			l = bmp085_getpressure();
			ltoa(l, preasure, 10);		
     62a:	99 e0       	ldi	r25, 0x09	; 9
     62c:	69 2e       	mov	r6, r25
     62e:	71 2c       	mov	r7, r1
     630:	6c 0e       	add	r6, r28
     632:	7d 1e       	adc	r7, r29
*************************************************************************/
void i2c_init(void)
{
/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
TWSR = 0; /* no prescaler */
TWBR = ((F_CPU/SCL_CLOCK)-16)/2; /* must be > 10 for stable operation */
     634:	88 e4       	ldi	r24, 0x48	; 72
     636:	58 2e       	mov	r5, r24
			init_HMC5883L();
			
			getHeading();
			float headingDegrees = atan2((double)raw_y,(double)raw_z)* 180 / 3.14159265 + 180;
			
			dtostrf( headingDegrees ,4,1, direction);
     638:	4e 01       	movw	r8, r28
     63a:	08 94       	sec
     63c:	81 1c       	adc	r8, r1
     63e:	91 1c       	adc	r9, r1
	
	
	while(1){
	
		//****************************************
			bmp085_init();     //init bmp085 preasure sensor
     640:	0e 94 68 07 	call	0xed0	; 0xed0 <bmp085_init>
			
			//d = bmp085_gettemperature();
			//dtostrf(d, 4,1, p_tmp);
			
			l = bmp085_getpressure();
     644:	0e 94 a7 07 	call	0xf4e	; 0xf4e <bmp085_getpressure>
			ltoa(l, preasure, 10);		
     648:	a3 01       	movw	r20, r6
     64a:	2a e0       	ldi	r18, 0x0A	; 10
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <ltoa>
			
			
		//****************************************
			humidity = itoa(gethumidity(),10,humidity);
     652:	0e 94 89 08 	call	0x1112	; 0x1112 <gethumidity>
     656:	6a e0       	ldi	r22, 0x0A	; 10
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	4b 2d       	mov	r20, r11
     65c:	5a 2d       	mov	r21, r10
     65e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <itoa>
     662:	b8 2e       	mov	r11, r24
     664:	a9 2e       	mov	r10, r25
			
			H_temperature = itoa(gettemperature(),10,H_temperature);
     666:	0e 94 71 08 	call	0x10e2	; 0x10e2 <gettemperature>
     66a:	6a e0       	ldi	r22, 0x0A	; 10
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	4d 2d       	mov	r20, r13
     670:	5c 2d       	mov	r21, r12
     672:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <itoa>
     676:	d8 2e       	mov	r13, r24
     678:	c9 2e       	mov	r12, r25
Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
TWSR = 0; /* no prescaler */
     67a:	11 b8       	out	0x01, r1	; 1
TWBR = ((F_CPU/SCL_CLOCK)-16)/2; /* must be > 10 for stable operation */
     67c:	50 b8       	out	0x00, r5	; 0
			
			transmitString(flot); // wind speed
			transmitString(", ");*/
		//****************************************
			i2c_init(); 
			init_HMC5883L();
     67e:	0e 94 84 01 	call	0x308	; 0x308 <init_HMC5883L>
			
			getHeading();
     682:	0e 94 af 01 	call	0x35e	; 0x35e <getHeading>
			float headingDegrees = atan2((double)raw_y,(double)raw_z)* 180 / 3.14159265 + 180;
     686:	60 91 74 00 	lds	r22, 0x0074
     68a:	70 91 75 00 	lds	r23, 0x0075
     68e:	88 27       	eor	r24, r24
     690:	77 fd       	sbrc	r23, 7
     692:	80 95       	com	r24
     694:	98 2f       	mov	r25, r24
     696:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     69a:	7b 01       	movw	r14, r22
     69c:	8c 01       	movw	r16, r24
     69e:	60 91 76 00 	lds	r22, 0x0076
     6a2:	70 91 77 00 	lds	r23, 0x0077
     6a6:	88 27       	eor	r24, r24
     6a8:	77 fd       	sbrc	r23, 7
     6aa:	80 95       	com	r24
     6ac:	98 2f       	mov	r25, r24
     6ae:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	c8 01       	movw	r24, r16
     6b8:	b7 01       	movw	r22, r14
     6ba:	0e 94 b7 09 	call	0x136e	; 0x136e <atan2>
			
			dtostrf( headingDegrees ,4,1, direction);
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	44 e3       	ldi	r20, 0x34	; 52
     6c4:	53 e4       	ldi	r21, 0x43	; 67
     6c6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     6ca:	2b ed       	ldi	r18, 0xDB	; 219
     6cc:	3f e0       	ldi	r19, 0x0F	; 15
     6ce:	49 e4       	ldi	r20, 0x49	; 73
     6d0:	50 e4       	ldi	r21, 0x40	; 64
     6d2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	44 e3       	ldi	r20, 0x34	; 52
     6dc:	53 e4       	ldi	r21, 0x43	; 67
     6de:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     6e2:	44 e0       	ldi	r20, 0x04	; 4
     6e4:	21 e0       	ldi	r18, 0x01	; 1
     6e6:	84 01       	movw	r16, r8
     6e8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <dtostrf>
			
		//****************************************
		
		transmitString(preasure);
     6ec:	c3 01       	movw	r24, r6
     6ee:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(", ");
     6f2:	80 e6       	ldi	r24, 0x60	; 96
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(humidity);
     6fa:	8b 2d       	mov	r24, r11
     6fc:	9a 2d       	mov	r25, r10
     6fe:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(", ");
     702:	80 e6       	ldi	r24, 0x60	; 96
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(H_temperature);
     70a:	8d 2d       	mov	r24, r13
     70c:	9c 2d       	mov	r25, r12
     70e:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(", ");
     712:	80 e6       	ldi	r24, 0x60	; 96
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(direction);
     71a:	c4 01       	movw	r24, r8
     71c:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		transmitString(", ");
     720:	80 e6       	ldi	r24, 0x60	; 96
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
		
		TX_NEWLINE;
     728:	8d e0       	ldi	r24, 0x0D	; 13
     72a:	0e 94 a3 03 	call	0x746	; 0x746 <transmitByte>
     72e:	8a e0       	ldi	r24, 0x0A	; 10
     730:	0e 94 a3 03 	call	0x746	; 0x746 <transmitByte>
     734:	85 cf       	rjmp	.-246    	; 0x640 <main+0x5a>

00000736 <USART_Init>:
#include <avr/pgmspace.h>

#include "UART_routines.h"
void USART_Init(int baud){
   	// Set baud rate
   	UBRRL = baud;// Load lower 8-bits into the low byte of the UBRR register
     736:	89 b9       	out	0x09, r24	; 9
   	UBRRH = (baud >> 8); 
     738:	89 2f       	mov	r24, r25
     73a:	99 0f       	add	r25, r25
     73c:	99 0b       	sbc	r25, r25
     73e:	80 bd       	out	0x20, r24	; 32
	/* Load upper 8-bits into the high byte of the UBRR register Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR datasheet*/ 
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
     740:	88 e9       	ldi	r24, 0x98	; 152
     742:	8a b9       	out	0x0a, r24	; 10
}
     744:	08 95       	ret

00000746 <transmitByte>:


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     746:	5d 9b       	sbis	0x0b, 5	; 11
     748:	fe cf       	rjmp	.-4      	; 0x746 <transmitByte>
	UDR = data; // Transmit data
     74a:	8c b9       	out	0x0c, r24	; 12
}
     74c:	08 95       	ret

0000074e <receiveByte>:

unsigned char receiveByte(){
	while((UCSRA &(1<<RXC)) == 0);
     74e:	5f 9b       	sbis	0x0b, 7	; 11
     750:	fe cf       	rjmp	.-4      	; 0x74e <receiveByte>
	return UDR;
     752:	8c b1       	in	r24, 0x0c	; 12
}
     754:	08 95       	ret

00000756 <transmitString_F>:

void transmitString_F(char* string){
     756:	fc 01       	movw	r30, r24
     758:	04 c0       	rjmp	.+8      	; 0x762 <transmitString_F+0xc>
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     75a:	5d 9b       	sbis	0x0b, 5	; 11
     75c:	fe cf       	rjmp	.-4      	; 0x75a <transmitString_F+0x4>
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}

void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
     75e:	31 96       	adiw	r30, 0x01	; 1
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
	UDR = data; // Transmit data
     760:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}

void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
     762:	84 91       	lpm	r24, Z+
     764:	88 23       	and	r24, r24
     766:	c9 f7       	brne	.-14     	; 0x75a <transmitString_F+0x4>
}
     768:	08 95       	ret

0000076a <transmitString>:

void transmitString(unsigned char* string){
     76a:	fc 01       	movw	r30, r24
     76c:	04 c0       	rjmp	.+8      	; 0x776 <transmitString+0xc>
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     76e:	5d 9b       	sbis	0x0b, 5	; 11
     770:	fe cf       	rjmp	.-4      	; 0x76e <transmitString+0x4>
void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
}

void transmitString(unsigned char* string){
	while (*string) transmitByte(*string++);
     772:	31 96       	adiw	r30, 0x01	; 1
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
	UDR = data; // Transmit data
     774:	8c b9       	out	0x0c, r24	; 12
void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
}

void transmitString(unsigned char* string){
	while (*string) transmitByte(*string++);
     776:	80 81       	ld	r24, Z
     778:	88 23       	and	r24, r24
     77a:	c9 f7       	brne	.-14     	; 0x76e <transmitString+0x4>
}
     77c:	08 95       	ret

0000077e <transmitHex>:

void transmitHex( unsigned char dataType, unsigned long data ){
     77e:	df 93       	push	r29
     780:	cf 93       	push	r28
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	2b 97       	sbiw	r28, 0x0b	; 11
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	11 f4       	brne	.+4      	; 0x79a <transmitHex+0x1c>
     796:	94 e0       	ldi	r25, 0x04	; 4
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <transmitHex+0x26>
	if (dataType == LONG) count = 8;
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	11 f4       	brne	.+4      	; 0x7a2 <transmitHex+0x24>
     79e:	98 e0       	ldi	r25, 0x08	; 8
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <transmitHex+0x26>
     7a2:	92 e0       	ldi	r25, 0x02	; 2
	while (*string) transmitByte(*string++);
}

void transmitHex( unsigned char dataType, unsigned long data ){
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";
     7a4:	de 01       	movw	r26, r28
     7a6:	11 96       	adiw	r26, 0x01	; 1
     7a8:	e7 e6       	ldi	r30, 0x67	; 103
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	8b e0       	ldi	r24, 0x0B	; 11
     7ae:	01 90       	ld	r0, Z+
     7b0:	0d 92       	st	X+, r0
     7b2:	81 50       	subi	r24, 0x01	; 1
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <transmitHex+0x30>
     7b6:	9e 01       	movw	r18, r28
     7b8:	2e 5f       	subi	r18, 0xFE	; 254
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--){
		  temp = data % 16;
     7bc:	84 2f       	mov	r24, r20
     7be:	8f 70       	andi	r24, 0x0F	; 15
     7c0:	e9 2f       	mov	r30, r25
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
		  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
     7c4:	8a 30       	cpi	r24, 0x0A	; 10
     7c6:	20 f4       	brcc	.+8      	; 0x7d0 <transmitHex+0x52>
     7c8:	e2 0f       	add	r30, r18
     7ca:	f3 1f       	adc	r31, r19
     7cc:	80 5d       	subi	r24, 0xD0	; 208
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <transmitHex+0x58>
		  else dataString [i+1] = (temp - 10) + 0x41;
     7d0:	e2 0f       	add	r30, r18
     7d2:	f3 1f       	adc	r31, r19
     7d4:	89 5c       	subi	r24, 0xC9	; 201
     7d6:	80 83       	st	Z, r24

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--){
     7d8:	91 50       	subi	r25, 0x01	; 1
     7da:	41 f0       	breq	.+16     	; 0x7ec <transmitHex+0x6e>
		  temp = data % 16;
		  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
		  else dataString [i+1] = (temp - 10) + 0x41;
		  data = data/16;
     7dc:	e4 e0       	ldi	r30, 0x04	; 4
     7de:	76 95       	lsr	r23
     7e0:	67 95       	ror	r22
     7e2:	57 95       	ror	r21
     7e4:	47 95       	ror	r20
     7e6:	ea 95       	dec	r30
     7e8:	d1 f7       	brne	.-12     	; 0x7de <transmitHex+0x60>
     7ea:	e8 cf       	rjmp	.-48     	; 0x7bc <transmitHex+0x3e>
	}
	transmitString (dataString);
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	0e 94 b5 03 	call	0x76a	; 0x76a <transmitString>
}
     7f4:	2b 96       	adiw	r28, 0x0b	; 11
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	08 95       	ret

00000806 <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	e8 e7       	ldi	r30, 0x78	; 120
     80c:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
     80e:	84 81       	ldd	r24, Z+4	; 0x04
     810:	95 81       	ldd	r25, Z+5	; 0x05
     812:	a6 81       	ldd	r26, Z+6	; 0x06
     814:	b7 81       	ldd	r27, Z+7	; 0x07
     816:	81 93       	st	Z+, r24
     818:	91 93       	st	Z+, r25
     81a:	a1 93       	st	Z+, r26
     81c:	b1 93       	st	Z+, r27
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	ec 3c       	cpi	r30, 0xCC	; 204
     822:	f8 07       	cpc	r31, r24
     824:	a1 f7       	brne	.-24     	; 0x80e <bmp085_avaragefilter+0x8>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
     826:	20 93 c8 00 	sts	0x00C8, r18
     82a:	30 93 c9 00 	sts	0x00C9, r19
     82e:	40 93 ca 00 	sts	0x00CA, r20
     832:	50 93 cb 00 	sts	0x00CB, r21
     836:	e8 e7       	ldi	r30, 0x78	; 120
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	50 e0       	ldi	r21, 0x00	; 0
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
     842:	81 91       	ld	r24, Z+
     844:	91 91       	ld	r25, Z+
     846:	a1 91       	ld	r26, Z+
     848:	b1 91       	ld	r27, Z+
     84a:	28 0f       	add	r18, r24
     84c:	39 1f       	adc	r19, r25
     84e:	4a 1f       	adc	r20, r26
     850:	5b 1f       	adc	r21, r27
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	ec 3c       	cpi	r30, 0xCC	; 204
     856:	f8 07       	cpc	r31, r24
     858:	a1 f7       	brne	.-24     	; 0x842 <bmp085_avaragefilter+0x3c>
     85a:	ca 01       	movw	r24, r20
     85c:	b9 01       	movw	r22, r18
     85e:	25 e1       	ldi	r18, 0x15	; 21
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodsi4>
     86a:	ca 01       	movw	r24, r20
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
}
     86c:	b9 01       	movw	r22, r18
     86e:	08 95       	ret

00000870 <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	18 2f       	mov	r17, r24
     87e:	06 2f       	mov	r16, r22
     880:	f7 2e       	mov	r15, r23
     882:	e4 2e       	mov	r14, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     884:	8e ee       	ldi	r24, 0xEE	; 238
     886:	0e 94 41 01 	call	0x282	; 0x282 <i2c_start_wait>
	i2c_write(reg);
     88a:	81 2f       	mov	r24, r17
     88c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
     890:	8f ee       	ldi	r24, 0xEF	; 239
     892:	0e 94 5f 01 	call	0x2be	; 0x2be <i2c_rep_start>
     896:	20 2f       	mov	r18, r16
     898:	3f 2d       	mov	r19, r15
     89a:	c9 01       	movw	r24, r18
     89c:	ec 01       	movw	r28, r24
     89e:	ff 24       	eor	r15, r15
	for(i=0; i<bytes; i++) {
		if(i==bytes-1)
     8a0:	0e 2d       	mov	r16, r14
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	01 50       	subi	r16, 0x01	; 1
     8a6:	10 40       	sbci	r17, 0x00	; 0
     8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <bmp085_readmem+0x54>
     8aa:	8f 2d       	mov	r24, r15
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	80 17       	cp	r24, r16
     8b0:	91 07       	cpc	r25, r17
     8b2:	19 f4       	brne	.+6      	; 0x8ba <bmp085_readmem+0x4a>
			buff[i] = i2c_readNak();
     8b4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <i2c_readNak>
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <bmp085_readmem+0x4e>
		else
			buff[i] = i2c_readAck();
     8ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <i2c_readAck>
     8be:	88 83       	st	Y, r24
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
     8c0:	f3 94       	inc	r15
     8c2:	21 96       	adiw	r28, 0x01	; 1
     8c4:	fe 14       	cp	r15, r14
     8c6:	88 f3       	brcs	.-30     	; 0x8aa <bmp085_readmem+0x3a>
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     8c8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	08 95       	ret

000008da <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <bmp085_getcalibration+0xa>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     8e8:	1a 82       	std	Y+2, r1	; 0x02
     8ea:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
     8ec:	8a ea       	ldi	r24, 0xAA	; 170
     8ee:	8e 01       	movw	r16, r28
     8f0:	0f 5f       	subi	r16, 0xFF	; 255
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	b8 01       	movw	r22, r16
     8f6:	42 e0       	ldi	r20, 0x02	; 2
     8f8:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
     8fc:	99 81       	ldd	r25, Y+1	; 0x01
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	2a 81       	ldd	r18, Y+2	; 0x02
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	82 2b       	or	r24, r18
     906:	93 2b       	or	r25, r19
     908:	90 93 f7 00 	sts	0x00F7, r25
     90c:	80 93 f6 00 	sts	0x00F6, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
     910:	8c ea       	ldi	r24, 0xAC	; 172
     912:	b8 01       	movw	r22, r16
     914:	42 e0       	ldi	r20, 0x02	; 2
     916:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	2a 81       	ldd	r18, Y+2	; 0x02
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	82 2b       	or	r24, r18
     924:	93 2b       	or	r25, r19
     926:	90 93 ff 00 	sts	0x00FF, r25
     92a:	80 93 fe 00 	sts	0x00FE, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
     92e:	8e ea       	ldi	r24, 0xAE	; 174
     930:	b8 01       	movw	r22, r16
     932:	42 e0       	ldi	r20, 0x02	; 2
     934:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
     938:	99 81       	ldd	r25, Y+1	; 0x01
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	2a 81       	ldd	r18, Y+2	; 0x02
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	82 2b       	or	r24, r18
     942:	93 2b       	or	r25, r19
     944:	90 93 df 00 	sts	0x00DF, r25
     948:	80 93 de 00 	sts	0x00DE, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
     94c:	80 eb       	ldi	r24, 0xB0	; 176
     94e:	b8 01       	movw	r22, r16
     950:	42 e0       	ldi	r20, 0x02	; 2
     952:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     956:	99 81       	ldd	r25, Y+1	; 0x01
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	2a 81       	ldd	r18, Y+2	; 0x02
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	82 2b       	or	r24, r18
     960:	93 2b       	or	r25, r19
     962:	90 93 d7 00 	sts	0x00D7, r25
     966:	80 93 d6 00 	sts	0x00D6, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
     96a:	82 eb       	ldi	r24, 0xB2	; 178
     96c:	b8 01       	movw	r22, r16
     96e:	42 e0       	ldi	r20, 0x02	; 2
     970:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     974:	99 81       	ldd	r25, Y+1	; 0x01
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	2a 81       	ldd	r18, Y+2	; 0x02
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	82 2b       	or	r24, r18
     97e:	93 2b       	or	r25, r19
     980:	90 93 fb 00 	sts	0x00FB, r25
     984:	80 93 fa 00 	sts	0x00FA, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
     988:	84 eb       	ldi	r24, 0xB4	; 180
     98a:	b8 01       	movw	r22, r16
     98c:	42 e0       	ldi	r20, 0x02	; 2
     98e:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	2a 81       	ldd	r18, Y+2	; 0x02
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	82 2b       	or	r24, r18
     99c:	93 2b       	or	r25, r19
     99e:	90 93 f3 00 	sts	0x00F3, r25
     9a2:	80 93 f2 00 	sts	0x00F2, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
     9a6:	86 eb       	ldi	r24, 0xB6	; 182
     9a8:	b8 01       	movw	r22, r16
     9aa:	42 e0       	ldi	r20, 0x02	; 2
     9ac:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
     9b0:	99 81       	ldd	r25, Y+1	; 0x01
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	2a 81       	ldd	r18, Y+2	; 0x02
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	82 2b       	or	r24, r18
     9ba:	93 2b       	or	r25, r19
     9bc:	90 93 f1 00 	sts	0x00F1, r25
     9c0:	80 93 f0 00 	sts	0x00F0, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
     9c4:	88 eb       	ldi	r24, 0xB8	; 184
     9c6:	b8 01       	movw	r22, r16
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
     9ce:	99 81       	ldd	r25, Y+1	; 0x01
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	2a 81       	ldd	r18, Y+2	; 0x02
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	82 2b       	or	r24, r18
     9d8:	93 2b       	or	r25, r19
     9da:	90 93 d9 00 	sts	0x00D9, r25
     9de:	80 93 d8 00 	sts	0x00D8, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
     9e2:	8a eb       	ldi	r24, 0xBA	; 186
     9e4:	b8 01       	movw	r22, r16
     9e6:	42 e0       	ldi	r20, 0x02	; 2
     9e8:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
     9ec:	99 81       	ldd	r25, Y+1	; 0x01
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	2a 81       	ldd	r18, Y+2	; 0x02
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	82 2b       	or	r24, r18
     9f6:	93 2b       	or	r25, r19
     9f8:	90 93 f9 00 	sts	0x00F9, r25
     9fc:	80 93 f8 00 	sts	0x00F8, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
     a00:	8c eb       	ldi	r24, 0xBC	; 188
     a02:	b8 01       	movw	r22, r16
     a04:	42 e0       	ldi	r20, 0x02	; 2
     a06:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	2a 81       	ldd	r18, Y+2	; 0x02
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	82 2b       	or	r24, r18
     a14:	93 2b       	or	r25, r19
     a16:	90 93 fd 00 	sts	0x00FD, r25
     a1a:	80 93 fc 00 	sts	0x00FC, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
     a1e:	8e eb       	ldi	r24, 0xBE	; 190
     a20:	b8 01       	movw	r22, r16
     a22:	42 e0       	ldi	r20, 0x02	; 2
     a24:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
     a28:	99 81       	ldd	r25, Y+1	; 0x01
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	2a 81       	ldd	r18, Y+2	; 0x02
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	82 2b       	or	r24, r18
     a32:	93 2b       	or	r25, r19
     a34:	90 93 f5 00 	sts	0x00F5, r25
     a38:	80 93 f4 00 	sts	0x00F4, r24
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	cf 91       	pop	r28
     a42:	df 91       	pop	r29
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	18 2f       	mov	r17, r24
     a50:	06 2f       	mov	r16, r22
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     a52:	8e ee       	ldi	r24, 0xEE	; 238
     a54:	0e 94 41 01 	call	0x282	; 0x282 <i2c_start_wait>
	i2c_write(reg);
     a58:	81 2f       	mov	r24, r17
     a5a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
	i2c_write(value);
     a5e:	80 2f       	mov	r24, r16
     a60:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_write>
	i2c_stop();
     a64:	0e 94 62 01 	call	0x2c4	; 0x2c4 <i2c_stop>
}
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <bmp085_getrawtemperature>:
}

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <bmp085_getrawtemperature+0xe>
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     a80:	1a 82       	std	Y+2, r1	; 0x02
     a82:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
     a84:	84 ef       	ldi	r24, 0xF4	; 244
     a86:	6e e2       	ldi	r22, 0x2E	; 46
     a88:	0e 94 25 05 	call	0xa4a	; 0xa4a <bmp085_writemem>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a8c:	80 e2       	ldi	r24, 0x20	; 32
     a8e:	9e e4       	ldi	r25, 0x4E	; 78
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <bmp085_getrawtemperature+0x22>
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
     a94:	86 ef       	ldi	r24, 0xF6	; 246
     a96:	be 01       	movw	r22, r28
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	42 e0       	ldi	r20, 0x02	; 2
     a9e:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
     aa2:	69 81       	ldd	r22, Y+1	; 0x01
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	98 2f       	mov	r25, r24
     aac:	87 2f       	mov	r24, r23
     aae:	76 2f       	mov	r23, r22
     ab0:	66 27       	eor	r22, r22
     ab2:	2a 81       	ldd	r18, Y+2	; 0x02
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	62 2b       	or	r22, r18
     abc:	73 2b       	or	r23, r19
     abe:	84 2b       	or	r24, r20
     ac0:	95 2b       	or	r25, r21
     ac2:	20 91 f2 00 	lds	r18, 0x00F2
     ac6:	30 91 f3 00 	lds	r19, 0x00F3
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	62 1b       	sub	r22, r18
     ad0:	73 0b       	sbc	r23, r19
     ad2:	84 0b       	sbc	r24, r20
     ad4:	95 0b       	sbc	r25, r21
     ad6:	20 91 fa 00 	lds	r18, 0x00FA
     ada:	30 91 fb 00 	lds	r19, 0x00FB
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     ae6:	7b 01       	movw	r14, r22
     ae8:	8c 01       	movw	r16, r24
     aea:	3f e0       	ldi	r19, 0x0F	; 15
     aec:	15 95       	asr	r17
     aee:	07 95       	ror	r16
     af0:	f7 94       	ror	r15
     af2:	e7 94       	ror	r14
     af4:	3a 95       	dec	r19
     af6:	d1 f7       	brne	.-12     	; 0xaec <bmp085_getrawtemperature+0x7e>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
	bmp085_rawtemperature = x1 + x2;
     af8:	60 91 fc 00 	lds	r22, 0x00FC
     afc:	70 91 fd 00 	lds	r23, 0x00FD
     b00:	88 27       	eor	r24, r24
     b02:	77 fd       	sbrc	r23, 7
     b04:	80 95       	com	r24
     b06:	98 2f       	mov	r25, r24
     b08:	2b e0       	ldi	r18, 0x0B	; 11
     b0a:	66 0f       	add	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	88 1f       	adc	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	2a 95       	dec	r18
     b14:	d1 f7       	brne	.-12     	; 0xb0a <bmp085_getrawtemperature+0x9c>
     b16:	20 91 f4 00 	lds	r18, 0x00F4
     b1a:	30 91 f5 00 	lds	r19, 0x00F5
     b1e:	44 27       	eor	r20, r20
     b20:	37 fd       	sbrc	r19, 7
     b22:	40 95       	com	r20
     b24:	54 2f       	mov	r21, r20
     b26:	2e 0d       	add	r18, r14
     b28:	3f 1d       	adc	r19, r15
     b2a:	40 1f       	adc	r20, r16
     b2c:	51 1f       	adc	r21, r17
     b2e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__divmodsi4>
     b32:	e2 0e       	add	r14, r18
     b34:	f3 1e       	adc	r15, r19
     b36:	04 1f       	adc	r16, r20
     b38:	15 1f       	adc	r17, r21
     b3a:	e0 92 e4 00 	sts	0x00E4, r14
     b3e:	f0 92 e5 00 	sts	0x00E5, r15
     b42:	00 93 e6 00 	sts	0x00E6, r16
     b46:	10 93 e7 00 	sts	0x00E7, r17
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	08 95       	ret

00000b5c <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
     b5c:	0e 94 37 05 	call	0xa6e	; 0xa6e <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
     b60:	60 91 e4 00 	lds	r22, 0x00E4
     b64:	70 91 e5 00 	lds	r23, 0x00E5
     b68:	80 91 e6 00 	lds	r24, 0x00E6
     b6c:	90 91 e7 00 	lds	r25, 0x00E7
     b70:	68 5f       	subi	r22, 0xF8	; 248
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	8f 4f       	sbci	r24, 0xFF	; 255
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	54 e0       	ldi	r21, 0x04	; 4
     b7a:	95 95       	asr	r25
     b7c:	87 95       	ror	r24
     b7e:	77 95       	ror	r23
     b80:	67 95       	ror	r22
     b82:	5a 95       	dec	r21
     b84:	d1 f7       	brne	.-12     	; 0xb7a <bmp085_gettemperature+0x1e>
     b86:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e2       	ldi	r20, 0x20	; 32
     b90:	51 e4       	ldi	r21, 0x41	; 65
     b92:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
	temperature = temperature /10;
	return temperature;
}
     b96:	08 95       	ret

00000b98 <bmp085_getrawpressure>:
}

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
     b98:	2f 92       	push	r2
     b9a:	3f 92       	push	r3
     b9c:	4f 92       	push	r4
     b9e:	5f 92       	push	r5
     ba0:	6f 92       	push	r6
     ba2:	7f 92       	push	r7
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	27 97       	sbiw	r28, 0x07	; 7
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
     bcc:	fe 01       	movw	r30, r28
     bce:	31 96       	adiw	r30, 0x01	; 1
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	df 01       	movw	r26, r30
     bd4:	1d 92       	st	X+, r1
     bd6:	8a 95       	dec	r24
     bd8:	e9 f7       	brne	.-6      	; 0xbd4 <bmp085_getrawpressure+0x3c>
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
     bda:	0e 94 37 05 	call	0xa6e	; 0xa6e <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
     bde:	84 ef       	ldi	r24, 0xF4	; 244
     be0:	64 ef       	ldi	r22, 0xF4	; 244
     be2:	0e 94 25 05 	call	0xa4a	; 0xa4a <bmp085_writemem>
     be6:	84 e0       	ldi	r24, 0x04	; 4
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	20 e9       	ldi	r18, 0x90	; 144
     bec:	31 e0       	ldi	r19, 0x01	; 1
     bee:	f9 01       	movw	r30, r18
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <bmp085_getrawpressure+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf6:	d9 f7       	brne	.-10     	; 0xbee <bmp085_getrawpressure+0x56>
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
     bf8:	86 ef       	ldi	r24, 0xF6	; 246
     bfa:	be 01       	movw	r22, r28
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	43 e0       	ldi	r20, 0x03	; 3
     c02:	0e 94 38 04 	call	0x870	; 0x870 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
     c06:	60 90 e4 00 	lds	r6, 0x00E4
     c0a:	70 90 e5 00 	lds	r7, 0x00E5
     c0e:	80 90 e6 00 	lds	r8, 0x00E6
     c12:	90 90 e7 00 	lds	r9, 0x00E7
     c16:	80 e6       	ldi	r24, 0x60	; 96
     c18:	90 ef       	ldi	r25, 0xF0	; 240
     c1a:	af ef       	ldi	r26, 0xFF	; 255
     c1c:	bf ef       	ldi	r27, 0xFF	; 255
     c1e:	68 0e       	add	r6, r24
     c20:	79 1e       	adc	r7, r25
     c22:	8a 1e       	adc	r8, r26
     c24:	9b 1e       	adc	r9, r27
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     c26:	c4 01       	movw	r24, r8
     c28:	b3 01       	movw	r22, r6
     c2a:	a4 01       	movw	r20, r8
     c2c:	93 01       	movw	r18, r6
     c2e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     c32:	1b 01       	movw	r2, r22
     c34:	2c 01       	movw	r4, r24
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     c36:	60 91 de 00 	lds	r22, 0x00DE
     c3a:	70 91 df 00 	lds	r23, 0x00DF
     c3e:	88 27       	eor	r24, r24
     c40:	77 fd       	sbrc	r23, 7
     c42:	80 95       	com	r24
     c44:	98 2f       	mov	r25, r24
     c46:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     c4a:	7b 01       	movw	r14, r22
     c4c:	8c 01       	movw	r16, r24
     c4e:	8d e0       	ldi	r24, 0x0D	; 13
     c50:	15 95       	asr	r17
     c52:	07 95       	ror	r16
     c54:	f7 94       	ror	r15
     c56:	e7 94       	ror	r14
     c58:	8a 95       	dec	r24
     c5a:	d1 f7       	brne	.-12     	; 0xc50 <bmp085_getrawpressure+0xb8>
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e8 0e       	add	r14, r24
     c66:	f9 1e       	adc	r15, r25
     c68:	0a 1f       	adc	r16, r26
     c6a:	1b 1f       	adc	r17, r27
     c6c:	c2 01       	movw	r24, r4
     c6e:	b1 01       	movw	r22, r2
     c70:	bc e0       	ldi	r27, 0x0C	; 12
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	77 95       	ror	r23
     c78:	67 95       	ror	r22
     c7a:	ba 95       	dec	r27
     c7c:	d1 f7       	brne	.-12     	; 0xc72 <bmp085_getrawpressure+0xda>
     c7e:	20 91 f0 00 	lds	r18, 0x00F0
     c82:	30 91 f1 00 	lds	r19, 0x00F1
     c86:	44 27       	eor	r20, r20
     c88:	37 fd       	sbrc	r19, 7
     c8a:	40 95       	com	r20
     c8c:	54 2f       	mov	r21, r20
     c8e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     c92:	bc 01       	movw	r22, r24
     c94:	99 27       	eor	r25, r25
     c96:	77 fd       	sbrc	r23, 7
     c98:	90 95       	com	r25
     c9a:	89 2f       	mov	r24, r25
     c9c:	e6 0e       	add	r14, r22
     c9e:	f7 1e       	adc	r15, r23
     ca0:	08 1f       	adc	r16, r24
     ca2:	19 1f       	adc	r17, r25
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	15 95       	asr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	fa 95       	dec	r31
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <bmp085_getrawpressure+0x10e>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e8       	ldi	r25, 0x80	; 128
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e8 0e       	add	r14, r24
     cbc:	f9 1e       	adc	r15, r25
     cbe:	0a 1f       	adc	r16, r26
     cc0:	1b 1f       	adc	r17, r27
     cc2:	20 91 d6 00 	lds	r18, 0x00D6
     cc6:	30 91 d7 00 	lds	r19, 0x00D7
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	c8 01       	movw	r24, r16
     cd0:	b7 01       	movw	r22, r14
     cd2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	ef e0       	ldi	r30, 0x0F	; 15
     cdc:	b6 95       	lsr	r27
     cde:	a7 95       	ror	r26
     ce0:	97 95       	ror	r25
     ce2:	87 95       	ror	r24
     ce4:	ea 95       	dec	r30
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <bmp085_getrawpressure+0x144>
     ce8:	8c 83       	std	Y+4, r24	; 0x04
     cea:	9d 83       	std	Y+5, r25	; 0x05
     cec:	ae 83       	std	Y+6, r26	; 0x06
     cee:	bf 83       	std	Y+7, r27	; 0x07
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
     cf0:	a9 80       	ldd	r10, Y+1	; 0x01
     cf2:	bb 24       	eor	r11, r11
     cf4:	cc 24       	eor	r12, r12
     cf6:	dd 24       	eor	r13, r13
     cf8:	65 01       	movw	r12, r10
     cfa:	bb 24       	eor	r11, r11
     cfc:	aa 24       	eor	r10, r10
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ba 2f       	mov	r27, r26
     d08:	a9 2f       	mov	r26, r25
     d0a:	98 2f       	mov	r25, r24
     d0c:	88 27       	eor	r24, r24
     d0e:	a8 2a       	or	r10, r24
     d10:	b9 2a       	or	r11, r25
     d12:	ca 2a       	or	r12, r26
     d14:	db 2a       	or	r13, r27
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	a8 2a       	or	r10, r24
     d20:	b9 2a       	or	r11, r25
     d22:	ca 2a       	or	r12, r26
     d24:	db 2a       	or	r13, r27
     d26:	55 e0       	ldi	r21, 0x05	; 5
     d28:	d5 94       	asr	r13
     d2a:	c7 94       	ror	r12
     d2c:	b7 94       	ror	r11
     d2e:	a7 94       	ror	r10
     d30:	5a 95       	dec	r21
     d32:	d1 f7       	brne	.-12     	; 0xd28 <bmp085_getrawpressure+0x190>
     d34:	60 91 fe 00 	lds	r22, 0x00FE
     d38:	70 91 ff 00 	lds	r23, 0x00FF
     d3c:	88 27       	eor	r24, r24
     d3e:	77 fd       	sbrc	r23, 7
     d40:	80 95       	com	r24
     d42:	98 2f       	mov	r25, r24
     d44:	a4 01       	movw	r20, r8
     d46:	93 01       	movw	r18, r6
     d48:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     d4c:	7b 01       	movw	r14, r22
     d4e:	8c 01       	movw	r16, r24
     d50:	4b e0       	ldi	r20, 0x0B	; 11
     d52:	15 95       	asr	r17
     d54:	07 95       	ror	r16
     d56:	f7 94       	ror	r15
     d58:	e7 94       	ror	r14
     d5a:	4a 95       	dec	r20
     d5c:	d1 f7       	brne	.-12     	; 0xd52 <bmp085_getrawpressure+0x1ba>
     d5e:	80 91 f6 00 	lds	r24, 0x00F6
     d62:	90 91 f7 00 	lds	r25, 0x00F7
     d66:	aa 27       	eor	r26, r26
     d68:	97 fd       	sbrc	r25, 7
     d6a:	a0 95       	com	r26
     d6c:	ba 2f       	mov	r27, r26
     d6e:	32 e0       	ldi	r19, 0x02	; 2
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	aa 1f       	adc	r26, r26
     d76:	bb 1f       	adc	r27, r27
     d78:	3a 95       	dec	r19
     d7a:	d1 f7       	brne	.-12     	; 0xd70 <bmp085_getrawpressure+0x1d8>
     d7c:	e8 0e       	add	r14, r24
     d7e:	f9 1e       	adc	r15, r25
     d80:	0a 1f       	adc	r16, r26
     d82:	1b 1f       	adc	r17, r27
     d84:	20 91 d8 00 	lds	r18, 0x00D8
     d88:	30 91 d9 00 	lds	r19, 0x00D9
     d8c:	44 27       	eor	r20, r20
     d8e:	37 fd       	sbrc	r19, 7
     d90:	40 95       	com	r20
     d92:	54 2f       	mov	r21, r20
     d94:	c2 01       	movw	r24, r4
     d96:	b1 01       	movw	r22, r2
     d98:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     d9c:	27 e1       	ldi	r18, 0x17	; 23
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	77 95       	ror	r23
     da4:	67 95       	ror	r22
     da6:	2a 95       	dec	r18
     da8:	d1 f7       	brne	.-12     	; 0xd9e <bmp085_getrawpressure+0x206>
     daa:	e6 0e       	add	r14, r22
     dac:	f7 1e       	adc	r15, r23
     dae:	08 1f       	adc	r16, r24
     db0:	19 1f       	adc	r17, r25
     db2:	ee 0c       	add	r14, r14
     db4:	ff 1c       	adc	r15, r15
     db6:	00 1f       	adc	r16, r16
     db8:	11 1f       	adc	r17, r17
     dba:	ae 18       	sub	r10, r14
     dbc:	bf 08       	sbc	r11, r15
     dbe:	c0 0a       	sbc	r12, r16
     dc0:	d1 0a       	sbc	r13, r17
     dc2:	c6 01       	movw	r24, r12
     dc4:	b5 01       	movw	r22, r10
     dc6:	2a e6       	ldi	r18, 0x6A	; 106
     dc8:	38 e1       	ldi	r19, 0x18	; 24
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     dd2:	97 fd       	sbrc	r25, 7
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <bmp085_getrawpressure+0x25c>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	4e 81       	ldd	r20, Y+6	; 0x06
     de4:	5f 81       	ldd	r21, Y+7	; 0x07
     de6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__udivmodsi4>
     dea:	c9 01       	movw	r24, r18
     dec:	da 01       	movw	r26, r20
     dee:	5c 01       	movw	r10, r24
     df0:	6d 01       	movw	r12, r26
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <bmp085_getrawpressure+0x274>
     df4:	2c 81       	ldd	r18, Y+4	; 0x04
     df6:	3d 81       	ldd	r19, Y+5	; 0x05
     df8:	4e 81       	ldd	r20, Y+6	; 0x06
     dfa:	5f 81       	ldd	r21, Y+7	; 0x07
     dfc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__udivmodsi4>
     e00:	59 01       	movw	r10, r18
     e02:	6a 01       	movw	r12, r20
     e04:	aa 0c       	add	r10, r10
     e06:	bb 1c       	adc	r11, r11
     e08:	cc 1c       	adc	r12, r12
     e0a:	dd 1c       	adc	r13, r13
	x1 = (p >> 8) * (p >> 8);
     e0c:	55 27       	eor	r21, r21
     e0e:	d7 fc       	sbrc	r13, 7
     e10:	5a 95       	dec	r21
     e12:	4d 2d       	mov	r20, r13
     e14:	3c 2d       	mov	r19, r12
     e16:	2b 2d       	mov	r18, r11
	x1 = (x1 * 3038) >> 16;
     e18:	ca 01       	movw	r24, r20
     e1a:	b9 01       	movw	r22, r18
     e1c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     e20:	2e ed       	ldi	r18, 0xDE	; 222
     e22:	3b e0       	ldi	r19, 0x0B	; 11
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     e2c:	7b 01       	movw	r14, r22
     e2e:	8c 01       	movw	r16, r24
	x2 = (-7357 * p) >> 16;
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     e30:	c6 01       	movw	r24, r12
     e32:	b5 01       	movw	r22, r10
     e34:	23 e4       	ldi	r18, 0x43	; 67
     e36:	33 ee       	ldi	r19, 0xE3	; 227
     e38:	4f ef       	ldi	r20, 0xFF	; 255
     e3a:	5f ef       	ldi	r21, 0xFF	; 255
     e3c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
     e40:	bc 01       	movw	r22, r24
     e42:	99 27       	eor	r25, r25
     e44:	77 fd       	sbrc	r23, 7
     e46:	90 95       	com	r25
     e48:	89 2f       	mov	r24, r25
     e4a:	61 53       	subi	r22, 0x31	; 49
     e4c:	71 4f       	sbci	r23, 0xF1	; 241
     e4e:	8f 4f       	sbci	r24, 0xFF	; 255
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	78 01       	movw	r14, r16
     e54:	11 27       	eor	r17, r17
     e56:	f7 fc       	sbrc	r15, 7
     e58:	10 95       	com	r17
     e5a:	01 2f       	mov	r16, r17
     e5c:	6e 0d       	add	r22, r14
     e5e:	7f 1d       	adc	r23, r15
     e60:	80 1f       	adc	r24, r16
     e62:	91 1f       	adc	r25, r17
     e64:	e4 e0       	ldi	r30, 0x04	; 4
     e66:	95 95       	asr	r25
     e68:	87 95       	ror	r24
     e6a:	77 95       	ror	r23
     e6c:	67 95       	ror	r22
     e6e:	ea 95       	dec	r30
     e70:	d1 f7       	brne	.-12     	; 0xe66 <bmp085_getrawpressure+0x2ce>
     e72:	6a 0d       	add	r22, r10
     e74:	7b 1d       	adc	r23, r11
     e76:	8c 1d       	adc	r24, r12
     e78:	9d 1d       	adc	r25, r13
     e7a:	60 93 da 00 	sts	0x00DA, r22
     e7e:	70 93 db 00 	sts	0x00DB, r23
     e82:	80 93 dc 00 	sts	0x00DC, r24
     e86:	90 93 dd 00 	sts	0x00DD, r25

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
     e8a:	0e 94 03 04 	call	0x806	; 0x806 <bmp085_avaragefilter>
     e8e:	60 93 da 00 	sts	0x00DA, r22
     e92:	70 93 db 00 	sts	0x00DB, r23
     e96:	80 93 dc 00 	sts	0x00DC, r24
     e9a:	90 93 dd 00 	sts	0x00DD, r25
	#endif
}
     e9e:	27 96       	adiw	r28, 0x07	; 7
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	5f 90       	pop	r5
     ec8:	4f 90       	pop	r4
     eca:	3f 90       	pop	r3
     ecc:	2f 90       	pop	r2
     ece:	08 95       	ret

00000ed0 <bmp085_init>:
}

/*
 * init bmp085
 */
void bmp085_init() {
     ed0:	1f 93       	push	r17
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     ed2:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_init>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ed6:	85 e3       	ldi	r24, 0x35	; 53
     ed8:	8a 95       	dec	r24
     eda:	f1 f7       	brne	.-4      	; 0xed8 <bmp085_init+0x8>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     edc:	0e 94 6d 04 	call	0x8da	; 0x8da <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     ee0:	0e 94 37 05 	call	0xa6e	; 0xa6e <bmp085_getrawtemperature>
     ee4:	10 e0       	ldi	r17, 0x00	; 0
	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     ee6:	0e 94 cc 05 	call	0xb98	; 0xb98 <bmp085_getrawpressure>

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     eea:	1f 5f       	subi	r17, 0xFF	; 255
     eec:	15 31       	cpi	r17, 0x15	; 21
     eee:	d9 f7       	brne	.-10     	; 0xee6 <bmp085_init+0x16>
		bmp085_getrawpressure();
	}
	#endif
}
     ef0:	1f 91       	pop	r17
     ef2:	08 95       	ret

00000ef4 <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
     ef4:	0e 94 cc 05 	call	0xb98	; 0xb98 <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
     ef8:	60 91 da 00 	lds	r22, 0x00DA
     efc:	70 91 db 00 	lds	r23, 0x00DB
     f00:	80 91 dc 00 	lds	r24, 0x00DC
     f04:	90 91 dd 00 	lds	r25, 0x00DD
     f08:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     f0c:	20 e8       	ldi	r18, 0x80	; 128
     f0e:	36 ee       	ldi	r19, 0xE6	; 230
     f10:	45 ec       	ldi	r20, 0xC5	; 197
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     f18:	21 e0       	ldi	r18, 0x01	; 1
     f1a:	3e ed       	ldi	r19, 0xDE	; 222
     f1c:	42 e4       	ldi	r20, 0x42	; 66
     f1e:	5e e3       	ldi	r21, 0x3E	; 62
     f20:	0e 94 c0 0b 	call	0x1780	; 0x1780 <pow>
     f24:	9b 01       	movw	r18, r22
     f26:	ac 01       	movw	r20, r24
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e8       	ldi	r24, 0x80	; 128
     f2e:	9f e3       	ldi	r25, 0x3F	; 63
     f30:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     f34:	2b e4       	ldi	r18, 0x4B	; 75
     f36:	3a e3       	ldi	r19, 0x3A	; 58
     f38:	4d eb       	ldi	r20, 0xBD	; 189
     f3a:	57 e3       	ldi	r21, 0x37	; 55
     f3c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
}
     f4c:	08 95       	ret

00000f4e <bmp085_getpressure>:

/*
 * get pressure
 */
int32_t bmp085_getpressure() {
	bmp085_getrawpressure();
     f4e:	0e 94 cc 05 	call	0xb98	; 0xb98 <bmp085_getrawpressure>
     f52:	60 91 da 00 	lds	r22, 0x00DA
     f56:	70 91 db 00 	lds	r23, 0x00DB
	return bmp085_rawpressure + BMP085_UNITPAOFFSET;
}
     f5a:	80 91 dc 00 	lds	r24, 0x00DC
     f5e:	90 91 dd 00 	lds	r25, 0x00DD
     f62:	08 95       	ret

00000f64 <reset>:
unsigned int bits[5];
volatile unsigned int temperature = 0,humidity = 0,i,j,ret,result;

void reset(void){
	//reset port
	DHT11_DDR |= (1<<DHT11_INPUTPIN); //output
     f64:	8d 9a       	sbi	0x11, 5	; 17
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //high
     f66:	95 9a       	sbi	0x12, 5	; 18
     f68:	88 ee       	ldi	r24, 0xE8	; 232
     f6a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	20 e9       	ldi	r18, 0x90	; 144
     f6e:	31 e0       	ldi	r19, 0x01	; 1
     f70:	f9 01       	movw	r30, r18
     f72:	31 97       	sbiw	r30, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <reset+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f78:	d9 f7       	brne	.-10     	; 0xf70 <reset+0xc>
	_delay_ms(100);
}
     f7a:	08 95       	ret

00000f7c <request>:

void request(void){
//send request
	DHT11_PORT &= ~(1<<DHT11_INPUTPIN); //low
     f7c:	95 98       	cbi	0x12, 5	; 18
     f7e:	84 eb       	ldi	r24, 0xB4	; 180
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	20 e9       	ldi	r18, 0x90	; 144
     f84:	31 e0       	ldi	r19, 0x01	; 1
     f86:	f9 01       	movw	r30, r18
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <request+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	d9 f7       	brne	.-10     	; 0xf86 <request+0xa>
	_delay_ms(18);
	DHT11_PORT |= (1<<DHT11_INPUTPIN); //high
     f90:	95 9a       	sbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	8a 95       	dec	r24
     f96:	f1 f7       	brne	.-4      	; 0xf94 <request+0x18>
	_delay_us(1);
	DHT11_DDR &= ~(1<<DHT11_INPUTPIN); //input
     f98:	8d 98       	cbi	0x11, 5	; 17
     f9a:	80 ed       	ldi	r24, 0xD0	; 208
     f9c:	8a 95       	dec	r24
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <request+0x20>
	_delay_us(39);
}
     fa0:	08 95       	ret

00000fa2 <getdata>:

//get data from DHL11
unsigned int getdata(unsigned int select) {
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
	//memset(bits, 0, sizeof(bits));
	reset();
     fa8:	0e 94 b2 07 	call	0xf64	; 0xf64 <reset>
	request();
     fac:	0e 94 be 07 	call	0xf7c	; 0xf7c <request>
	//check start condition 1
	if((DHT11_PIN & (1<<DHT11_INPUTPIN))) {
     fb0:	85 99       	sbic	0x10, 5	; 16
     fb2:	91 c0       	rjmp	.+290    	; 0x10d6 <getdata+0x134>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb4:	20 e4       	ldi	r18, 0x40	; 64
     fb6:	31 e0       	ldi	r19, 0x01	; 1
     fb8:	c9 01       	movw	r24, r18
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <getdata+0x18>
		return DHT11_ERROR;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT11_PIN & (1<<DHT11_INPUTPIN))) {
     fbe:	85 9b       	sbis	0x10, 5	; 16
     fc0:	8a c0       	rjmp	.+276    	; 0x10d6 <getdata+0x134>
     fc2:	c9 01       	movw	r24, r18
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <getdata+0x22>
		return DHT11_ERROR;
	}
	_delay_us(80);

	//read the data
	for (j=0; j<5; j++) { //read 5 byte
     fc8:	10 92 05 01 	sts	0x0105, r1
     fcc:	10 92 04 01 	sts	0x0104, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd0:	a0 ea       	ldi	r26, 0xA0	; 160
		result=0;
		for(i=0; i<8; i++) {//read every bit
			while(!(DHT11_PIN & (1<<DHT11_INPUTPIN))); //wait for an high input
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     fd2:	67 e0       	ldi	r22, 0x07	; 7
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	51 c0       	rjmp	.+162    	; 0x107e <getdata+0xdc>
	}
	_delay_us(80);

	//read the data
	for (j=0; j<5; j++) { //read 5 byte
		result=0;
     fdc:	10 92 13 01 	sts	0x0113, r1
     fe0:	10 92 12 01 	sts	0x0112, r1
		for(i=0; i<8; i++) {//read every bit
     fe4:	10 92 11 01 	sts	0x0111, r1
     fe8:	10 92 10 01 	sts	0x0110, r1
     fec:	2b c0       	rjmp	.+86     	; 0x1044 <getdata+0xa2>
			while(!(DHT11_PIN & (1<<DHT11_INPUTPIN))); //wait for an high input
     fee:	85 9b       	sbis	0x10, 5	; 16
     ff0:	fe cf       	rjmp	.-4      	; 0xfee <getdata+0x4c>
     ff2:	8a 2f       	mov	r24, r26
     ff4:	8a 95       	dec	r24
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <getdata+0x52>
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
     ff8:	85 9b       	sbis	0x10, 5	; 16
     ffa:	19 c0       	rjmp	.+50     	; 0x102e <getdata+0x8c>
				result |= (1<<(7-i));
     ffc:	20 91 12 01 	lds	r18, 0x0112
    1000:	30 91 13 01 	lds	r19, 0x0113
    1004:	80 91 10 01 	lds	r24, 0x0110
    1008:	90 91 11 01 	lds	r25, 0x0111
    100c:	fb 01       	movw	r30, r22
    100e:	e8 1b       	sub	r30, r24
    1010:	f9 0b       	sbc	r31, r25
    1012:	cf 01       	movw	r24, r30
    1014:	fa 01       	movw	r30, r20
    1016:	02 c0       	rjmp	.+4      	; 0x101c <getdata+0x7a>
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <getdata+0x76>
    1020:	cf 01       	movw	r24, r30
    1022:	82 2b       	or	r24, r18
    1024:	93 2b       	or	r25, r19
    1026:	90 93 13 01 	sts	0x0113, r25
    102a:	80 93 12 01 	sts	0x0112, r24
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
    102e:	85 99       	sbic	0x10, 5	; 16
    1030:	fe cf       	rjmp	.-4      	; 0x102e <getdata+0x8c>
	_delay_us(80);

	//read the data
	for (j=0; j<5; j++) { //read 5 byte
		result=0;
		for(i=0; i<8; i++) {//read every bit
    1032:	80 91 10 01 	lds	r24, 0x0110
    1036:	90 91 11 01 	lds	r25, 0x0111
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	90 93 11 01 	sts	0x0111, r25
    1040:	80 93 10 01 	sts	0x0110, r24
    1044:	80 91 10 01 	lds	r24, 0x0110
    1048:	90 91 11 01 	lds	r25, 0x0111
    104c:	08 97       	sbiw	r24, 0x08	; 8
    104e:	78 f2       	brcs	.-98     	; 0xfee <getdata+0x4c>
			_delay_us(30);
			if(DHT11_PIN & (1<<DHT11_INPUTPIN)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
		}
		bits[j] = result;
    1050:	e0 91 04 01 	lds	r30, 0x0104
    1054:	f0 91 05 01 	lds	r31, 0x0105
    1058:	80 91 12 01 	lds	r24, 0x0112
    105c:	90 91 13 01 	lds	r25, 0x0113
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ea 5f       	subi	r30, 0xFA	; 250
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
		return DHT11_ERROR;
	}
	_delay_us(80);

	//read the data
	for (j=0; j<5; j++) { //read 5 byte
    106c:	80 91 04 01 	lds	r24, 0x0104
    1070:	90 91 05 01 	lds	r25, 0x0105
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	90 93 05 01 	sts	0x0105, r25
    107a:	80 93 04 01 	sts	0x0104, r24
    107e:	80 91 04 01 	lds	r24, 0x0104
    1082:	90 91 05 01 	lds	r25, 0x0105
    1086:	05 97       	sbiw	r24, 0x05	; 5
    1088:	08 f4       	brcc	.+2      	; 0x108c <getdata+0xea>
    108a:	a8 cf       	rjmp	.-176    	; 0xfdc <getdata+0x3a>
				result |= (1<<(7-i));
			while(DHT11_PIN & (1<<DHT11_INPUTPIN)); //wait until input get low
		}
		bits[j] = result;
	}
	reset();
    108c:	0e 94 b2 07 	call	0xf64	; 0xf64 <reset>

	//check checksum
	if (bits[0] + bits[1] + bits[2] + bits[3] == bits[4]) {
    1090:	60 91 06 01 	lds	r22, 0x0106
    1094:	70 91 07 01 	lds	r23, 0x0107
    1098:	40 91 0a 01 	lds	r20, 0x010A
    109c:	50 91 0b 01 	lds	r21, 0x010B
    10a0:	80 91 08 01 	lds	r24, 0x0108
    10a4:	90 91 09 01 	lds	r25, 0x0109
    10a8:	86 0f       	add	r24, r22
    10aa:	97 1f       	adc	r25, r23
    10ac:	84 0f       	add	r24, r20
    10ae:	95 1f       	adc	r25, r21
    10b0:	20 91 0c 01 	lds	r18, 0x010C
    10b4:	30 91 0d 01 	lds	r19, 0x010D
    10b8:	82 0f       	add	r24, r18
    10ba:	93 1f       	adc	r25, r19
    10bc:	20 91 0e 01 	lds	r18, 0x010E
    10c0:	30 91 0f 01 	lds	r19, 0x010F
    10c4:	82 17       	cp	r24, r18
    10c6:	93 07       	cpc	r25, r19
    10c8:	31 f4       	brne	.+12     	; 0x10d6 <getdata+0x134>
		if (select == 0) { //return temperature
    10ca:	20 97       	sbiw	r28, 0x00	; 0
    10cc:	31 f0       	breq	.+12     	; 0x10da <getdata+0x138>
			return(bits[2]);
		} else if(select == 1){ //return humidity
    10ce:	21 97       	sbiw	r28, 0x01	; 1
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <getdata+0x134>
    10d2:	ab 01       	movw	r20, r22
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <getdata+0x138>
    10d6:	4f ef       	ldi	r20, 0xFF	; 255
    10d8:	50 e0       	ldi	r21, 0x00	; 0
			return(bits[0]);
		}
	}

	return DHT11_ERROR;
}
    10da:	ca 01       	movw	r24, r20
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <gettemperature>:

/*
 * get temperature (0..50C)
 */
unsigned int gettemperature() {
	ret = getdata(0);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <getdata>
    10ea:	90 93 15 01 	sts	0x0115, r25
    10ee:	80 93 14 01 	sts	0x0114, r24
	if(ret == DHT11_ERROR)
    10f2:	80 91 14 01 	lds	r24, 0x0114
    10f6:	90 91 15 01 	lds	r25, 0x0115
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	91 05       	cpc	r25, r1
    10fe:	19 f4       	brne	.+6      	; 0x1106 <gettemperature+0x24>
    1100:	2f ef       	ldi	r18, 0xFF	; 255
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	04 c0       	rjmp	.+8      	; 0x110e <gettemperature+0x2c>
		return -1;
	else
		return ret;
    1106:	20 91 14 01 	lds	r18, 0x0114
    110a:	30 91 15 01 	lds	r19, 0x0115
}
    110e:	c9 01       	movw	r24, r18
    1110:	08 95       	ret

00001112 <gethumidity>:

/*
 * get humidity (20..90%)
 */
unsigned int gethumidity() {
	ret = getdata(1);
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <getdata>
    111a:	90 93 15 01 	sts	0x0115, r25
    111e:	80 93 14 01 	sts	0x0114, r24
	if(ret == DHT11_ERROR)
    1122:	80 91 14 01 	lds	r24, 0x0114
    1126:	90 91 15 01 	lds	r25, 0x0115
    112a:	8f 3f       	cpi	r24, 0xFF	; 255
    112c:	91 05       	cpc	r25, r1
    112e:	19 f4       	brne	.+6      	; 0x1136 <gethumidity+0x24>
    1130:	2f ef       	ldi	r18, 0xFF	; 255
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	04 c0       	rjmp	.+8      	; 0x113e <gethumidity+0x2c>
		return -1;
	else
		return ret;
    1136:	20 91 14 01 	lds	r18, 0x0114
    113a:	30 91 15 01 	lds	r19, 0x0115
}
    113e:	c9 01       	movw	r24, r18
    1140:	08 95       	ret

00001142 <initLuxmeter>:
//=================================================

// This method configure the ADC0 pin
void initLuxmeter(void){
	//upper reference selected to 2.56V and select ADC0 pin as input pin
	ADMUX = 1 << REFS0 | 1<<REFS1 ;
    1142:	80 ec       	ldi	r24, 0xC0	; 192
    1144:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 1<< ADEN | 1<<ADATE | 1<<ADPS0 | 1<<ADPS1 | 1<<ADPS2; 
    1146:	87 ea       	ldi	r24, 0xA7	; 167
    1148:	86 b9       	out	0x06, r24	; 6
}
    114a:	08 95       	ret

0000114c <readAdc>:

// This method read the ADC
unsigned int readAdc(void){
	//start conversion
	ADCSRA |= 1<<ADSC;
    114c:	36 9a       	sbi	0x06, 6	; 6
	//wait till conversion is done
	while(ADCSRA & 1<<ADSC)
    114e:	36 9b       	sbis	0x06, 6	; 6
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <readAdc+0x18>
	return ADCL | ADCH<<8;
    1152:	24 b1       	in	r18, 0x04	; 4
    1154:	45 b1       	in	r20, 0x05	; 5
    1156:	94 2f       	mov	r25, r20
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	28 2b       	or	r18, r24
    115e:	39 2b       	or	r19, r25

}
    1160:	c9 01       	movw	r24, r18
    1162:	08 95       	ret
    1164:	08 95       	ret

00001166 <getAvgADC>:

// This method reads the ADC value 10 times and return the avarage
void getAvgADC(void){
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	00 e0       	ldi	r16, 0x00	; 0
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	c0 e0       	ldi	r28, 0x00	; 0
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    117a:	80 e9       	ldi	r24, 0x90	; 144
    117c:	e8 2e       	mov	r14, r24
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	f8 2e       	mov	r15, r24
	unsigned int sum = 0;
	int a = 0;
	while(a < 10){
			sum = readAdc() + sum;
    1182:	0e 94 a6 08 	call	0x114c	; 0x114c <readAdc>
    1186:	08 0f       	add	r16, r24
    1188:	19 1f       	adc	r17, r25
    118a:	84 ef       	ldi	r24, 0xF4	; 244
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	f7 01       	movw	r30, r14
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <getAvgADC+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1196:	d9 f7       	brne	.-10     	; 0x118e <getAvgADC+0x28>
			_delay_us(50000);
			a++;	
    1198:	21 96       	adiw	r28, 0x01	; 1

// This method reads the ADC value 10 times and return the avarage
void getAvgADC(void){
	unsigned int sum = 0;
	int a = 0;
	while(a < 10){
    119a:	ca 30       	cpi	r28, 0x0A	; 10
    119c:	d1 05       	cpc	r29, r1
    119e:	89 f7       	brne	.-30     	; 0x1182 <getAvgADC+0x1c>
			sum = readAdc() + sum;
			_delay_us(50000);
			a++;	
		}	
		amount = sum/10;		
    11a0:	c8 01       	movw	r24, r16
    11a2:	6a e0       	ldi	r22, 0x0A	; 10
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__udivmodhi4>
    11aa:	70 93 d1 00 	sts	0x00D1, r23
    11ae:	60 93 d0 00 	sts	0x00D0, r22
}
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	08 95       	ret

000011c0 <readLux>:

// This method calculate real lux and error using ADC values
void readLux(void){
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
	lux = ((-1.07013 *amount*amount) + (219997 * amount) + 1485000000)/10000000;
    11d0:	e0 90 d0 00 	lds	r14, 0x00D0
    11d4:	f0 90 d1 00 	lds	r15, 0x00D1
    11d8:	00 e0       	ldi	r16, 0x00	; 0
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	c8 01       	movw	r24, r16
    11de:	b7 01       	movw	r22, r14
    11e0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
    11e4:	5b 01       	movw	r10, r22
    11e6:	6c 01       	movw	r12, r24
    11e8:	25 e0       	ldi	r18, 0x05	; 5
    11ea:	3a ef       	ldi	r19, 0xFA	; 250
    11ec:	48 e8       	ldi	r20, 0x88	; 136
    11ee:	5f eb       	ldi	r21, 0xBF	; 191
    11f0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
    11f4:	a6 01       	movw	r20, r12
    11f6:	95 01       	movw	r18, r10
    11f8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
    11fc:	5b 01       	movw	r10, r22
    11fe:	6c 01       	movw	r12, r24
    1200:	c8 01       	movw	r24, r16
    1202:	b7 01       	movw	r22, r14
    1204:	2d e5       	ldi	r18, 0x5D	; 93
    1206:	3b e5       	ldi	r19, 0x5B	; 91
    1208:	43 e0       	ldi	r20, 0x03	; 3
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsi3>
    1210:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	c6 01       	movw	r24, r12
    121a:	b5 01       	movw	r22, r10
    121c:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
    1220:	2a e9       	ldi	r18, 0x9A	; 154
    1222:	36 e0       	ldi	r19, 0x06	; 6
    1224:	41 eb       	ldi	r20, 0xB1	; 177
    1226:	5e e4       	ldi	r21, 0x4E	; 78
    1228:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
    122c:	20 e8       	ldi	r18, 0x80	; 128
    122e:	36 e9       	ldi	r19, 0x96	; 150
    1230:	48 e1       	ldi	r20, 0x18	; 24
    1232:	5b e4       	ldi	r21, 0x4B	; 75
    1234:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
    1238:	60 93 d2 00 	sts	0x00D2, r22
    123c:	70 93 d3 00 	sts	0x00D3, r23
    1240:	80 93 d4 00 	sts	0x00D4, r24
    1244:	90 93 d5 00 	sts	0x00D5, r25
}
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	08 95       	ret

0000125a <getLux>:
//=================================================

// This method configure the ADC0 pin
void initLuxmeter(void){
	//upper reference selected to 2.56V and select ADC0 pin as input pin
	ADMUX = 1 << REFS0 | 1<<REFS1 ;
    125a:	80 ec       	ldi	r24, 0xC0	; 192
    125c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 1<< ADEN | 1<<ADATE | 1<<ADPS0 | 1<<ADPS1 | 1<<ADPS2; 
    125e:	87 ea       	ldi	r24, 0xA7	; 167
    1260:	86 b9       	out	0x06, r24	; 6
//=================================================

// This method return lux value
int getLux(void){
	initLuxmeter();
	readAdc();
    1262:	0e 94 a6 08 	call	0x114c	; 0x114c <readAdc>
	getAvgADC();
    1266:	0e 94 b3 08 	call	0x1166	; 0x1166 <getAvgADC>
	readLux();
    126a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <readLux>
    126e:	60 91 d2 00 	lds	r22, 0x00D2
    1272:	70 91 d3 00 	lds	r23, 0x00D3
    1276:	80 91 d4 00 	lds	r24, 0x00D4
    127a:	90 91 d5 00 	lds	r25, 0x00D5
    127e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixsfsi>
	return (int)lux;
}
    1282:	cb 01       	movw	r24, r22
    1284:	08 95       	ret

00001286 <__subsf3>:
    1286:	50 58       	subi	r21, 0x80	; 128

00001288 <__addsf3>:
    1288:	bb 27       	eor	r27, r27
    128a:	aa 27       	eor	r26, r26
    128c:	0e d0       	rcall	.+28     	; 0x12aa <__addsf3x>
    128e:	d4 c1       	rjmp	.+936    	; 0x1638 <__fp_round>
    1290:	c5 d1       	rcall	.+906    	; 0x161c <__fp_pscA>
    1292:	30 f0       	brcs	.+12     	; 0x12a0 <__addsf3+0x18>
    1294:	ca d1       	rcall	.+916    	; 0x162a <__fp_pscB>
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__addsf3+0x18>
    1298:	31 f4       	brne	.+12     	; 0x12a6 <__addsf3+0x1e>
    129a:	9f 3f       	cpi	r25, 0xFF	; 255
    129c:	11 f4       	brne	.+4      	; 0x12a2 <__addsf3+0x1a>
    129e:	1e f4       	brtc	.+6      	; 0x12a6 <__addsf3+0x1e>
    12a0:	95 c1       	rjmp	.+810    	; 0x15cc <__fp_nan>
    12a2:	0e f4       	brtc	.+2      	; 0x12a6 <__addsf3+0x1e>
    12a4:	e0 95       	com	r30
    12a6:	e7 fb       	bst	r30, 7
    12a8:	8b c1       	rjmp	.+790    	; 0x15c0 <__fp_inf>

000012aa <__addsf3x>:
    12aa:	e9 2f       	mov	r30, r25
    12ac:	d6 d1       	rcall	.+940    	; 0x165a <__fp_split3>
    12ae:	80 f3       	brcs	.-32     	; 0x1290 <__addsf3+0x8>
    12b0:	ba 17       	cp	r27, r26
    12b2:	62 07       	cpc	r22, r18
    12b4:	73 07       	cpc	r23, r19
    12b6:	84 07       	cpc	r24, r20
    12b8:	95 07       	cpc	r25, r21
    12ba:	18 f0       	brcs	.+6      	; 0x12c2 <__addsf3x+0x18>
    12bc:	71 f4       	brne	.+28     	; 0x12da <__addsf3x+0x30>
    12be:	9e f5       	brtc	.+102    	; 0x1326 <__addsf3x+0x7c>
    12c0:	ee c1       	rjmp	.+988    	; 0x169e <__fp_zero>
    12c2:	0e f4       	brtc	.+2      	; 0x12c6 <__addsf3x+0x1c>
    12c4:	e0 95       	com	r30
    12c6:	0b 2e       	mov	r0, r27
    12c8:	ba 2f       	mov	r27, r26
    12ca:	a0 2d       	mov	r26, r0
    12cc:	0b 01       	movw	r0, r22
    12ce:	b9 01       	movw	r22, r18
    12d0:	90 01       	movw	r18, r0
    12d2:	0c 01       	movw	r0, r24
    12d4:	ca 01       	movw	r24, r20
    12d6:	a0 01       	movw	r20, r0
    12d8:	11 24       	eor	r1, r1
    12da:	ff 27       	eor	r31, r31
    12dc:	59 1b       	sub	r21, r25
    12de:	99 f0       	breq	.+38     	; 0x1306 <__addsf3x+0x5c>
    12e0:	59 3f       	cpi	r21, 0xF9	; 249
    12e2:	50 f4       	brcc	.+20     	; 0x12f8 <__addsf3x+0x4e>
    12e4:	50 3e       	cpi	r21, 0xE0	; 224
    12e6:	68 f1       	brcs	.+90     	; 0x1342 <__addsf3x+0x98>
    12e8:	1a 16       	cp	r1, r26
    12ea:	f0 40       	sbci	r31, 0x00	; 0
    12ec:	a2 2f       	mov	r26, r18
    12ee:	23 2f       	mov	r18, r19
    12f0:	34 2f       	mov	r19, r20
    12f2:	44 27       	eor	r20, r20
    12f4:	58 5f       	subi	r21, 0xF8	; 248
    12f6:	f3 cf       	rjmp	.-26     	; 0x12de <__addsf3x+0x34>
    12f8:	46 95       	lsr	r20
    12fa:	37 95       	ror	r19
    12fc:	27 95       	ror	r18
    12fe:	a7 95       	ror	r26
    1300:	f0 40       	sbci	r31, 0x00	; 0
    1302:	53 95       	inc	r21
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <__addsf3x+0x4e>
    1306:	7e f4       	brtc	.+30     	; 0x1326 <__addsf3x+0x7c>
    1308:	1f 16       	cp	r1, r31
    130a:	ba 0b       	sbc	r27, r26
    130c:	62 0b       	sbc	r22, r18
    130e:	73 0b       	sbc	r23, r19
    1310:	84 0b       	sbc	r24, r20
    1312:	ba f0       	brmi	.+46     	; 0x1342 <__addsf3x+0x98>
    1314:	91 50       	subi	r25, 0x01	; 1
    1316:	a1 f0       	breq	.+40     	; 0x1340 <__addsf3x+0x96>
    1318:	ff 0f       	add	r31, r31
    131a:	bb 1f       	adc	r27, r27
    131c:	66 1f       	adc	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	c2 f7       	brpl	.-16     	; 0x1314 <__addsf3x+0x6a>
    1324:	0e c0       	rjmp	.+28     	; 0x1342 <__addsf3x+0x98>
    1326:	ba 0f       	add	r27, r26
    1328:	62 1f       	adc	r22, r18
    132a:	73 1f       	adc	r23, r19
    132c:	84 1f       	adc	r24, r20
    132e:	48 f4       	brcc	.+18     	; 0x1342 <__addsf3x+0x98>
    1330:	87 95       	ror	r24
    1332:	77 95       	ror	r23
    1334:	67 95       	ror	r22
    1336:	b7 95       	ror	r27
    1338:	f7 95       	ror	r31
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	08 f0       	brcs	.+2      	; 0x1340 <__addsf3x+0x96>
    133e:	b3 cf       	rjmp	.-154    	; 0x12a6 <__addsf3+0x1e>
    1340:	93 95       	inc	r25
    1342:	88 0f       	add	r24, r24
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__addsf3x+0x9e>
    1346:	99 27       	eor	r25, r25
    1348:	ee 0f       	add	r30, r30
    134a:	97 95       	ror	r25
    134c:	87 95       	ror	r24
    134e:	08 95       	ret
    1350:	65 d1       	rcall	.+714    	; 0x161c <__fp_pscA>
    1352:	58 f0       	brcs	.+22     	; 0x136a <__addsf3x+0xc0>
    1354:	80 e8       	ldi	r24, 0x80	; 128
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	09 f4       	brne	.+2      	; 0x135c <__addsf3x+0xb2>
    135a:	9e ef       	ldi	r25, 0xFE	; 254
    135c:	66 d1       	rcall	.+716    	; 0x162a <__fp_pscB>
    135e:	28 f0       	brcs	.+10     	; 0x136a <__addsf3x+0xc0>
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	51 e0       	ldi	r21, 0x01	; 1
    1364:	59 f4       	brne	.+22     	; 0x137c <atan2+0xe>
    1366:	5e ef       	ldi	r21, 0xFE	; 254
    1368:	09 c0       	rjmp	.+18     	; 0x137c <atan2+0xe>
    136a:	30 c1       	rjmp	.+608    	; 0x15cc <__fp_nan>
    136c:	98 c1       	rjmp	.+816    	; 0x169e <__fp_zero>

0000136e <atan2>:
    136e:	e9 2f       	mov	r30, r25
    1370:	e0 78       	andi	r30, 0x80	; 128
    1372:	73 d1       	rcall	.+742    	; 0x165a <__fp_split3>
    1374:	68 f3       	brcs	.-38     	; 0x1350 <__addsf3x+0xa6>
    1376:	09 2e       	mov	r0, r25
    1378:	05 2a       	or	r0, r21
    137a:	c1 f3       	breq	.-16     	; 0x136c <__addsf3x+0xc2>
    137c:	26 17       	cp	r18, r22
    137e:	37 07       	cpc	r19, r23
    1380:	48 07       	cpc	r20, r24
    1382:	59 07       	cpc	r21, r25
    1384:	38 f0       	brcs	.+14     	; 0x1394 <atan2+0x26>
    1386:	0e 2e       	mov	r0, r30
    1388:	07 f8       	bld	r0, 7
    138a:	e0 25       	eor	r30, r0
    138c:	69 f0       	breq	.+26     	; 0x13a8 <atan2+0x3a>
    138e:	e0 25       	eor	r30, r0
    1390:	e0 64       	ori	r30, 0x40	; 64
    1392:	0a c0       	rjmp	.+20     	; 0x13a8 <atan2+0x3a>
    1394:	ef 63       	ori	r30, 0x3F	; 63
    1396:	07 f8       	bld	r0, 7
    1398:	00 94       	com	r0
    139a:	07 fa       	bst	r0, 7
    139c:	db 01       	movw	r26, r22
    139e:	b9 01       	movw	r22, r18
    13a0:	9d 01       	movw	r18, r26
    13a2:	dc 01       	movw	r26, r24
    13a4:	ca 01       	movw	r24, r20
    13a6:	ad 01       	movw	r20, r26
    13a8:	ef 93       	push	r30
    13aa:	43 d0       	rcall	.+134    	; 0x1432 <__divsf3_pse>
    13ac:	45 d1       	rcall	.+650    	; 0x1638 <__fp_round>
    13ae:	0a d0       	rcall	.+20     	; 0x13c4 <atan>
    13b0:	5f 91       	pop	r21
    13b2:	55 23       	and	r21, r21
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <atan2+0x54>
    13b6:	2b ed       	ldi	r18, 0xDB	; 219
    13b8:	3f e0       	ldi	r19, 0x0F	; 15
    13ba:	49 e4       	ldi	r20, 0x49	; 73
    13bc:	50 fd       	sbrc	r21, 0
    13be:	49 ec       	ldi	r20, 0xC9	; 201
    13c0:	63 cf       	rjmp	.-314    	; 0x1288 <__addsf3>
    13c2:	08 95       	ret

000013c4 <atan>:
    13c4:	df 93       	push	r29
    13c6:	dd 27       	eor	r29, r29
    13c8:	b9 2f       	mov	r27, r25
    13ca:	bf 77       	andi	r27, 0x7F	; 127
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	16 16       	cp	r1, r22
    13d2:	17 06       	cpc	r1, r23
    13d4:	48 07       	cpc	r20, r24
    13d6:	5b 07       	cpc	r21, r27
    13d8:	10 f4       	brcc	.+4      	; 0x13de <atan+0x1a>
    13da:	d9 2f       	mov	r29, r25
    13dc:	67 d1       	rcall	.+718    	; 0x16ac <inverse>
    13de:	9f 93       	push	r25
    13e0:	8f 93       	push	r24
    13e2:	7f 93       	push	r23
    13e4:	6f 93       	push	r22
    13e6:	18 d2       	rcall	.+1072   	; 0x1818 <square>
    13e8:	e4 e5       	ldi	r30, 0x54	; 84
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	f2 d0       	rcall	.+484    	; 0x15d2 <__fp_powser>
    13ee:	24 d1       	rcall	.+584    	; 0x1638 <__fp_round>
    13f0:	2f 91       	pop	r18
    13f2:	3f 91       	pop	r19
    13f4:	4f 91       	pop	r20
    13f6:	5f 91       	pop	r21
    13f8:	6c d1       	rcall	.+728    	; 0x16d2 <__mulsf3x>
    13fa:	dd 23       	and	r29, r29
    13fc:	49 f0       	breq	.+18     	; 0x1410 <atan+0x4c>
    13fe:	90 58       	subi	r25, 0x80	; 128
    1400:	a2 ea       	ldi	r26, 0xA2	; 162
    1402:	2a ed       	ldi	r18, 0xDA	; 218
    1404:	3f e0       	ldi	r19, 0x0F	; 15
    1406:	49 ec       	ldi	r20, 0xC9	; 201
    1408:	5f e3       	ldi	r21, 0x3F	; 63
    140a:	d0 78       	andi	r29, 0x80	; 128
    140c:	5d 27       	eor	r21, r29
    140e:	4d df       	rcall	.-358    	; 0x12aa <__addsf3x>
    1410:	df 91       	pop	r29
    1412:	12 c1       	rjmp	.+548    	; 0x1638 <__fp_round>

00001414 <__divsf3>:
    1414:	0c d0       	rcall	.+24     	; 0x142e <__divsf3x>
    1416:	10 c1       	rjmp	.+544    	; 0x1638 <__fp_round>
    1418:	08 d1       	rcall	.+528    	; 0x162a <__fp_pscB>
    141a:	40 f0       	brcs	.+16     	; 0x142c <__divsf3+0x18>
    141c:	ff d0       	rcall	.+510    	; 0x161c <__fp_pscA>
    141e:	30 f0       	brcs	.+12     	; 0x142c <__divsf3+0x18>
    1420:	21 f4       	brne	.+8      	; 0x142a <__divsf3+0x16>
    1422:	5f 3f       	cpi	r21, 0xFF	; 255
    1424:	19 f0       	breq	.+6      	; 0x142c <__divsf3+0x18>
    1426:	cc c0       	rjmp	.+408    	; 0x15c0 <__fp_inf>
    1428:	51 11       	cpse	r21, r1
    142a:	3a c1       	rjmp	.+628    	; 0x16a0 <__fp_szero>
    142c:	cf c0       	rjmp	.+414    	; 0x15cc <__fp_nan>

0000142e <__divsf3x>:
    142e:	15 d1       	rcall	.+554    	; 0x165a <__fp_split3>
    1430:	98 f3       	brcs	.-26     	; 0x1418 <__divsf3+0x4>

00001432 <__divsf3_pse>:
    1432:	99 23       	and	r25, r25
    1434:	c9 f3       	breq	.-14     	; 0x1428 <__divsf3+0x14>
    1436:	55 23       	and	r21, r21
    1438:	b1 f3       	breq	.-20     	; 0x1426 <__divsf3+0x12>
    143a:	95 1b       	sub	r25, r21
    143c:	55 0b       	sbc	r21, r21
    143e:	bb 27       	eor	r27, r27
    1440:	aa 27       	eor	r26, r26
    1442:	62 17       	cp	r22, r18
    1444:	73 07       	cpc	r23, r19
    1446:	84 07       	cpc	r24, r20
    1448:	38 f0       	brcs	.+14     	; 0x1458 <__divsf3_pse+0x26>
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	5f 4f       	sbci	r21, 0xFF	; 255
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	44 1f       	adc	r20, r20
    1454:	aa 1f       	adc	r26, r26
    1456:	a9 f3       	breq	.-22     	; 0x1442 <__divsf3_pse+0x10>
    1458:	33 d0       	rcall	.+102    	; 0x14c0 <__divsf3_pse+0x8e>
    145a:	0e 2e       	mov	r0, r30
    145c:	3a f0       	brmi	.+14     	; 0x146c <__divsf3_pse+0x3a>
    145e:	e0 e8       	ldi	r30, 0x80	; 128
    1460:	30 d0       	rcall	.+96     	; 0x14c2 <__divsf3_pse+0x90>
    1462:	91 50       	subi	r25, 0x01	; 1
    1464:	50 40       	sbci	r21, 0x00	; 0
    1466:	e6 95       	lsr	r30
    1468:	00 1c       	adc	r0, r0
    146a:	ca f7       	brpl	.-14     	; 0x145e <__divsf3_pse+0x2c>
    146c:	29 d0       	rcall	.+82     	; 0x14c0 <__divsf3_pse+0x8e>
    146e:	fe 2f       	mov	r31, r30
    1470:	27 d0       	rcall	.+78     	; 0x14c0 <__divsf3_pse+0x8e>
    1472:	66 0f       	add	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	bb 1f       	adc	r27, r27
    147a:	26 17       	cp	r18, r22
    147c:	37 07       	cpc	r19, r23
    147e:	48 07       	cpc	r20, r24
    1480:	ab 07       	cpc	r26, r27
    1482:	b0 e8       	ldi	r27, 0x80	; 128
    1484:	09 f0       	breq	.+2      	; 0x1488 <__divsf3_pse+0x56>
    1486:	bb 0b       	sbc	r27, r27
    1488:	80 2d       	mov	r24, r0
    148a:	bf 01       	movw	r22, r30
    148c:	ff 27       	eor	r31, r31
    148e:	93 58       	subi	r25, 0x83	; 131
    1490:	5f 4f       	sbci	r21, 0xFF	; 255
    1492:	2a f0       	brmi	.+10     	; 0x149e <__divsf3_pse+0x6c>
    1494:	9e 3f       	cpi	r25, 0xFE	; 254
    1496:	51 05       	cpc	r21, r1
    1498:	68 f0       	brcs	.+26     	; 0x14b4 <__divsf3_pse+0x82>
    149a:	92 c0       	rjmp	.+292    	; 0x15c0 <__fp_inf>
    149c:	01 c1       	rjmp	.+514    	; 0x16a0 <__fp_szero>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	ec f3       	brlt	.-6      	; 0x149c <__divsf3_pse+0x6a>
    14a2:	98 3e       	cpi	r25, 0xE8	; 232
    14a4:	dc f3       	brlt	.-10     	; 0x149c <__divsf3_pse+0x6a>
    14a6:	86 95       	lsr	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__divsf3_pse+0x74>
    14b4:	88 0f       	add	r24, r24
    14b6:	91 1d       	adc	r25, r1
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret
    14c0:	e1 e0       	ldi	r30, 0x01	; 1
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	bb 1f       	adc	r27, r27
    14ca:	62 17       	cp	r22, r18
    14cc:	73 07       	cpc	r23, r19
    14ce:	84 07       	cpc	r24, r20
    14d0:	ba 07       	cpc	r27, r26
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__divsf3_pse+0xaa>
    14d4:	62 1b       	sub	r22, r18
    14d6:	73 0b       	sbc	r23, r19
    14d8:	84 0b       	sbc	r24, r20
    14da:	ba 0b       	sbc	r27, r26
    14dc:	ee 1f       	adc	r30, r30
    14de:	88 f7       	brcc	.-30     	; 0x14c2 <__divsf3_pse+0x90>
    14e0:	e0 95       	com	r30
    14e2:	08 95       	ret

000014e4 <__fixsfsi>:
    14e4:	04 d0       	rcall	.+8      	; 0x14ee <__fixunssfsi>
    14e6:	68 94       	set
    14e8:	b1 11       	cpse	r27, r1
    14ea:	da c0       	rjmp	.+436    	; 0x16a0 <__fp_szero>
    14ec:	08 95       	ret

000014ee <__fixunssfsi>:
    14ee:	bd d0       	rcall	.+378    	; 0x166a <__fp_splitA>
    14f0:	88 f0       	brcs	.+34     	; 0x1514 <__fixunssfsi+0x26>
    14f2:	9f 57       	subi	r25, 0x7F	; 127
    14f4:	90 f0       	brcs	.+36     	; 0x151a <__fixunssfsi+0x2c>
    14f6:	b9 2f       	mov	r27, r25
    14f8:	99 27       	eor	r25, r25
    14fa:	b7 51       	subi	r27, 0x17	; 23
    14fc:	a0 f0       	brcs	.+40     	; 0x1526 <__fixunssfsi+0x38>
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <__fixunssfsi+0x46>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	88 1f       	adc	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	1a f0       	brmi	.+6      	; 0x1510 <__fixunssfsi+0x22>
    150a:	ba 95       	dec	r27
    150c:	c9 f7       	brne	.-14     	; 0x1500 <__fixunssfsi+0x12>
    150e:	12 c0       	rjmp	.+36     	; 0x1534 <__fixunssfsi+0x46>
    1510:	b1 30       	cpi	r27, 0x01	; 1
    1512:	81 f0       	breq	.+32     	; 0x1534 <__fixunssfsi+0x46>
    1514:	c4 d0       	rcall	.+392    	; 0x169e <__fp_zero>
    1516:	b1 e0       	ldi	r27, 0x01	; 1
    1518:	08 95       	ret
    151a:	c1 c0       	rjmp	.+386    	; 0x169e <__fp_zero>
    151c:	67 2f       	mov	r22, r23
    151e:	78 2f       	mov	r23, r24
    1520:	88 27       	eor	r24, r24
    1522:	b8 5f       	subi	r27, 0xF8	; 248
    1524:	39 f0       	breq	.+14     	; 0x1534 <__fixunssfsi+0x46>
    1526:	b9 3f       	cpi	r27, 0xF9	; 249
    1528:	cc f3       	brlt	.-14     	; 0x151c <__fixunssfsi+0x2e>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b3 95       	inc	r27
    1532:	d9 f7       	brne	.-10     	; 0x152a <__fixunssfsi+0x3c>
    1534:	3e f4       	brtc	.+14     	; 0x1544 <__fixunssfsi+0x56>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__floatunsisf>:
    1546:	e8 94       	clt
    1548:	09 c0       	rjmp	.+18     	; 0x155c <__floatsisf+0x12>

0000154a <__floatsisf>:
    154a:	97 fb       	bst	r25, 7
    154c:	3e f4       	brtc	.+14     	; 0x155c <__floatsisf+0x12>
    154e:	90 95       	com	r25
    1550:	80 95       	com	r24
    1552:	70 95       	com	r23
    1554:	61 95       	neg	r22
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	99 23       	and	r25, r25
    155e:	a9 f0       	breq	.+42     	; 0x158a <__floatsisf+0x40>
    1560:	f9 2f       	mov	r31, r25
    1562:	96 e9       	ldi	r25, 0x96	; 150
    1564:	bb 27       	eor	r27, r27
    1566:	93 95       	inc	r25
    1568:	f6 95       	lsr	r31
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f1 11       	cpse	r31, r1
    1574:	f8 cf       	rjmp	.-16     	; 0x1566 <__floatsisf+0x1c>
    1576:	fa f4       	brpl	.+62     	; 0x15b6 <__floatsisf+0x6c>
    1578:	bb 0f       	add	r27, r27
    157a:	11 f4       	brne	.+4      	; 0x1580 <__floatsisf+0x36>
    157c:	60 ff       	sbrs	r22, 0
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <__floatsisf+0x6c>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <__floatsisf+0x6c>
    158a:	88 23       	and	r24, r24
    158c:	11 f0       	breq	.+4      	; 0x1592 <__floatsisf+0x48>
    158e:	96 e9       	ldi	r25, 0x96	; 150
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <__floatsisf+0x6a>
    1592:	77 23       	and	r23, r23
    1594:	21 f0       	breq	.+8      	; 0x159e <__floatsisf+0x54>
    1596:	9e e8       	ldi	r25, 0x8E	; 142
    1598:	87 2f       	mov	r24, r23
    159a:	76 2f       	mov	r23, r22
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <__floatsisf+0x5e>
    159e:	66 23       	and	r22, r22
    15a0:	71 f0       	breq	.+28     	; 0x15be <__floatsisf+0x74>
    15a2:	96 e8       	ldi	r25, 0x86	; 134
    15a4:	86 2f       	mov	r24, r22
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	2a f0       	brmi	.+10     	; 0x15b6 <__floatsisf+0x6c>
    15ac:	9a 95       	dec	r25
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	da f7       	brpl	.-10     	; 0x15ac <__floatsisf+0x62>
    15b6:	88 0f       	add	r24, r24
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__fp_inf>:
    15c0:	97 f9       	bld	r25, 7
    15c2:	9f 67       	ori	r25, 0x7F	; 127
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	08 95       	ret

000015cc <__fp_nan>:
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	80 ec       	ldi	r24, 0xC0	; 192
    15d0:	08 95       	ret

000015d2 <__fp_powser>:
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	1f 93       	push	r17
    15d8:	0f 93       	push	r16
    15da:	ff 92       	push	r15
    15dc:	ef 92       	push	r14
    15de:	df 92       	push	r13
    15e0:	7b 01       	movw	r14, r22
    15e2:	8c 01       	movw	r16, r24
    15e4:	68 94       	set
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__fp_powser+0x20>
    15e8:	da 2e       	mov	r13, r26
    15ea:	ef 01       	movw	r28, r30
    15ec:	72 d0       	rcall	.+228    	; 0x16d2 <__mulsf3x>
    15ee:	fe 01       	movw	r30, r28
    15f0:	e8 94       	clt
    15f2:	a5 91       	lpm	r26, Z+
    15f4:	25 91       	lpm	r18, Z+
    15f6:	35 91       	lpm	r19, Z+
    15f8:	45 91       	lpm	r20, Z+
    15fa:	55 91       	lpm	r21, Z+
    15fc:	ae f3       	brts	.-22     	; 0x15e8 <__fp_powser+0x16>
    15fe:	ef 01       	movw	r28, r30
    1600:	54 de       	rcall	.-856    	; 0x12aa <__addsf3x>
    1602:	fe 01       	movw	r30, r28
    1604:	97 01       	movw	r18, r14
    1606:	a8 01       	movw	r20, r16
    1608:	da 94       	dec	r13
    160a:	79 f7       	brne	.-34     	; 0x15ea <__fp_powser+0x18>
    160c:	df 90       	pop	r13
    160e:	ef 90       	pop	r14
    1610:	ff 90       	pop	r15
    1612:	0f 91       	pop	r16
    1614:	1f 91       	pop	r17
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <__fp_pscA>:
    161c:	00 24       	eor	r0, r0
    161e:	0a 94       	dec	r0
    1620:	16 16       	cp	r1, r22
    1622:	17 06       	cpc	r1, r23
    1624:	18 06       	cpc	r1, r24
    1626:	09 06       	cpc	r0, r25
    1628:	08 95       	ret

0000162a <__fp_pscB>:
    162a:	00 24       	eor	r0, r0
    162c:	0a 94       	dec	r0
    162e:	12 16       	cp	r1, r18
    1630:	13 06       	cpc	r1, r19
    1632:	14 06       	cpc	r1, r20
    1634:	05 06       	cpc	r0, r21
    1636:	08 95       	ret

00001638 <__fp_round>:
    1638:	09 2e       	mov	r0, r25
    163a:	03 94       	inc	r0
    163c:	00 0c       	add	r0, r0
    163e:	11 f4       	brne	.+4      	; 0x1644 <__fp_round+0xc>
    1640:	88 23       	and	r24, r24
    1642:	52 f0       	brmi	.+20     	; 0x1658 <__fp_round+0x20>
    1644:	bb 0f       	add	r27, r27
    1646:	40 f4       	brcc	.+16     	; 0x1658 <__fp_round+0x20>
    1648:	bf 2b       	or	r27, r31
    164a:	11 f4       	brne	.+4      	; 0x1650 <__fp_round+0x18>
    164c:	60 ff       	sbrs	r22, 0
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <__fp_round+0x20>
    1650:	6f 5f       	subi	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	08 95       	ret

0000165a <__fp_split3>:
    165a:	57 fd       	sbrc	r21, 7
    165c:	90 58       	subi	r25, 0x80	; 128
    165e:	44 0f       	add	r20, r20
    1660:	55 1f       	adc	r21, r21
    1662:	59 f0       	breq	.+22     	; 0x167a <__fp_splitA+0x10>
    1664:	5f 3f       	cpi	r21, 0xFF	; 255
    1666:	71 f0       	breq	.+28     	; 0x1684 <__fp_splitA+0x1a>
    1668:	47 95       	ror	r20

0000166a <__fp_splitA>:
    166a:	88 0f       	add	r24, r24
    166c:	97 fb       	bst	r25, 7
    166e:	99 1f       	adc	r25, r25
    1670:	61 f0       	breq	.+24     	; 0x168a <__fp_splitA+0x20>
    1672:	9f 3f       	cpi	r25, 0xFF	; 255
    1674:	79 f0       	breq	.+30     	; 0x1694 <__fp_splitA+0x2a>
    1676:	87 95       	ror	r24
    1678:	08 95       	ret
    167a:	12 16       	cp	r1, r18
    167c:	13 06       	cpc	r1, r19
    167e:	14 06       	cpc	r1, r20
    1680:	55 1f       	adc	r21, r21
    1682:	f2 cf       	rjmp	.-28     	; 0x1668 <__fp_split3+0xe>
    1684:	46 95       	lsr	r20
    1686:	f1 df       	rcall	.-30     	; 0x166a <__fp_splitA>
    1688:	08 c0       	rjmp	.+16     	; 0x169a <__fp_splitA+0x30>
    168a:	16 16       	cp	r1, r22
    168c:	17 06       	cpc	r1, r23
    168e:	18 06       	cpc	r1, r24
    1690:	99 1f       	adc	r25, r25
    1692:	f1 cf       	rjmp	.-30     	; 0x1676 <__fp_splitA+0xc>
    1694:	86 95       	lsr	r24
    1696:	71 05       	cpc	r23, r1
    1698:	61 05       	cpc	r22, r1
    169a:	08 94       	sec
    169c:	08 95       	ret

0000169e <__fp_zero>:
    169e:	e8 94       	clt

000016a0 <__fp_szero>:
    16a0:	bb 27       	eor	r27, r27
    16a2:	66 27       	eor	r22, r22
    16a4:	77 27       	eor	r23, r23
    16a6:	cb 01       	movw	r24, r22
    16a8:	97 f9       	bld	r25, 7
    16aa:	08 95       	ret

000016ac <inverse>:
    16ac:	9b 01       	movw	r18, r22
    16ae:	ac 01       	movw	r20, r24
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	80 e8       	ldi	r24, 0x80	; 128
    16b6:	9f e3       	ldi	r25, 0x3F	; 63
    16b8:	ad ce       	rjmp	.-678    	; 0x1414 <__divsf3>

000016ba <__mulsf3>:
    16ba:	0b d0       	rcall	.+22     	; 0x16d2 <__mulsf3x>
    16bc:	bd cf       	rjmp	.-134    	; 0x1638 <__fp_round>
    16be:	ae df       	rcall	.-164    	; 0x161c <__fp_pscA>
    16c0:	28 f0       	brcs	.+10     	; 0x16cc <__mulsf3+0x12>
    16c2:	b3 df       	rcall	.-154    	; 0x162a <__fp_pscB>
    16c4:	18 f0       	brcs	.+6      	; 0x16cc <__mulsf3+0x12>
    16c6:	95 23       	and	r25, r21
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__mulsf3+0x12>
    16ca:	7a cf       	rjmp	.-268    	; 0x15c0 <__fp_inf>
    16cc:	7f cf       	rjmp	.-258    	; 0x15cc <__fp_nan>
    16ce:	11 24       	eor	r1, r1
    16d0:	e7 cf       	rjmp	.-50     	; 0x16a0 <__fp_szero>

000016d2 <__mulsf3x>:
    16d2:	c3 df       	rcall	.-122    	; 0x165a <__fp_split3>
    16d4:	a0 f3       	brcs	.-24     	; 0x16be <__mulsf3+0x4>

000016d6 <__mulsf3_pse>:
    16d6:	95 9f       	mul	r25, r21
    16d8:	d1 f3       	breq	.-12     	; 0x16ce <__mulsf3+0x14>
    16da:	95 0f       	add	r25, r21
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	55 1f       	adc	r21, r21
    16e0:	62 9f       	mul	r22, r18
    16e2:	f0 01       	movw	r30, r0
    16e4:	72 9f       	mul	r23, r18
    16e6:	bb 27       	eor	r27, r27
    16e8:	f0 0d       	add	r31, r0
    16ea:	b1 1d       	adc	r27, r1
    16ec:	63 9f       	mul	r22, r19
    16ee:	aa 27       	eor	r26, r26
    16f0:	f0 0d       	add	r31, r0
    16f2:	b1 1d       	adc	r27, r1
    16f4:	aa 1f       	adc	r26, r26
    16f6:	64 9f       	mul	r22, r20
    16f8:	66 27       	eor	r22, r22
    16fa:	b0 0d       	add	r27, r0
    16fc:	a1 1d       	adc	r26, r1
    16fe:	66 1f       	adc	r22, r22
    1700:	82 9f       	mul	r24, r18
    1702:	22 27       	eor	r18, r18
    1704:	b0 0d       	add	r27, r0
    1706:	a1 1d       	adc	r26, r1
    1708:	62 1f       	adc	r22, r18
    170a:	73 9f       	mul	r23, r19
    170c:	b0 0d       	add	r27, r0
    170e:	a1 1d       	adc	r26, r1
    1710:	62 1f       	adc	r22, r18
    1712:	83 9f       	mul	r24, r19
    1714:	a0 0d       	add	r26, r0
    1716:	61 1d       	adc	r22, r1
    1718:	22 1f       	adc	r18, r18
    171a:	74 9f       	mul	r23, r20
    171c:	33 27       	eor	r19, r19
    171e:	a0 0d       	add	r26, r0
    1720:	61 1d       	adc	r22, r1
    1722:	23 1f       	adc	r18, r19
    1724:	84 9f       	mul	r24, r20
    1726:	60 0d       	add	r22, r0
    1728:	21 1d       	adc	r18, r1
    172a:	82 2f       	mov	r24, r18
    172c:	76 2f       	mov	r23, r22
    172e:	6a 2f       	mov	r22, r26
    1730:	11 24       	eor	r1, r1
    1732:	9f 57       	subi	r25, 0x7F	; 127
    1734:	50 40       	sbci	r21, 0x00	; 0
    1736:	8a f0       	brmi	.+34     	; 0x175a <__mulsf3_pse+0x84>
    1738:	e1 f0       	breq	.+56     	; 0x1772 <__mulsf3_pse+0x9c>
    173a:	88 23       	and	r24, r24
    173c:	4a f0       	brmi	.+18     	; 0x1750 <__mulsf3_pse+0x7a>
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	bb 1f       	adc	r27, r27
    1744:	66 1f       	adc	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	88 1f       	adc	r24, r24
    174a:	91 50       	subi	r25, 0x01	; 1
    174c:	50 40       	sbci	r21, 0x00	; 0
    174e:	a9 f7       	brne	.-22     	; 0x173a <__mulsf3_pse+0x64>
    1750:	9e 3f       	cpi	r25, 0xFE	; 254
    1752:	51 05       	cpc	r21, r1
    1754:	70 f0       	brcs	.+28     	; 0x1772 <__mulsf3_pse+0x9c>
    1756:	34 cf       	rjmp	.-408    	; 0x15c0 <__fp_inf>
    1758:	a3 cf       	rjmp	.-186    	; 0x16a0 <__fp_szero>
    175a:	5f 3f       	cpi	r21, 0xFF	; 255
    175c:	ec f3       	brlt	.-6      	; 0x1758 <__mulsf3_pse+0x82>
    175e:	98 3e       	cpi	r25, 0xE8	; 232
    1760:	dc f3       	brlt	.-10     	; 0x1758 <__mulsf3_pse+0x82>
    1762:	86 95       	lsr	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	b7 95       	ror	r27
    176a:	f7 95       	ror	r31
    176c:	e7 95       	ror	r30
    176e:	9f 5f       	subi	r25, 0xFF	; 255
    1770:	c1 f7       	brne	.-16     	; 0x1762 <__mulsf3_pse+0x8c>
    1772:	fe 2b       	or	r31, r30
    1774:	88 0f       	add	r24, r24
    1776:	91 1d       	adc	r25, r1
    1778:	96 95       	lsr	r25
    177a:	87 95       	ror	r24
    177c:	97 f9       	bld	r25, 7
    177e:	08 95       	ret

00001780 <pow>:
    1780:	fa 01       	movw	r30, r20
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	30 96       	adiw	r30, 0x00	; 0
    1788:	21 05       	cpc	r18, r1
    178a:	31 05       	cpc	r19, r1
    178c:	99 f1       	breq	.+102    	; 0x17f4 <pow+0x74>
    178e:	61 15       	cp	r22, r1
    1790:	71 05       	cpc	r23, r1
    1792:	61 f4       	brne	.+24     	; 0x17ac <pow+0x2c>
    1794:	80 38       	cpi	r24, 0x80	; 128
    1796:	bf e3       	ldi	r27, 0x3F	; 63
    1798:	9b 07       	cpc	r25, r27
    179a:	49 f1       	breq	.+82     	; 0x17ee <pow+0x6e>
    179c:	68 94       	set
    179e:	90 38       	cpi	r25, 0x80	; 128
    17a0:	81 05       	cpc	r24, r1
    17a2:	61 f0       	breq	.+24     	; 0x17bc <pow+0x3c>
    17a4:	80 38       	cpi	r24, 0x80	; 128
    17a6:	bf ef       	ldi	r27, 0xFF	; 255
    17a8:	9b 07       	cpc	r25, r27
    17aa:	41 f0       	breq	.+16     	; 0x17bc <pow+0x3c>
    17ac:	99 23       	and	r25, r25
    17ae:	42 f5       	brpl	.+80     	; 0x1800 <pow+0x80>
    17b0:	ff 3f       	cpi	r31, 0xFF	; 255
    17b2:	e1 05       	cpc	r30, r1
    17b4:	31 05       	cpc	r19, r1
    17b6:	21 05       	cpc	r18, r1
    17b8:	11 f1       	breq	.+68     	; 0x17fe <pow+0x7e>
    17ba:	e8 94       	clt
    17bc:	08 94       	sec
    17be:	e7 95       	ror	r30
    17c0:	d9 01       	movw	r26, r18
    17c2:	aa 23       	and	r26, r26
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <pow+0x50>
    17c6:	ab 2f       	mov	r26, r27
    17c8:	be 2f       	mov	r27, r30
    17ca:	f8 5f       	subi	r31, 0xF8	; 248
    17cc:	d0 f3       	brcs	.-12     	; 0x17c2 <pow+0x42>
    17ce:	10 c0       	rjmp	.+32     	; 0x17f0 <pow+0x70>
    17d0:	ff 5f       	subi	r31, 0xFF	; 255
    17d2:	70 f4       	brcc	.+28     	; 0x17f0 <pow+0x70>
    17d4:	a6 95       	lsr	r26
    17d6:	e0 f7       	brcc	.-8      	; 0x17d0 <pow+0x50>
    17d8:	f7 39       	cpi	r31, 0x97	; 151
    17da:	50 f0       	brcs	.+20     	; 0x17f0 <pow+0x70>
    17dc:	19 f0       	breq	.+6      	; 0x17e4 <pow+0x64>
    17de:	ff 3a       	cpi	r31, 0xAF	; 175
    17e0:	38 f4       	brcc	.+14     	; 0x17f0 <pow+0x70>
    17e2:	9f 77       	andi	r25, 0x7F	; 127
    17e4:	9f 93       	push	r25
    17e6:	0c d0       	rcall	.+24     	; 0x1800 <pow+0x80>
    17e8:	0f 90       	pop	r0
    17ea:	07 fc       	sbrc	r0, 7
    17ec:	90 58       	subi	r25, 0x80	; 128
    17ee:	08 95       	ret
    17f0:	3e f0       	brts	.+14     	; 0x1800 <pow+0x80>
    17f2:	ec ce       	rjmp	.-552    	; 0x15cc <__fp_nan>
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	9f e3       	ldi	r25, 0x3F	; 63
    17fc:	08 95       	ret
    17fe:	4f e7       	ldi	r20, 0x7F	; 127
    1800:	9f 77       	andi	r25, 0x7F	; 127
    1802:	5f 93       	push	r21
    1804:	4f 93       	push	r20
    1806:	3f 93       	push	r19
    1808:	2f 93       	push	r18
    180a:	75 d0       	rcall	.+234    	; 0x18f6 <log>
    180c:	2f 91       	pop	r18
    180e:	3f 91       	pop	r19
    1810:	4f 91       	pop	r20
    1812:	5f 91       	pop	r21
    1814:	52 df       	rcall	.-348    	; 0x16ba <__mulsf3>
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <exp>

00001818 <square>:
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	4e cf       	rjmp	.-356    	; 0x16ba <__mulsf3>
    181e:	19 f4       	brne	.+6      	; 0x1826 <square+0xe>
    1820:	0e f0       	brts	.+2      	; 0x1824 <square+0xc>
    1822:	ce ce       	rjmp	.-612    	; 0x15c0 <__fp_inf>
    1824:	3c cf       	rjmp	.-392    	; 0x169e <__fp_zero>
    1826:	d2 ce       	rjmp	.-604    	; 0x15cc <__fp_nan>

00001828 <exp>:
    1828:	20 df       	rcall	.-448    	; 0x166a <__fp_splitA>
    182a:	c8 f3       	brcs	.-14     	; 0x181e <square+0x6>
    182c:	96 38       	cpi	r25, 0x86	; 134
    182e:	c0 f7       	brcc	.-16     	; 0x1820 <square+0x8>
    1830:	07 f8       	bld	r0, 7
    1832:	0f 92       	push	r0
    1834:	e8 94       	clt
    1836:	2b e3       	ldi	r18, 0x3B	; 59
    1838:	3a ea       	ldi	r19, 0xAA	; 170
    183a:	48 eb       	ldi	r20, 0xB8	; 184
    183c:	5f e7       	ldi	r21, 0x7F	; 127
    183e:	4b df       	rcall	.-362    	; 0x16d6 <__mulsf3_pse>
    1840:	0f 92       	push	r0
    1842:	0f 92       	push	r0
    1844:	0f 92       	push	r0
    1846:	4d b7       	in	r20, 0x3d	; 61
    1848:	5e b7       	in	r21, 0x3e	; 62
    184a:	0f 92       	push	r0
    184c:	94 d0       	rcall	.+296    	; 0x1976 <modf>
    184e:	e1 e8       	ldi	r30, 0x81	; 129
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	bf de       	rcall	.-642    	; 0x15d2 <__fp_powser>
    1854:	4f 91       	pop	r20
    1856:	5f 91       	pop	r21
    1858:	ef 91       	pop	r30
    185a:	ff 91       	pop	r31
    185c:	e5 95       	asr	r30
    185e:	ee 1f       	adc	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	49 f0       	breq	.+18     	; 0x1876 <exp+0x4e>
    1864:	fe 57       	subi	r31, 0x7E	; 126
    1866:	e0 68       	ori	r30, 0x80	; 128
    1868:	44 27       	eor	r20, r20
    186a:	ee 0f       	add	r30, r30
    186c:	44 1f       	adc	r20, r20
    186e:	fa 95       	dec	r31
    1870:	e1 f7       	brne	.-8      	; 0x186a <exp+0x42>
    1872:	41 95       	neg	r20
    1874:	55 0b       	sbc	r21, r21
    1876:	06 d0       	rcall	.+12     	; 0x1884 <ldexp>
    1878:	0f 90       	pop	r0
    187a:	07 fe       	sbrs	r0, 7
    187c:	17 cf       	rjmp	.-466    	; 0x16ac <inverse>
    187e:	08 95       	ret
    1880:	9f ce       	rjmp	.-706    	; 0x15c0 <__fp_inf>
    1882:	ac c0       	rjmp	.+344    	; 0x19dc <__fp_mpack>

00001884 <ldexp>:
    1884:	f2 de       	rcall	.-540    	; 0x166a <__fp_splitA>
    1886:	e8 f3       	brcs	.-6      	; 0x1882 <exp+0x5a>
    1888:	99 23       	and	r25, r25
    188a:	d9 f3       	breq	.-10     	; 0x1882 <exp+0x5a>
    188c:	94 0f       	add	r25, r20
    188e:	51 1d       	adc	r21, r1
    1890:	bb f3       	brvs	.-18     	; 0x1880 <exp+0x58>
    1892:	91 50       	subi	r25, 0x01	; 1
    1894:	50 40       	sbci	r21, 0x00	; 0
    1896:	94 f0       	brlt	.+36     	; 0x18bc <ldexp+0x38>
    1898:	59 f0       	breq	.+22     	; 0x18b0 <ldexp+0x2c>
    189a:	88 23       	and	r24, r24
    189c:	32 f0       	brmi	.+12     	; 0x18aa <ldexp+0x26>
    189e:	66 0f       	add	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	88 1f       	adc	r24, r24
    18a4:	91 50       	subi	r25, 0x01	; 1
    18a6:	50 40       	sbci	r21, 0x00	; 0
    18a8:	c1 f7       	brne	.-16     	; 0x189a <ldexp+0x16>
    18aa:	9e 3f       	cpi	r25, 0xFE	; 254
    18ac:	51 05       	cpc	r21, r1
    18ae:	44 f7       	brge	.-48     	; 0x1880 <exp+0x58>
    18b0:	88 0f       	add	r24, r24
    18b2:	91 1d       	adc	r25, r1
    18b4:	96 95       	lsr	r25
    18b6:	87 95       	ror	r24
    18b8:	97 f9       	bld	r25, 7
    18ba:	08 95       	ret
    18bc:	5f 3f       	cpi	r21, 0xFF	; 255
    18be:	ac f0       	brlt	.+42     	; 0x18ea <ldexp+0x66>
    18c0:	98 3e       	cpi	r25, 0xE8	; 232
    18c2:	9c f0       	brlt	.+38     	; 0x18ea <ldexp+0x66>
    18c4:	bb 27       	eor	r27, r27
    18c6:	86 95       	lsr	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <ldexp+0x4e>
    18d0:	b1 60       	ori	r27, 0x01	; 1
    18d2:	93 95       	inc	r25
    18d4:	c1 f7       	brne	.-16     	; 0x18c6 <ldexp+0x42>
    18d6:	bb 0f       	add	r27, r27
    18d8:	58 f7       	brcc	.-42     	; 0x18b0 <ldexp+0x2c>
    18da:	11 f4       	brne	.+4      	; 0x18e0 <ldexp+0x5c>
    18dc:	60 ff       	sbrs	r22, 0
    18de:	e8 cf       	rjmp	.-48     	; 0x18b0 <ldexp+0x2c>
    18e0:	6f 5f       	subi	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	e3 cf       	rjmp	.-58     	; 0x18b0 <ldexp+0x2c>
    18ea:	da ce       	rjmp	.-588    	; 0x16a0 <__fp_szero>
    18ec:	0e f0       	brts	.+2      	; 0x18f0 <ldexp+0x6c>
    18ee:	76 c0       	rjmp	.+236    	; 0x19dc <__fp_mpack>
    18f0:	6d ce       	rjmp	.-806    	; 0x15cc <__fp_nan>
    18f2:	68 94       	set
    18f4:	65 ce       	rjmp	.-822    	; 0x15c0 <__fp_inf>

000018f6 <log>:
    18f6:	b9 de       	rcall	.-654    	; 0x166a <__fp_splitA>
    18f8:	c8 f3       	brcs	.-14     	; 0x18ec <ldexp+0x68>
    18fa:	99 23       	and	r25, r25
    18fc:	d1 f3       	breq	.-12     	; 0x18f2 <ldexp+0x6e>
    18fe:	c6 f3       	brts	.-16     	; 0x18f0 <ldexp+0x6c>
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	1f 93       	push	r17
    1906:	0f 93       	push	r16
    1908:	ff 92       	push	r15
    190a:	c9 2f       	mov	r28, r25
    190c:	dd 27       	eor	r29, r29
    190e:	88 23       	and	r24, r24
    1910:	2a f0       	brmi	.+10     	; 0x191c <log+0x26>
    1912:	21 97       	sbiw	r28, 0x01	; 1
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	88 1f       	adc	r24, r24
    191a:	da f7       	brpl	.-10     	; 0x1912 <log+0x1c>
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f eb       	ldi	r21, 0xBF	; 191
    1924:	9f e3       	ldi	r25, 0x3F	; 63
    1926:	88 39       	cpi	r24, 0x98	; 152
    1928:	20 f0       	brcs	.+8      	; 0x1932 <log+0x3c>
    192a:	80 3e       	cpi	r24, 0xE0	; 224
    192c:	30 f0       	brcs	.+12     	; 0x193a <log+0x44>
    192e:	21 96       	adiw	r28, 0x01	; 1
    1930:	8f 77       	andi	r24, 0x7F	; 127
    1932:	aa dc       	rcall	.-1708   	; 0x1288 <__addsf3>
    1934:	e9 ea       	ldi	r30, 0xA9	; 169
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <log+0x4a>
    193a:	a6 dc       	rcall	.-1716   	; 0x1288 <__addsf3>
    193c:	e6 ed       	ldi	r30, 0xD6	; 214
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	48 de       	rcall	.-880    	; 0x15d2 <__fp_powser>
    1942:	8b 01       	movw	r16, r22
    1944:	be 01       	movw	r22, r28
    1946:	ec 01       	movw	r28, r24
    1948:	fb 2e       	mov	r15, r27
    194a:	6f 57       	subi	r22, 0x7F	; 127
    194c:	71 09       	sbc	r23, r1
    194e:	75 95       	asr	r23
    1950:	77 1f       	adc	r23, r23
    1952:	88 0b       	sbc	r24, r24
    1954:	99 0b       	sbc	r25, r25
    1956:	f9 dd       	rcall	.-1038   	; 0x154a <__floatsisf>
    1958:	28 e1       	ldi	r18, 0x18	; 24
    195a:	32 e7       	ldi	r19, 0x72	; 114
    195c:	41 e3       	ldi	r20, 0x31	; 49
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	b8 de       	rcall	.-656    	; 0x16d2 <__mulsf3x>
    1962:	af 2d       	mov	r26, r15
    1964:	98 01       	movw	r18, r16
    1966:	ae 01       	movw	r20, r28
    1968:	ff 90       	pop	r15
    196a:	0f 91       	pop	r16
    196c:	1f 91       	pop	r17
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	9b dc       	rcall	.-1738   	; 0x12aa <__addsf3x>
    1974:	61 ce       	rjmp	.-830    	; 0x1638 <__fp_round>

00001976 <modf>:
    1976:	fa 01       	movw	r30, r20
    1978:	dc 01       	movw	r26, r24
    197a:	aa 0f       	add	r26, r26
    197c:	bb 1f       	adc	r27, r27
    197e:	9b 01       	movw	r18, r22
    1980:	ac 01       	movw	r20, r24
    1982:	bf 57       	subi	r27, 0x7F	; 127
    1984:	28 f4       	brcc	.+10     	; 0x1990 <modf+0x1a>
    1986:	22 27       	eor	r18, r18
    1988:	33 27       	eor	r19, r19
    198a:	44 27       	eor	r20, r20
    198c:	50 78       	andi	r21, 0x80	; 128
    198e:	1f c0       	rjmp	.+62     	; 0x19ce <modf+0x58>
    1990:	b7 51       	subi	r27, 0x17	; 23
    1992:	88 f4       	brcc	.+34     	; 0x19b6 <modf+0x40>
    1994:	ab 2f       	mov	r26, r27
    1996:	00 24       	eor	r0, r0
    1998:	46 95       	lsr	r20
    199a:	37 95       	ror	r19
    199c:	27 95       	ror	r18
    199e:	01 1c       	adc	r0, r1
    19a0:	a3 95       	inc	r26
    19a2:	d2 f3       	brmi	.-12     	; 0x1998 <modf+0x22>
    19a4:	00 20       	and	r0, r0
    19a6:	69 f0       	breq	.+26     	; 0x19c2 <modf+0x4c>
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	44 1f       	adc	r20, r20
    19ae:	b3 95       	inc	r27
    19b0:	da f3       	brmi	.-10     	; 0x19a8 <modf+0x32>
    19b2:	0d d0       	rcall	.+26     	; 0x19ce <modf+0x58>
    19b4:	68 cc       	rjmp	.-1840   	; 0x1286 <__subsf3>
    19b6:	61 30       	cpi	r22, 0x01	; 1
    19b8:	71 05       	cpc	r23, r1
    19ba:	a0 e8       	ldi	r26, 0x80	; 128
    19bc:	8a 07       	cpc	r24, r26
    19be:	b9 46       	sbci	r27, 0x69	; 105
    19c0:	30 f4       	brcc	.+12     	; 0x19ce <modf+0x58>
    19c2:	9b 01       	movw	r18, r22
    19c4:	ac 01       	movw	r20, r24
    19c6:	66 27       	eor	r22, r22
    19c8:	77 27       	eor	r23, r23
    19ca:	88 27       	eor	r24, r24
    19cc:	90 78       	andi	r25, 0x80	; 128
    19ce:	30 96       	adiw	r30, 0x00	; 0
    19d0:	21 f0       	breq	.+8      	; 0x19da <modf+0x64>
    19d2:	20 83       	st	Z, r18
    19d4:	31 83       	std	Z+1, r19	; 0x01
    19d6:	42 83       	std	Z+2, r20	; 0x02
    19d8:	53 83       	std	Z+3, r21	; 0x03
    19da:	08 95       	ret

000019dc <__fp_mpack>:
    19dc:	9f 3f       	cpi	r25, 0xFF	; 255
    19de:	31 f0       	breq	.+12     	; 0x19ec <__fp_mpack_finite+0xc>

000019e0 <__fp_mpack_finite>:
    19e0:	91 50       	subi	r25, 0x01	; 1
    19e2:	20 f4       	brcc	.+8      	; 0x19ec <__fp_mpack_finite+0xc>
    19e4:	87 95       	ror	r24
    19e6:	77 95       	ror	r23
    19e8:	67 95       	ror	r22
    19ea:	b7 95       	ror	r27
    19ec:	88 0f       	add	r24, r24
    19ee:	91 1d       	adc	r25, r1
    19f0:	96 95       	lsr	r25
    19f2:	87 95       	ror	r24
    19f4:	97 f9       	bld	r25, 7
    19f6:	08 95       	ret

000019f8 <__mulsi3>:
    19f8:	62 9f       	mul	r22, r18
    19fa:	d0 01       	movw	r26, r0
    19fc:	73 9f       	mul	r23, r19
    19fe:	f0 01       	movw	r30, r0
    1a00:	82 9f       	mul	r24, r18
    1a02:	e0 0d       	add	r30, r0
    1a04:	f1 1d       	adc	r31, r1
    1a06:	64 9f       	mul	r22, r20
    1a08:	e0 0d       	add	r30, r0
    1a0a:	f1 1d       	adc	r31, r1
    1a0c:	92 9f       	mul	r25, r18
    1a0e:	f0 0d       	add	r31, r0
    1a10:	83 9f       	mul	r24, r19
    1a12:	f0 0d       	add	r31, r0
    1a14:	74 9f       	mul	r23, r20
    1a16:	f0 0d       	add	r31, r0
    1a18:	65 9f       	mul	r22, r21
    1a1a:	f0 0d       	add	r31, r0
    1a1c:	99 27       	eor	r25, r25
    1a1e:	72 9f       	mul	r23, r18
    1a20:	b0 0d       	add	r27, r0
    1a22:	e1 1d       	adc	r30, r1
    1a24:	f9 1f       	adc	r31, r25
    1a26:	63 9f       	mul	r22, r19
    1a28:	b0 0d       	add	r27, r0
    1a2a:	e1 1d       	adc	r30, r1
    1a2c:	f9 1f       	adc	r31, r25
    1a2e:	bd 01       	movw	r22, r26
    1a30:	cf 01       	movw	r24, r30
    1a32:	11 24       	eor	r1, r1
    1a34:	08 95       	ret

00001a36 <__udivmodhi4>:
    1a36:	aa 1b       	sub	r26, r26
    1a38:	bb 1b       	sub	r27, r27
    1a3a:	51 e1       	ldi	r21, 0x11	; 17
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <__udivmodhi4_ep>

00001a3e <__udivmodhi4_loop>:
    1a3e:	aa 1f       	adc	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	a6 17       	cp	r26, r22
    1a44:	b7 07       	cpc	r27, r23
    1a46:	10 f0       	brcs	.+4      	; 0x1a4c <__udivmodhi4_ep>
    1a48:	a6 1b       	sub	r26, r22
    1a4a:	b7 0b       	sbc	r27, r23

00001a4c <__udivmodhi4_ep>:
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	5a 95       	dec	r21
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <__udivmodhi4_loop>
    1a54:	80 95       	com	r24
    1a56:	90 95       	com	r25
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	08 95       	ret

00001a5e <__udivmodsi4>:
    1a5e:	a1 e2       	ldi	r26, 0x21	; 33
    1a60:	1a 2e       	mov	r1, r26
    1a62:	aa 1b       	sub	r26, r26
    1a64:	bb 1b       	sub	r27, r27
    1a66:	fd 01       	movw	r30, r26
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <__udivmodsi4_ep>

00001a6a <__udivmodsi4_loop>:
    1a6a:	aa 1f       	adc	r26, r26
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	ee 1f       	adc	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	a2 17       	cp	r26, r18
    1a74:	b3 07       	cpc	r27, r19
    1a76:	e4 07       	cpc	r30, r20
    1a78:	f5 07       	cpc	r31, r21
    1a7a:	20 f0       	brcs	.+8      	; 0x1a84 <__udivmodsi4_ep>
    1a7c:	a2 1b       	sub	r26, r18
    1a7e:	b3 0b       	sbc	r27, r19
    1a80:	e4 0b       	sbc	r30, r20
    1a82:	f5 0b       	sbc	r31, r21

00001a84 <__udivmodsi4_ep>:
    1a84:	66 1f       	adc	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	1a 94       	dec	r1
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <__udivmodsi4_loop>
    1a90:	60 95       	com	r22
    1a92:	70 95       	com	r23
    1a94:	80 95       	com	r24
    1a96:	90 95       	com	r25
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	bd 01       	movw	r22, r26
    1a9e:	cf 01       	movw	r24, r30
    1aa0:	08 95       	ret

00001aa2 <__divmodsi4>:
    1aa2:	97 fb       	bst	r25, 7
    1aa4:	09 2e       	mov	r0, r25
    1aa6:	05 26       	eor	r0, r21
    1aa8:	0e d0       	rcall	.+28     	; 0x1ac6 <__divmodsi4_neg1>
    1aaa:	57 fd       	sbrc	r21, 7
    1aac:	04 d0       	rcall	.+8      	; 0x1ab6 <__divmodsi4_neg2>
    1aae:	d7 df       	rcall	.-82     	; 0x1a5e <__udivmodsi4>
    1ab0:	0a d0       	rcall	.+20     	; 0x1ac6 <__divmodsi4_neg1>
    1ab2:	00 1c       	adc	r0, r0
    1ab4:	38 f4       	brcc	.+14     	; 0x1ac4 <__divmodsi4_exit>

00001ab6 <__divmodsi4_neg2>:
    1ab6:	50 95       	com	r21
    1ab8:	40 95       	com	r20
    1aba:	30 95       	com	r19
    1abc:	21 95       	neg	r18
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ac2:	5f 4f       	sbci	r21, 0xFF	; 255

00001ac4 <__divmodsi4_exit>:
    1ac4:	08 95       	ret

00001ac6 <__divmodsi4_neg1>:
    1ac6:	f6 f7       	brtc	.-4      	; 0x1ac4 <__divmodsi4_exit>
    1ac8:	90 95       	com	r25
    1aca:	80 95       	com	r24
    1acc:	70 95       	com	r23
    1ace:	61 95       	neg	r22
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	08 95       	ret

00001ad8 <dtostrf>:
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	f2 2f       	mov	r31, r18
    1ae2:	f0 2e       	mov	r15, r16
    1ae4:	47 fd       	sbrc	r20, 7
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <dtostrf+0x14>
    1ae8:	e4 e0       	ldi	r30, 0x04	; 4
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <dtostrf+0x16>
    1aec:	e4 e1       	ldi	r30, 0x14	; 20
    1aee:	24 2f       	mov	r18, r20
    1af0:	33 27       	eor	r19, r19
    1af2:	27 fd       	sbrc	r18, 7
    1af4:	30 95       	com	r19
    1af6:	37 ff       	sbrs	r19, 7
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <dtostrf+0x28>
    1afa:	30 95       	com	r19
    1afc:	21 95       	neg	r18
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	4f 2d       	mov	r20, r15
    1b02:	51 2f       	mov	r21, r17
    1b04:	0f 2f       	mov	r16, r31
    1b06:	ee 2e       	mov	r14, r30
    1b08:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <dtoa_prf>
    1b0c:	8f 2d       	mov	r24, r15
    1b0e:	91 2f       	mov	r25, r17
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	08 95       	ret

00001b1a <itoa>:
    1b1a:	fb 01       	movw	r30, r22
    1b1c:	9f 01       	movw	r18, r30
    1b1e:	e8 94       	clt
    1b20:	42 30       	cpi	r20, 0x02	; 2
    1b22:	c4 f0       	brlt	.+48     	; 0x1b54 <itoa+0x3a>
    1b24:	45 32       	cpi	r20, 0x25	; 37
    1b26:	b4 f4       	brge	.+44     	; 0x1b54 <itoa+0x3a>
    1b28:	4a 30       	cpi	r20, 0x0A	; 10
    1b2a:	29 f4       	brne	.+10     	; 0x1b36 <itoa+0x1c>
    1b2c:	97 fb       	bst	r25, 7
    1b2e:	1e f4       	brtc	.+6      	; 0x1b36 <itoa+0x1c>
    1b30:	90 95       	com	r25
    1b32:	81 95       	neg	r24
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	64 2f       	mov	r22, r20
    1b38:	77 27       	eor	r23, r23
    1b3a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__udivmodhi4>
    1b3e:	80 5d       	subi	r24, 0xD0	; 208
    1b40:	8a 33       	cpi	r24, 0x3A	; 58
    1b42:	0c f0       	brlt	.+2      	; 0x1b46 <itoa+0x2c>
    1b44:	89 5d       	subi	r24, 0xD9	; 217
    1b46:	81 93       	st	Z+, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	a1 f7       	brne	.-24     	; 0x1b36 <itoa+0x1c>
    1b4e:	16 f4       	brtc	.+4      	; 0x1b54 <itoa+0x3a>
    1b50:	5d e2       	ldi	r21, 0x2D	; 45
    1b52:	51 93       	st	Z+, r21
    1b54:	10 82       	st	Z, r1
    1b56:	c9 01       	movw	r24, r18
    1b58:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <strrev>

00001b5c <ltoa>:
    1b5c:	fa 01       	movw	r30, r20
    1b5e:	cf 93       	push	r28
    1b60:	ff 93       	push	r31
    1b62:	ef 93       	push	r30
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	44 f1       	brlt	.+80     	; 0x1bb8 <ltoa+0x5c>
    1b68:	25 32       	cpi	r18, 0x25	; 37
    1b6a:	34 f5       	brge	.+76     	; 0x1bb8 <ltoa+0x5c>
    1b6c:	c2 2f       	mov	r28, r18
    1b6e:	e8 94       	clt
    1b70:	ca 30       	cpi	r28, 0x0A	; 10
    1b72:	49 f4       	brne	.+18     	; 0x1b86 <ltoa+0x2a>
    1b74:	97 fb       	bst	r25, 7
    1b76:	3e f4       	brtc	.+14     	; 0x1b86 <ltoa+0x2a>
    1b78:	90 95       	com	r25
    1b7a:	80 95       	com	r24
    1b7c:	70 95       	com	r23
    1b7e:	61 95       	neg	r22
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255
    1b82:	8f 4f       	sbci	r24, 0xFF	; 255
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	2c 2f       	mov	r18, r28
    1b88:	33 27       	eor	r19, r19
    1b8a:	44 27       	eor	r20, r20
    1b8c:	55 27       	eor	r21, r21
    1b8e:	ff 93       	push	r31
    1b90:	ef 93       	push	r30
    1b92:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__udivmodsi4>
    1b96:	ef 91       	pop	r30
    1b98:	ff 91       	pop	r31
    1b9a:	60 5d       	subi	r22, 0xD0	; 208
    1b9c:	6a 33       	cpi	r22, 0x3A	; 58
    1b9e:	0c f0       	brlt	.+2      	; 0x1ba2 <ltoa+0x46>
    1ba0:	69 5d       	subi	r22, 0xD9	; 217
    1ba2:	61 93       	st	Z+, r22
    1ba4:	b9 01       	movw	r22, r18
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	60 50       	subi	r22, 0x00	; 0
    1baa:	70 40       	sbci	r23, 0x00	; 0
    1bac:	80 40       	sbci	r24, 0x00	; 0
    1bae:	90 40       	sbci	r25, 0x00	; 0
    1bb0:	51 f7       	brne	.-44     	; 0x1b86 <ltoa+0x2a>
    1bb2:	16 f4       	brtc	.+4      	; 0x1bb8 <ltoa+0x5c>
    1bb4:	cd e2       	ldi	r28, 0x2D	; 45
    1bb6:	c1 93       	st	Z+, r28
    1bb8:	10 82       	st	Z, r1
    1bba:	8f 91       	pop	r24
    1bbc:	9f 91       	pop	r25
    1bbe:	cf 91       	pop	r28
    1bc0:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <strrev>

00001bc4 <dtoa_prf>:
    1bc4:	a9 e0       	ldi	r26, 0x09	; 9
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    1bca:	fd e0       	ldi	r31, 0x0D	; 13
    1bcc:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__prologue_saves__+0x8>
    1bd0:	6a 01       	movw	r12, r20
    1bd2:	12 2f       	mov	r17, r18
    1bd4:	a0 2e       	mov	r10, r16
    1bd6:	be 2c       	mov	r11, r14
    1bd8:	2b e3       	ldi	r18, 0x3B	; 59
    1bda:	20 17       	cp	r18, r16
    1bdc:	18 f4       	brcc	.+6      	; 0x1be4 <dtoa_prf+0x20>
    1bde:	2c e3       	ldi	r18, 0x3C	; 60
    1be0:	92 2e       	mov	r9, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <dtoa_prf+0x24>
    1be4:	90 2e       	mov	r9, r16
    1be6:	93 94       	inc	r9
    1be8:	ae 01       	movw	r20, r28
    1bea:	4f 5f       	subi	r20, 0xFF	; 255
    1bec:	5f 4f       	sbci	r21, 0xFF	; 255
    1bee:	27 e0       	ldi	r18, 0x07	; 7
    1bf0:	09 2d       	mov	r16, r9
    1bf2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__ftoa_engine>
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	e8 2e       	mov	r14, r24
    1bfc:	ff 24       	eor	r15, r15
    1bfe:	c7 01       	movw	r24, r14
    1c00:	89 70       	andi	r24, 0x09	; 9
    1c02:	90 70       	andi	r25, 0x00	; 0
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <dtoa_prf+0x48>
    1c08:	ad e2       	ldi	r26, 0x2D	; 45
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <dtoa_prf+0x5a>
    1c0c:	b1 fe       	sbrs	r11, 1
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <dtoa_prf+0x50>
    1c10:	ab e2       	ldi	r26, 0x2B	; 43
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e <dtoa_prf+0x5a>
    1c14:	b0 fc       	sbrc	r11, 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <dtoa_prf+0x58>
    1c18:	a0 e0       	ldi	r26, 0x00	; 0
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <dtoa_prf+0x5a>
    1c1c:	a0 e2       	ldi	r26, 0x20	; 32
    1c1e:	e3 fe       	sbrs	r14, 3
    1c20:	3b c0       	rjmp	.+118    	; 0x1c98 <dtoa_prf+0xd4>
    1c22:	aa 23       	and	r26, r26
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <dtoa_prf+0x66>
    1c26:	23 e0       	ldi	r18, 0x03	; 3
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <dtoa_prf+0x68>
    1c2a:	24 e0       	ldi	r18, 0x04	; 4
    1c2c:	21 17       	cp	r18, r17
    1c2e:	10 f0       	brcs	.+4      	; 0x1c34 <dtoa_prf+0x70>
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <dtoa_prf+0x74>
    1c34:	12 1b       	sub	r17, r18
    1c36:	21 2f       	mov	r18, r17
    1c38:	eb 2c       	mov	r14, r11
    1c3a:	b4 fe       	sbrs	r11, 4
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <dtoa_prf+0x7e>
    1c3e:	32 2f       	mov	r19, r18
    1c40:	0a c0       	rjmp	.+20     	; 0x1c56 <dtoa_prf+0x92>
    1c42:	f6 01       	movw	r30, r12
    1c44:	32 2f       	mov	r19, r18
    1c46:	80 e2       	ldi	r24, 0x20	; 32
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <dtoa_prf+0x8a>
    1c4a:	81 93       	st	Z+, r24
    1c4c:	31 50       	subi	r19, 0x01	; 1
    1c4e:	33 23       	and	r19, r19
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <dtoa_prf+0x86>
    1c52:	c2 0e       	add	r12, r18
    1c54:	d1 1c       	adc	r13, r1
    1c56:	aa 23       	and	r26, r26
    1c58:	19 f0       	breq	.+6      	; 0x1c60 <dtoa_prf+0x9c>
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	a1 93       	st	Z+, r26
    1c5e:	6f 01       	movw	r12, r30
    1c60:	f6 01       	movw	r30, r12
    1c62:	31 96       	adiw	r30, 0x01	; 1
    1c64:	e2 fe       	sbrs	r14, 2
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <dtoa_prf+0xae>
    1c68:	9e e4       	ldi	r25, 0x4E	; 78
    1c6a:	d6 01       	movw	r26, r12
    1c6c:	9c 93       	st	X, r25
    1c6e:	81 e4       	ldi	r24, 0x41	; 65
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <dtoa_prf+0xb6>
    1c72:	9e e6       	ldi	r25, 0x6E	; 110
    1c74:	d6 01       	movw	r26, r12
    1c76:	9c 93       	st	X, r25
    1c78:	81 e6       	ldi	r24, 0x61	; 97
    1c7a:	11 96       	adiw	r26, 0x01	; 1
    1c7c:	8c 93       	st	X, r24
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	32 96       	adiw	r30, 0x02	; 2
    1c82:	df 01       	movw	r26, r30
    1c84:	83 2f       	mov	r24, r19
    1c86:	90 e2       	ldi	r25, 0x20	; 32
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <dtoa_prf+0xca>
    1c8a:	9d 93       	st	X+, r25
    1c8c:	81 50       	subi	r24, 0x01	; 1
    1c8e:	88 23       	and	r24, r24
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <dtoa_prf+0xc6>
    1c92:	e3 0f       	add	r30, r19
    1c94:	f1 1d       	adc	r31, r1
    1c96:	40 c0       	rjmp	.+128    	; 0x1d18 <dtoa_prf+0x154>
    1c98:	e2 fe       	sbrs	r14, 2
    1c9a:	42 c0       	rjmp	.+132    	; 0x1d20 <dtoa_prf+0x15c>
    1c9c:	aa 23       	and	r26, r26
    1c9e:	11 f4       	brne	.+4      	; 0x1ca4 <dtoa_prf+0xe0>
    1ca0:	23 e0       	ldi	r18, 0x03	; 3
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <dtoa_prf+0xe2>
    1ca4:	24 e0       	ldi	r18, 0x04	; 4
    1ca6:	21 17       	cp	r18, r17
    1ca8:	10 f0       	brcs	.+4      	; 0x1cae <dtoa_prf+0xea>
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <dtoa_prf+0xee>
    1cae:	12 1b       	sub	r17, r18
    1cb0:	21 2f       	mov	r18, r17
    1cb2:	eb 2c       	mov	r14, r11
    1cb4:	b4 fe       	sbrs	r11, 4
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <dtoa_prf+0xf8>
    1cb8:	92 2f       	mov	r25, r18
    1cba:	0a c0       	rjmp	.+20     	; 0x1cd0 <dtoa_prf+0x10c>
    1cbc:	f6 01       	movw	r30, r12
    1cbe:	92 2f       	mov	r25, r18
    1cc0:	80 e2       	ldi	r24, 0x20	; 32
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <dtoa_prf+0x104>
    1cc4:	81 93       	st	Z+, r24
    1cc6:	91 50       	subi	r25, 0x01	; 1
    1cc8:	99 23       	and	r25, r25
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <dtoa_prf+0x100>
    1ccc:	c2 0e       	add	r12, r18
    1cce:	d1 1c       	adc	r13, r1
    1cd0:	aa 23       	and	r26, r26
    1cd2:	19 f0       	breq	.+6      	; 0x1cda <dtoa_prf+0x116>
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	a1 93       	st	Z+, r26
    1cd8:	6f 01       	movw	r12, r30
    1cda:	f6 01       	movw	r30, r12
    1cdc:	31 96       	adiw	r30, 0x01	; 1
    1cde:	e2 fe       	sbrs	r14, 2
    1ce0:	08 c0       	rjmp	.+16     	; 0x1cf2 <dtoa_prf+0x12e>
    1ce2:	89 e4       	ldi	r24, 0x49	; 73
    1ce4:	d6 01       	movw	r26, r12
    1ce6:	8c 93       	st	X, r24
    1ce8:	8e e4       	ldi	r24, 0x4E	; 78
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	8c 93       	st	X, r24
    1cee:	86 e4       	ldi	r24, 0x46	; 70
    1cf0:	07 c0       	rjmp	.+14     	; 0x1d00 <dtoa_prf+0x13c>
    1cf2:	89 e6       	ldi	r24, 0x69	; 105
    1cf4:	d6 01       	movw	r26, r12
    1cf6:	8c 93       	st	X, r24
    1cf8:	8e e6       	ldi	r24, 0x6E	; 110
    1cfa:	11 96       	adiw	r26, 0x01	; 1
    1cfc:	8c 93       	st	X, r24
    1cfe:	86 e6       	ldi	r24, 0x66	; 102
    1d00:	81 83       	std	Z+1, r24	; 0x01
    1d02:	32 96       	adiw	r30, 0x02	; 2
    1d04:	df 01       	movw	r26, r30
    1d06:	89 2f       	mov	r24, r25
    1d08:	20 e2       	ldi	r18, 0x20	; 32
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <dtoa_prf+0x14c>
    1d0c:	2d 93       	st	X+, r18
    1d0e:	81 50       	subi	r24, 0x01	; 1
    1d10:	88 23       	and	r24, r24
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <dtoa_prf+0x148>
    1d14:	e9 0f       	add	r30, r25
    1d16:	f1 1d       	adc	r31, r1
    1d18:	10 82       	st	Z, r1
    1d1a:	2e ef       	ldi	r18, 0xFE	; 254
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	af c0       	rjmp	.+350    	; 0x1e7e <dtoa_prf+0x2ba>
    1d20:	16 16       	cp	r1, r22
    1d22:	17 06       	cpc	r1, r23
    1d24:	1c f0       	brlt	.+6      	; 0x1d2c <dtoa_prf+0x168>
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <dtoa_prf+0x16e>
    1d2c:	ab 01       	movw	r20, r22
    1d2e:	4f 5f       	subi	r20, 0xFF	; 255
    1d30:	5f 4f       	sbci	r21, 0xFF	; 255
    1d32:	aa 20       	and	r10, r10
    1d34:	19 f4       	brne	.+6      	; 0x1d3c <dtoa_prf+0x178>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <dtoa_prf+0x17e>
    1d3c:	8a 2d       	mov	r24, r10
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	aa 23       	and	r26, r26
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <dtoa_prf+0x18a>
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	24 0f       	add	r18, r20
    1d50:	35 1f       	adc	r19, r21
    1d52:	28 0f       	add	r18, r24
    1d54:	39 1f       	adc	r19, r25
    1d56:	81 2f       	mov	r24, r17
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	28 17       	cp	r18, r24
    1d5c:	39 07       	cpc	r19, r25
    1d5e:	14 f0       	brlt	.+4      	; 0x1d64 <dtoa_prf+0x1a0>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <dtoa_prf+0x1a4>
    1d64:	12 1b       	sub	r17, r18
    1d66:	21 2f       	mov	r18, r17
    1d68:	4b 2d       	mov	r20, r11
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	ca 01       	movw	r24, r20
    1d6e:	80 71       	andi	r24, 0x10	; 16
    1d70:	90 70       	andi	r25, 0x00	; 0
    1d72:	b4 fc       	sbrc	r11, 4
    1d74:	0d c0       	rjmp	.+26     	; 0x1d90 <dtoa_prf+0x1cc>
    1d76:	b3 fc       	sbrc	r11, 3
    1d78:	0b c0       	rjmp	.+22     	; 0x1d90 <dtoa_prf+0x1cc>
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	32 2f       	mov	r19, r18
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <dtoa_prf+0x1c2>
    1d82:	41 93       	st	Z+, r20
    1d84:	31 50       	subi	r19, 0x01	; 1
    1d86:	33 23       	and	r19, r19
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <dtoa_prf+0x1be>
    1d8a:	c2 0e       	add	r12, r18
    1d8c:	d1 1c       	adc	r13, r1
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <dtoa_prf+0x1ce>
    1d90:	32 2f       	mov	r19, r18
    1d92:	aa 23       	and	r26, r26
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <dtoa_prf+0x1d8>
    1d96:	f6 01       	movw	r30, r12
    1d98:	a1 93       	st	Z+, r26
    1d9a:	6f 01       	movw	r12, r30
    1d9c:	89 2b       	or	r24, r25
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <dtoa_prf+0x1e0>
    1da0:	13 2f       	mov	r17, r19
    1da2:	0a c0       	rjmp	.+20     	; 0x1db8 <dtoa_prf+0x1f4>
    1da4:	f6 01       	movw	r30, r12
    1da6:	13 2f       	mov	r17, r19
    1da8:	80 e3       	ldi	r24, 0x30	; 48
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <dtoa_prf+0x1ec>
    1dac:	81 93       	st	Z+, r24
    1dae:	11 50       	subi	r17, 0x01	; 1
    1db0:	11 23       	and	r17, r17
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <dtoa_prf+0x1e8>
    1db4:	c3 0e       	add	r12, r19
    1db6:	d1 1c       	adc	r13, r1
    1db8:	09 2d       	mov	r16, r9
    1dba:	06 0f       	add	r16, r22
    1dbc:	ba 80       	ldd	r11, Y+2	; 0x02
    1dbe:	90 e1       	ldi	r25, 0x10	; 16
    1dc0:	89 2e       	mov	r8, r25
    1dc2:	91 2c       	mov	r9, r1
    1dc4:	8e 20       	and	r8, r14
    1dc6:	9f 20       	and	r9, r15
    1dc8:	e4 fe       	sbrs	r14, 4
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <dtoa_prf+0x210>
    1dcc:	f1 e3       	ldi	r31, 0x31	; 49
    1dce:	bf 16       	cp	r11, r31
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <dtoa_prf+0x210>
    1dd2:	01 50       	subi	r16, 0x01	; 1
    1dd4:	10 16       	cp	r1, r16
    1dd6:	14 f0       	brlt	.+4      	; 0x1ddc <dtoa_prf+0x218>
    1dd8:	01 e0       	ldi	r16, 0x01	; 1
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <dtoa_prf+0x21e>
    1ddc:	09 30       	cpi	r16, 0x09	; 9
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <dtoa_prf+0x21e>
    1de0:	08 e0       	ldi	r16, 0x08	; 8
    1de2:	9b 01       	movw	r18, r22
    1de4:	77 ff       	sbrs	r23, 7
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <dtoa_prf+0x228>
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	cb 01       	movw	r24, r22
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	82 1b       	sub	r24, r18
    1df2:	93 0b       	sbc	r25, r19
    1df4:	fe 01       	movw	r30, r28
    1df6:	31 96       	adiw	r30, 0x01	; 1
    1df8:	e8 0f       	add	r30, r24
    1dfa:	f9 1f       	adc	r31, r25
    1dfc:	8e e2       	ldi	r24, 0x2E	; 46
    1dfe:	f8 2e       	mov	r15, r24
    1e00:	3b 01       	movw	r6, r22
    1e02:	60 1a       	sub	r6, r16
    1e04:	71 08       	sbc	r7, r1
    1e06:	8a 2d       	mov	r24, r10
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	44 27       	eor	r20, r20
    1e0c:	55 27       	eor	r21, r21
    1e0e:	48 1b       	sub	r20, r24
    1e10:	59 0b       	sbc	r21, r25
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	2f 3f       	cpi	r18, 0xFF	; 255
    1e16:	38 07       	cpc	r19, r24
    1e18:	19 f4       	brne	.+6      	; 0x1e20 <dtoa_prf+0x25c>
    1e1a:	d6 01       	movw	r26, r12
    1e1c:	fd 92       	st	X+, r15
    1e1e:	6d 01       	movw	r12, r26
    1e20:	62 17       	cp	r22, r18
    1e22:	73 07       	cpc	r23, r19
    1e24:	2c f0       	brlt	.+10     	; 0x1e30 <dtoa_prf+0x26c>
    1e26:	62 16       	cp	r6, r18
    1e28:	73 06       	cpc	r7, r19
    1e2a:	14 f4       	brge	.+4      	; 0x1e30 <dtoa_prf+0x26c>
    1e2c:	80 81       	ld	r24, Z
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <dtoa_prf+0x26e>
    1e30:	80 e3       	ldi	r24, 0x30	; 48
    1e32:	21 50       	subi	r18, 0x01	; 1
    1e34:	30 40       	sbci	r19, 0x00	; 0
    1e36:	31 96       	adiw	r30, 0x01	; 1
    1e38:	24 17       	cp	r18, r20
    1e3a:	35 07       	cpc	r19, r21
    1e3c:	24 f0       	brlt	.+8      	; 0x1e46 <dtoa_prf+0x282>
    1e3e:	d6 01       	movw	r26, r12
    1e40:	8d 93       	st	X+, r24
    1e42:	6d 01       	movw	r12, r26
    1e44:	e6 cf       	rjmp	.-52     	; 0x1e12 <dtoa_prf+0x24e>
    1e46:	26 17       	cp	r18, r22
    1e48:	37 07       	cpc	r19, r23
    1e4a:	49 f4       	brne	.+18     	; 0x1e5e <dtoa_prf+0x29a>
    1e4c:	b5 e3       	ldi	r27, 0x35	; 53
    1e4e:	bb 15       	cp	r27, r11
    1e50:	28 f0       	brcs	.+10     	; 0x1e5c <dtoa_prf+0x298>
    1e52:	bb 16       	cp	r11, r27
    1e54:	21 f4       	brne	.+8      	; 0x1e5e <dtoa_prf+0x29a>
    1e56:	81 14       	cp	r8, r1
    1e58:	91 04       	cpc	r9, r1
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <dtoa_prf+0x29a>
    1e5c:	81 e3       	ldi	r24, 0x31	; 49
    1e5e:	f6 01       	movw	r30, r12
    1e60:	81 93       	st	Z+, r24
    1e62:	d6 01       	movw	r26, r12
    1e64:	81 2f       	mov	r24, r17
    1e66:	90 e2       	ldi	r25, 0x20	; 32
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <dtoa_prf+0x2aa>
    1e6a:	9c 93       	st	X, r25
    1e6c:	81 50       	subi	r24, 0x01	; 1
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	88 23       	and	r24, r24
    1e72:	d9 f7       	brne	.-10     	; 0x1e6a <dtoa_prf+0x2a6>
    1e74:	e1 0f       	add	r30, r17
    1e76:	f1 1d       	adc	r31, r1
    1e78:	10 82       	st	Z, r1
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	c9 01       	movw	r24, r18
    1e80:	29 96       	adiw	r28, 0x09	; 9
    1e82:	ee e0       	ldi	r30, 0x0E	; 14
    1e84:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__epilogue_restores__+0x8>

00001e88 <__ftoa_engine>:
    1e88:	28 30       	cpi	r18, 0x08	; 8
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <__ftoa_engine+0x6>
    1e8c:	27 e0       	ldi	r18, 0x07	; 7
    1e8e:	33 27       	eor	r19, r19
    1e90:	da 01       	movw	r26, r20
    1e92:	99 0f       	add	r25, r25
    1e94:	31 1d       	adc	r19, r1
    1e96:	87 fd       	sbrc	r24, 7
    1e98:	91 60       	ori	r25, 0x01	; 1
    1e9a:	00 96       	adiw	r24, 0x00	; 0
    1e9c:	61 05       	cpc	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <__ftoa_engine+0x28>
    1ea2:	32 60       	ori	r19, 0x02	; 2
    1ea4:	2e 5f       	subi	r18, 0xFE	; 254
    1ea6:	3d 93       	st	X+, r19
    1ea8:	30 e3       	ldi	r19, 0x30	; 48
    1eaa:	2a 95       	dec	r18
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <__ftoa_engine+0x1e>
    1eae:	08 95       	ret
    1eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb2:	30 f0       	brcs	.+12     	; 0x1ec0 <__ftoa_engine+0x38>
    1eb4:	80 38       	cpi	r24, 0x80	; 128
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	61 05       	cpc	r22, r1
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <__ftoa_engine+0x36>
    1ebc:	3c 5f       	subi	r19, 0xFC	; 252
    1ebe:	3c 5f       	subi	r19, 0xFC	; 252
    1ec0:	3d 93       	st	X+, r19
    1ec2:	91 30       	cpi	r25, 0x01	; 1
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <__ftoa_engine+0x40>
    1ec6:	80 68       	ori	r24, 0x80	; 128
    1ec8:	91 1d       	adc	r25, r1
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	1f 93       	push	r17
    1ed0:	0f 93       	push	r16
    1ed2:	ff 92       	push	r15
    1ed4:	ef 92       	push	r14
    1ed6:	19 2f       	mov	r17, r25
    1ed8:	98 7f       	andi	r25, 0xF8	; 248
    1eda:	96 95       	lsr	r25
    1edc:	e9 2f       	mov	r30, r25
    1ede:	96 95       	lsr	r25
    1ee0:	96 95       	lsr	r25
    1ee2:	e9 0f       	add	r30, r25
    1ee4:	ff 27       	eor	r31, r31
    1ee6:	e3 5a       	subi	r30, 0xA3	; 163
    1ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eea:	99 27       	eor	r25, r25
    1eec:	33 27       	eor	r19, r19
    1eee:	ee 24       	eor	r14, r14
    1ef0:	ff 24       	eor	r15, r15
    1ef2:	a7 01       	movw	r20, r14
    1ef4:	e7 01       	movw	r28, r14
    1ef6:	05 90       	lpm	r0, Z+
    1ef8:	08 94       	sec
    1efa:	07 94       	ror	r0
    1efc:	28 f4       	brcc	.+10     	; 0x1f08 <__ftoa_engine+0x80>
    1efe:	36 0f       	add	r19, r22
    1f00:	e7 1e       	adc	r14, r23
    1f02:	f8 1e       	adc	r15, r24
    1f04:	49 1f       	adc	r20, r25
    1f06:	51 1d       	adc	r21, r1
    1f08:	66 0f       	add	r22, r22
    1f0a:	77 1f       	adc	r23, r23
    1f0c:	88 1f       	adc	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	06 94       	lsr	r0
    1f12:	a1 f7       	brne	.-24     	; 0x1efc <__ftoa_engine+0x74>
    1f14:	05 90       	lpm	r0, Z+
    1f16:	07 94       	ror	r0
    1f18:	28 f4       	brcc	.+10     	; 0x1f24 <__ftoa_engine+0x9c>
    1f1a:	e7 0e       	add	r14, r23
    1f1c:	f8 1e       	adc	r15, r24
    1f1e:	49 1f       	adc	r20, r25
    1f20:	56 1f       	adc	r21, r22
    1f22:	c1 1d       	adc	r28, r1
    1f24:	77 0f       	add	r23, r23
    1f26:	88 1f       	adc	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	66 1f       	adc	r22, r22
    1f2c:	06 94       	lsr	r0
    1f2e:	a1 f7       	brne	.-24     	; 0x1f18 <__ftoa_engine+0x90>
    1f30:	05 90       	lpm	r0, Z+
    1f32:	07 94       	ror	r0
    1f34:	28 f4       	brcc	.+10     	; 0x1f40 <__ftoa_engine+0xb8>
    1f36:	f8 0e       	add	r15, r24
    1f38:	49 1f       	adc	r20, r25
    1f3a:	56 1f       	adc	r21, r22
    1f3c:	c7 1f       	adc	r28, r23
    1f3e:	d1 1d       	adc	r29, r1
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	66 1f       	adc	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	06 94       	lsr	r0
    1f4a:	a1 f7       	brne	.-24     	; 0x1f34 <__ftoa_engine+0xac>
    1f4c:	05 90       	lpm	r0, Z+
    1f4e:	07 94       	ror	r0
    1f50:	20 f4       	brcc	.+8      	; 0x1f5a <__ftoa_engine+0xd2>
    1f52:	49 0f       	add	r20, r25
    1f54:	56 1f       	adc	r21, r22
    1f56:	c7 1f       	adc	r28, r23
    1f58:	d8 1f       	adc	r29, r24
    1f5a:	99 0f       	add	r25, r25
    1f5c:	66 1f       	adc	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	06 94       	lsr	r0
    1f64:	a9 f7       	brne	.-22     	; 0x1f50 <__ftoa_engine+0xc8>
    1f66:	84 91       	lpm	r24, Z+
    1f68:	10 95       	com	r17
    1f6a:	17 70       	andi	r17, 0x07	; 7
    1f6c:	41 f0       	breq	.+16     	; 0x1f7e <__ftoa_engine+0xf6>
    1f6e:	d6 95       	lsr	r29
    1f70:	c7 95       	ror	r28
    1f72:	57 95       	ror	r21
    1f74:	47 95       	ror	r20
    1f76:	f7 94       	ror	r15
    1f78:	e7 94       	ror	r14
    1f7a:	1a 95       	dec	r17
    1f7c:	c1 f7       	brne	.-16     	; 0x1f6e <__ftoa_engine+0xe6>
    1f7e:	e3 e0       	ldi	r30, 0x03	; 3
    1f80:	f1 e0       	ldi	r31, 0x01	; 1
    1f82:	68 94       	set
    1f84:	15 90       	lpm	r1, Z+
    1f86:	15 91       	lpm	r17, Z+
    1f88:	35 91       	lpm	r19, Z+
    1f8a:	65 91       	lpm	r22, Z+
    1f8c:	95 91       	lpm	r25, Z+
    1f8e:	05 90       	lpm	r0, Z+
    1f90:	7f e2       	ldi	r23, 0x2F	; 47
    1f92:	73 95       	inc	r23
    1f94:	e1 18       	sub	r14, r1
    1f96:	f1 0a       	sbc	r15, r17
    1f98:	43 0b       	sbc	r20, r19
    1f9a:	56 0b       	sbc	r21, r22
    1f9c:	c9 0b       	sbc	r28, r25
    1f9e:	d0 09       	sbc	r29, r0
    1fa0:	c0 f7       	brcc	.-16     	; 0x1f92 <__ftoa_engine+0x10a>
    1fa2:	e1 0c       	add	r14, r1
    1fa4:	f1 1e       	adc	r15, r17
    1fa6:	43 1f       	adc	r20, r19
    1fa8:	56 1f       	adc	r21, r22
    1faa:	c9 1f       	adc	r28, r25
    1fac:	d0 1d       	adc	r29, r0
    1fae:	7e f4       	brtc	.+30     	; 0x1fce <__ftoa_engine+0x146>
    1fb0:	70 33       	cpi	r23, 0x30	; 48
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <__ftoa_engine+0x130>
    1fb4:	8a 95       	dec	r24
    1fb6:	e6 cf       	rjmp	.-52     	; 0x1f84 <__ftoa_engine+0xfc>
    1fb8:	e8 94       	clt
    1fba:	01 50       	subi	r16, 0x01	; 1
    1fbc:	30 f0       	brcs	.+12     	; 0x1fca <__ftoa_engine+0x142>
    1fbe:	08 0f       	add	r16, r24
    1fc0:	0a f4       	brpl	.+2      	; 0x1fc4 <__ftoa_engine+0x13c>
    1fc2:	00 27       	eor	r16, r16
    1fc4:	02 17       	cp	r16, r18
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <__ftoa_engine+0x142>
    1fc8:	20 2f       	mov	r18, r16
    1fca:	23 95       	inc	r18
    1fcc:	02 2f       	mov	r16, r18
    1fce:	7a 33       	cpi	r23, 0x3A	; 58
    1fd0:	28 f0       	brcs	.+10     	; 0x1fdc <__ftoa_engine+0x154>
    1fd2:	79 e3       	ldi	r23, 0x39	; 57
    1fd4:	7d 93       	st	X+, r23
    1fd6:	2a 95       	dec	r18
    1fd8:	e9 f7       	brne	.-6      	; 0x1fd4 <__ftoa_engine+0x14c>
    1fda:	10 c0       	rjmp	.+32     	; 0x1ffc <__ftoa_engine+0x174>
    1fdc:	7d 93       	st	X+, r23
    1fde:	2a 95       	dec	r18
    1fe0:	89 f6       	brne	.-94     	; 0x1f84 <__ftoa_engine+0xfc>
    1fe2:	06 94       	lsr	r0
    1fe4:	97 95       	ror	r25
    1fe6:	67 95       	ror	r22
    1fe8:	37 95       	ror	r19
    1fea:	17 95       	ror	r17
    1fec:	17 94       	ror	r1
    1fee:	e1 18       	sub	r14, r1
    1ff0:	f1 0a       	sbc	r15, r17
    1ff2:	43 0b       	sbc	r20, r19
    1ff4:	56 0b       	sbc	r21, r22
    1ff6:	c9 0b       	sbc	r28, r25
    1ff8:	d0 09       	sbc	r29, r0
    1ffa:	98 f0       	brcs	.+38     	; 0x2022 <__ftoa_engine+0x19a>
    1ffc:	23 95       	inc	r18
    1ffe:	7e 91       	ld	r23, -X
    2000:	73 95       	inc	r23
    2002:	7a 33       	cpi	r23, 0x3A	; 58
    2004:	08 f0       	brcs	.+2      	; 0x2008 <__ftoa_engine+0x180>
    2006:	70 e3       	ldi	r23, 0x30	; 48
    2008:	7c 93       	st	X, r23
    200a:	20 13       	cpse	r18, r16
    200c:	b8 f7       	brcc	.-18     	; 0x1ffc <__ftoa_engine+0x174>
    200e:	7e 91       	ld	r23, -X
    2010:	70 61       	ori	r23, 0x10	; 16
    2012:	7d 93       	st	X+, r23
    2014:	30 f0       	brcs	.+12     	; 0x2022 <__ftoa_engine+0x19a>
    2016:	83 95       	inc	r24
    2018:	71 e3       	ldi	r23, 0x31	; 49
    201a:	7d 93       	st	X+, r23
    201c:	70 e3       	ldi	r23, 0x30	; 48
    201e:	2a 95       	dec	r18
    2020:	e1 f7       	brne	.-8      	; 0x201a <__ftoa_engine+0x192>
    2022:	11 24       	eor	r1, r1
    2024:	ef 90       	pop	r14
    2026:	ff 90       	pop	r15
    2028:	0f 91       	pop	r16
    202a:	1f 91       	pop	r17
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	99 27       	eor	r25, r25
    2032:	87 fd       	sbrc	r24, 7
    2034:	90 95       	com	r25
    2036:	08 95       	ret

00002038 <strrev>:
    2038:	dc 01       	movw	r26, r24
    203a:	fc 01       	movw	r30, r24
    203c:	67 2f       	mov	r22, r23
    203e:	71 91       	ld	r23, Z+
    2040:	77 23       	and	r23, r23
    2042:	e1 f7       	brne	.-8      	; 0x203c <strrev+0x4>
    2044:	32 97       	sbiw	r30, 0x02	; 2
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <strrev+0x18>
    2048:	7c 91       	ld	r23, X
    204a:	6d 93       	st	X+, r22
    204c:	70 83       	st	Z, r23
    204e:	62 91       	ld	r22, -Z
    2050:	ae 17       	cp	r26, r30
    2052:	bf 07       	cpc	r27, r31
    2054:	c8 f3       	brcs	.-14     	; 0x2048 <strrev+0x10>
    2056:	08 95       	ret

00002058 <__prologue_saves__>:
    2058:	2f 92       	push	r2
    205a:	3f 92       	push	r3
    205c:	4f 92       	push	r4
    205e:	5f 92       	push	r5
    2060:	6f 92       	push	r6
    2062:	7f 92       	push	r7
    2064:	8f 92       	push	r8
    2066:	9f 92       	push	r9
    2068:	af 92       	push	r10
    206a:	bf 92       	push	r11
    206c:	cf 92       	push	r12
    206e:	df 92       	push	r13
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	ca 1b       	sub	r28, r26
    2082:	db 0b       	sbc	r29, r27
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	09 94       	ijmp

00002090 <__epilogue_restores__>:
    2090:	2a 88       	ldd	r2, Y+18	; 0x12
    2092:	39 88       	ldd	r3, Y+17	; 0x11
    2094:	48 88       	ldd	r4, Y+16	; 0x10
    2096:	5f 84       	ldd	r5, Y+15	; 0x0f
    2098:	6e 84       	ldd	r6, Y+14	; 0x0e
    209a:	7d 84       	ldd	r7, Y+13	; 0x0d
    209c:	8c 84       	ldd	r8, Y+12	; 0x0c
    209e:	9b 84       	ldd	r9, Y+11	; 0x0b
    20a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20a2:	b9 84       	ldd	r11, Y+9	; 0x09
    20a4:	c8 84       	ldd	r12, Y+8	; 0x08
    20a6:	df 80       	ldd	r13, Y+7	; 0x07
    20a8:	ee 80       	ldd	r14, Y+6	; 0x06
    20aa:	fd 80       	ldd	r15, Y+5	; 0x05
    20ac:	0c 81       	ldd	r16, Y+4	; 0x04
    20ae:	1b 81       	ldd	r17, Y+3	; 0x03
    20b0:	aa 81       	ldd	r26, Y+2	; 0x02
    20b2:	b9 81       	ldd	r27, Y+1	; 0x01
    20b4:	ce 0f       	add	r28, r30
    20b6:	d1 1d       	adc	r29, r1
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	ed 01       	movw	r28, r26
    20c4:	08 95       	ret

000020c6 <_exit>:
    20c6:	f8 94       	cli

000020c8 <__stop_program>:
    20c8:	ff cf       	rjmp	.-2      	; 0x20c8 <__stop_program>
