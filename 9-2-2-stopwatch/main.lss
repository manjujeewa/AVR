
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  00000334  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fb  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001da  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000d5  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e8  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001a6  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f1  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000014b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
   8:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 01 	call	0x246	; 0x246 <main>
  8a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:




void init(void){
	DDRC = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRA = 1<<3 | 1<<4| 1<<5| 1<<6 | 1<<7;
  96:	88 ef       	ldi	r24, 0xF8	; 248
  98:	8a bb       	out	0x1a, r24	; 26
	
	DDRD = DDRD | ~(1<<2);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8b 6f       	ori	r24, 0xFB	; 251
  9e:	81 bb       	out	0x11, r24	; 17
	PORTA = 1<<3;
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	8b bb       	out	0x1b, r24	; 27
	
	TCCR0 = 1<<FOC0 | 1<<WGM01 | 0<<WGM00 | 0<<CS02 | 1<<CS01 | 0<<CS00 ;  //prescaler 8
  a4:	8a e8       	ldi	r24, 0x8A	; 138
  a6:	83 bf       	out	0x33, r24	; 51
	
	OCR0=249; // compare value 250 * 8 * 1/4 MHz = 250us
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= 1<<OCIE0; //enable interrupt on compare
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	89 bf       	out	0x39, r24	; 57
	
	// enableing external interrupts
	MCUCR = 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	85 bf       	out	0x35, r24	; 53
	GICR = 1<<INT0 | 1<<INT1;
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	8b bf       	out	0x3b, r24	; 59
  ba:	08 95       	ret

000000bc <__vector_10>:
	
}

ISR(TIMER0_COMP_vect){ //compare match timer0 at each 250us
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	
	if(on){
  d4:	80 91 72 00 	lds	r24, 0x0072
  d8:	88 23       	and	r24, r24
  da:	19 f1       	breq	.+70     	; 0x122 <__vector_10+0x66>
		if (--countU==0){
  dc:	80 91 60 00 	lds	r24, 0x0060
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	80 93 60 00 	sts	0x0060, r24
  e6:	81 11       	cpse	r24, r1
  e8:	1c c0       	rjmp	.+56     	; 0x122 <__vector_10+0x66>
			countU=4;
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	80 93 60 00 	sts	0x0060, r24
						
				
				if (++countMS==1000) {
  f0:	80 91 73 00 	lds	r24, 0x0073
  f4:	90 91 74 00 	lds	r25, 0x0074
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 74 00 	sts	0x0074, r25
  fe:	80 93 73 00 	sts	0x0073, r24
 102:	88 3e       	cpi	r24, 0xE8	; 232
 104:	93 40       	sbci	r25, 0x03	; 3
 106:	69 f4       	brne	.+26     	; 0x122 <__vector_10+0x66>
					countMS=0;
 108:	10 92 74 00 	sts	0x0074, r1
 10c:	10 92 73 00 	sts	0x0073, r1
					
					if(++valS==10){
 110:	80 91 75 00 	lds	r24, 0x0075
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 75 00 	sts	0x0075, r24
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	11 f4       	brne	.+4      	; 0x122 <__vector_10+0x66>
						valS=0;
 11e:	10 92 75 00 	sts	0x0075, r1
				}
			
		}
	}
		
		count=valS*1000 + countMS;
 122:	60 91 75 00 	lds	r22, 0x0075
 126:	20 91 73 00 	lds	r18, 0x0073
 12a:	30 91 74 00 	lds	r19, 0x0074
 12e:	48 ee       	ldi	r20, 0xE8	; 232
 130:	53 e0       	ldi	r21, 0x03	; 3
 132:	64 9f       	mul	r22, r20
 134:	c0 01       	movw	r24, r0
 136:	65 9f       	mul	r22, r21
 138:	90 0d       	add	r25, r0
 13a:	11 24       	eor	r1, r1
 13c:	82 0f       	add	r24, r18
 13e:	93 1f       	adc	r25, r19
 140:	90 93 62 00 	sts	0x0062, r25
 144:	80 93 61 00 	sts	0x0061, r24
	
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_1>:

ISR(INT0_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24

	on = 1;			
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 72 00 	sts	0x0072, r24
	
}
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_2>:


ISR(INT1_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1

	on=0;
 188:	10 92 72 00 	sts	0x0072, r1

}
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <getDigi>:


void getDigi(unsigned int val){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	9c 01       	movw	r18, r24

	dig[0] = val%10;
 19c:	ea e0       	ldi	r30, 0x0A	; 10
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	bf 01       	movw	r22, r30
 1a2:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 1a6:	80 93 63 00 	sts	0x0063, r24
	
	dig[1] = (val%100)/10;
 1aa:	c9 01       	movw	r24, r18
 1ac:	64 e6       	ldi	r22, 0x64	; 100
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 1b4:	eb 01       	movw	r28, r22
 1b6:	bf 01       	movw	r22, r30
 1b8:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 1bc:	60 93 64 00 	sts	0x0064, r22
	
	dig[2] = (val/100)%10;
 1c0:	ce 01       	movw	r24, r28
 1c2:	bf 01       	movw	r22, r30
 1c4:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 1c8:	80 93 65 00 	sts	0x0065, r24
	
	dig[3] = val/1000;
 1cc:	c9 01       	movw	r24, r18
 1ce:	68 ee       	ldi	r22, 0xE8	; 232
 1d0:	73 e0       	ldi	r23, 0x03	; 3
 1d2:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 1d6:	60 93 66 00 	sts	0x0066, r22
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <displaySSD>:

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
			if(i==3) {
				PORTC=SSD[dig[i]] + 128; //Displaying Dot
			}else{
				PORTC=SSD[dig[i]];
			}
			PORTA = 1<<i+4;
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	70 e0       	ldi	r23, 0x00	; 0

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 1e8:	48 17       	cp	r20, r24
 1ea:	59 07       	cpc	r21, r25
 1ec:	59 f1       	breq	.+86     	; 0x244 <displaySSD+0x64>
 1ee:	24 e0       	ldi	r18, 0x04	; 4
 1f0:	30 e0       	ldi	r19, 0x00	; 0
		unsigned char i ;
	
		for(i=0;i != 4;i++){
		
			
			if(i==3) {
 1f2:	27 30       	cpi	r18, 0x07	; 7
 1f4:	41 f4       	brne	.+16     	; 0x206 <displaySSD+0x26>
				PORTC=SSD[dig[i]] + 128; //Displaying Dot
 1f6:	e0 91 66 00 	lds	r30, 0x0066
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e9 59       	subi	r30, 0x99	; 153
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	e0 81       	ld	r30, Z
 202:	e0 58       	subi	r30, 0x80	; 128
 204:	08 c0       	rjmp	.+16     	; 0x216 <displaySSD+0x36>
 206:	f9 01       	movw	r30, r18
 208:	e1 5a       	subi	r30, 0xA1	; 161
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
			}else{
				PORTC=SSD[dig[i]];
 20c:	e0 81       	ld	r30, Z
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e9 59       	subi	r30, 0x99	; 153
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	e0 81       	ld	r30, Z
 216:	e5 bb       	out	0x15, r30	; 21
			}
			PORTA = 1<<i+4;
 218:	fb 01       	movw	r30, r22
 21a:	02 2e       	mov	r0, r18
 21c:	01 c0       	rjmp	.+2      	; 0x220 <displaySSD+0x40>
 21e:	ee 0f       	add	r30, r30
 220:	0a 94       	dec	r0
 222:	ea f7       	brpl	.-6      	; 0x21e <displaySSD+0x3e>
 224:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	ef ec       	ldi	r30, 0xCF	; 207
 228:	f7 e0       	ldi	r31, 0x07	; 7
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <displaySSD+0x4a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <displaySSD+0x50>
 230:	00 00       	nop
			_delay_ms(1);
			PORTA=0;
 232:	1b ba       	out	0x1b, r1	; 27
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int j;
	
	for(j=0;j<n;j++){
		unsigned char i ;
	
		for(i=0;i != 4;i++){
 238:	28 30       	cpi	r18, 0x08	; 8
 23a:	31 05       	cpc	r19, r1
 23c:	d1 f6       	brne	.-76     	; 0x1f2 <displaySSD+0x12>

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 23e:	4f 5f       	subi	r20, 0xFF	; 255
 240:	5f 4f       	sbci	r21, 0xFF	; 255
 242:	d2 cf       	rjmp	.-92     	; 0x1e8 <displaySSD+0x8>
 244:	08 95       	ret

00000246 <main>:
volatile unsigned int countMS =0;
volatile unsigned char on = 0;

int main(void){
		
	init();
 246:	0e 94 49 00 	call	0x92	; 0x92 <init>
	
	sei();// Global interrupt enable
 24a:	78 94       	sei
	
	while(1){
				
		getDigi(count);
 24c:	80 91 61 00 	lds	r24, 0x0061
 250:	90 91 62 00 	lds	r25, 0x0062
 254:	0e 94 cb 00 	call	0x196	; 0x196 <getDigi>
		displaySSD(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <displaySSD>
 260:	f5 cf       	rjmp	.-22     	; 0x24c <main+0x6>

00000262 <__udivmodhi4>:
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	51 e1       	ldi	r21, 0x11	; 17
 268:	07 c0       	rjmp	.+14     	; 0x278 <__udivmodhi4_ep>

0000026a <__udivmodhi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	a6 17       	cp	r26, r22
 270:	b7 07       	cpc	r27, r23
 272:	10 f0       	brcs	.+4      	; 0x278 <__udivmodhi4_ep>
 274:	a6 1b       	sub	r26, r22
 276:	b7 0b       	sbc	r27, r23

00000278 <__udivmodhi4_ep>:
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	5a 95       	dec	r21
 27e:	a9 f7       	brne	.-22     	; 0x26a <__udivmodhi4_loop>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
