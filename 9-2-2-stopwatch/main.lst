   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	init
  12               	init:
  13               	.LFB7:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 8000000UL
   2:main.c        **** 
   3:main.c        **** #include <avr/io.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include <avr/interrupt.h>
   6:main.c        **** 
   7:main.c        **** void getdigi(unsigned int);
   8:main.c        **** void displaySSD(unsigned int n);
   9:main.c        **** void init(void);
  10:main.c        **** 
  11:main.c        **** unsigned char SSD[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  12:main.c        **** unsigned char dig[] = {1,2,3,4};
  13:main.c        **** 
  14:main.c        **** volatile unsigned int count=2088;
  15:main.c        **** volatile unsigned char countU =4, valMS=0, valS=0;
  16:main.c        **** volatile unsigned int countMS =0;
  17:main.c        **** volatile unsigned char on = 0;
  18:main.c        **** 
  19:main.c        **** int main(void){
  20:main.c        **** 		
  21:main.c        **** 	init();
  22:main.c        **** 	
  23:main.c        **** 	sei();// Global interrupt enable
  24:main.c        **** 	
  25:main.c        **** 	while(1){
  26:main.c        **** 				
  27:main.c        **** 		getDigi(count);
  28:main.c        **** 		displaySSD(1);
  29:main.c        **** 				
  30:main.c        **** 	}
  31:main.c        **** 		
  32:main.c        **** 	return 0;
  33:main.c        **** }
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** 
  40:main.c        **** void init(void){
  15               		.loc 1 40 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  41:main.c        **** 	DDRC = 0xff;
  21               		.loc 1 41 0
  22 0000 8FEF      		ldi r24,lo8(-1)
  23 0002 84BB      		out 0x14,r24
  42:main.c        **** 	DDRA = 1<<3 | 1<<4| 1<<5| 1<<6 | 1<<7;
  24               		.loc 1 42 0
  25 0004 88EF      		ldi r24,lo8(-8)
  26 0006 8ABB      		out 0x1a,r24
  43:main.c        **** 	
  44:main.c        **** 	DDRD = DDRD | ~(1<<2);
  27               		.loc 1 44 0
  28 0008 81B3      		in r24,0x11
  29 000a 8B6F      		ori r24,lo8(-5)
  30 000c 81BB      		out 0x11,r24
  45:main.c        **** 	PORTA = 1<<3;
  31               		.loc 1 45 0
  32 000e 88E0      		ldi r24,lo8(8)
  33 0010 8BBB      		out 0x1b,r24
  46:main.c        **** 	
  47:main.c        **** 	TCCR0 = 1<<FOC0 | 1<<WGM01 | 0<<WGM00 | 0<<CS02 | 1<<CS01 | 0<<CS00 ;  //prescaler 8
  34               		.loc 1 47 0
  35 0012 8AE8      		ldi r24,lo8(-118)
  36 0014 83BF      		out 0x33,r24
  48:main.c        **** 	
  49:main.c        **** 	OCR0=249; // compare value 250 * 8 * 1/4 MHz = 250us
  37               		.loc 1 49 0
  38 0016 89EF      		ldi r24,lo8(-7)
  39 0018 8CBF      		out 0x3c,r24
  50:main.c        **** 
  51:main.c        **** 	TIMSK |= 1<<OCIE0; //enable interrupt on compare
  40               		.loc 1 51 0
  41 001a 89B7      		in r24,0x39
  42 001c 8260      		ori r24,lo8(2)
  43 001e 89BF      		out 0x39,r24
  52:main.c        **** 	
  53:main.c        **** 	// enableing external interrupts
  54:main.c        **** 	MCUCR = 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
  44               		.loc 1 54 0
  45 0020 8FE0      		ldi r24,lo8(15)
  46 0022 85BF      		out 0x35,r24
  55:main.c        **** 	GICR = 1<<INT0 | 1<<INT1;
  47               		.loc 1 55 0
  48 0024 80EC      		ldi r24,lo8(-64)
  49 0026 8BBF      		out 0x3b,r24
  50 0028 0895      		ret
  51               		.cfi_endproc
  52               	.LFE7:
  54               	.global	__vector_10
  56               	__vector_10:
  57               	.LFB8:
  56:main.c        **** 	
  57:main.c        **** }
  58:main.c        **** 
  59:main.c        **** ISR(TIMER0_COMP_vect){ //compare match timer0 at each 250us
  58               		.loc 1 59 0
  59               		.cfi_startproc
  60 002a 1F92      		push r1
  61               	.LCFI0:
  62               		.cfi_def_cfa_offset 3
  63               		.cfi_offset 1, -2
  64 002c 0F92      		push r0
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 4
  67               		.cfi_offset 0, -3
  68 002e 0FB6      		in r0,__SREG__
  69 0030 0F92      		push r0
  70 0032 1124      		clr __zero_reg__
  71 0034 2F93      		push r18
  72               	.LCFI2:
  73               		.cfi_def_cfa_offset 5
  74               		.cfi_offset 18, -4
  75 0036 3F93      		push r19
  76               	.LCFI3:
  77               		.cfi_def_cfa_offset 6
  78               		.cfi_offset 19, -5
  79 0038 4F93      		push r20
  80               	.LCFI4:
  81               		.cfi_def_cfa_offset 7
  82               		.cfi_offset 20, -6
  83 003a 5F93      		push r21
  84               	.LCFI5:
  85               		.cfi_def_cfa_offset 8
  86               		.cfi_offset 21, -7
  87 003c 6F93      		push r22
  88               	.LCFI6:
  89               		.cfi_def_cfa_offset 9
  90               		.cfi_offset 22, -8
  91 003e 8F93      		push r24
  92               	.LCFI7:
  93               		.cfi_def_cfa_offset 10
  94               		.cfi_offset 24, -9
  95 0040 9F93      		push r25
  96               	.LCFI8:
  97               		.cfi_def_cfa_offset 11
  98               		.cfi_offset 25, -10
  99               	/* prologue: Signal */
 100               	/* frame size = 0 */
 101               	/* stack size = 10 */
 102               	.L__stack_usage = 10
  60:main.c        **** 	
  61:main.c        **** 	if(on){
 103               		.loc 1 61 0
 104 0042 8091 0000 		lds r24,on
 105 0046 8823      		tst r24
 106 0048 01F0      		breq .L4
  62:main.c        **** 		if (--countU==0){
 107               		.loc 1 62 0
 108 004a 8091 0000 		lds r24,countU
 109 004e 8150      		subi r24,lo8(-(-1))
 110 0050 8093 0000 		sts countU,r24
 111 0054 8111      		cpse r24,__zero_reg__
 112 0056 00C0      		rjmp .L4
  63:main.c        **** 			countU=4;
 113               		.loc 1 63 0
 114 0058 84E0      		ldi r24,lo8(4)
 115 005a 8093 0000 		sts countU,r24
  64:main.c        **** 						
  65:main.c        **** 				
  66:main.c        **** 				if (++countMS==1000) {
 116               		.loc 1 66 0
 117 005e 8091 0000 		lds r24,countMS
 118 0062 9091 0000 		lds r25,countMS+1
 119 0066 0196      		adiw r24,1
 120 0068 9093 0000 		sts countMS+1,r25
 121 006c 8093 0000 		sts countMS,r24
 122 0070 883E      		cpi r24,-24
 123 0072 9340      		sbci r25,3
 124 0074 01F4      		brne .L4
  67:main.c        **** 					countMS=0;
 125               		.loc 1 67 0
 126 0076 1092 0000 		sts countMS+1,__zero_reg__
 127 007a 1092 0000 		sts countMS,__zero_reg__
  68:main.c        **** 					
  69:main.c        **** 					if(++valS==10){
 128               		.loc 1 69 0
 129 007e 8091 0000 		lds r24,valS
 130 0082 8F5F      		subi r24,lo8(-(1))
 131 0084 8093 0000 		sts valS,r24
 132 0088 8A30      		cpi r24,lo8(10)
 133 008a 01F4      		brne .L4
  70:main.c        **** 						valS=0;
 134               		.loc 1 70 0
 135 008c 1092 0000 		sts valS,__zero_reg__
 136               	.L4:
  71:main.c        **** 					}
  72:main.c        **** 				}
  73:main.c        **** 			
  74:main.c        **** 		}
  75:main.c        **** 	}
  76:main.c        **** 		
  77:main.c        **** 		count=valS*1000 + countMS;
 137               		.loc 1 77 0
 138 0090 6091 0000 		lds r22,valS
 139 0094 2091 0000 		lds r18,countMS
 140 0098 3091 0000 		lds r19,countMS+1
 141 009c 48EE      		ldi r20,lo8(-24)
 142 009e 53E0      		ldi r21,lo8(3)
 143 00a0 649F      		mul r22,r20
 144 00a2 C001      		movw r24,r0
 145 00a4 659F      		mul r22,r21
 146 00a6 900D      		add r25,r0
 147 00a8 1124      		clr __zero_reg__
 148 00aa 820F      		add r24,r18
 149 00ac 931F      		adc r25,r19
 150 00ae 9093 0000 		sts count+1,r25
 151 00b2 8093 0000 		sts count,r24
 152               	/* epilogue start */
  78:main.c        **** 	
  79:main.c        **** }
 153               		.loc 1 79 0
 154 00b6 9F91      		pop r25
 155 00b8 8F91      		pop r24
 156 00ba 6F91      		pop r22
 157 00bc 5F91      		pop r21
 158 00be 4F91      		pop r20
 159 00c0 3F91      		pop r19
 160 00c2 2F91      		pop r18
 161 00c4 0F90      		pop r0
 162 00c6 0FBE      		out __SREG__,r0
 163 00c8 0F90      		pop r0
 164 00ca 1F90      		pop r1
 165 00cc 1895      		reti
 166               		.cfi_endproc
 167               	.LFE8:
 169               	.global	__vector_1
 171               	__vector_1:
 172               	.LFB9:
  80:main.c        **** 
  81:main.c        **** ISR(INT0_vect){
 173               		.loc 1 81 0
 174               		.cfi_startproc
 175 00ce 1F92      		push r1
 176               	.LCFI9:
 177               		.cfi_def_cfa_offset 3
 178               		.cfi_offset 1, -2
 179 00d0 0F92      		push r0
 180               	.LCFI10:
 181               		.cfi_def_cfa_offset 4
 182               		.cfi_offset 0, -3
 183 00d2 0FB6      		in r0,__SREG__
 184 00d4 0F92      		push r0
 185 00d6 1124      		clr __zero_reg__
 186 00d8 8F93      		push r24
 187               	.LCFI11:
 188               		.cfi_def_cfa_offset 5
 189               		.cfi_offset 24, -4
 190               	/* prologue: Signal */
 191               	/* frame size = 0 */
 192               	/* stack size = 4 */
 193               	.L__stack_usage = 4
  82:main.c        **** 
  83:main.c        **** 	on = 1;			
 194               		.loc 1 83 0
 195 00da 81E0      		ldi r24,lo8(1)
 196 00dc 8093 0000 		sts on,r24
 197               	/* epilogue start */
  84:main.c        **** 	
  85:main.c        **** }
 198               		.loc 1 85 0
 199 00e0 8F91      		pop r24
 200 00e2 0F90      		pop r0
 201 00e4 0FBE      		out __SREG__,r0
 202 00e6 0F90      		pop r0
 203 00e8 1F90      		pop r1
 204 00ea 1895      		reti
 205               		.cfi_endproc
 206               	.LFE9:
 208               	.global	__vector_2
 210               	__vector_2:
 211               	.LFB10:
  86:main.c        **** 
  87:main.c        **** 
  88:main.c        **** ISR(INT1_vect){
 212               		.loc 1 88 0
 213               		.cfi_startproc
 214 00ec 1F92      		push r1
 215               	.LCFI12:
 216               		.cfi_def_cfa_offset 3
 217               		.cfi_offset 1, -2
 218 00ee 0F92      		push r0
 219               	.LCFI13:
 220               		.cfi_def_cfa_offset 4
 221               		.cfi_offset 0, -3
 222 00f0 0FB6      		in r0,__SREG__
 223 00f2 0F92      		push r0
 224 00f4 1124      		clr __zero_reg__
 225               	/* prologue: Signal */
 226               	/* frame size = 0 */
 227               	/* stack size = 3 */
 228               	.L__stack_usage = 3
  89:main.c        **** 
  90:main.c        **** 	on=0;
 229               		.loc 1 90 0
 230 00f6 1092 0000 		sts on,__zero_reg__
 231               	/* epilogue start */
  91:main.c        **** 
  92:main.c        **** }
 232               		.loc 1 92 0
 233 00fa 0F90      		pop r0
 234 00fc 0FBE      		out __SREG__,r0
 235 00fe 0F90      		pop r0
 236 0100 1F90      		pop r1
 237 0102 1895      		reti
 238               		.cfi_endproc
 239               	.LFE10:
 241               	.global	getDigi
 243               	getDigi:
 244               	.LFB11:
  93:main.c        **** 
  94:main.c        **** 
  95:main.c        **** void getDigi(unsigned int val){
 245               		.loc 1 95 0
 246               		.cfi_startproc
 247               	.LVL0:
 248 0104 CF93      		push r28
 249               	.LCFI14:
 250               		.cfi_def_cfa_offset 3
 251               		.cfi_offset 28, -2
 252 0106 DF93      		push r29
 253               	.LCFI15:
 254               		.cfi_def_cfa_offset 4
 255               		.cfi_offset 29, -3
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 2 */
 259               	.L__stack_usage = 2
 260 0108 9C01      		movw r18,r24
  96:main.c        **** 
  97:main.c        **** 	dig[0] = val%10;
 261               		.loc 1 97 0
 262 010a EAE0      		ldi r30,lo8(10)
 263 010c F0E0      		ldi r31,0
 264 010e BF01      		movw r22,r30
 265 0110 0E94 0000 		call __udivmodhi4
 266               	.LVL1:
 267 0114 8093 0000 		sts dig,r24
  98:main.c        **** 	
  99:main.c        **** 	dig[1] = (val%100)/10;
 268               		.loc 1 99 0
 269 0118 C901      		movw r24,r18
 270 011a 64E6      		ldi r22,lo8(100)
 271 011c 70E0      		ldi r23,0
 272 011e 0E94 0000 		call __udivmodhi4
 273 0122 EB01      		movw r28,r22
 274 0124 BF01      		movw r22,r30
 275 0126 0E94 0000 		call __udivmodhi4
 276 012a 6093 0000 		sts dig+1,r22
 100:main.c        **** 	
 101:main.c        **** 	dig[2] = (val/100)%10;
 277               		.loc 1 101 0
 278 012e CE01      		movw r24,r28
 279 0130 BF01      		movw r22,r30
 280 0132 0E94 0000 		call __udivmodhi4
 281 0136 8093 0000 		sts dig+2,r24
 102:main.c        **** 	
 103:main.c        **** 	dig[3] = val/1000;
 282               		.loc 1 103 0
 283 013a C901      		movw r24,r18
 284 013c 68EE      		ldi r22,lo8(-24)
 285 013e 73E0      		ldi r23,lo8(3)
 286 0140 0E94 0000 		call __udivmodhi4
 287 0144 6093 0000 		sts dig+3,r22
 288               	/* epilogue start */
 104:main.c        **** }
 289               		.loc 1 104 0
 290 0148 DF91      		pop r29
 291 014a CF91      		pop r28
 292 014c 0895      		ret
 293               		.cfi_endproc
 294               	.LFE11:
 296               	.global	displaySSD
 298               	displaySSD:
 299               	.LFB12:
 105:main.c        **** 
 106:main.c        **** 
 107:main.c        **** void displaySSD(unsigned int n){
 300               		.loc 1 107 0
 301               		.cfi_startproc
 302               	.LVL2:
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 0 */
 306               	.L__stack_usage = 0
 108:main.c        **** 	
 109:main.c        **** 	unsigned int j;
 110:main.c        **** 	
 111:main.c        **** 	for(j=0;j<n;j++){
 307               		.loc 1 111 0
 308 014e 40E0      		ldi r20,0
 309 0150 50E0      		ldi r21,0
 310               	.LBB5:
 112:main.c        **** 		unsigned char i ;
 113:main.c        **** 	
 114:main.c        **** 		for(i=0;i != 4;i++){
 115:main.c        **** 		
 116:main.c        **** 			
 117:main.c        **** 			if(i==3) {
 118:main.c        **** 				PORTC=SSD[dig[i]] + 128; //Displaying Dot
 119:main.c        **** 			}else{
 120:main.c        **** 				PORTC=SSD[dig[i]];
 121:main.c        **** 			}
 122:main.c        **** 			PORTA = 1<<i+4;
 311               		.loc 1 122 0
 312 0152 61E0      		ldi r22,lo8(1)
 313 0154 70E0      		ldi r23,0
 314               	.LVL3:
 315               	.L11:
 316               	.LBE5:
 111:main.c        **** 	for(j=0;j<n;j++){
 317               		.loc 1 111 0 discriminator 1
 318 0156 4817      		cp r20,r24
 319 0158 5907      		cpc r21,r25
 320 015a 01F0      		breq .L10
 111:main.c        **** 	for(j=0;j<n;j++){
 321               		.loc 1 111 0 is_stmt 0
 322 015c 24E0      		ldi r18,lo8(4)
 323 015e 30E0      		ldi r19,0
 324               	.L16:
 325               	.LVL4:
 326               	.LBB8:
 117:main.c        **** 			if(i==3) {
 327               		.loc 1 117 0 is_stmt 1
 328 0160 2730      		cpi r18,lo8(7)
 329 0162 01F4      		brne .L12
 118:main.c        **** 				PORTC=SSD[dig[i]] + 128; //Displaying Dot
 330               		.loc 1 118 0
 331 0164 E091 0000 		lds r30,dig+3
 332 0168 F0E0      		ldi r31,0
 333 016a E050      		subi r30,lo8(-(SSD))
 334 016c F040      		sbci r31,hi8(-(SSD))
 335 016e E081      		ld r30,Z
 336 0170 E058      		subi r30,lo8(-(-128))
 337 0172 00C0      		rjmp .L17
 338               	.L12:
 339 0174 F901      		movw r30,r18
 340 0176 E050      		subi r30,lo8(-(dig-4))
 341 0178 F040      		sbci r31,hi8(-(dig-4))
 120:main.c        **** 				PORTC=SSD[dig[i]];
 342               		.loc 1 120 0
 343 017a E081      		ld r30,Z
 344 017c F0E0      		ldi r31,0
 345 017e E050      		subi r30,lo8(-(SSD))
 346 0180 F040      		sbci r31,hi8(-(SSD))
 347 0182 E081      		ld r30,Z
 348               	.LVL5:
 349               	.L17:
 350 0184 E5BB      		out 0x15,r30
 351               		.loc 1 122 0
 352 0186 FB01      		movw r30,r22
 353 0188 022E      		mov r0,r18
 354 018a 00C0      		rjmp 2f
 355               		1:
 356 018c EE0F      		lsl r30
 357               		2:
 358 018e 0A94      		dec r0
 359 0190 02F4      		brpl 1b
 360 0192 EBBB      		out 0x1b,r30
 361               	.LVL6:
 362               	.LBB6:
 363               	.LBB7:
 364               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 365               		.loc 2 164 0
 366 0194 EFEC      		ldi r30,lo8(1999)
 367 0196 F7E0      		ldi r31,hi8(1999)
 368 0198 3197      		1: sbiw r30,1
 369 019a 01F4      		brne 1b
 370 019c 00C0      		rjmp .
 371 019e 0000      		nop
 372               	.LBE7:
 373               	.LBE6:
 123:main.c        **** 			_delay_ms(1);
 124:main.c        **** 			PORTA=0;
 374               		.loc 1 124 0
 375 01a0 1BBA      		out 0x1b,__zero_reg__
 376               	.LVL7:
 377 01a2 2F5F      		subi r18,-1
 378 01a4 3F4F      		sbci r19,-1
 379               	.LVL8:
 114:main.c        **** 		for(i=0;i != 4;i++){
 380               		.loc 1 114 0
 381 01a6 2830      		cpi r18,8
 382 01a8 3105      		cpc r19,__zero_reg__
 383 01aa 01F4      		brne .L16
 384               	.LVL9:
 385               	.LBE8:
 111:main.c        **** 	for(j=0;j<n;j++){
 386               		.loc 1 111 0
 387 01ac 4F5F      		subi r20,-1
 388 01ae 5F4F      		sbci r21,-1
 389               	.LVL10:
 390 01b0 00C0      		rjmp .L11
 391               	.LVL11:
 392               	.L10:
 393 01b2 0895      		ret
 394               		.cfi_endproc
 395               	.LFE12:
 397               		.section	.text.startup,"ax",@progbits
 398               	.global	main
 400               	main:
 401               	.LFB6:
  19:main.c        **** int main(void){
 402               		.loc 1 19 0
 403               		.cfi_startproc
 404               	/* prologue: function */
 405               	/* frame size = 0 */
 406               	/* stack size = 0 */
 407               	.L__stack_usage = 0
  21:main.c        **** 	init();
 408               		.loc 1 21 0
 409 0000 0E94 0000 		call init
 410               	.LVL12:
  23:main.c        **** 	sei();// Global interrupt enable
 411               		.loc 1 23 0
 412               	/* #APP */
 413               	 ;  23 "main.c" 1
 414 0004 7894      		sei
 415               	 ;  0 "" 2
 416               	/* #NOAPP */
 417               	.L19:
 418               	.LBB9:
  27:main.c        **** 		getDigi(count);
 419               		.loc 1 27 0 discriminator 1
 420 0006 8091 0000 		lds r24,count
 421 000a 9091 0000 		lds r25,count+1
 422 000e 0E94 0000 		call getDigi
 423               	.LVL13:
  28:main.c        **** 		displaySSD(1);
 424               		.loc 1 28 0 discriminator 1
 425 0012 81E0      		ldi r24,lo8(1)
 426 0014 90E0      		ldi r25,0
 427 0016 0E94 0000 		call displaySSD
 428               	.LVL14:
 429 001a 00C0      		rjmp .L19
 430               	.LBE9:
 431               		.cfi_endproc
 432               	.LFE6:
 434               	.global	on
 435               		.section .bss
 438               	on:
 439 0000 00        		.zero	1
 440               	.global	countMS
 443               	countMS:
 444 0001 0000      		.zero	2
 445               	.global	valS
 448               	valS:
 449 0003 00        		.zero	1
 450               	.global	valMS
 453               	valMS:
 454 0004 00        		.zero	1
 455               	.global	countU
 456               		.data
 459               	countU:
 460 0000 04        		.byte	4
 461               	.global	count
 464               	count:
 465 0001 2808      		.word	2088
 466               	.global	dig
 469               	dig:
 470 0003 01        		.byte	1
 471 0004 02        		.byte	2
 472 0005 03        		.byte	3
 473 0006 04        		.byte	4
 474               	.global	SSD
 477               	SSD:
 478 0007 3F        		.byte	63
 479 0008 06        		.byte	6
 480 0009 5B        		.byte	91
 481 000a 4F        		.byte	79
 482 000b 66        		.byte	102
 483 000c 6D        		.byte	109
 484 000d 7D        		.byte	125
 485 000e 07        		.byte	7
 486 000f 7F        		.byte	127
 487 0010 6F        		.byte	111
 488               		.text
 489               	.Letext0:
 490               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccxiQZSe.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxiQZSe.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxiQZSe.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxiQZSe.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxiQZSe.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxiQZSe.s:12     .text:0000000000000000 init
     /tmp/ccxiQZSe.s:56     .text:000000000000002a __vector_10
     /tmp/ccxiQZSe.s:438    .bss:0000000000000000 on
     /tmp/ccxiQZSe.s:459    .data:0000000000000000 countU
     /tmp/ccxiQZSe.s:443    .bss:0000000000000001 countMS
     /tmp/ccxiQZSe.s:448    .bss:0000000000000003 valS
     /tmp/ccxiQZSe.s:464    .data:0000000000000001 count
     /tmp/ccxiQZSe.s:171    .text:00000000000000ce __vector_1
     /tmp/ccxiQZSe.s:210    .text:00000000000000ec __vector_2
     /tmp/ccxiQZSe.s:243    .text:0000000000000104 getDigi
     /tmp/ccxiQZSe.s:469    .data:0000000000000003 dig
     /tmp/ccxiQZSe.s:298    .text:000000000000014e displaySSD
     /tmp/ccxiQZSe.s:477    .data:0000000000000007 SSD
     /tmp/ccxiQZSe.s:400    .text.startup:0000000000000000 main
     /tmp/ccxiQZSe.s:453    .bss:0000000000000004 valMS

UNDEFINED SYMBOLS
__udivmodhi4
__do_copy_data
__do_clear_bss
