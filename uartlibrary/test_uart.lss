
test_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000034c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800078  00800078  000003f8  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b4  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000548  00000000  00000000  00000e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000237  00000000  00000000  00001399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000124  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000124  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e4  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000344  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_13>
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_14>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000054 <__c.1792>:
  54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__c.1790>:
  6c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  7c:	6f 72 3a 20 00                                      or: .

00000081 <__c.1788>:
  81:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  91:	3a 20 00                                            : .

00000094 <__c.1786>:
  94:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  a4:	20 46 4c 41 53 48 0a 00                              FLASH..

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf e5       	ldi	r28, 0x5F	; 95
  b2:	d8 e0       	ldi	r29, 0x08	; 8
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	a0 e6       	ldi	r26, 0x60	; 96
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ec e4       	ldi	r30, 0x4C	; 76
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 37       	cpi	r26, 0x78	; 120
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	a8 e7       	ldi	r26, 0x78	; 120
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ad 3b       	cpi	r26, 0xBD	; 189
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  e2:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <__vector_13>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  fe:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
 100:	9c b1       	in	r25, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 102:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 104:	e0 91 7a 00 	lds	r30, 0x007A
 108:	ef 5f       	subi	r30, 0xFF	; 255
 10a:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 10c:	20 91 79 00 	lds	r18, 0x0079
 110:	e2 17       	cp	r30, r18
 112:	39 f0       	breq	.+14     	; 0x122 <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 114:	e0 93 7a 00 	sts	0x007A, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e3 58       	subi	r30, 0x83	; 131
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	90 83       	st	Z, r25
 120:	01 c0       	rjmp	.+2      	; 0x124 <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 122:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 124:	90 91 78 00 	lds	r25, 0x0078
 128:	98 2b       	or	r25, r24
 12a:	90 93 78 00 	sts	0x0078, r25
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_14>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 154:	90 91 7c 00 	lds	r25, 0x007C
 158:	80 91 7b 00 	lds	r24, 0x007B
 15c:	98 17       	cp	r25, r24
 15e:	61 f0       	breq	.+24     	; 0x178 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 160:	e0 91 7b 00 	lds	r30, 0x007B
 164:	ef 5f       	subi	r30, 0xFF	; 255
 166:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 168:	e0 93 7b 00 	sts	0x007B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e3 56       	subi	r30, 0x63	; 99
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	8c b9       	out	0x0c, r24	; 12
 176:	01 c0       	rjmp	.+2      	; 0x17a <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 178:	55 98       	cbi	0x0a, 5	; 10
    }
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 18c:	10 92 7c 00 	sts	0x007C, r1
    UART_TxTail = 0;
 190:	10 92 7b 00 	sts	0x007B, r1
    UART_RxHead = 0;
 194:	10 92 7a 00 	sts	0x007A, r1
    UART_RxTail = 0;
 198:	10 92 79 00 	sts	0x0079, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 19c:	97 ff       	sbrs	r25, 7
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 1a0:	22 e0       	ldi	r18, 0x02	; 2
 1a2:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 1a4:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 1a6:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 1a8:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 1aa:	88 e9       	ldi	r24, 0x98	; 152
 1ac:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 1ae:	86 e8       	ldi	r24, 0x86	; 134
 1b0:	80 bd       	out	0x20, r24	; 32
 1b2:	08 95       	ret

000001b4 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 1b4:	90 91 7a 00 	lds	r25, 0x007A
 1b8:	80 91 79 00 	lds	r24, 0x0079
 1bc:	98 17       	cp	r25, r24
 1be:	81 f0       	breq	.+32     	; 0x1e0 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1c0:	e0 91 79 00 	lds	r30, 0x0079
 1c4:	ef 5f       	subi	r30, 0xFF	; 255
 1c6:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 1c8:	e0 93 79 00 	sts	0x0079, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e3 58       	subi	r30, 0x83	; 131
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
 1d4:	90 91 78 00 	lds	r25, 0x0078
    UART_LastRxError = 0;
 1d8:	10 92 78 00 	sts	0x0078, r1
    return data;
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
 1e4:	08 95       	ret

000001e6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1e6:	90 91 7c 00 	lds	r25, 0x007C
 1ea:	9f 5f       	subi	r25, 0xFF	; 255
 1ec:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1ee:	20 91 7b 00 	lds	r18, 0x007B
 1f2:	92 17       	cp	r25, r18
 1f4:	e1 f3       	breq	.-8      	; 0x1ee <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1f6:	e9 2f       	mov	r30, r25
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	e3 56       	subi	r30, 0x63	; 99
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 200:	90 93 7c 00 	sts	0x007C, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 204:	55 9a       	sbi	0x0a, 5	; 10
 206:	08 95       	ret

00000208 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
    while (*s) 
 20e:	89 91       	ld	r24, Y+
 210:	88 23       	and	r24, r24
 212:	19 f0       	breq	.+6      	; 0x21a <uart_puts+0x12>
      uart_putc(*s++);
 214:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart_putc>
 218:	fa cf       	rjmp	.-12     	; 0x20e <uart_puts+0x6>

}/* uart_puts */
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 226:	84 91       	lpm	r24, Z
 228:	ef 01       	movw	r28, r30
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	88 23       	and	r24, r24
 22e:	21 f0       	breq	.+8      	; 0x238 <uart_puts_p+0x18>
      uart_putc(c);
 230:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart_putc>
 234:	fe 01       	movw	r30, r28
 236:	f7 cf       	rjmp	.-18     	; 0x226 <uart_puts_p+0x6>

}/* uart_puts_p */
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:
/* 9600 baud */
#define UART_BAUD_RATE      9600      


int main(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	27 97       	sbiw	r28, 0x07	; 7
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 252:	87 e6       	ldi	r24, 0x67	; 103
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 c6 00 	call	0x18c	; 0x18c <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 25a:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 04 01 	call	0x208	; 0x208 <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
 264:	84 e9       	ldi	r24, 0x94	; 148
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 10 01 	call	0x220	; 0x220 <uart_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
 26c:	4a e0       	ldi	r20, 0x0A	; 10
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	be 01       	movw	r22, r28
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	86 e8       	ldi	r24, 0x86	; 134
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 5f 01 	call	0x2be	; 0x2be <itoa>
    uart_puts(buffer);        // and transmit string to UART
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 04 01 	call	0x208	; 0x208 <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart_putc>
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
 28c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <uart_getc>
 290:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 292:	90 fd       	sbrc	r25, 0
 294:	fb cf       	rjmp	.-10     	; 0x28c <main+0x4e>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 296:	94 ff       	sbrs	r25, 4
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <main+0x64>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 29a:	81 e8       	ldi	r24, 0x81	; 129
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 10 01 	call	0x220	; 0x220 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 2a2:	13 ff       	sbrs	r17, 3
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <main+0x70>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 2a6:	8c e6       	ldi	r24, 0x6C	; 108
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 10 01 	call	0x220	; 0x220 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 2ae:	11 ff       	sbrs	r17, 1
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <main+0x7c>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 2b2:	84 e5       	ldi	r24, 0x54	; 84
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 10 01 	call	0x220	; 0x220 <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 2ba:	80 2f       	mov	r24, r16
 2bc:	e5 cf       	rjmp	.-54     	; 0x288 <main+0x4a>

000002be <itoa>:
 2be:	fb 01       	movw	r30, r22
 2c0:	9f 01       	movw	r18, r30
 2c2:	e8 94       	clt
 2c4:	42 30       	cpi	r20, 0x02	; 2
 2c6:	c4 f0       	brlt	.+48     	; 0x2f8 <itoa+0x3a>
 2c8:	45 32       	cpi	r20, 0x25	; 37
 2ca:	b4 f4       	brge	.+44     	; 0x2f8 <itoa+0x3a>
 2cc:	4a 30       	cpi	r20, 0x0A	; 10
 2ce:	29 f4       	brne	.+10     	; 0x2da <itoa+0x1c>
 2d0:	97 fb       	bst	r25, 7
 2d2:	1e f4       	brtc	.+6      	; 0x2da <itoa+0x1c>
 2d4:	90 95       	com	r25
 2d6:	81 95       	neg	r24
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	64 2f       	mov	r22, r20
 2dc:	77 27       	eor	r23, r23
 2de:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodhi4>
 2e2:	80 5d       	subi	r24, 0xD0	; 208
 2e4:	8a 33       	cpi	r24, 0x3A	; 58
 2e6:	0c f0       	brlt	.+2      	; 0x2ea <itoa+0x2c>
 2e8:	89 5d       	subi	r24, 0xD9	; 217
 2ea:	81 93       	st	Z+, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	a1 f7       	brne	.-24     	; 0x2da <itoa+0x1c>
 2f2:	16 f4       	brtc	.+4      	; 0x2f8 <itoa+0x3a>
 2f4:	5d e2       	ldi	r21, 0x2D	; 45
 2f6:	51 93       	st	Z+, r21
 2f8:	10 82       	st	Z, r1
 2fa:	c9 01       	movw	r24, r18
 2fc:	0c 94 80 01 	jmp	0x300	; 0x300 <strrev>

00000300 <strrev>:
 300:	dc 01       	movw	r26, r24
 302:	fc 01       	movw	r30, r24
 304:	67 2f       	mov	r22, r23
 306:	71 91       	ld	r23, Z+
 308:	77 23       	and	r23, r23
 30a:	e1 f7       	brne	.-8      	; 0x304 <strrev+0x4>
 30c:	32 97       	sbiw	r30, 0x02	; 2
 30e:	04 c0       	rjmp	.+8      	; 0x318 <strrev+0x18>
 310:	7c 91       	ld	r23, X
 312:	6d 93       	st	X+, r22
 314:	70 83       	st	Z, r23
 316:	62 91       	ld	r22, -Z
 318:	ae 17       	cp	r26, r30
 31a:	bf 07       	cpc	r27, r31
 31c:	c8 f3       	brcs	.-14     	; 0x310 <strrev+0x10>
 31e:	08 95       	ret

00000320 <__udivmodhi4>:
 320:	aa 1b       	sub	r26, r26
 322:	bb 1b       	sub	r27, r27
 324:	51 e1       	ldi	r21, 0x11	; 17
 326:	07 c0       	rjmp	.+14     	; 0x336 <__udivmodhi4_ep>

00000328 <__udivmodhi4_loop>:
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	a6 17       	cp	r26, r22
 32e:	b7 07       	cpc	r27, r23
 330:	10 f0       	brcs	.+4      	; 0x336 <__udivmodhi4_ep>
 332:	a6 1b       	sub	r26, r22
 334:	b7 0b       	sbc	r27, r23

00000336 <__udivmodhi4_ep>:
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	5a 95       	dec	r21
 33c:	a9 f7       	brne	.-22     	; 0x328 <__udivmodhi4_loop>
 33e:	80 95       	com	r24
 340:	90 95       	com	r25
 342:	bc 01       	movw	r22, r24
 344:	cd 01       	movw	r24, r26
 346:	08 95       	ret

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
