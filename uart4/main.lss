
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002c1  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a9  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c7  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000170  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a7  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  7a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:
/********************************************************************************
                                usart Related
********************************************************************************/
void usart_init( uint16_t ubrr) {
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
  82:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)ubrr;
  84:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  8a:	8e e8       	ldi	r24, 0x8E	; 142
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <usart_putchar>:
}

void usart_putchar(char data) { 
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <usart_putchar>
	// Start transmission
	UDR = data; 
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <usart_getchar>:
}

char usart_getchar(void) { 
	// Wait for incomming data
	while ( !(UCSRA & (_BV(RXC))) );
  98:	5f 9b       	sbis	0x0b, 7	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <usart_getchar>
	// Return the data
	return UDR;
  9c:	8c b1       	in	r24, 0x0c	; 12
} 
  9e:	08 95       	ret

000000a0 <usart_pstr>:

void usart_pstr(char *s) {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec 01       	movw	r28, r24
    // loop through entire string
	while (*s) {  
  a6:	89 91       	ld	r24, Y+
  a8:	88 23       	and	r24, r24
  aa:	19 f0       	breq	.+6      	; 0xb2 <usart_pstr+0x12>
        usart_putchar(*s);
  ac:	0e 94 48 00 	call	0x90	; 0x90 <usart_putchar>
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <usart_pstr+0x6>
        s++;
    }
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <kbhit>:

unsigned char kbhit(void) {
	//return nonzero if char waiting  polled version
	unsigned char b;
	b=0;
	if(UCSRA & (1<<RXC)) b=1;
  b8:	8b b1       	in	r24, 0x0b	; 11
	return b;
}
  ba:	88 1f       	adc	r24, r24
  bc:	88 27       	eor	r24, r24
  be:	88 1f       	adc	r24, r24
  c0:	08 95       	ret

000000c2 <main>:
int main( void )
{
	

	// configure PORTA as output
	DDRA = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
	// setup PORTB data direction as an input
	DDRB = 0;
  c6:	17 ba       	out	0x17, r1	; 23
	// make sure it is high impedance and will not source
	PORTB = 0;
  c8:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0xe>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x18>
  da:	00 00       	nop
	_delay_ms(2000);
	// fire up the usart
	usart_init ( MYUBRR );
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 41 00 	call	0x82	; 0x82 <usart_init>


	usart_pstr("\x1B[2J\x1B\x63");
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_pstr>
	usart_pstr("Ready to rock and roll!\n\r");  // dump some strings to the screen at power on
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_pstr>
	usart_pstr("Type in a character, and I will transpose it up by 1:\n\r");
  f4:	81 e8       	ldi	r24, 0x81	; 129
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_pstr>
	
	// main loop
	while(true) {
		
		usart_pstr("A");
  fc:	89 eb       	ldi	r24, 0xB9	; 185
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_pstr>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	84 e3       	ldi	r24, 0x34	; 52
 108:	9c e0       	ldi	r25, 0x0C	; 12
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x48>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x52>
 114:	00 00       	nop
 116:	f2 cf       	rjmp	.-28     	; 0xfc <main+0x3a>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
