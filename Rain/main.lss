
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000932  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000d3  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000693  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000036a  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000055f  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000120  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e2  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000298  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00001f92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
   4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
   8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
   c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
  54:	00 40       	sbci	r16, 0x00	; 0
  56:	7a 10       	cpse	r7, r10
  58:	f3 5a       	subi	r31, 0xA3	; 163
  5a:	00 a0       	ldd	r0, Z+32	; 0x20
  5c:	72 4e       	sbci	r23, 0xE2	; 226
  5e:	18 09       	sbc	r17, r8
  60:	00 10       	cpse	r0, r0
  62:	a5 d4       	rcall	.+2378   	; 0x9ae <_etext+0x7c>
  64:	e8 00       	.word	0x00e8	; ????
  66:	00 e8       	ldi	r16, 0x80	; 128
  68:	76 48       	sbci	r23, 0x86	; 134
  6a:	17 00       	.word	0x0017	; ????
  6c:	00 e4       	ldi	r16, 0x40	; 64
  6e:	0b 54       	subi	r16, 0x4B	; 75
  70:	02 00       	.word	0x0002	; ????
  72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
  74:	9a 3b       	cpi	r25, 0xBA	; 186
  76:	00 00       	nop
  78:	00 e1       	ldi	r16, 0x10	; 16
  7a:	f5 05       	cpc	r31, r5
  7c:	00 00       	nop
  7e:	80 96       	adiw	r24, 0x20	; 32
  80:	98 00       	.word	0x0098	; ????
  82:	00 00       	nop
  84:	40 42       	sbci	r20, 0x20	; 32
  86:	0f 00       	.word	0x000f	; ????
  88:	00 00       	nop
  8a:	a0 86       	std	Z+8, r10	; 0x08
  8c:	01 00       	.word	0x0001	; ????
  8e:	00 00       	nop
  90:	10 27       	eor	r17, r16
  92:	00 00       	nop
  94:	00 00       	nop
  96:	e8 03       	fmulsu	r22, r16
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	64 00       	.word	0x0064	; ????
  9e:	00 00       	nop
  a0:	00 00       	nop
  a2:	0a 00       	.word	0x000a	; ????
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	01 00       	.word	0x0001	; ????
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	2c 76       	andi	r18, 0x6C	; 108
  b0:	d8 88       	ldd	r13, Y+16	; 0x10
  b2:	dc 67       	ori	r29, 0x7C	; 124
  b4:	4f 08       	sbc	r4, r15
  b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
  b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
  ba:	ae 59       	subi	r26, 0x9E	; 158
  bc:	e1 b1       	in	r30, 0x01	; 1
  be:	b7 96       	adiw	r30, 0x27	; 39
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	e4 53       	subi	r30, 0x34	; 52
  c4:	c6 3a       	cpi	r28, 0xA6	; 166
  c6:	e6 51       	subi	r30, 0x16	; 22
  c8:	99 76       	andi	r25, 0x69	; 105
  ca:	96 e8       	ldi	r25, 0x86	; 134
  cc:	e6 c2       	rjmp	.+1484   	; 0x69a <dtoa_prf+0x24e>
  ce:	84 26       	eor	r8, r20
  d0:	eb 89       	ldd	r30, Y+19	; 0x13
  d2:	8c 9b       	sbis	0x11, 4	; 17
  d4:	62 ed       	ldi	r22, 0xD2	; 210
  d6:	40 7c       	andi	r20, 0xC0	; 192
  d8:	6f fc       	.word	0xfc6f	; ????
  da:	ef bc       	out	0x2f, r14	; 47
  dc:	9c 9f       	mul	r25, r28
  de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
  e0:	ba a5       	ldd	r27, Y+42	; 0x2a
  e2:	6f a5       	ldd	r22, Y+47	; 0x2f
  e4:	f4 90       	lpm	r15, Z+
  e6:	05 5a       	subi	r16, 0xA5	; 165
  e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
  ea:	5c 93       	st	X, r21
  ec:	6b 6c       	ori	r22, 0xCB	; 203
  ee:	f9 67       	ori	r31, 0x79	; 121
  f0:	6d c1       	rjmp	.+730    	; 0x3cc <__floatsisf+0x38>
  f2:	1b fc       	.word	0xfc1b	; ????
  f4:	e0 e4       	ldi	r30, 0x40	; 64
  f6:	0d 47       	sbci	r16, 0x7D	; 125
  f8:	fe f5       	brtc	.+126    	; 0x178 <adc_read+0x8>
  fa:	20 e6       	ldi	r18, 0x60	; 96
  fc:	b5 00       	.word	0x00b5	; ????
  fe:	d0 ed       	ldi	r29, 0xD0	; 208
 100:	90 2e       	mov	r9, r16
 102:	03 00       	.word	0x0003	; ????
 104:	94 35       	cpi	r25, 0x54	; 84
 106:	77 05       	cpc	r23, r7
 108:	00 80       	ld	r0, Z
 10a:	84 1e       	adc	r8, r20
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 20       	and	r0, r0
 110:	4e 0a       	sbc	r4, r30
 112:	00 00       	nop
 114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
 116:	0c 33       	cpi	r16, 0x3C	; 60
 118:	33 33       	cpi	r19, 0x33	; 51
 11a:	33 0f       	add	r19, r19
 11c:	98 6e       	ori	r25, 0xE8	; 232
 11e:	12 83       	std	Z+2, r17	; 0x02
 120:	11 41       	sbci	r17, 0x11	; 17
 122:	ef 8d       	ldd	r30, Y+31	; 0x1f
 124:	21 14       	cp	r2, r1
 126:	89 3b       	cpi	r24, 0xB9	; 185
 128:	e6 55       	subi	r30, 0x56	; 86
 12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
 12c:	fe e6       	ldi	r31, 0x6E	; 110
 12e:	db 18       	sub	r13, r11
 130:	d1 84       	ldd	r13, Z+9	; 0x09
 132:	4b 38       	cpi	r20, 0x8B	; 139
 134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
 136:	7c 1d       	adc	r23, r12
 138:	90 1d       	adc	r25, r0
 13a:	a4 bb       	out	0x14, r26	; 20
 13c:	e4 24       	eor	r14, r4
 13e:	20 32       	cpi	r18, 0x20	; 32
 140:	84 72       	andi	r24, 0x24	; 36
 142:	5e 22       	and	r5, r30
 144:	81 00       	.word	0x0081	; ????
 146:	c9 f1       	breq	.+114    	; 0x1ba <main+0x36>
 148:	24 ec       	ldi	r18, 0xC4	; 196
 14a:	a1 e5       	ldi	r26, 0x51	; 81
 14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf e5       	ldi	r28, 0x5F	; 95
 154:	d8 e0       	ldi	r29, 0x08	; 8
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
 15e:	0c 94 97 04 	jmp	0x92e	; 0x92e <_exit>

00000162 <__bad_interrupt>:
 162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <adc_init>:
  
// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	87 b9       	out	0x07, r24	; 7
  
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS0);
 16a:	83 e8       	ldi	r24, 0x83	; 131
 16c:	86 b9       	out	0x06, r24	; 6
}
 16e:	08 95       	ret

00000170 <adc_read>:
  
// read adc value
uint16_t adc_read()
{
    ADMUX = (ADMUX)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 170:	87 b1       	in	r24, 0x07	; 7
 172:	87 60       	ori	r24, 0x07	; 7
 174:	87 b9       	out	0x07, r24	; 7
  
    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
 176:	36 9a       	sbi	0x06, 6	; 6
  
    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
 178:	36 99       	sbic	0x06, 6	; 6
 17a:	fe cf       	rjmp	.-4      	; 0x178 <adc_read+0x8>
  
    return (ADC);
 17c:	24 b1       	in	r18, 0x04	; 4
 17e:	35 b1       	in	r19, 0x05	; 5
}
 180:	c9 01       	movw	r24, r18
 182:	08 95       	ret

00000184 <main>:
  
int main()
{
 184:	af 92       	push	r10
 186:	bf 92       	push	r11
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	28 97       	sbiw	r28, 0x08	; 8
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
  
// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	87 b9       	out	0x07, r24	; 7
  
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS0);
 1ac:	83 e8       	ldi	r24, 0x83	; 131
 1ae:	86 b9       	out	0x06, r24	; 6
    // initialize adc and lcd
    adc_init();
	char buffer[12];
	char flot[8];

    lcd_init(LCD_DISP_ON);
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 92 01 	call	0x324	; 0x324 <lcd_init>
        adc_result = adc_read();
  
		
		lcd_clrscr();
		
		dtostrf( adc_result ,6,1, flot);
 1b6:	6e 01       	movw	r12, r28
 1b8:	08 94       	sec
 1ba:	c1 1c       	adc	r12, r1
 1bc:	d1 1c       	adc	r13, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1be:	88 e7       	ldi	r24, 0x78	; 120
 1c0:	a8 2e       	mov	r10, r24
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	b8 2e       	mov	r11, r24

    lcd_init(LCD_DISP_ON);
	
    while(1)
    {
        adc_result = adc_read();
 1c6:	0e 94 b8 00 	call	0x170	; 0x170 <adc_read>
 1ca:	7c 01       	movw	r14, r24
  
		
		lcd_clrscr();
 1cc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_clrscr>
		
		dtostrf( adc_result ,6,1, flot);
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	c8 01       	movw	r24, r16
 1d6:	b7 01       	movw	r22, r14
 1d8:	0e 94 c8 01 	call	0x390	; 0x390 <__floatunsisf>
 1dc:	46 e0       	ldi	r20, 0x06	; 6
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	86 01       	movw	r16, r12
 1e2:	0e 94 05 02 	call	0x40a	; 0x40a <dtostrf>
		
		lcd_puts(flot);
 1e6:	c6 01       	movw	r24, r12
 1e8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_puts>
 1ec:	c5 01       	movw	r24, r10
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x6a>
 1f2:	e9 cf       	rjmp	.-46     	; 0x1c6 <main+0x42>

000001f4 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1f4:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 1f6:	66 23       	and	r22, r22
 1f8:	11 f0       	breq	.+4      	; 0x1fe <lcd_write+0xa>
       lcd_rs_high();
 1fa:	dc 9a       	sbi	0x1b, 4	; 27
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1fe:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
 200:	dd 98       	cbi	0x1b, 5	; 27

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 202:	8a b3       	in	r24, 0x1a	; 26
 204:	8f 60       	ori	r24, 0x0F	; 15
 206:	8a bb       	out	0x1a, r24	; 26

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 20c:	82 2f       	mov	r24, r18
 20e:	82 95       	swap	r24
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	89 2b       	or	r24, r25
 214:	8b bb       	out	0x1b, r24	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 216:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_write+0x26>
    lcd_e_low();
 21a:	de 98       	cbi	0x1b, 6	; 27
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 21c:	2f 70       	andi	r18, 0x0F	; 15
 21e:	29 2b       	or	r18, r25
 220:	2b bb       	out	0x1b, r18	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 222:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_write+0x32>
    lcd_e_low();
 226:	de 98       	cbi	0x1b, 6	; 27
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 228:	9f 60       	ori	r25, 0x0F	; 15
 22a:	9b bb       	out	0x1b, r25	; 27
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 22c:	08 95       	ret

0000022e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 22e:	88 23       	and	r24, r24
 230:	11 f0       	breq	.+4      	; 0x236 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 232:	dc 9a       	sbi	0x1b, 4	; 27
 234:	01 c0       	rjmp	.+2      	; 0x238 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 236:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
 238:	dd 9a       	sbi	0x1b, 5	; 27
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 23a:	8a b3       	in	r24, 0x1a	; 26
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	8a bb       	out	0x1a, r24	; 26
        
        lcd_e_high();
 240:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();        
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 244:	99 b3       	in	r25, 0x19	; 25
        lcd_e_low();
 246:	de 98       	cbi	0x1b, 6	; 27
        
        lcd_e_delay();                       /* Enable 500ns low       */
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_read+0x1c>
        
        lcd_e_high();
 24a:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 24e:	89 b3       	in	r24, 0x19	; 25
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	92 95       	swap	r25
 254:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 256:	de 98       	cbi	0x1b, 6	; 27
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 258:	89 2b       	or	r24, r25
 25a:	08 95       	ret

0000025c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_read>
 262:	87 fd       	sbrc	r24, 7
 264:	fb cf       	rjmp	.-10     	; 0x25c <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_read>
    
}/* lcd_waitbusy */
 274:	08 95       	ret

00000276 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 276:	1f 93       	push	r17
 278:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 27a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_waitbusy>
    lcd_write(cmd,0);
 27e:	81 2f       	mov	r24, r17
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
}
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 28a:	1f 93       	push	r17
 28c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 28e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_waitbusy>
    lcd_write(data,1);
 292:	81 2f       	mov	r24, r17
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
}
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 29e:	66 23       	and	r22, r22
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2a2:	80 58       	subi	r24, 0x80	; 128
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2a6:	80 54       	subi	r24, 0x40	; 64
 2a8:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
 2ac:	08 95       	ret

000002ae <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_waitbusy>
}
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	08 95       	ret

000002b6 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
}
 2bc:	08 95       	ret

000002be <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
}
 2c4:	08 95       	ret

000002c6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2c6:	1f 93       	push	r17
 2c8:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2ca:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_waitbusy>
    if (c=='\n')
 2ce:	1a 30       	cpi	r17, 0x0A	; 10
 2d0:	49 f4       	brne	.+18     	; 0x2e4 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 2d2:	80 34       	cpi	r24, 0x40	; 64
 2d4:	10 f0       	brcs	.+4      	; 0x2da <lcd_putc+0x14>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <lcd_putc+0x16>
 2da:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 2dc:	80 58       	subi	r24, 0x80	; 128
 2de:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 2e4:	81 2f       	mov	r24, r17
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
    }

}/* lcd_putc */
 2ec:	1f 91       	pop	r17
 2ee:	08 95       	ret

000002f0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ec 01       	movw	r28, r24
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 2f8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 2fc:	89 91       	ld	r24, Y+
 2fe:	88 23       	and	r24, r24
 300:	d9 f7       	brne	.-10     	; 0x2f8 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 310:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_putc>
 314:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 316:	21 96       	adiw	r28, 0x01	; 1
 318:	84 91       	lpm	r24, Z+
 31a:	88 23       	and	r24, r24
 31c:	c9 f7       	brne	.-14     	; 0x310 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 324:	1f 93       	push	r17
 326:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 328:	8a b3       	in	r24, 0x1a	; 26
 32a:	8f 67       	ori	r24, 0x7F	; 127
 32c:	8a bb       	out	0x1a, r24	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	9e e3       	ldi	r25, 0x3E	; 62
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 336:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 338:	d8 9a       	sbi	0x1b, 0	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 33a:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init+0x1a>
    lcd_e_low();
 33e:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	93 e1       	ldi	r25, 0x13	; 19
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd_init+0x20>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 348:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_init+0x28>
    lcd_e_low();
 34c:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0x30>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 358:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_init+0x38>
    lcd_e_low();
 35c:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 35e:	fc 01       	movw	r30, r24
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 364:	d8 98       	cbi	0x1b, 0	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 366:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_init+0x46>
    lcd_e_low();
 36a:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x48>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 370:	88 e2       	ldi	r24, 0x28	; 40
 372:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 37c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 380:	86 e0       	ldi	r24, 0x06	; 6
 382:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 386:	81 2f       	mov	r24, r17
 388:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_command>

}/* lcd_init */
 38c:	1f 91       	pop	r17
 38e:	08 95       	ret

00000390 <__floatunsisf>:
 390:	e8 94       	clt
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <__floatsisf+0x12>

00000394 <__floatsisf>:
 394:	97 fb       	bst	r25, 7
 396:	3e f4       	brtc	.+14     	; 0x3a6 <__floatsisf+0x12>
 398:	90 95       	com	r25
 39a:	80 95       	com	r24
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255
 3a2:	8f 4f       	sbci	r24, 0xFF	; 255
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	99 23       	and	r25, r25
 3a8:	a9 f0       	breq	.+42     	; 0x3d4 <__floatsisf+0x40>
 3aa:	f9 2f       	mov	r31, r25
 3ac:	96 e9       	ldi	r25, 0x96	; 150
 3ae:	bb 27       	eor	r27, r27
 3b0:	93 95       	inc	r25
 3b2:	f6 95       	lsr	r31
 3b4:	87 95       	ror	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	b7 95       	ror	r27
 3bc:	f1 11       	cpse	r31, r1
 3be:	f8 cf       	rjmp	.-16     	; 0x3b0 <__floatsisf+0x1c>
 3c0:	fa f4       	brpl	.+62     	; 0x400 <__floatsisf+0x6c>
 3c2:	bb 0f       	add	r27, r27
 3c4:	11 f4       	brne	.+4      	; 0x3ca <__floatsisf+0x36>
 3c6:	60 ff       	sbrs	r22, 0
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__floatsisf+0x6c>
 3ca:	6f 5f       	subi	r22, 0xFF	; 255
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	8f 4f       	sbci	r24, 0xFF	; 255
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	16 c0       	rjmp	.+44     	; 0x400 <__floatsisf+0x6c>
 3d4:	88 23       	and	r24, r24
 3d6:	11 f0       	breq	.+4      	; 0x3dc <__floatsisf+0x48>
 3d8:	96 e9       	ldi	r25, 0x96	; 150
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <__floatsisf+0x6a>
 3dc:	77 23       	and	r23, r23
 3de:	21 f0       	breq	.+8      	; 0x3e8 <__floatsisf+0x54>
 3e0:	9e e8       	ldi	r25, 0x8E	; 142
 3e2:	87 2f       	mov	r24, r23
 3e4:	76 2f       	mov	r23, r22
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__floatsisf+0x5e>
 3e8:	66 23       	and	r22, r22
 3ea:	71 f0       	breq	.+28     	; 0x408 <__floatsisf+0x74>
 3ec:	96 e8       	ldi	r25, 0x86	; 134
 3ee:	86 2f       	mov	r24, r22
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	2a f0       	brmi	.+10     	; 0x400 <__floatsisf+0x6c>
 3f6:	9a 95       	dec	r25
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	da f7       	brpl	.-10     	; 0x3f6 <__floatsisf+0x62>
 400:	88 0f       	add	r24, r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	97 f9       	bld	r25, 7
 408:	08 95       	ret

0000040a <dtostrf>:
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	f2 2f       	mov	r31, r18
 414:	f0 2e       	mov	r15, r16
 416:	47 fd       	sbrc	r20, 7
 418:	02 c0       	rjmp	.+4      	; 0x41e <dtostrf+0x14>
 41a:	e4 e0       	ldi	r30, 0x04	; 4
 41c:	01 c0       	rjmp	.+2      	; 0x420 <dtostrf+0x16>
 41e:	e4 e1       	ldi	r30, 0x14	; 20
 420:	24 2f       	mov	r18, r20
 422:	33 27       	eor	r19, r19
 424:	27 fd       	sbrc	r18, 7
 426:	30 95       	com	r19
 428:	37 ff       	sbrs	r19, 7
 42a:	03 c0       	rjmp	.+6      	; 0x432 <dtostrf+0x28>
 42c:	30 95       	com	r19
 42e:	21 95       	neg	r18
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	4f 2d       	mov	r20, r15
 434:	51 2f       	mov	r21, r17
 436:	0f 2f       	mov	r16, r31
 438:	ee 2e       	mov	r14, r30
 43a:	0e 94 26 02 	call	0x44c	; 0x44c <dtoa_prf>
 43e:	8f 2d       	mov	r24, r15
 440:	91 2f       	mov	r25, r17
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	08 95       	ret

0000044c <dtoa_prf>:
 44c:	a9 e0       	ldi	r26, 0x09	; 9
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	ec e2       	ldi	r30, 0x2C	; 44
 452:	f2 e0       	ldi	r31, 0x02	; 2
 454:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__prologue_saves__+0x8>
 458:	6a 01       	movw	r12, r20
 45a:	12 2f       	mov	r17, r18
 45c:	a0 2e       	mov	r10, r16
 45e:	be 2c       	mov	r11, r14
 460:	2b e3       	ldi	r18, 0x3B	; 59
 462:	20 17       	cp	r18, r16
 464:	18 f4       	brcc	.+6      	; 0x46c <dtoa_prf+0x20>
 466:	2c e3       	ldi	r18, 0x3C	; 60
 468:	92 2e       	mov	r9, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <dtoa_prf+0x24>
 46c:	90 2e       	mov	r9, r16
 46e:	93 94       	inc	r9
 470:	ae 01       	movw	r20, r28
 472:	4f 5f       	subi	r20, 0xFF	; 255
 474:	5f 4f       	sbci	r21, 0xFF	; 255
 476:	27 e0       	ldi	r18, 0x07	; 7
 478:	09 2d       	mov	r16, r9
 47a:	0e 94 88 03 	call	0x710	; 0x710 <__ftoa_engine>
 47e:	bc 01       	movw	r22, r24
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	e8 2e       	mov	r14, r24
 484:	ff 24       	eor	r15, r15
 486:	c7 01       	movw	r24, r14
 488:	89 70       	andi	r24, 0x09	; 9
 48a:	90 70       	andi	r25, 0x00	; 0
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	11 f4       	brne	.+4      	; 0x494 <dtoa_prf+0x48>
 490:	ad e2       	ldi	r26, 0x2D	; 45
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <dtoa_prf+0x5a>
 494:	b1 fe       	sbrs	r11, 1
 496:	02 c0       	rjmp	.+4      	; 0x49c <dtoa_prf+0x50>
 498:	ab e2       	ldi	r26, 0x2B	; 43
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <dtoa_prf+0x5a>
 49c:	b0 fc       	sbrc	r11, 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <dtoa_prf+0x58>
 4a0:	a0 e0       	ldi	r26, 0x00	; 0
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <dtoa_prf+0x5a>
 4a4:	a0 e2       	ldi	r26, 0x20	; 32
 4a6:	e3 fe       	sbrs	r14, 3
 4a8:	3b c0       	rjmp	.+118    	; 0x520 <dtoa_prf+0xd4>
 4aa:	aa 23       	and	r26, r26
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <dtoa_prf+0x66>
 4ae:	23 e0       	ldi	r18, 0x03	; 3
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <dtoa_prf+0x68>
 4b2:	24 e0       	ldi	r18, 0x04	; 4
 4b4:	21 17       	cp	r18, r17
 4b6:	10 f0       	brcs	.+4      	; 0x4bc <dtoa_prf+0x70>
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <dtoa_prf+0x74>
 4bc:	12 1b       	sub	r17, r18
 4be:	21 2f       	mov	r18, r17
 4c0:	eb 2c       	mov	r14, r11
 4c2:	b4 fe       	sbrs	r11, 4
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <dtoa_prf+0x7e>
 4c6:	32 2f       	mov	r19, r18
 4c8:	0a c0       	rjmp	.+20     	; 0x4de <dtoa_prf+0x92>
 4ca:	f6 01       	movw	r30, r12
 4cc:	32 2f       	mov	r19, r18
 4ce:	80 e2       	ldi	r24, 0x20	; 32
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <dtoa_prf+0x8a>
 4d2:	81 93       	st	Z+, r24
 4d4:	31 50       	subi	r19, 0x01	; 1
 4d6:	33 23       	and	r19, r19
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <dtoa_prf+0x86>
 4da:	c2 0e       	add	r12, r18
 4dc:	d1 1c       	adc	r13, r1
 4de:	aa 23       	and	r26, r26
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <dtoa_prf+0x9c>
 4e2:	f6 01       	movw	r30, r12
 4e4:	a1 93       	st	Z+, r26
 4e6:	6f 01       	movw	r12, r30
 4e8:	f6 01       	movw	r30, r12
 4ea:	31 96       	adiw	r30, 0x01	; 1
 4ec:	e2 fe       	sbrs	r14, 2
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <dtoa_prf+0xae>
 4f0:	9e e4       	ldi	r25, 0x4E	; 78
 4f2:	d6 01       	movw	r26, r12
 4f4:	9c 93       	st	X, r25
 4f6:	81 e4       	ldi	r24, 0x41	; 65
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <dtoa_prf+0xb6>
 4fa:	9e e6       	ldi	r25, 0x6E	; 110
 4fc:	d6 01       	movw	r26, r12
 4fe:	9c 93       	st	X, r25
 500:	81 e6       	ldi	r24, 0x61	; 97
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	8c 93       	st	X, r24
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	32 96       	adiw	r30, 0x02	; 2
 50a:	df 01       	movw	r26, r30
 50c:	83 2f       	mov	r24, r19
 50e:	90 e2       	ldi	r25, 0x20	; 32
 510:	02 c0       	rjmp	.+4      	; 0x516 <dtoa_prf+0xca>
 512:	9d 93       	st	X+, r25
 514:	81 50       	subi	r24, 0x01	; 1
 516:	88 23       	and	r24, r24
 518:	e1 f7       	brne	.-8      	; 0x512 <dtoa_prf+0xc6>
 51a:	e3 0f       	add	r30, r19
 51c:	f1 1d       	adc	r31, r1
 51e:	40 c0       	rjmp	.+128    	; 0x5a0 <dtoa_prf+0x154>
 520:	e2 fe       	sbrs	r14, 2
 522:	42 c0       	rjmp	.+132    	; 0x5a8 <dtoa_prf+0x15c>
 524:	aa 23       	and	r26, r26
 526:	11 f4       	brne	.+4      	; 0x52c <dtoa_prf+0xe0>
 528:	23 e0       	ldi	r18, 0x03	; 3
 52a:	01 c0       	rjmp	.+2      	; 0x52e <dtoa_prf+0xe2>
 52c:	24 e0       	ldi	r18, 0x04	; 4
 52e:	21 17       	cp	r18, r17
 530:	10 f0       	brcs	.+4      	; 0x536 <dtoa_prf+0xea>
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <dtoa_prf+0xee>
 536:	12 1b       	sub	r17, r18
 538:	21 2f       	mov	r18, r17
 53a:	eb 2c       	mov	r14, r11
 53c:	b4 fe       	sbrs	r11, 4
 53e:	02 c0       	rjmp	.+4      	; 0x544 <dtoa_prf+0xf8>
 540:	92 2f       	mov	r25, r18
 542:	0a c0       	rjmp	.+20     	; 0x558 <dtoa_prf+0x10c>
 544:	f6 01       	movw	r30, r12
 546:	92 2f       	mov	r25, r18
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	02 c0       	rjmp	.+4      	; 0x550 <dtoa_prf+0x104>
 54c:	81 93       	st	Z+, r24
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	99 23       	and	r25, r25
 552:	e1 f7       	brne	.-8      	; 0x54c <dtoa_prf+0x100>
 554:	c2 0e       	add	r12, r18
 556:	d1 1c       	adc	r13, r1
 558:	aa 23       	and	r26, r26
 55a:	19 f0       	breq	.+6      	; 0x562 <dtoa_prf+0x116>
 55c:	f6 01       	movw	r30, r12
 55e:	a1 93       	st	Z+, r26
 560:	6f 01       	movw	r12, r30
 562:	f6 01       	movw	r30, r12
 564:	31 96       	adiw	r30, 0x01	; 1
 566:	e2 fe       	sbrs	r14, 2
 568:	08 c0       	rjmp	.+16     	; 0x57a <dtoa_prf+0x12e>
 56a:	89 e4       	ldi	r24, 0x49	; 73
 56c:	d6 01       	movw	r26, r12
 56e:	8c 93       	st	X, r24
 570:	8e e4       	ldi	r24, 0x4E	; 78
 572:	11 96       	adiw	r26, 0x01	; 1
 574:	8c 93       	st	X, r24
 576:	86 e4       	ldi	r24, 0x46	; 70
 578:	07 c0       	rjmp	.+14     	; 0x588 <dtoa_prf+0x13c>
 57a:	89 e6       	ldi	r24, 0x69	; 105
 57c:	d6 01       	movw	r26, r12
 57e:	8c 93       	st	X, r24
 580:	8e e6       	ldi	r24, 0x6E	; 110
 582:	11 96       	adiw	r26, 0x01	; 1
 584:	8c 93       	st	X, r24
 586:	86 e6       	ldi	r24, 0x66	; 102
 588:	81 83       	std	Z+1, r24	; 0x01
 58a:	32 96       	adiw	r30, 0x02	; 2
 58c:	df 01       	movw	r26, r30
 58e:	89 2f       	mov	r24, r25
 590:	20 e2       	ldi	r18, 0x20	; 32
 592:	02 c0       	rjmp	.+4      	; 0x598 <dtoa_prf+0x14c>
 594:	2d 93       	st	X+, r18
 596:	81 50       	subi	r24, 0x01	; 1
 598:	88 23       	and	r24, r24
 59a:	e1 f7       	brne	.-8      	; 0x594 <dtoa_prf+0x148>
 59c:	e9 0f       	add	r30, r25
 59e:	f1 1d       	adc	r31, r1
 5a0:	10 82       	st	Z, r1
 5a2:	2e ef       	ldi	r18, 0xFE	; 254
 5a4:	3f ef       	ldi	r19, 0xFF	; 255
 5a6:	af c0       	rjmp	.+350    	; 0x706 <dtoa_prf+0x2ba>
 5a8:	16 16       	cp	r1, r22
 5aa:	17 06       	cpc	r1, r23
 5ac:	1c f0       	brlt	.+6      	; 0x5b4 <dtoa_prf+0x168>
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <dtoa_prf+0x16e>
 5b4:	ab 01       	movw	r20, r22
 5b6:	4f 5f       	subi	r20, 0xFF	; 255
 5b8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ba:	aa 20       	and	r10, r10
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <dtoa_prf+0x178>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <dtoa_prf+0x17e>
 5c4:	8a 2d       	mov	r24, r10
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	aa 23       	and	r26, r26
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <dtoa_prf+0x18a>
 5d2:	21 e0       	ldi	r18, 0x01	; 1
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	24 0f       	add	r18, r20
 5d8:	35 1f       	adc	r19, r21
 5da:	28 0f       	add	r18, r24
 5dc:	39 1f       	adc	r19, r25
 5de:	81 2f       	mov	r24, r17
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	14 f0       	brlt	.+4      	; 0x5ec <dtoa_prf+0x1a0>
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <dtoa_prf+0x1a4>
 5ec:	12 1b       	sub	r17, r18
 5ee:	21 2f       	mov	r18, r17
 5f0:	4b 2d       	mov	r20, r11
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	ca 01       	movw	r24, r20
 5f6:	80 71       	andi	r24, 0x10	; 16
 5f8:	90 70       	andi	r25, 0x00	; 0
 5fa:	b4 fc       	sbrc	r11, 4
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <dtoa_prf+0x1cc>
 5fe:	b3 fc       	sbrc	r11, 3
 600:	0b c0       	rjmp	.+22     	; 0x618 <dtoa_prf+0x1cc>
 602:	f6 01       	movw	r30, r12
 604:	32 2f       	mov	r19, r18
 606:	40 e2       	ldi	r20, 0x20	; 32
 608:	02 c0       	rjmp	.+4      	; 0x60e <dtoa_prf+0x1c2>
 60a:	41 93       	st	Z+, r20
 60c:	31 50       	subi	r19, 0x01	; 1
 60e:	33 23       	and	r19, r19
 610:	e1 f7       	brne	.-8      	; 0x60a <dtoa_prf+0x1be>
 612:	c2 0e       	add	r12, r18
 614:	d1 1c       	adc	r13, r1
 616:	01 c0       	rjmp	.+2      	; 0x61a <dtoa_prf+0x1ce>
 618:	32 2f       	mov	r19, r18
 61a:	aa 23       	and	r26, r26
 61c:	19 f0       	breq	.+6      	; 0x624 <dtoa_prf+0x1d8>
 61e:	f6 01       	movw	r30, r12
 620:	a1 93       	st	Z+, r26
 622:	6f 01       	movw	r12, r30
 624:	89 2b       	or	r24, r25
 626:	11 f0       	breq	.+4      	; 0x62c <dtoa_prf+0x1e0>
 628:	13 2f       	mov	r17, r19
 62a:	0a c0       	rjmp	.+20     	; 0x640 <dtoa_prf+0x1f4>
 62c:	f6 01       	movw	r30, r12
 62e:	13 2f       	mov	r17, r19
 630:	80 e3       	ldi	r24, 0x30	; 48
 632:	02 c0       	rjmp	.+4      	; 0x638 <dtoa_prf+0x1ec>
 634:	81 93       	st	Z+, r24
 636:	11 50       	subi	r17, 0x01	; 1
 638:	11 23       	and	r17, r17
 63a:	e1 f7       	brne	.-8      	; 0x634 <dtoa_prf+0x1e8>
 63c:	c3 0e       	add	r12, r19
 63e:	d1 1c       	adc	r13, r1
 640:	09 2d       	mov	r16, r9
 642:	06 0f       	add	r16, r22
 644:	ba 80       	ldd	r11, Y+2	; 0x02
 646:	90 e1       	ldi	r25, 0x10	; 16
 648:	89 2e       	mov	r8, r25
 64a:	91 2c       	mov	r9, r1
 64c:	8e 20       	and	r8, r14
 64e:	9f 20       	and	r9, r15
 650:	e4 fe       	sbrs	r14, 4
 652:	04 c0       	rjmp	.+8      	; 0x65c <dtoa_prf+0x210>
 654:	f1 e3       	ldi	r31, 0x31	; 49
 656:	bf 16       	cp	r11, r31
 658:	09 f4       	brne	.+2      	; 0x65c <dtoa_prf+0x210>
 65a:	01 50       	subi	r16, 0x01	; 1
 65c:	10 16       	cp	r1, r16
 65e:	14 f0       	brlt	.+4      	; 0x664 <dtoa_prf+0x218>
 660:	01 e0       	ldi	r16, 0x01	; 1
 662:	03 c0       	rjmp	.+6      	; 0x66a <dtoa_prf+0x21e>
 664:	09 30       	cpi	r16, 0x09	; 9
 666:	08 f0       	brcs	.+2      	; 0x66a <dtoa_prf+0x21e>
 668:	08 e0       	ldi	r16, 0x08	; 8
 66a:	9b 01       	movw	r18, r22
 66c:	77 ff       	sbrs	r23, 7
 66e:	02 c0       	rjmp	.+4      	; 0x674 <dtoa_prf+0x228>
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	cb 01       	movw	r24, r22
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	82 1b       	sub	r24, r18
 67a:	93 0b       	sbc	r25, r19
 67c:	fe 01       	movw	r30, r28
 67e:	31 96       	adiw	r30, 0x01	; 1
 680:	e8 0f       	add	r30, r24
 682:	f9 1f       	adc	r31, r25
 684:	8e e2       	ldi	r24, 0x2E	; 46
 686:	f8 2e       	mov	r15, r24
 688:	3b 01       	movw	r6, r22
 68a:	60 1a       	sub	r6, r16
 68c:	71 08       	sbc	r7, r1
 68e:	8a 2d       	mov	r24, r10
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	44 27       	eor	r20, r20
 694:	55 27       	eor	r21, r21
 696:	48 1b       	sub	r20, r24
 698:	59 0b       	sbc	r21, r25
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	2f 3f       	cpi	r18, 0xFF	; 255
 69e:	38 07       	cpc	r19, r24
 6a0:	19 f4       	brne	.+6      	; 0x6a8 <dtoa_prf+0x25c>
 6a2:	d6 01       	movw	r26, r12
 6a4:	fd 92       	st	X+, r15
 6a6:	6d 01       	movw	r12, r26
 6a8:	62 17       	cp	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	2c f0       	brlt	.+10     	; 0x6b8 <dtoa_prf+0x26c>
 6ae:	62 16       	cp	r6, r18
 6b0:	73 06       	cpc	r7, r19
 6b2:	14 f4       	brge	.+4      	; 0x6b8 <dtoa_prf+0x26c>
 6b4:	80 81       	ld	r24, Z
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <dtoa_prf+0x26e>
 6b8:	80 e3       	ldi	r24, 0x30	; 48
 6ba:	21 50       	subi	r18, 0x01	; 1
 6bc:	30 40       	sbci	r19, 0x00	; 0
 6be:	31 96       	adiw	r30, 0x01	; 1
 6c0:	24 17       	cp	r18, r20
 6c2:	35 07       	cpc	r19, r21
 6c4:	24 f0       	brlt	.+8      	; 0x6ce <dtoa_prf+0x282>
 6c6:	d6 01       	movw	r26, r12
 6c8:	8d 93       	st	X+, r24
 6ca:	6d 01       	movw	r12, r26
 6cc:	e6 cf       	rjmp	.-52     	; 0x69a <dtoa_prf+0x24e>
 6ce:	26 17       	cp	r18, r22
 6d0:	37 07       	cpc	r19, r23
 6d2:	49 f4       	brne	.+18     	; 0x6e6 <dtoa_prf+0x29a>
 6d4:	b5 e3       	ldi	r27, 0x35	; 53
 6d6:	bb 15       	cp	r27, r11
 6d8:	28 f0       	brcs	.+10     	; 0x6e4 <dtoa_prf+0x298>
 6da:	bb 16       	cp	r11, r27
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <dtoa_prf+0x29a>
 6de:	81 14       	cp	r8, r1
 6e0:	91 04       	cpc	r9, r1
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <dtoa_prf+0x29a>
 6e4:	81 e3       	ldi	r24, 0x31	; 49
 6e6:	f6 01       	movw	r30, r12
 6e8:	81 93       	st	Z+, r24
 6ea:	d6 01       	movw	r26, r12
 6ec:	81 2f       	mov	r24, r17
 6ee:	90 e2       	ldi	r25, 0x20	; 32
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <dtoa_prf+0x2aa>
 6f2:	9c 93       	st	X, r25
 6f4:	81 50       	subi	r24, 0x01	; 1
 6f6:	11 96       	adiw	r26, 0x01	; 1
 6f8:	88 23       	and	r24, r24
 6fa:	d9 f7       	brne	.-10     	; 0x6f2 <dtoa_prf+0x2a6>
 6fc:	e1 0f       	add	r30, r17
 6fe:	f1 1d       	adc	r31, r1
 700:	10 82       	st	Z, r1
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	c9 01       	movw	r24, r18
 708:	29 96       	adiw	r28, 0x09	; 9
 70a:	ee e0       	ldi	r30, 0x0E	; 14
 70c:	0c 94 80 04 	jmp	0x900	; 0x900 <__epilogue_restores__+0x8>

00000710 <__ftoa_engine>:
 710:	28 30       	cpi	r18, 0x08	; 8
 712:	08 f0       	brcs	.+2      	; 0x716 <__ftoa_engine+0x6>
 714:	27 e0       	ldi	r18, 0x07	; 7
 716:	33 27       	eor	r19, r19
 718:	da 01       	movw	r26, r20
 71a:	99 0f       	add	r25, r25
 71c:	31 1d       	adc	r19, r1
 71e:	87 fd       	sbrc	r24, 7
 720:	91 60       	ori	r25, 0x01	; 1
 722:	00 96       	adiw	r24, 0x00	; 0
 724:	61 05       	cpc	r22, r1
 726:	71 05       	cpc	r23, r1
 728:	39 f4       	brne	.+14     	; 0x738 <__ftoa_engine+0x28>
 72a:	32 60       	ori	r19, 0x02	; 2
 72c:	2e 5f       	subi	r18, 0xFE	; 254
 72e:	3d 93       	st	X+, r19
 730:	30 e3       	ldi	r19, 0x30	; 48
 732:	2a 95       	dec	r18
 734:	e1 f7       	brne	.-8      	; 0x72e <__ftoa_engine+0x1e>
 736:	08 95       	ret
 738:	9f 3f       	cpi	r25, 0xFF	; 255
 73a:	30 f0       	brcs	.+12     	; 0x748 <__ftoa_engine+0x38>
 73c:	80 38       	cpi	r24, 0x80	; 128
 73e:	71 05       	cpc	r23, r1
 740:	61 05       	cpc	r22, r1
 742:	09 f0       	breq	.+2      	; 0x746 <__ftoa_engine+0x36>
 744:	3c 5f       	subi	r19, 0xFC	; 252
 746:	3c 5f       	subi	r19, 0xFC	; 252
 748:	3d 93       	st	X+, r19
 74a:	91 30       	cpi	r25, 0x01	; 1
 74c:	08 f0       	brcs	.+2      	; 0x750 <__ftoa_engine+0x40>
 74e:	80 68       	ori	r24, 0x80	; 128
 750:	91 1d       	adc	r25, r1
 752:	df 93       	push	r29
 754:	cf 93       	push	r28
 756:	1f 93       	push	r17
 758:	0f 93       	push	r16
 75a:	ff 92       	push	r15
 75c:	ef 92       	push	r14
 75e:	19 2f       	mov	r17, r25
 760:	98 7f       	andi	r25, 0xF8	; 248
 762:	96 95       	lsr	r25
 764:	e9 2f       	mov	r30, r25
 766:	96 95       	lsr	r25
 768:	96 95       	lsr	r25
 76a:	e9 0f       	add	r30, r25
 76c:	ff 27       	eor	r31, r31
 76e:	e2 55       	subi	r30, 0x52	; 82
 770:	ff 4f       	sbci	r31, 0xFF	; 255
 772:	99 27       	eor	r25, r25
 774:	33 27       	eor	r19, r19
 776:	ee 24       	eor	r14, r14
 778:	ff 24       	eor	r15, r15
 77a:	a7 01       	movw	r20, r14
 77c:	e7 01       	movw	r28, r14
 77e:	05 90       	lpm	r0, Z+
 780:	08 94       	sec
 782:	07 94       	ror	r0
 784:	28 f4       	brcc	.+10     	; 0x790 <__ftoa_engine+0x80>
 786:	36 0f       	add	r19, r22
 788:	e7 1e       	adc	r14, r23
 78a:	f8 1e       	adc	r15, r24
 78c:	49 1f       	adc	r20, r25
 78e:	51 1d       	adc	r21, r1
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	06 94       	lsr	r0
 79a:	a1 f7       	brne	.-24     	; 0x784 <__ftoa_engine+0x74>
 79c:	05 90       	lpm	r0, Z+
 79e:	07 94       	ror	r0
 7a0:	28 f4       	brcc	.+10     	; 0x7ac <__ftoa_engine+0x9c>
 7a2:	e7 0e       	add	r14, r23
 7a4:	f8 1e       	adc	r15, r24
 7a6:	49 1f       	adc	r20, r25
 7a8:	56 1f       	adc	r21, r22
 7aa:	c1 1d       	adc	r28, r1
 7ac:	77 0f       	add	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	66 1f       	adc	r22, r22
 7b4:	06 94       	lsr	r0
 7b6:	a1 f7       	brne	.-24     	; 0x7a0 <__ftoa_engine+0x90>
 7b8:	05 90       	lpm	r0, Z+
 7ba:	07 94       	ror	r0
 7bc:	28 f4       	brcc	.+10     	; 0x7c8 <__ftoa_engine+0xb8>
 7be:	f8 0e       	add	r15, r24
 7c0:	49 1f       	adc	r20, r25
 7c2:	56 1f       	adc	r21, r22
 7c4:	c7 1f       	adc	r28, r23
 7c6:	d1 1d       	adc	r29, r1
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	66 1f       	adc	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	06 94       	lsr	r0
 7d2:	a1 f7       	brne	.-24     	; 0x7bc <__ftoa_engine+0xac>
 7d4:	05 90       	lpm	r0, Z+
 7d6:	07 94       	ror	r0
 7d8:	20 f4       	brcc	.+8      	; 0x7e2 <__ftoa_engine+0xd2>
 7da:	49 0f       	add	r20, r25
 7dc:	56 1f       	adc	r21, r22
 7de:	c7 1f       	adc	r28, r23
 7e0:	d8 1f       	adc	r29, r24
 7e2:	99 0f       	add	r25, r25
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	06 94       	lsr	r0
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__ftoa_engine+0xc8>
 7ee:	84 91       	lpm	r24, Z+
 7f0:	10 95       	com	r17
 7f2:	17 70       	andi	r17, 0x07	; 7
 7f4:	41 f0       	breq	.+16     	; 0x806 <__ftoa_engine+0xf6>
 7f6:	d6 95       	lsr	r29
 7f8:	c7 95       	ror	r28
 7fa:	57 95       	ror	r21
 7fc:	47 95       	ror	r20
 7fe:	f7 94       	ror	r15
 800:	e7 94       	ror	r14
 802:	1a 95       	dec	r17
 804:	c1 f7       	brne	.-16     	; 0x7f6 <__ftoa_engine+0xe6>
 806:	e4 e5       	ldi	r30, 0x54	; 84
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	68 94       	set
 80c:	15 90       	lpm	r1, Z+
 80e:	15 91       	lpm	r17, Z+
 810:	35 91       	lpm	r19, Z+
 812:	65 91       	lpm	r22, Z+
 814:	95 91       	lpm	r25, Z+
 816:	05 90       	lpm	r0, Z+
 818:	7f e2       	ldi	r23, 0x2F	; 47
 81a:	73 95       	inc	r23
 81c:	e1 18       	sub	r14, r1
 81e:	f1 0a       	sbc	r15, r17
 820:	43 0b       	sbc	r20, r19
 822:	56 0b       	sbc	r21, r22
 824:	c9 0b       	sbc	r28, r25
 826:	d0 09       	sbc	r29, r0
 828:	c0 f7       	brcc	.-16     	; 0x81a <__ftoa_engine+0x10a>
 82a:	e1 0c       	add	r14, r1
 82c:	f1 1e       	adc	r15, r17
 82e:	43 1f       	adc	r20, r19
 830:	56 1f       	adc	r21, r22
 832:	c9 1f       	adc	r28, r25
 834:	d0 1d       	adc	r29, r0
 836:	7e f4       	brtc	.+30     	; 0x856 <__ftoa_engine+0x146>
 838:	70 33       	cpi	r23, 0x30	; 48
 83a:	11 f4       	brne	.+4      	; 0x840 <__ftoa_engine+0x130>
 83c:	8a 95       	dec	r24
 83e:	e6 cf       	rjmp	.-52     	; 0x80c <__ftoa_engine+0xfc>
 840:	e8 94       	clt
 842:	01 50       	subi	r16, 0x01	; 1
 844:	30 f0       	brcs	.+12     	; 0x852 <__ftoa_engine+0x142>
 846:	08 0f       	add	r16, r24
 848:	0a f4       	brpl	.+2      	; 0x84c <__ftoa_engine+0x13c>
 84a:	00 27       	eor	r16, r16
 84c:	02 17       	cp	r16, r18
 84e:	08 f4       	brcc	.+2      	; 0x852 <__ftoa_engine+0x142>
 850:	20 2f       	mov	r18, r16
 852:	23 95       	inc	r18
 854:	02 2f       	mov	r16, r18
 856:	7a 33       	cpi	r23, 0x3A	; 58
 858:	28 f0       	brcs	.+10     	; 0x864 <__stack+0x5>
 85a:	79 e3       	ldi	r23, 0x39	; 57
 85c:	7d 93       	st	X+, r23
 85e:	2a 95       	dec	r18
 860:	e9 f7       	brne	.-6      	; 0x85c <__ftoa_engine+0x14c>
 862:	10 c0       	rjmp	.+32     	; 0x884 <__stack+0x25>
 864:	7d 93       	st	X+, r23
 866:	2a 95       	dec	r18
 868:	89 f6       	brne	.-94     	; 0x80c <__ftoa_engine+0xfc>
 86a:	06 94       	lsr	r0
 86c:	97 95       	ror	r25
 86e:	67 95       	ror	r22
 870:	37 95       	ror	r19
 872:	17 95       	ror	r17
 874:	17 94       	ror	r1
 876:	e1 18       	sub	r14, r1
 878:	f1 0a       	sbc	r15, r17
 87a:	43 0b       	sbc	r20, r19
 87c:	56 0b       	sbc	r21, r22
 87e:	c9 0b       	sbc	r28, r25
 880:	d0 09       	sbc	r29, r0
 882:	98 f0       	brcs	.+38     	; 0x8aa <__stack+0x4b>
 884:	23 95       	inc	r18
 886:	7e 91       	ld	r23, -X
 888:	73 95       	inc	r23
 88a:	7a 33       	cpi	r23, 0x3A	; 58
 88c:	08 f0       	brcs	.+2      	; 0x890 <__stack+0x31>
 88e:	70 e3       	ldi	r23, 0x30	; 48
 890:	7c 93       	st	X, r23
 892:	20 13       	cpse	r18, r16
 894:	b8 f7       	brcc	.-18     	; 0x884 <__stack+0x25>
 896:	7e 91       	ld	r23, -X
 898:	70 61       	ori	r23, 0x10	; 16
 89a:	7d 93       	st	X+, r23
 89c:	30 f0       	brcs	.+12     	; 0x8aa <__stack+0x4b>
 89e:	83 95       	inc	r24
 8a0:	71 e3       	ldi	r23, 0x31	; 49
 8a2:	7d 93       	st	X+, r23
 8a4:	70 e3       	ldi	r23, 0x30	; 48
 8a6:	2a 95       	dec	r18
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	11 24       	eor	r1, r1
 8ac:	ef 90       	pop	r14
 8ae:	ff 90       	pop	r15
 8b0:	0f 91       	pop	r16
 8b2:	1f 91       	pop	r17
 8b4:	cf 91       	pop	r28
 8b6:	df 91       	pop	r29
 8b8:	99 27       	eor	r25, r25
 8ba:	87 fd       	sbrc	r24, 7
 8bc:	90 95       	com	r25
 8be:	08 95       	ret

000008c0 <__prologue_saves__>:
 8c0:	2f 92       	push	r2
 8c2:	3f 92       	push	r3
 8c4:	4f 92       	push	r4
 8c6:	5f 92       	push	r5
 8c8:	6f 92       	push	r6
 8ca:	7f 92       	push	r7
 8cc:	8f 92       	push	r8
 8ce:	9f 92       	push	r9
 8d0:	af 92       	push	r10
 8d2:	bf 92       	push	r11
 8d4:	cf 92       	push	r12
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	ca 1b       	sub	r28, r26
 8ea:	db 0b       	sbc	r29, r27
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	de bf       	out	0x3e, r29	; 62
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	cd bf       	out	0x3d, r28	; 61
 8f6:	09 94       	ijmp

000008f8 <__epilogue_restores__>:
 8f8:	2a 88       	ldd	r2, Y+18	; 0x12
 8fa:	39 88       	ldd	r3, Y+17	; 0x11
 8fc:	48 88       	ldd	r4, Y+16	; 0x10
 8fe:	5f 84       	ldd	r5, Y+15	; 0x0f
 900:	6e 84       	ldd	r6, Y+14	; 0x0e
 902:	7d 84       	ldd	r7, Y+13	; 0x0d
 904:	8c 84       	ldd	r8, Y+12	; 0x0c
 906:	9b 84       	ldd	r9, Y+11	; 0x0b
 908:	aa 84       	ldd	r10, Y+10	; 0x0a
 90a:	b9 84       	ldd	r11, Y+9	; 0x09
 90c:	c8 84       	ldd	r12, Y+8	; 0x08
 90e:	df 80       	ldd	r13, Y+7	; 0x07
 910:	ee 80       	ldd	r14, Y+6	; 0x06
 912:	fd 80       	ldd	r15, Y+5	; 0x05
 914:	0c 81       	ldd	r16, Y+4	; 0x04
 916:	1b 81       	ldd	r17, Y+3	; 0x03
 918:	aa 81       	ldd	r26, Y+2	; 0x02
 91a:	b9 81       	ldd	r27, Y+1	; 0x01
 91c:	ce 0f       	add	r28, r30
 91e:	d1 1d       	adc	r29, r1
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	ed 01       	movw	r28, r26
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
