   1               		.file	"ADC_routines.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	ADC_init
  12               	ADC_init:
  13               	.LFB0:
  14               		.file 1 "ADC_routines.c"
   1:ADC_routines.c **** //******************************************************
   2:ADC_routines.c **** //     **** ADC ROUTINES - SOURCE FILE *****
   3:ADC_routines.c **** //******************************************************
   4:ADC_routines.c **** //Controller		: ATmega32 (Clock: 8 Mhz-internal)
   5:ADC_routines.c **** //Compiler			: AVR-GCC (winAVR with AVRStudio-4)
   6:ADC_routines.c **** //Project Version	: DL_1.0
   7:ADC_routines.c **** //Author			: CC Dharmani, Chennai (India)
   8:ADC_routines.c **** //			  		  www.dharmanitech.com
   9:ADC_routines.c **** //Date				: 10 May 2011
  10:ADC_routines.c **** //******************************************************
  11:ADC_routines.c **** 
  12:ADC_routines.c **** #include <avr/io.h>
  13:ADC_routines.c **** #include "ADC_routines.h"
  14:ADC_routines.c **** 
  15:ADC_routines.c **** 
  16:ADC_routines.c **** //******************************************************
  17:ADC_routines.c **** //Purpose : Initialize the ADC
  18:ADC_routines.c **** //Conversion time: 52uS
  19:ADC_routines.c **** //******************************************************
  20:ADC_routines.c **** void ADC_init(void)
  21:ADC_routines.c **** {
  15               		.loc 1 21 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  22:ADC_routines.c ****   ADCSRA = 0x00; //disable adc
  21               		.loc 1 22 0
  22 0000 16B8      		out 0x6,__zero_reg__
  23:ADC_routines.c ****   ADMUX  = 0x40;  //select adc input 0, ref:AVCC
  23               		.loc 1 23 0
  24 0002 80E4      		ldi r24,lo8(64)
  25 0004 87B9      		out 0x7,r24
  24:ADC_routines.c ****   ADCSRA = 0x82; //prescaler:4, single conversion mode
  26               		.loc 1 24 0
  27 0006 82E8      		ldi r24,lo8(-126)
  28 0008 86B9      		out 0x6,r24
  25:ADC_routines.c ****   ADC_ENABLE;
  29               		.loc 1 25 0
  30 000a 379A      		sbi 0x6,7
  31 000c 0895      		ret
  32               		.cfi_endproc
  33               	.LFE0:
  35               	.global	ADC_read
  37               	ADC_read:
  38               	.LFB1:
  26:ADC_routines.c **** }
  27:ADC_routines.c **** 
  28:ADC_routines.c **** 
  29:ADC_routines.c **** //********************************************************************
  30:ADC_routines.c **** //Purpose : Do an Analog to Digital Conversion
  31:ADC_routines.c **** //Paramtr :	none
  32:ADC_routines.c **** //return  : intger temperature value
  33:ADC_routines.c **** //********************************************************************
  34:ADC_routines.c **** unsigned int ADC_read(void)
  35:ADC_routines.c **** {
  39               		.loc 1 35 0
  40               		.cfi_startproc
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45               	.LVL0:
  46               		.loc 1 35 0
  47 000e 48E0      		ldi r20,lo8(8)
  36:ADC_routines.c ****     char i;
  37:ADC_routines.c ****     unsigned int ADC_temp, ADCH_temp;
  38:ADC_routines.c ****     unsigned int ADC_var = 0;
  48               		.loc 1 38 0
  49 0010 80E0      		ldi r24,0
  50 0012 90E0      		ldi r25,0
  51               	.LVL1:
  52               	.L6:
  39:ADC_routines.c ****     
  40:ADC_routines.c ****             
  41:ADC_routines.c ****     for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
  42:ADC_routines.c ****     {
  43:ADC_routines.c **** 	 	ADC_START_CONVERSION;
  53               		.loc 1 43 0
  54 0014 369A      		sbi 0x6,6
  55               	.L4:
  44:ADC_routines.c ****         while(!(ADCSRA & 0x10)); // wait for conversion done, ADIF flag active
  56               		.loc 1 44 0 discriminator 1
  57 0016 349B      		sbis 0x6,4
  58 0018 00C0      		rjmp .L4
  45:ADC_routines.c ****         ADCSRA|=(1<<ADIF);
  59               		.loc 1 45 0
  60 001a 349A      		sbi 0x6,4
  46:ADC_routines.c **** 		
  47:ADC_routines.c ****         ADC_temp = ADCL;         // read out ADCL register
  61               		.loc 1 47 0
  62 001c 54B1      		in r21,0x4
  63               	.LVL2:
  48:ADC_routines.c ****         ADCH_temp = ADCH;        // read out ADCH register        
  64               		.loc 1 48 0
  65 001e 25B1      		in r18,0x5
  66               	.LVL3:
  67 0020 30E0      		ldi r19,0
  49:ADC_routines.c **** 		ADC_temp +=(ADCH_temp << 8);
  68               		.loc 1 49 0
  69 0022 322F      		mov r19,r18
  70 0024 2227      		clr r18
  71               	.LVL4:
  72 0026 250F      		add r18,r21
  73 0028 311D      		adc r19,__zero_reg__
  50:ADC_routines.c ****         ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
  74               		.loc 1 50 0
  75 002a 820F      		add r24,r18
  76 002c 931F      		adc r25,r19
  77               	.LVL5:
  78 002e 4150      		subi r20,lo8(-(-1))
  79               	.LVL6:
  41:ADC_routines.c ****     for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
  80               		.loc 1 41 0
  81 0030 01F4      		brne .L6
  51:ADC_routines.c ****     }
  52:ADC_routines.c **** 
  53:ADC_routines.c ****     ADC_var = ADC_var >> 3;       // average the 8 samples
  82               		.loc 1 53 0
  83 0032 23E0      		ldi r18,3
  84               		1:
  85 0034 9695      		lsr r25
  86 0036 8795      		ror r24
  87 0038 2A95      		dec r18
  88 003a 01F4      		brne 1b
  89               	.LVL7:
  90 003c 8115      		cp r24,__zero_reg__
  91 003e 24E0      		ldi r18,4
  92 0040 9207      		cpc r25,r18
  93 0042 00F0      		brlo .L7
  94 0044 8FEF      		ldi r24,lo8(-1)
  95 0046 93E0      		ldi r25,lo8(3)
  96               	.L7:
  54:ADC_routines.c **** 
  55:ADC_routines.c **** 	if(ADC_var > 1023) ADC_var = 1023;
  56:ADC_routines.c **** 	
  57:ADC_routines.c ****     return ADC_var;
  58:ADC_routines.c **** }
  97               		.loc 1 58 0
  98 0048 0895      		ret
  99               		.cfi_endproc
 100               	.LFE1:
 102               	.global	__floatunsisf
 103               	.global	__mulsf3
 104               	.global	__fixunssfsi
 105               	.global	readTemperature
 107               	readTemperature:
 108               	.LFB2:
  59:ADC_routines.c **** 
  60:ADC_routines.c **** 
  61:ADC_routines.c **** //********************************************************************
  62:ADC_routines.c **** //Purpose : Read temperature from LM35 connected to the ADC
  63:ADC_routines.c **** //Paramtr : unsigned char ADC channel number
  64:ADC_routines.c **** //returns : None (modifies the global string 'temperature')
  65:ADC_routines.c **** //********************************************************************
  66:ADC_routines.c **** void readTemperature(unsigned char channel)
  67:ADC_routines.c **** {
 109               		.loc 1 67 0
 110               		.cfi_startproc
 111               	.LVL8:
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
  68:ADC_routines.c ****    unsigned int value;
  69:ADC_routines.c ****    float volt;
  70:ADC_routines.c **** 
  71:ADC_routines.c ****    ADMUX = 0x40 | channel;
 116               		.loc 1 71 0
 117 004a 8064      		ori r24,lo8(64)
 118               	.LVL9:
 119 004c 87B9      		out 0x7,r24
  72:ADC_routines.c ****    value = ADC_read();
 120               		.loc 1 72 0
 121 004e 0E94 0000 		call ADC_read
 122               	.LVL10:
  73:ADC_routines.c **** 
  74:ADC_routines.c ****    volt = (float)(value * 5.0)/ 1024.0;
 123               		.loc 1 74 0
 124 0052 BC01      		movw r22,r24
 125 0054 80E0      		ldi r24,0
 126 0056 90E0      		ldi r25,0
 127               	.LVL11:
 128 0058 0E94 0000 		call __floatunsisf
 129               	.LVL12:
 130 005c 20E0      		ldi r18,0
 131 005e 30E0      		ldi r19,0
 132 0060 40EA      		ldi r20,lo8(-96)
 133 0062 50E4      		ldi r21,lo8(64)
 134 0064 0E94 0000 		call __mulsf3
 135               	.LVL13:
 136 0068 20E0      		ldi r18,0
 137 006a 30E0      		ldi r19,0
 138 006c 40E8      		ldi r20,lo8(-128)
 139 006e 5AE3      		ldi r21,lo8(58)
 140 0070 0E94 0000 		call __mulsf3
 141               	.LVL14:
  75:ADC_routines.c ****    value = (unsigned int)(volt * 1000);
 142               		.loc 1 75 0
 143 0074 20E0      		ldi r18,0
 144 0076 30E0      		ldi r19,0
 145 0078 4AE7      		ldi r20,lo8(122)
 146 007a 54E4      		ldi r21,lo8(68)
 147 007c 0E94 0000 		call __mulsf3
 148               	.LVL15:
 149 0080 0E94 0000 		call __fixunssfsi
 150               	.LVL16:
  76:ADC_routines.c **** 
  77:ADC_routines.c ****    temperature[6] = 'C';  //centigrade
 151               		.loc 1 77 0
 152 0084 23E4      		ldi r18,lo8(67)
 153 0086 2093 0000 		sts temperature+6,r18
  78:ADC_routines.c ****    temperature[5] = 0xb0; //ascii value for degree symbol
 154               		.loc 1 78 0
 155 008a 20EB      		ldi r18,lo8(-80)
 156 008c 2093 0000 		sts temperature+5,r18
  79:ADC_routines.c ****    temperature[4] = (value % 10) | 0x30;
 157               		.loc 1 79 0
 158 0090 2AE0      		ldi r18,lo8(10)
 159 0092 30E0      		ldi r19,0
 160 0094 CB01      		movw r24,r22
 161 0096 B901      		movw r22,r18
 162 0098 0E94 0000 		call __udivmodhi4
 163 009c 8063      		ori r24,lo8(48)
 164 009e 8093 0000 		sts temperature+4,r24
  80:ADC_routines.c ****    temperature[3] = '.';  
 165               		.loc 1 80 0
 166 00a2 8EE2      		ldi r24,lo8(46)
 167 00a4 8093 0000 		sts temperature+3,r24
 168               	.LVL17:
  81:ADC_routines.c ****    value = value / 10;
  82:ADC_routines.c ****    temperature[2] = (value % 10) | 0x30;
 169               		.loc 1 82 0
 170 00a8 CB01      		movw r24,r22
 171 00aa B901      		movw r22,r18
 172               	.LVL18:
 173 00ac 0E94 0000 		call __udivmodhi4
 174               	.LVL19:
 175 00b0 8063      		ori r24,lo8(48)
 176 00b2 8093 0000 		sts temperature+2,r24
 177               	.LVL20:
  83:ADC_routines.c ****    value = value / 10;
  84:ADC_routines.c ****    temperature[1] = (value % 10) | 0x30;
 178               		.loc 1 84 0
 179 00b6 CB01      		movw r24,r22
 180 00b8 B901      		movw r22,r18
 181               	.LVL21:
 182 00ba 0E94 0000 		call __udivmodhi4
 183               	.LVL22:
 184 00be 8063      		ori r24,lo8(48)
 185 00c0 8093 0000 		sts temperature+1,r24
  85:ADC_routines.c ****    value = value / 10;
  86:ADC_routines.c ****    temperature[0] = value | 0x30;   
 186               		.loc 1 86 0
 187 00c4 6063      		ori r22,lo8(48)
 188 00c6 6093 0000 		sts temperature,r22
 189 00ca 0895      		ret
 190               		.cfi_endproc
 191               	.LFE2:
 193               	.global	readVoltage
 195               	readVoltage:
 196               	.LFB3:
  87:ADC_routines.c **** }  
  88:ADC_routines.c **** 
  89:ADC_routines.c **** 
  90:ADC_routines.c **** //********************************************************************
  91:ADC_routines.c **** //Purpose : Read voltage from ADC channels
  92:ADC_routines.c **** //Paramtr : unsigned char ADC channel number
  93:ADC_routines.c **** //returns : None (modifies the global string 'voltage')
  94:ADC_routines.c **** //********************************************************************
  95:ADC_routines.c **** void readVoltage(unsigned char channel)
  96:ADC_routines.c **** {
 197               		.loc 1 96 0
 198               		.cfi_startproc
 199               	.LVL23:
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
  97:ADC_routines.c ****    unsigned int value;
  98:ADC_routines.c ****    float volt;
  99:ADC_routines.c **** 
 100:ADC_routines.c ****    ADMUX = 0x40 | channel;
 204               		.loc 1 100 0
 205 00cc 8064      		ori r24,lo8(64)
 206               	.LVL24:
 207 00ce 87B9      		out 0x7,r24
 101:ADC_routines.c ****    value = ADC_read();
 208               		.loc 1 101 0
 209 00d0 0E94 0000 		call ADC_read
 210               	.LVL25:
 102:ADC_routines.c **** 
 103:ADC_routines.c ****    volt = (float)(value * 5.0)/ 1024.0;
 211               		.loc 1 103 0
 212 00d4 BC01      		movw r22,r24
 213 00d6 80E0      		ldi r24,0
 214 00d8 90E0      		ldi r25,0
 215               	.LVL26:
 216 00da 0E94 0000 		call __floatunsisf
 217               	.LVL27:
 218 00de 20E0      		ldi r18,0
 219 00e0 30E0      		ldi r19,0
 220 00e2 40EA      		ldi r20,lo8(-96)
 221 00e4 50E4      		ldi r21,lo8(64)
 222 00e6 0E94 0000 		call __mulsf3
 223               	.LVL28:
 224 00ea 20E0      		ldi r18,0
 225 00ec 30E0      		ldi r19,0
 226 00ee 40E8      		ldi r20,lo8(-128)
 227 00f0 5AE3      		ldi r21,lo8(58)
 228 00f2 0E94 0000 		call __mulsf3
 229               	.LVL29:
 104:ADC_routines.c ****    value = (unsigned int)(volt * 1000);
 230               		.loc 1 104 0
 231 00f6 20E0      		ldi r18,0
 232 00f8 30E0      		ldi r19,0
 233 00fa 4AE7      		ldi r20,lo8(122)
 234 00fc 54E4      		ldi r21,lo8(68)
 235 00fe 0E94 0000 		call __mulsf3
 236               	.LVL30:
 237 0102 0E94 0000 		call __fixunssfsi
 238               	.LVL31:
 105:ADC_routines.c **** 
 106:ADC_routines.c ****    voltage[6] = 'V';  //V for voltage
 239               		.loc 1 106 0
 240 0106 26E5      		ldi r18,lo8(86)
 241 0108 2093 0000 		sts voltage+6,r18
 107:ADC_routines.c ****    voltage[5] = ' '; 
 242               		.loc 1 107 0
 243 010c 20E2      		ldi r18,lo8(32)
 244 010e 2093 0000 		sts voltage+5,r18
 108:ADC_routines.c ****    voltage[4] = (value % 10) | 0x30;
 245               		.loc 1 108 0
 246 0112 2AE0      		ldi r18,lo8(10)
 247 0114 30E0      		ldi r19,0
 248 0116 CB01      		movw r24,r22
 249 0118 B901      		movw r22,r18
 250 011a 0E94 0000 		call __udivmodhi4
 251 011e 8063      		ori r24,lo8(48)
 252 0120 8093 0000 		sts voltage+4,r24
 253               	.LVL32:
 109:ADC_routines.c ****    value = value / 10;
 110:ADC_routines.c ****    voltage[3] = (value % 10) | 0x30;
 254               		.loc 1 110 0
 255 0124 CB01      		movw r24,r22
 256 0126 B901      		movw r22,r18
 257               	.LVL33:
 258 0128 0E94 0000 		call __udivmodhi4
 259               	.LVL34:
 260 012c 8063      		ori r24,lo8(48)
 261 012e 8093 0000 		sts voltage+3,r24
 262               	.LVL35:
 111:ADC_routines.c ****    value = value / 10;
 112:ADC_routines.c ****    voltage[2] = (value % 10) | 0x30;
 263               		.loc 1 112 0
 264 0132 CB01      		movw r24,r22
 265 0134 B901      		movw r22,r18
 266               	.LVL36:
 267 0136 0E94 0000 		call __udivmodhi4
 268               	.LVL37:
 269 013a 8063      		ori r24,lo8(48)
 270 013c 8093 0000 		sts voltage+2,r24
 113:ADC_routines.c ****    voltage[1] = '.';  
 271               		.loc 1 113 0
 272 0140 8EE2      		ldi r24,lo8(46)
 273 0142 8093 0000 		sts voltage+1,r24
 114:ADC_routines.c ****    value = value / 10;
 115:ADC_routines.c ****    voltage[0] = value | 0x30;   
 274               		.loc 1 115 0
 275 0146 6063      		ori r22,lo8(48)
 276 0148 6093 0000 		sts voltage,r22
 277 014c 0895      		ret
 278               		.cfi_endproc
 279               	.LFE3:
 281               		.comm	voltage,7,1
 282               		.comm	temperature,7,1
 283               	.Letext0:
 284               		.file 2 "ADC_routines.h"
 285               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADC_routines.c
     /tmp/ccAgoH9C.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccAgoH9C.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccAgoH9C.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccAgoH9C.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAgoH9C.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAgoH9C.s:12     .text:0000000000000000 ADC_init
     /tmp/ccAgoH9C.s:37     .text:000000000000000e ADC_read
     /tmp/ccAgoH9C.s:107    .text:000000000000004a readTemperature
                            *COM*:0000000000000007 temperature
     /tmp/ccAgoH9C.s:195    .text:00000000000000cc readVoltage
                            *COM*:0000000000000007 voltage

UNDEFINED SYMBOLS
__floatunsisf
__mulsf3
__fixunssfsi
__udivmodhi4
__do_clear_bss
