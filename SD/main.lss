
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002b86  00002c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c3  00800080  00800080  00002c3a  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000253  00000000  00000000  000042b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004503  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003910  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bc2  00000000  00000000  00007f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a9c  00000000  00000000  00008aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000814  00000000  00000000  0000958c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a7d  00000000  00000000  00009da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003075  00000000  00000000  0000a81d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000d892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 02 	jmp	0x524	; 0x524 <__ctors_end>
       4:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
       8:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
       c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      10:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      14:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      18:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      1c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      20:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      24:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      28:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      2c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      30:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      34:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      38:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      3c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      40:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      44:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      48:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      4c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      50:	0c 94 af 02 	jmp	0x55e	; 0x55e <__bad_interrupt>
      54:	fb 12       	cpse	r15, r27
      56:	00 13       	cpse	r16, r16
      58:	05 13       	cpse	r16, r21
      5a:	08 13       	cpse	r16, r24
      5c:	0b 13       	cpse	r16, r27
      5e:	17 13       	cpse	r17, r23
      60:	17 13       	cpse	r17, r23
      62:	44 0e       	add	r4, r20
      64:	47 0e       	add	r4, r23
      66:	4a 0e       	add	r4, r26
      68:	4d 0e       	add	r4, r29
      6a:	50 0e       	add	r5, r16
      6c:	53 0e       	add	r5, r19
      6e:	56 0e       	add	r5, r22

00000070 <__c.2083>:
      70:	0a 0d 0a 0d 20 49 6e 76 61 6c 69 64 20 6f 70 74     .... Invalid opt
      80:	69 6f 6e 21 0a 0d 00                                ion!...

00000087 <__c.2080>:
      87:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
      97:	69 73 74 2e 2e 00                                   ist...

0000009d <__c.2077>:
      9d:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
      ad:	6f 6e 67 2e 2e 00                                   ong...

000000b3 <__c.2070>:
      b3:	0a 0d 45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d     ..Enter file nam
      c3:	65 3a 20 00                                         e: .

000000c7 <__c.2060>:
      c7:	0a 0d 4e 6f 72 6d 61 6c 20 6f 70 65 72 61 74 69     ..Normal operati
      d7:	6f 6e 20 73 74 61 72 74 65 64 2e 2e 00              on started...

000000e4 <__c.2057>:
      e4:	0a 0d 0a 0d 3e 20 45 6e 74 65 72 20 74 68 65 20     ....> Enter the 
      f4:	6f 70 74 69 6f 6e 3a 00                             option:.

000000fc <__c.2055>:
      fc:	0a 0d 3e 20 36 20 3a 20 44 65 6c 65 74 65 20 46     ..> 6 : Delete F
     10c:	69 6c 65 00                                         ile.

00000110 <__c.2053>:
     110:	0a 0d 3e 20 35 20 3a 20 52 65 61 64 20 46 69 6c     ..> 5 : Read Fil
     120:	65 00                                               e.

00000122 <__c.2051>:
     122:	0a 0d 3e 20 34 20 3a 20 47 65 74 20 66 69 6c 65     ..> 4 : Get file
     132:	20 6c 69 73 74 00                                    list.

00000138 <__c.2049>:
     138:	0a 0d 3e 20 33 20 3a 20 55 70 64 61 74 65 20 54     ..> 3 : Update T
     148:	69 6d 65 00                                         ime.

0000014c <__c.2047>:
     14c:	0a 0d 3e 20 32 20 3a 20 55 70 64 61 74 65 20 44     ..> 2 : Update D
     15c:	61 74 65 00                                         ate.

00000160 <__c.2045>:
     160:	0a 0d 3e 20 31 20 3a 20 44 69 73 70 6c 61 79 20     ..> 1 : Display 
     170:	63 75 72 72 65 6e 74 20 44 61 74 65 2f 54 69 6d     current Date/Tim
     180:	65 00                                               e.

00000182 <__c.2043>:
     182:	0a 0d 0a 0d 3e 20 30 20 3a 20 45 78 69 74 20 74     ....> 0 : Exit t
     192:	68 65 20 4d 65 6e 75 00                             he Menu.

0000019a <__c.2041>:
     19a:	0a 0d 46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e     ..FAT32 not foun
     1aa:	64 21 00                                            d!.

000001ad <__c.2039>:
     1ad:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     1bd:	44 65 74 65 63 74 65 64 21 00                       Detected!.

000001c7 <__c.2036>:
     1c7:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1d7:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1e7:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000001f2 <__c.2033>:
     1f2:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     202:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

0000020f <__c.2029>:
     20f:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     21f:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     22f:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

0000023a <__c.2026>:
     23a:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     24a:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000257 <__c.2024>:
     257:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     267:	63 74 65 64 2e 2e 00                                cted...

0000026e <__c.2019>:
     26e:	0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     27e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     28e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     29e:	2a 2a 2a 2a 2a 2a 0a 0d 00                          ******...

000002a7 <__c.2017>:
     2a7:	0a 0d 20 20 20 20 20 20 20 20 20 6d 69 63 72 6f     ..         micro
     2b7:	53 44 20 44 61 74 61 6c 6f 67 67 65 72 20 2d 20     SD Datalogger - 
     2c7:	62 79 20 43 43 20 44 68 61 72 6d 61 6e 69 20 00     by CC Dharmani .

000002d7 <__c.2015>:
     2d7:	0a 0d 0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ....************
     2e7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2f7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     307:	2a 2a 2a 2a 2a 2a 2a 2a 00                          ********.

00000310 <__c.2002>:
     310:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     320:	20 63 6c 75 73 74 65 72 00                           cluster.

00000329 <__c.2000>:
     329:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     339:	68 61 69 6e 00                                      hain.

0000033e <__c.1988>:
     33e:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     34e:	21 00                                               !.

00000350 <__c.1980>:
     350:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     360:	21 00                                               !.

00000362 <__c.1937>:
     362:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     372:	2e 2e 00                                            ...

00000375 <__c.1925>:
     375:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     385:	20 63 6c 75 73 74 65 72 00                           cluster.

0000038e <__c.1904>:
     38e:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     39e:	20 63 6c 75 73 74 65 72 00                           cluster.

000003a7 <__c.1896>:
     3a7:	52 4f 4f 54 00                                      ROOT.

000003ac <__c.1894>:
     3ac:	44 49 52 00                                         DIR.

000003b0 <__c.1892>:
     3b0:	20 20 20 00                                            .

000003b4 <__c.1890>:
     3b4:	46 49 4c 45 00                                      FILE.

000003b9 <__c.1888>:
     3b9:	20 20 20 00                                            .

000003bd <__c.1882>:
     3bd:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000003cb <__c.1880>:
     3cb:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000003d6 <__c.1875>:
     3d6:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     3e6:	69 73 74 21 00                                      ist!.

000003eb <__c.1824>:
     3eb:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000003fb <__c.1822>:
     3fb:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     40b:	65 64 2e 2e 00                                      ed...

00000410 <__c.1820>:
     410:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     420:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

0000042a <__c.1818>:
     42a:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     43a:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     44a:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

00000453 <__c.1815>:
     453:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     463:	6d 2f 79 79 29 3a 00                                m/yy):.

0000046a <__c.1809>:
     46a:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

0000047a <__c.1807>:
     47a:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     48a:	65 64 2e 2e 00                                      ed...

0000048f <__c.1805>:
     48f:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     49f:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

000004a9 <__c.1802>:
     4a9:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     4b9:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     4c9:	73 29 3a 00                                         s):.

000004cd <__c.1777>:
     4cd:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000004d5 <__c.1774>:
     4d5:	53 61 74 75 72 64 61 79 00                          Saturday.

000004de <__c.1771>:
     4de:	46 72 69 64 61 79 00                                Friday.

000004e5 <__c.1768>:
     4e5:	54 68 75 72 73 64 61 79 00                          Thursday.

000004ee <__c.1765>:
     4ee:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

000004f8 <__c.1762>:
     4f8:	54 75 65 73 64 61 79 00                             Tuesday.

00000500 <__c.1759>:
     500:	4d 6f 6e 64 61 79 00                                Monday.

00000507 <__c.1755>:
     507:	53 75 6e 64 61 79 00                                Sunday.

0000050e <__c.1752>:
     50e:	20 20 20 20 44 61 79 3a 20 00                           Day: .

00000518 <__c.1747>:
     518:	44 61 74 65 3a 00                                   Date:.

0000051e <__c.1741>:
     51e:	54 69 6d 65 3a 00                                   Time:.

00000524 <__ctors_end>:
     524:	11 24       	eor	r1, r1
     526:	1f be       	out	0x3f, r1	; 63
     528:	cf e5       	ldi	r28, 0x5F	; 95
     52a:	d8 e0       	ldi	r29, 0x08	; 8
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	cd bf       	out	0x3d, r28	; 61

00000530 <__do_copy_data>:
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	a0 e6       	ldi	r26, 0x60	; 96
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	e6 e8       	ldi	r30, 0x86	; 134
     538:	fb e2       	ldi	r31, 0x2B	; 43
     53a:	02 c0       	rjmp	.+4      	; 0x540 <__do_copy_data+0x10>
     53c:	05 90       	lpm	r0, Z+
     53e:	0d 92       	st	X+, r0
     540:	a0 38       	cpi	r26, 0x80	; 128
     542:	b1 07       	cpc	r27, r17
     544:	d9 f7       	brne	.-10     	; 0x53c <__do_copy_data+0xc>

00000546 <__do_clear_bss>:
     546:	13 e0       	ldi	r17, 0x03	; 3
     548:	a0 e8       	ldi	r26, 0x80	; 128
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	01 c0       	rjmp	.+2      	; 0x550 <.do_clear_bss_start>

0000054e <.do_clear_bss_loop>:
     54e:	1d 92       	st	X+, r1

00000550 <.do_clear_bss_start>:
     550:	a3 34       	cpi	r26, 0x43	; 67
     552:	b1 07       	cpc	r27, r17
     554:	e1 f7       	brne	.-8      	; 0x54e <.do_clear_bss_loop>
     556:	0e 94 68 12 	call	0x24d0	; 0x24d0 <main>
     55a:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <_exit>

0000055e <__bad_interrupt>:
     55e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000562 <port_init>:
#define RED_LED_OFF		PORTC &= ~0x40


void port_init(void)
{
  PORTA = 0x00;
     562:	1b ba       	out	0x1b, r1	; 27
  DDRA  = 0x00;
     564:	1a ba       	out	0x1a, r1	; 26
  PORTB = 0x00; //pull-up on for pushbutton
     566:	18 ba       	out	0x18, r1	; 24
  DDRB  = 0xBF; //MISO line i/p, rest o/p
     568:	8f eb       	ldi	r24, 0xBF	; 191
     56a:	87 bb       	out	0x17, r24	; 23
  PORTC = 0x80; //pull-up for push-button
     56c:	80 e8       	ldi	r24, 0x80	; 128
     56e:	85 bb       	out	0x15, r24	; 21
  DDRC  = 0x20; //PC7- i/p (pushbutton), PC6, PC5 - o/p (two LEDs)
     570:	80 e2       	ldi	r24, 0x20	; 32
     572:	84 bb       	out	0x14, r24	; 20
  PORTD = 0x00;
     574:	12 ba       	out	0x12, r1	; 18
  DDRD  = 0x00;
     576:	11 ba       	out	0x11, r1	; 17
     578:	08 95       	ret

0000057a <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
  cli();  //all interrupts disabled
     57a:	f8 94       	cli
  port_init();
     57c:	0e 94 b1 02 	call	0x562	; 0x562 <port_init>
  spi_init();
     580:	0e 94 59 12 	call	0x24b2	; 0x24b2 <spi_init>
  twi_init();
     584:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <twi_init>
  uart0_init();
     588:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <uart0_init>
  ADC_init();
     58c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <ADC_init>

  MCUCR = 0x00;
     590:	15 be       	out	0x35, r1	; 53
  GICR  = 0x00;
     592:	1b be       	out	0x3b, r1	; 59
  TIMSK = 0x00; //timer interrupt sources
     594:	19 be       	out	0x39, r1	; 57
     596:	08 95       	ret

00000598 <blinkRedLED>:
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
     598:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	83 ec       	ldi	r24, 0xC3	; 195
     59e:	99 e0       	ldi	r25, 0x09	; 9
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <blinkRedLED+0x8>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <blinkRedLED+0x12>
     5aa:	00 00       	nop
	_delay_ms(400);
	RED_LED_OFF;
     5ac:	ae 98       	cbi	0x15, 6	; 21
     5ae:	2f ef       	ldi	r18, 0xFF	; 255
     5b0:	83 ec       	ldi	r24, 0xC3	; 195
     5b2:	99 e0       	ldi	r25, 0x09	; 9
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	80 40       	sbci	r24, 0x00	; 0
     5b8:	90 40       	sbci	r25, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <blinkRedLED+0x1c>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <blinkRedLED+0x26>
     5be:	00 00       	nop
     5c0:	eb cf       	rjmp	.-42     	; 0x598 <blinkRedLED>

000005c2 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5c2:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5c4:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
     5c6:	86 e8       	ldi	r24, 0x86	; 134
     5c8:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
     5ca:	89 e1       	ldi	r24, 0x19	; 25
     5cc:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5ce:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
     5d0:	88 e1       	ldi	r24, 0x18	; 24
     5d2:	8a b9       	out	0x0a, r24	; 10
     5d4:	08 95       	ret

000005d6 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
     5d6:	5f 9b       	sbis	0x0b, 7	; 11
     5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <receiveByte>
	
	status = UCSRA;
     5da:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
     5dc:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
     5de:	08 95       	ret

000005e0 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
     5e0:	5d 9b       	sbis	0x0b, 5	; 11
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
     5e4:	8c b9       	out	0x0c, r24	; 12
     5e6:	08 95       	ret

000005e8 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
     5ee:	ce 01       	movw	r24, r28
     5f0:	fe 01       	movw	r30, r28
     5f2:	24 91       	lpm	r18, Z
     5f4:	22 23       	and	r18, r18
     5f6:	31 f0       	breq	.+12     	; 0x604 <transmitString_F+0x1c>
   transmitByte(pgm_read_byte(&(*string++)));
     5f8:	21 96       	adiw	r28, 0x01	; 1
     5fa:	fc 01       	movw	r30, r24
     5fc:	84 91       	lpm	r24, Z
     5fe:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
     602:	f5 cf       	rjmp	.-22     	; 0x5ee <transmitString_F+0x6>
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
  while (*string)
     610:	89 91       	ld	r24, Y+
     612:	88 23       	and	r24, r24
     614:	19 f0       	breq	.+6      	; 0x61c <transmitString+0x12>
   transmitByte(*string++);
     616:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
     61a:	fa cf       	rjmp	.-12     	; 0x610 <transmitString+0x6>
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2b 97       	sbiw	r28, 0x0b	; 11
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
     636:	9b e0       	ldi	r25, 0x0B	; 11
     638:	e0 e6       	ldi	r30, 0x60	; 96
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	de 01       	movw	r26, r28
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	9a 95       	dec	r25
     646:	e1 f7       	brne	.-8      	; 0x640 <transmitHex+0x1e>

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	21 f0       	breq	.+8      	; 0x654 <transmitHex+0x32>
if (dataType == LONG) count = 8;
     64c:	82 30       	cpi	r24, 0x02	; 2
     64e:	21 f0       	breq	.+8      	; 0x658 <transmitHex+0x36>
     650:	22 e0       	ldi	r18, 0x02	; 2
     652:	03 c0       	rjmp	.+6      	; 0x65a <transmitHex+0x38>
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
     654:	24 e0       	ldi	r18, 0x04	; 4
     656:	01 c0       	rjmp	.+2      	; 0x65a <transmitHex+0x38>
if (dataType == LONG) count = 8;
     658:	28 e0       	ldi	r18, 0x08	; 8

for(i=count; i>0; i--)
{
  temp = data % 16;
     65a:	34 2f       	mov	r19, r20
     65c:	3f 70       	andi	r19, 0x0F	; 15
     65e:	82 2f       	mov	r24, r18
     660:	90 e0       	ldi	r25, 0x00	; 0
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
     662:	e2 e0       	ldi	r30, 0x02	; 2
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	ec 0f       	add	r30, r28
     668:	fd 1f       	adc	r31, r29
     66a:	e8 0f       	add	r30, r24
     66c:	f9 1f       	adc	r31, r25
     66e:	3a 30       	cpi	r19, 0x0A	; 10
     670:	10 f4       	brcc	.+4      	; 0x676 <transmitHex+0x54>
     672:	30 5d       	subi	r19, 0xD0	; 208
     674:	01 c0       	rjmp	.+2      	; 0x678 <transmitHex+0x56>
  else dataString [i+1] = (temp - 10) + 0x41;
     676:	39 5c       	subi	r19, 0xC9	; 201
     678:	30 83       	st	Z, r19

  data = data/16;
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	76 95       	lsr	r23
     67e:	67 95       	ror	r22
     680:	57 95       	ror	r21
     682:	47 95       	ror	r20
     684:	8a 95       	dec	r24
     686:	d1 f7       	brne	.-12     	; 0x67c <transmitHex+0x5a>

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
     688:	21 50       	subi	r18, 0x01	; 1
     68a:	39 f7       	brne	.-50     	; 0x65a <transmitHex+0x38>
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
}

transmitString (dataString);
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	0e 94 05 03 	call	0x60a	; 0x60a <transmitString>
}
     694:	2b 96       	adiw	r28, 0x0b	; 11
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <ADC_init>:
//Purpose : Initialize the ADC
//Conversion time: 52uS
//******************************************************
void ADC_init(void)
{
  ADCSRA = 0x00; //disable adc
     6a6:	16 b8       	out	0x06, r1	; 6
  ADMUX  = 0x40;  //select adc input 0, ref:AVCC
     6a8:	80 e4       	ldi	r24, 0x40	; 64
     6aa:	87 b9       	out	0x07, r24	; 7
  ADCSRA = 0x82; //prescaler:4, single conversion mode
     6ac:	82 e8       	ldi	r24, 0x82	; 130
     6ae:	86 b9       	out	0x06, r24	; 6
  ADC_ENABLE;
     6b0:	37 9a       	sbi	0x06, 7	; 6
     6b2:	08 95       	ret

000006b4 <ADC_read>:
//Purpose : Do an Analog to Digital Conversion
//Paramtr :	none
//return  : intger temperature value
//********************************************************************
unsigned int ADC_read(void)
{
     6b4:	48 e0       	ldi	r20, 0x08	; 8
    char i;
    unsigned int ADC_temp, ADCH_temp;
    unsigned int ADC_var = 0;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
    
            
    for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
    {
	 	ADC_START_CONVERSION;
     6ba:	36 9a       	sbi	0x06, 6	; 6
        while(!(ADCSRA & 0x10)); // wait for conversion done, ADIF flag active
     6bc:	34 9b       	sbis	0x06, 4	; 6
     6be:	fe cf       	rjmp	.-4      	; 0x6bc <ADC_read+0x8>
        ADCSRA|=(1<<ADIF);
     6c0:	34 9a       	sbi	0x06, 4	; 6
		
        ADC_temp = ADCL;         // read out ADCL register
     6c2:	54 b1       	in	r21, 0x04	; 4
        ADCH_temp = ADCH;        // read out ADCH register        
     6c4:	25 b1       	in	r18, 0x05	; 5
     6c6:	30 e0       	ldi	r19, 0x00	; 0
		ADC_temp +=(ADCH_temp << 8);
     6c8:	32 2f       	mov	r19, r18
     6ca:	22 27       	eor	r18, r18
     6cc:	25 0f       	add	r18, r21
     6ce:	31 1d       	adc	r19, r1
        ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	41 50       	subi	r20, 0x01	; 1
    char i;
    unsigned int ADC_temp, ADCH_temp;
    unsigned int ADC_var = 0;
    
            
    for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
     6d6:	89 f7       	brne	.-30     	; 0x6ba <ADC_read+0x6>
        ADCH_temp = ADCH;        // read out ADCH register        
		ADC_temp +=(ADCH_temp << 8);
        ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
    }

    ADC_var = ADC_var >> 3;       // average the 8 samples
     6d8:	23 e0       	ldi	r18, 0x03	; 3
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	2a 95       	dec	r18
     6e0:	e1 f7       	brne	.-8      	; 0x6da <ADC_read+0x26>
     6e2:	81 15       	cp	r24, r1
     6e4:	24 e0       	ldi	r18, 0x04	; 4
     6e6:	92 07       	cpc	r25, r18
     6e8:	10 f0       	brcs	.+4      	; 0x6ee <ADC_read+0x3a>
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	93 e0       	ldi	r25, 0x03	; 3

	if(ADC_var > 1023) ADC_var = 1023;
	
    return ADC_var;
}
     6ee:	08 95       	ret

000006f0 <readTemperature>:
void readTemperature(unsigned char channel)
{
   unsigned int value;
   float volt;

   ADMUX = 0x40 | channel;
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	87 b9       	out	0x07, r24	; 7
   value = ADC_read();
     6f4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ADC_read>

   volt = (float)(value * 5.0)/ 1024.0;
     6f8:	bc 01       	movw	r22, r24
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatunsisf>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 ea       	ldi	r20, 0xA0	; 160
     708:	50 e4       	ldi	r21, 0x40	; 64
     70a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__mulsf3>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e8       	ldi	r20, 0x80	; 128
     714:	5a e3       	ldi	r21, 0x3A	; 58
     716:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__mulsf3>
   value = (unsigned int)(volt * 1000);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	4a e7       	ldi	r20, 0x7A	; 122
     720:	54 e4       	ldi	r21, 0x44	; 68
     722:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__mulsf3>
     726:	0e 94 3e 14 	call	0x287c	; 0x287c <__fixunssfsi>

   temperature[6] = 'C';  //centigrade
     72a:	23 e4       	ldi	r18, 0x43	; 67
     72c:	20 93 a1 00 	sts	0x00A1, r18
   temperature[5] = 0xb0; //ascii value for degree symbol
     730:	20 eb       	ldi	r18, 0xB0	; 176
     732:	20 93 a0 00 	sts	0x00A0, r18
   temperature[4] = (value % 10) | 0x30;
     736:	2a e0       	ldi	r18, 0x0A	; 10
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	cb 01       	movw	r24, r22
     73c:	b9 01       	movw	r22, r18
     73e:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__udivmodhi4>
     742:	80 63       	ori	r24, 0x30	; 48
     744:	80 93 9f 00 	sts	0x009F, r24
   temperature[3] = '.';  
     748:	8e e2       	ldi	r24, 0x2E	; 46
     74a:	80 93 9e 00 	sts	0x009E, r24
   value = value / 10;
   temperature[2] = (value % 10) | 0x30;
     74e:	cb 01       	movw	r24, r22
     750:	b9 01       	movw	r22, r18
     752:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__udivmodhi4>
     756:	80 63       	ori	r24, 0x30	; 48
     758:	80 93 9d 00 	sts	0x009D, r24
   value = value / 10;
   temperature[1] = (value % 10) | 0x30;
     75c:	cb 01       	movw	r24, r22
     75e:	b9 01       	movw	r22, r18
     760:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__udivmodhi4>
     764:	80 63       	ori	r24, 0x30	; 48
     766:	80 93 9c 00 	sts	0x009C, r24
   value = value / 10;
   temperature[0] = value | 0x30;   
     76a:	60 63       	ori	r22, 0x30	; 48
     76c:	60 93 9b 00 	sts	0x009B, r22
     770:	08 95       	ret

00000772 <readVoltage>:
void readVoltage(unsigned char channel)
{
   unsigned int value;
   float volt;

   ADMUX = 0x40 | channel;
     772:	80 64       	ori	r24, 0x40	; 64
     774:	87 b9       	out	0x07, r24	; 7
   value = ADC_read();
     776:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ADC_read>

   volt = (float)(value * 5.0)/ 1024.0;
     77a:	bc 01       	movw	r22, r24
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__floatunsisf>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 ea       	ldi	r20, 0xA0	; 160
     78a:	50 e4       	ldi	r21, 0x40	; 64
     78c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__mulsf3>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	5a e3       	ldi	r21, 0x3A	; 58
     798:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__mulsf3>
   value = (unsigned int)(volt * 1000);
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	4a e7       	ldi	r20, 0x7A	; 122
     7a2:	54 e4       	ldi	r21, 0x44	; 68
     7a4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__mulsf3>
     7a8:	0e 94 3e 14 	call	0x287c	; 0x287c <__fixunssfsi>

   voltage[6] = 'V';  //V for voltage
     7ac:	26 e5       	ldi	r18, 0x56	; 86
     7ae:	20 93 ae 00 	sts	0x00AE, r18
   voltage[5] = ' '; 
     7b2:	20 e2       	ldi	r18, 0x20	; 32
     7b4:	20 93 ad 00 	sts	0x00AD, r18
   voltage[4] = (value % 10) | 0x30;
     7b8:	2a e0       	ldi	r18, 0x0A	; 10
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	cb 01       	movw	r24, r22
     7be:	b9 01       	movw	r22, r18
     7c0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__udivmodhi4>
     7c4:	80 63       	ori	r24, 0x30	; 48
     7c6:	80 93 ac 00 	sts	0x00AC, r24
   value = value / 10;
   voltage[3] = (value % 10) | 0x30;
     7ca:	cb 01       	movw	r24, r22
     7cc:	b9 01       	movw	r22, r18
     7ce:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__udivmodhi4>
     7d2:	80 63       	ori	r24, 0x30	; 48
     7d4:	80 93 ab 00 	sts	0x00AB, r24
   value = value / 10;
   voltage[2] = (value % 10) | 0x30;
     7d8:	cb 01       	movw	r24, r22
     7da:	b9 01       	movw	r22, r18
     7dc:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <__udivmodhi4>
     7e0:	80 63       	ori	r24, 0x30	; 48
     7e2:	80 93 aa 00 	sts	0x00AA, r24
   voltage[1] = '.';  
     7e6:	8e e2       	ldi	r24, 0x2E	; 46
     7e8:	80 93 a9 00 	sts	0x00A9, r24
   value = value / 10;
   voltage[0] = value | 0x30;   
     7ec:	60 63       	ori	r22, 0x30	; 48
     7ee:	60 93 a8 00 	sts	0x00A8, r22
     7f2:	08 95       	ret

000007f4 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     800:	a0 91 b3 02 	lds	r26, 0x02B3
     804:	b0 91 b4 02 	lds	r27, 0x02B4
     808:	c0 90 8d 00 	lds	r12, 0x008D
     80c:	d0 90 8e 00 	lds	r13, 0x008E
     810:	e0 90 8f 00 	lds	r14, 0x008F
     814:	f0 90 90 00 	lds	r15, 0x0090
     818:	22 50       	subi	r18, 0x02	; 2
     81a:	31 09       	sbc	r19, r1
     81c:	41 09       	sbc	r20, r1
     81e:	51 09       	sbc	r21, r1
     820:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__muluhisi3>
     824:	6c 0d       	add	r22, r12
     826:	7d 1d       	adc	r23, r13
     828:	8e 1d       	adc	r24, r14
     82a:	9f 1d       	adc	r25, r15
}
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     836:	4f 92       	push	r4
     838:	5f 92       	push	r5
     83a:	6f 92       	push	r6
     83c:	7f 92       	push	r7
     83e:	8f 92       	push	r8
     840:	9f 92       	push	r9
     842:	af 92       	push	r10
     844:	bf 92       	push	r11
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	4b 01       	movw	r8, r22
     858:	5c 01       	movw	r10, r24
     85a:	c4 2f       	mov	r28, r20
     85c:	28 01       	movw	r4, r16
     85e:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     860:	80 91 be 02 	lds	r24, 0x02BE
     864:	90 91 bf 02 	lds	r25, 0x02BF
     868:	22 e0       	ldi	r18, 0x02	; 2
     86a:	88 0c       	add	r8, r8
     86c:	99 1c       	adc	r9, r9
     86e:	aa 1c       	adc	r10, r10
     870:	bb 1c       	adc	r11, r11
     872:	2a 95       	dec	r18
     874:	d1 f7       	brne	.-12     	; 0x86a <__stack+0xb>
     876:	20 91 95 00 	lds	r18, 0x0095
     87a:	30 91 96 00 	lds	r19, 0x0096
     87e:	c0 90 b5 02 	lds	r12, 0x02B5
     882:	d0 90 b6 02 	lds	r13, 0x02B6
     886:	e0 90 b7 02 	lds	r14, 0x02B7
     88a:	f0 90 b8 02 	lds	r15, 0x02B8
     88e:	c8 0e       	add	r12, r24
     890:	d9 1e       	adc	r13, r25
     892:	e1 1c       	adc	r14, r1
     894:	f1 1c       	adc	r15, r1
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	c5 01       	movw	r24, r10
     89c:	b4 01       	movw	r22, r8
     89e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
     8a2:	c2 0e       	add	r12, r18
     8a4:	d3 1e       	adc	r13, r19
     8a6:	e4 1e       	adc	r14, r20
     8a8:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     8aa:	20 91 95 00 	lds	r18, 0x0095
     8ae:	30 91 96 00 	lds	r19, 0x0096
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
     8be:	4b 01       	movw	r8, r22
     8c0:	5c 01       	movw	r10, r24
     8c2:	da e0       	ldi	r29, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     8c4:	c7 01       	movw	r24, r14
     8c6:	b6 01       	movw	r22, r12
     8c8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
     8cc:	88 23       	and	r24, r24
     8ce:	11 f0       	breq	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	d1 50       	subi	r29, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     8d2:	c1 f7       	brne	.-16     	; 0x8c4 <__stack+0x65>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     8d4:	f4 01       	movw	r30, r8
     8d6:	ed 54       	subi	r30, 0x4D	; 77
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
     8da:	c1 11       	cpse	r28, r1
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <__stack+0x8b>
  return ((*FATEntryValue) & 0x0fffffff);
     8de:	60 81       	ld	r22, Z
     8e0:	71 81       	ldd	r23, Z+1	; 0x01
     8e2:	82 81       	ldd	r24, Z+2	; 0x02
     8e4:	93 81       	ldd	r25, Z+3	; 0x03
     8e6:	9f 70       	andi	r25, 0x0F	; 15
     8e8:	0b c0       	rjmp	.+22     	; 0x900 <__stack+0xa1>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     8ea:	40 82       	st	Z, r4
     8ec:	51 82       	std	Z+1, r5	; 0x01
     8ee:	62 82       	std	Z+2, r6	; 0x02
     8f0:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>

return (0);
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	cb 01       	movw	r24, r22
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	af 90       	pop	r10
     914:	9f 90       	pop	r9
     916:	8f 90       	pop	r8
     918:	7f 90       	pop	r7
     91a:	6f 90       	pop	r6
     91c:	5f 90       	pop	r5
     91e:	4f 90       	pop	r4
     920:	08 95       	ret

00000922 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <getSetFreeCluster+0x12>
     934:	00 d0       	rcall	.+0      	; 0x936 <getSetFreeCluster+0x14>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	18 2f       	mov	r17, r24
     93c:	06 2f       	mov	r16, r22
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     93e:	60 91 b5 02 	lds	r22, 0x02B5
     942:	70 91 b6 02 	lds	r23, 0x02B6
     946:	80 91 b7 02 	lds	r24, 0x02B7
     94a:	90 91 b8 02 	lds	r25, 0x02B8
     94e:	6f 5f       	subi	r22, 0xFF	; 255
     950:	7f 4f       	sbci	r23, 0xFF	; 255
     952:	8f 4f       	sbci	r24, 0xFF	; 255
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	29 83       	std	Y+1, r18	; 0x01
     958:	3a 83       	std	Y+2, r19	; 0x02
     95a:	4b 83       	std	Y+3, r20	; 0x03
     95c:	5c 83       	std	Y+4, r21	; 0x04
     95e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     962:	c0 90 b3 00 	lds	r12, 0x00B3
     966:	d0 90 b4 00 	lds	r13, 0x00B4
     96a:	e0 90 b5 00 	lds	r14, 0x00B5
     96e:	f0 90 b6 00 	lds	r15, 0x00B6
     972:	29 81       	ldd	r18, Y+1	; 0x01
     974:	3a 81       	ldd	r19, Y+2	; 0x02
     976:	4b 81       	ldd	r20, Y+3	; 0x03
     978:	5c 81       	ldd	r21, Y+4	; 0x04
     97a:	82 e5       	ldi	r24, 0x52	; 82
     97c:	c8 16       	cp	r12, r24
     97e:	d8 06       	cpc	r13, r24
     980:	81 e6       	ldi	r24, 0x61	; 97
     982:	e8 06       	cpc	r14, r24
     984:	81 e4       	ldi	r24, 0x41	; 65
     986:	f8 06       	cpc	r15, r24
     988:	09 f0       	breq	.+2      	; 0x98c <getSetFreeCluster+0x6a>
     98a:	57 c0       	rjmp	.+174    	; 0xa3a <getSetFreeCluster+0x118>
     98c:	c0 90 97 02 	lds	r12, 0x0297
     990:	d0 90 98 02 	lds	r13, 0x0298
     994:	e0 90 99 02 	lds	r14, 0x0299
     998:	f0 90 9a 02 	lds	r15, 0x029A
     99c:	e2 e7       	ldi	r30, 0x72	; 114
     99e:	ce 16       	cp	r12, r30
     9a0:	de 06       	cpc	r13, r30
     9a2:	e1 e4       	ldi	r30, 0x41	; 65
     9a4:	ee 06       	cpc	r14, r30
     9a6:	e1 e6       	ldi	r30, 0x61	; 97
     9a8:	fe 06       	cpc	r15, r30
     9aa:	09 f0       	breq	.+2      	; 0x9ae <getSetFreeCluster+0x8c>
     9ac:	46 c0       	rjmp	.+140    	; 0xa3a <getSetFreeCluster+0x118>
     9ae:	c0 90 af 02 	lds	r12, 0x02AF
     9b2:	d0 90 b0 02 	lds	r13, 0x02B0
     9b6:	e0 90 b1 02 	lds	r14, 0x02B1
     9ba:	f0 90 b2 02 	lds	r15, 0x02B2
     9be:	c1 14       	cp	r12, r1
     9c0:	d1 04       	cpc	r13, r1
     9c2:	f5 e5       	ldi	r31, 0x55	; 85
     9c4:	ef 06       	cpc	r14, r31
     9c6:	fa ea       	ldi	r31, 0xAA	; 170
     9c8:	ff 06       	cpc	r15, r31
     9ca:	b9 f5       	brne	.+110    	; 0xa3a <getSetFreeCluster+0x118>
  return 0xffffffff;

 if(get_set == GET)
     9cc:	01 11       	cpse	r16, r1
     9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <getSetFreeCluster+0xd6>
 {
   if(totOrNext == TOTAL_FREE)
     9d0:	11 30       	cpi	r17, 0x01	; 1
     9d2:	49 f4       	brne	.+18     	; 0x9e6 <getSetFreeCluster+0xc4>
      return(FS->freeClusterCount);
     9d4:	60 91 9b 02 	lds	r22, 0x029B
     9d8:	70 91 9c 02 	lds	r23, 0x029C
     9dc:	80 91 9d 02 	lds	r24, 0x029D
     9e0:	90 91 9e 02 	lds	r25, 0x029E
     9e4:	2d c0       	rjmp	.+90     	; 0xa40 <getSetFreeCluster+0x11e>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     9e6:	60 91 9f 02 	lds	r22, 0x029F
     9ea:	70 91 a0 02 	lds	r23, 0x02A0
     9ee:	80 91 a1 02 	lds	r24, 0x02A1
     9f2:	90 91 a2 02 	lds	r25, 0x02A2
     9f6:	24 c0       	rjmp	.+72     	; 0xa40 <getSetFreeCluster+0x11e>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     9f8:	11 30       	cpi	r17, 0x01	; 1
     9fa:	49 f4       	brne	.+18     	; 0xa0e <getSetFreeCluster+0xec>
      FS->freeClusterCount = FSEntry;
     9fc:	20 93 9b 02 	sts	0x029B, r18
     a00:	30 93 9c 02 	sts	0x029C, r19
     a04:	40 93 9d 02 	sts	0x029D, r20
     a08:	50 93 9e 02 	sts	0x029E, r21
     a0c:	08 c0       	rjmp	.+16     	; 0xa1e <getSetFreeCluster+0xfc>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     a0e:	20 93 9f 02 	sts	0x029F, r18
     a12:	30 93 a0 02 	sts	0x02A0, r19
     a16:	40 93 a1 02 	sts	0x02A1, r20
     a1a:	50 93 a2 02 	sts	0x02A2, r21
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     a1e:	60 91 b5 02 	lds	r22, 0x02B5
     a22:	70 91 b6 02 	lds	r23, 0x02B6
     a26:	80 91 b7 02 	lds	r24, 0x02B7
     a2a:	90 91 b8 02 	lds	r25, 0x02B8
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8f 4f       	sbci	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     a3a:	6f ef       	ldi	r22, 0xFF	; 255
     a3c:	7f ef       	ldi	r23, 0xFF	; 255
     a3e:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     a62:	10 92 b5 02 	sts	0x02B5, r1
     a66:	10 92 b6 02 	sts	0x02B6, r1
     a6a:	10 92 b7 02 	sts	0x02B7, r1
     a6e:	10 92 b8 02 	sts	0x02B8, r1

SD_readSingleBlock(0);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	cb 01       	movw	r24, r22
     a78:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     a7c:	80 91 b3 00 	lds	r24, 0x00B3
     a80:	8d 7f       	andi	r24, 0xFD	; 253
     a82:	89 3e       	cpi	r24, 0xE9	; 233
     a84:	09 f0       	breq	.+2      	; 0xa88 <getBootSectorData+0x2e>
     a86:	8a c0       	rjmp	.+276    	; 0xb9c <getBootSectorData+0x142>
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
}

bytesPerSector = bpb->bytesPerSector;
     a88:	80 91 be 00 	lds	r24, 0x00BE
     a8c:	90 91 bf 00 	lds	r25, 0x00BF
     a90:	90 93 96 00 	sts	0x0096, r25
     a94:	80 93 95 00 	sts	0x0095, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     a98:	80 91 c0 00 	lds	r24, 0x00C0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 b4 02 	sts	0x02B4, r25
     aa2:	80 93 b3 02 	sts	0x02B3, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     aa6:	e0 91 c1 00 	lds	r30, 0x00C1
     aaa:	f0 91 c2 00 	lds	r31, 0x00C2
     aae:	f0 93 bf 02 	sts	0x02BF, r31
     ab2:	e0 93 be 02 	sts	0x02BE, r30
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     ab6:	80 91 df 00 	lds	r24, 0x00DF
     aba:	90 91 e0 00 	lds	r25, 0x00E0
     abe:	a0 91 e1 00 	lds	r26, 0x00E1
     ac2:	b0 91 e2 00 	lds	r27, 0x00E2
     ac6:	80 93 a2 00 	sts	0x00A2, r24
     aca:	90 93 a3 00 	sts	0x00A3, r25
     ace:	a0 93 a4 00 	sts	0x00A4, r26
     ad2:	b0 93 a5 00 	sts	0x00A5, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     ad6:	c0 91 be 02 	lds	r28, 0x02BE
     ada:	d0 91 bf 02 	lds	r29, 0x02BF
     ade:	a0 91 c3 00 	lds	r26, 0x00C3
     ae2:	20 91 d7 00 	lds	r18, 0x00D7
     ae6:	30 91 d8 00 	lds	r19, 0x00D8
     aea:	40 91 d9 00 	lds	r20, 0x00D9
     aee:	50 91 da 00 	lds	r21, 0x00DA
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__muluhisi3>
     af8:	8b 01       	movw	r16, r22
     afa:	9c 01       	movw	r18, r24
     afc:	80 91 cf 00 	lds	r24, 0x00CF
     b00:	90 91 d0 00 	lds	r25, 0x00D0
     b04:	a0 91 d1 00 	lds	r26, 0x00D1
     b08:	b0 91 d2 00 	lds	r27, 0x00D2
     b0c:	8c 0f       	add	r24, r28
     b0e:	9d 1f       	adc	r25, r29
     b10:	a1 1d       	adc	r26, r1
     b12:	b1 1d       	adc	r27, r1
     b14:	80 0f       	add	r24, r16
     b16:	91 1f       	adc	r25, r17
     b18:	a2 1f       	adc	r26, r18
     b1a:	b3 1f       	adc	r27, r19
     b1c:	80 93 8d 00 	sts	0x008D, r24
     b20:	90 93 8e 00 	sts	0x008E, r25
     b24:	a0 93 8f 00 	sts	0x008F, r26
     b28:	b0 93 90 00 	sts	0x0090, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     b2c:	40 91 b3 02 	lds	r20, 0x02B3
     b30:	50 91 b4 02 	lds	r21, 0x02B4
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     b34:	60 91 d3 00 	lds	r22, 0x00D3
     b38:	70 91 d4 00 	lds	r23, 0x00D4
     b3c:	80 91 d5 00 	lds	r24, 0x00D5
     b40:	90 91 d6 00 	lds	r25, 0x00D6
     b44:	6e 1b       	sub	r22, r30
     b46:	7f 0b       	sbc	r23, r31
     b48:	81 09       	sbc	r24, r1
     b4a:	91 09       	sbc	r25, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     b4c:	60 1b       	sub	r22, r16
     b4e:	71 0b       	sbc	r23, r17
     b50:	82 0b       	sbc	r24, r18
     b52:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     b54:	9a 01       	movw	r18, r20
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
     b5e:	20 93 97 00 	sts	0x0097, r18
     b62:	30 93 98 00 	sts	0x0098, r19
     b66:	40 93 99 00 	sts	0x0099, r20
     b6a:	50 93 9a 00 	sts	0x009A, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	a9 01       	movw	r20, r18
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 91 04 	call	0x922	; 0x922 <getSetFreeCluster>
     b7c:	00 91 97 00 	lds	r16, 0x0097
     b80:	10 91 98 00 	lds	r17, 0x0098
     b84:	20 91 99 00 	lds	r18, 0x0099
     b88:	30 91 9a 00 	lds	r19, 0x009A
     b8c:	06 17       	cp	r16, r22
     b8e:	17 07       	cpc	r17, r23
     b90:	28 07       	cpc	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	20 f5       	brcc	.+72     	; 0xbde <getBootSectorData+0x184>
     freeClusterCountUpdated = 0;
     b96:	10 92 3e 03 	sts	0x033E, r1
     b9a:	24 c0       	rjmp	.+72     	; 0xbe4 <getBootSectorData+0x18a>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     b9c:	80 91 b1 02 	lds	r24, 0x02B1
     ba0:	90 91 b2 02 	lds	r25, 0x02B2
     ba4:	85 35       	cpi	r24, 0x55	; 85
     ba6:	9a 4a       	sbci	r25, 0xAA	; 170
     ba8:	11 f0       	breq	.+4      	; 0xbae <getBootSectorData+0x154>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	1c c0       	rjmp	.+56     	; 0xbe6 <getBootSectorData+0x18c>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     bae:	60 91 79 02 	lds	r22, 0x0279
     bb2:	70 91 7a 02 	lds	r23, 0x027A
     bb6:	80 91 7b 02 	lds	r24, 0x027B
     bba:	90 91 7c 02 	lds	r25, 0x027C
     bbe:	60 93 b5 02 	sts	0x02B5, r22
     bc2:	70 93 b6 02 	sts	0x02B6, r23
     bc6:	80 93 b7 02 	sts	0x02B7, r24
     bca:	90 93 b8 02 	sts	0x02B8, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     bce:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     bd2:	80 91 b3 00 	lds	r24, 0x00B3
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	89 3e       	cpi	r24, 0xE9	; 233
     bda:	39 f7       	brne	.-50     	; 0xbaa <getBootSectorData+0x150>
     bdc:	55 cf       	rjmp	.-342    	; 0xa88 <getBootSectorData+0x2e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 3e 03 	sts	0x033E, r24
return 0;
     be4:	80 e0       	ldi	r24, 0x00	; 0
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2b 97       	sbiw	r28, 0x0b	; 11
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     c06:	40 e0       	ldi	r20, 0x00	; 0
if(fileName[j] == '.') break;
     c08:	21 91       	ld	r18, Z+
     c0a:	2e 32       	cpi	r18, 0x2E	; 46
     c0c:	21 f0       	breq	.+8      	; 0xc16 <convertFileName+0x26>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     c0e:	4f 5f       	subi	r20, 0xFF	; 255
     c10:	4c 30       	cpi	r20, 0x0C	; 12
     c12:	d1 f7       	brne	.-12     	; 0xc08 <convertFileName+0x18>
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <convertFileName+0x38>
     c16:	54 2f       	mov	r21, r20
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     c18:	49 30       	cpi	r20, 0x09	; 9
     c1a:	30 f4       	brcc	.+12     	; 0xc28 <convertFileName+0x38>
     c1c:	9e 01       	movw	r18, r28
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	f9 01       	movw	r30, r18
     c24:	dc 01       	movw	r26, r24
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <convertFileName+0x44>
     c28:	82 e6       	ldi	r24, 0x62	; 98
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	40 c0       	rjmp	.+128    	; 0xcb4 <convertFileName+0xc4>
     c34:	6e 2f       	mov	r22, r30
     c36:	62 1b       	sub	r22, r18

for(k=0; k<j; k++) //setting file name
     c38:	64 17       	cp	r22, r20
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <convertFileName+0x52>
  fileNameFAT[k] = fileName[k];
     c3c:	6d 91       	ld	r22, X+
     c3e:	61 93       	st	Z+, r22
     c40:	f9 cf       	rjmp	.-14     	; 0xc34 <convertFileName+0x44>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     c42:	60 e2       	ldi	r22, 0x20	; 32
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     c44:	48 30       	cpi	r20, 0x08	; 8
     c46:	31 f0       	breq	.+12     	; 0xc54 <convertFileName+0x64>
  fileNameFAT[k] = ' ';
     c48:	f9 01       	movw	r30, r18
     c4a:	e4 0f       	add	r30, r20
     c4c:	f1 1d       	adc	r31, r1
     c4e:	60 83       	st	Z, r22
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	f8 cf       	rjmp	.-16     	; 0xc44 <convertFileName+0x54>
  fileNameFAT[k] = ' ';

j++;
     c54:	5f 5f       	subi	r21, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     c56:	70 e2       	ldi	r23, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     c58:	fc 01       	movw	r30, r24
     c5a:	e5 0f       	add	r30, r21
     c5c:	f1 1d       	adc	r31, r1
     c5e:	60 81       	ld	r22, Z
     c60:	66 23       	and	r22, r22
     c62:	31 f0       	breq	.+12     	; 0xc70 <convertFileName+0x80>
    fileNameFAT[k] = fileName[j++];
     c64:	5f 5f       	subi	r21, 0xFF	; 255
     c66:	f9 01       	movw	r30, r18
     c68:	e4 0f       	add	r30, r20
     c6a:	f1 1d       	adc	r31, r1
     c6c:	60 83       	st	Z, r22
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <convertFileName+0x90>
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     c70:	64 2f       	mov	r22, r20
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     c72:	4f 5f       	subi	r20, 0xFF	; 255
     c74:	f9 01       	movw	r30, r18
     c76:	e6 0f       	add	r30, r22
     c78:	f1 1d       	adc	r31, r1
     c7a:	70 83       	st	Z, r23
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     c7c:	4b 30       	cpi	r20, 0x0B	; 11
     c7e:	c0 f3       	brcs	.-16     	; 0xc70 <convertFileName+0x80>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     c80:	4f 5f       	subi	r20, 0xFF	; 255
     c82:	4b 30       	cpi	r20, 0x0B	; 11
     c84:	48 f3       	brcs	.-46     	; 0xc58 <convertFileName+0x68>
     c86:	ae 01       	movw	r20, r28
     c88:	44 5f       	subi	r20, 0xF4	; 244
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     c8e:	60 81       	ld	r22, Z
     c90:	7f e9       	ldi	r23, 0x9F	; 159
     c92:	76 0f       	add	r23, r22
     c94:	7a 31       	cpi	r23, 0x1A	; 26
     c96:	10 f4       	brcc	.+4      	; 0xc9c <convertFileName+0xac>
    fileNameFAT[j] -= 0x20;
     c98:	60 52       	subi	r22, 0x20	; 32
     c9a:	60 83       	st	Z, r22
     c9c:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     c9e:	e4 17       	cp	r30, r20
     ca0:	f5 07       	cpc	r31, r21
     ca2:	a9 f7       	brne	.-22     	; 0xc8e <convertFileName+0x9e>
     ca4:	dc 01       	movw	r26, r24
     ca6:	f9 01       	movw	r30, r18
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     ca8:	81 91       	ld	r24, Z+
     caa:	8d 93       	st	X+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     cac:	e4 17       	cp	r30, r20
     cae:	f5 07       	cpc	r31, r21
     cb0:	d9 f7       	brne	.-10     	; 0xca8 <convertFileName+0xb8>
  fileName[j] = fileNameFAT[j];

return 0;
     cb2:	80 e0       	ldi	r24, 0x00	; 0
}
     cb4:	2b 96       	adiw	r28, 0x0b	; 11
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     cc6:	4f 92       	push	r4
     cc8:	5f 92       	push	r5
     cca:	6f 92       	push	r6
     ccc:	7f 92       	push	r7
     cce:	8f 92       	push	r8
     cd0:	9f 92       	push	r9
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	6b 01       	movw	r12, r22
     ce0:	7c 01       	movw	r14, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	c8 22       	and	r12, r24
     ce6:	26 01       	movw	r4, r12
     ce8:	37 01       	movw	r6, r14
     cea:	32 e0       	ldi	r19, 0x02	; 2
     cec:	44 0c       	add	r4, r4
     cee:	55 1c       	adc	r5, r5
     cf0:	66 1c       	adc	r6, r6
     cf2:	77 1c       	adc	r7, r7
     cf4:	3a 95       	dec	r19
     cf6:	d1 f7       	brne	.-12     	; 0xcec <searchNextFreeCluster+0x26>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     cf8:	80 91 97 00 	lds	r24, 0x0097
     cfc:	90 91 98 00 	lds	r25, 0x0098
     d00:	a0 91 99 00 	lds	r26, 0x0099
     d04:	b0 91 9a 00 	lds	r27, 0x009A
     d08:	c8 16       	cp	r12, r24
     d0a:	d9 06       	cpc	r13, r25
     d0c:	ea 06       	cpc	r14, r26
     d0e:	fb 06       	cpc	r15, r27
     d10:	08 f0       	brcs	.+2      	; 0xd14 <searchNextFreeCluster+0x4e>
     d12:	42 c0       	rjmp	.+132    	; 0xd98 <searchNextFreeCluster+0xd2>
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     d14:	80 91 be 02 	lds	r24, 0x02BE
     d18:	90 91 bf 02 	lds	r25, 0x02BF
     d1c:	20 91 95 00 	lds	r18, 0x0095
     d20:	30 91 96 00 	lds	r19, 0x0096
     d24:	80 90 b5 02 	lds	r8, 0x02B5
     d28:	90 90 b6 02 	lds	r9, 0x02B6
     d2c:	a0 90 b7 02 	lds	r10, 0x02B7
     d30:	b0 90 b8 02 	lds	r11, 0x02B8
     d34:	88 0e       	add	r8, r24
     d36:	99 1e       	adc	r9, r25
     d38:	a1 1c       	adc	r10, r1
     d3a:	b1 1c       	adc	r11, r1
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	c3 01       	movw	r24, r6
     d42:	b2 01       	movw	r22, r4
     d44:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
     d48:	82 0e       	add	r8, r18
     d4a:	93 1e       	adc	r9, r19
     d4c:	a4 1e       	adc	r10, r20
     d4e:	b5 1e       	adc	r11, r21
      SD_readSingleBlock(sector);
     d50:	c5 01       	movw	r24, r10
     d52:	b4 01       	movw	r22, r8
     d54:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
     d58:	e3 eb       	ldi	r30, 0xB3	; 179
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
      for(i=0; i<128; i++)
     d5c:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     d5e:	81 91       	ld	r24, Z+
     d60:	91 91       	ld	r25, Z+
     d62:	a1 91       	ld	r26, Z+
     d64:	b1 91       	ld	r27, Z+
     d66:	bf 70       	andi	r27, 0x0F	; 15
     d68:	89 2b       	or	r24, r25
     d6a:	8a 2b       	or	r24, r26
     d6c:	8b 2b       	or	r24, r27
     d6e:	39 f4       	brne	.+14     	; 0xd7e <searchNextFreeCluster+0xb8>
            return(cluster+i);
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	62 0f       	add	r22, r18
     d76:	71 1d       	adc	r23, r1
     d78:	81 1d       	adc	r24, r1
     d7a:	91 1d       	adc	r25, r1
     d7c:	10 c0       	rjmp	.+32     	; 0xd9e <searchNextFreeCluster+0xd8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     d7e:	2f 5f       	subi	r18, 0xFF	; 255
     d80:	20 38       	cpi	r18, 0x80	; 128
     d82:	69 f7       	brne	.-38     	; 0xd5e <searchNextFreeCluster+0x98>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	c8 0e       	add	r12, r24
     d88:	d1 1c       	adc	r13, r1
     d8a:	e1 1c       	adc	r14, r1
     d8c:	f1 1c       	adc	r15, r1
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	58 0e       	add	r5, r24
     d92:	61 1c       	adc	r6, r1
     d94:	71 1c       	adc	r7, r1
     d96:	b0 cf       	rjmp	.-160    	; 0xcf8 <searchNextFreeCluster+0x32>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	cb 01       	movw	r24, r22
}
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	7f 90       	pop	r7
     db0:	6f 90       	pop	r6
     db2:	5f 90       	pop	r5
     db4:	4f 90       	pop	r4
     db6:	08 95       	ret

00000db8 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     db8:	9f 92       	push	r9
     dba:	af 92       	push	r10
     dbc:	bf 92       	push	r11
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	64 97       	sbiw	r28, 0x14	; 20
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	a8 2e       	mov	r10, r24
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     de0:	94 e1       	ldi	r25, 0x14	; 20
     de2:	eb e6       	ldi	r30, 0x6B	; 107
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	de 01       	movw	r26, r28
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	01 90       	ld	r0, Z+
     dec:	0d 92       	st	X+, r0
     dee:	9a 95       	dec	r25
     df0:	e1 f7       	brne	.-8      	; 0xdea <displayMemory+0x32>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     df2:	ec e0       	ldi	r30, 0x0C	; 12
     df4:	be 2e       	mov	r11, r30
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     df6:	fc e2       	ldi	r31, 0x2C	; 44
     df8:	9f 2e       	mov	r9, r31
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     dfa:	aa e0       	ldi	r26, 0x0A	; 10
     dfc:	ca 2e       	mov	r12, r26
     dfe:	d1 2c       	mov	r13, r1
     e00:	e1 2c       	mov	r14, r1
     e02:	f1 2c       	mov	r15, r1
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     e04:	85 e0       	ldi	r24, 0x05	; 5
     e06:	b8 16       	cp	r11, r24
     e08:	19 f0       	breq	.+6      	; 0xe10 <displayMemory+0x58>
     e0a:	e9 e0       	ldi	r30, 0x09	; 9
     e0c:	be 12       	cpse	r11, r30
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <displayMemory+0x62>
	{
	   memoryString[i-1] = ',';  
     e10:	fe 01       	movw	r30, r28
     e12:	eb 0d       	add	r30, r11
     e14:	f1 1d       	adc	r31, r1
     e16:	90 82       	st	Z, r9
	   i--;
     e18:	ba 94       	dec	r11
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     e1a:	8e 01       	movw	r16, r28
     e1c:	0b 0d       	add	r16, r11
     e1e:	11 1d       	adc	r17, r1
     e20:	cb 01       	movw	r24, r22
     e22:	ba 01       	movw	r22, r20
     e24:	a7 01       	movw	r20, r14
     e26:	96 01       	movw	r18, r12
     e28:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
     e2c:	ca 01       	movw	r24, r20
     e2e:	60 63       	ori	r22, 0x30	; 48
     e30:	f8 01       	movw	r30, r16
     e32:	60 83       	st	Z, r22
    memory /= 10;
     e34:	a9 01       	movw	r20, r18
     e36:	bc 01       	movw	r22, r24
	if(memory == 0) break;
     e38:	41 15       	cp	r20, r1
     e3a:	51 05       	cpc	r21, r1
     e3c:	61 05       	cpc	r22, r1
     e3e:	71 05       	cpc	r23, r1
     e40:	11 f0       	breq	.+4      	; 0xe46 <displayMemory+0x8e>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     e42:	ba 94       	dec	r11
     e44:	f9 f6       	brne	.-66     	; 0xe04 <displayMemory+0x4c>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	af 12       	cpse	r10, r31
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <displayMemory+0x98>
     e4c:	8b e4       	ldi	r24, 0x4B	; 75
     e4e:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 05 03 	call	0x60a	; 0x60a <transmitString>
}
     e58:	64 96       	adiw	r28, 0x14	; 20
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	08 95       	ret

00000e7c <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     e8c:	8a 01       	movw	r16, r20
     e8e:	9b 01       	movw	r18, r22
     e90:	11 70       	andi	r17, 0x01	; 1
     e92:	22 27       	eor	r18, r18
     e94:	33 27       	eor	r19, r19
     e96:	6a 01       	movw	r12, r20
     e98:	7b 01       	movw	r14, r22
     e9a:	89 e0       	ldi	r24, 0x09	; 9
     e9c:	f6 94       	lsr	r15
     e9e:	e7 94       	ror	r14
     ea0:	d7 94       	ror	r13
     ea2:	c7 94       	ror	r12
     ea4:	8a 95       	dec	r24
     ea6:	d1 f7       	brne	.-12     	; 0xe9c <freeMemoryUpdate+0x20>
     ea8:	01 2b       	or	r16, r17
     eaa:	02 2b       	or	r16, r18
     eac:	03 2b       	or	r16, r19
     eae:	29 f0       	breq	.+10     	; 0xeba <freeMemoryUpdate+0x3e>
  else size = (size / 512) +1;
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	c8 1a       	sub	r12, r24
     eb4:	d8 0a       	sbc	r13, r24
     eb6:	e8 0a       	sbc	r14, r24
     eb8:	f8 0a       	sbc	r15, r24
  if((size % 8) == 0) size = size / 8;
     eba:	b7 01       	movw	r22, r14
     ebc:	a6 01       	movw	r20, r12
     ebe:	47 70       	andi	r20, 0x07	; 7
     ec0:	55 27       	eor	r21, r21
     ec2:	66 27       	eor	r22, r22
     ec4:	77 27       	eor	r23, r23
     ec6:	b3 e0       	ldi	r27, 0x03	; 3
     ec8:	f6 94       	lsr	r15
     eca:	e7 94       	ror	r14
     ecc:	d7 94       	ror	r13
     ece:	c7 94       	ror	r12
     ed0:	ba 95       	dec	r27
     ed2:	d1 f7       	brne	.-12     	; 0xec8 <freeMemoryUpdate+0x4c>
     ed4:	45 2b       	or	r20, r21
     ed6:	46 2b       	or	r20, r22
     ed8:	47 2b       	or	r20, r23
     eda:	29 f0       	breq	.+10     	; 0xee6 <freeMemoryUpdate+0x6a>
  else size = (size / 8) +1;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	c8 1a       	sub	r12, r24
     ee0:	d8 0a       	sbc	r13, r24
     ee2:	e8 0a       	sbc	r14, r24
     ee4:	f8 0a       	sbc	r15, r24

  if(freeClusterCountUpdated)
     ee6:	80 91 3e 03 	lds	r24, 0x033E
     eea:	88 23       	and	r24, r24
     eec:	f9 f0       	breq	.+62     	; 0xf2c <freeMemoryUpdate+0xb0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	a9 01       	movw	r20, r18
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0e 94 91 04 	call	0x922	; 0x922 <getSetFreeCluster>
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
  else size = (size / 8) +1;

  if(freeClusterCountUpdated)
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
     f00:	c1 11       	cpse	r28, r1
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <freeMemoryUpdate+0x92>
  	   freeClusters = freeClusters + size;
     f04:	2c 0d       	add	r18, r12
     f06:	3d 1d       	adc	r19, r13
     f08:	4e 1d       	adc	r20, r14
     f0a:	5f 1d       	adc	r21, r15
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <freeMemoryUpdate+0x9a>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     f0e:	2c 19       	sub	r18, r12
     f10:	3d 09       	sbc	r19, r13
     f12:	4e 09       	sbc	r20, r14
     f14:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	81 e0       	ldi	r24, 0x01	; 1
  }
}
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     f28:	0c 94 91 04 	jmp	0x922	; 0x922 <getSetFreeCluster>
  }
}
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	08 95       	ret

00000f3c <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     f3c:	2f 92       	push	r2
     f3e:	3f 92       	push	r3
     f40:	4f 92       	push	r4
     f42:	5f 92       	push	r5
     f44:	6f 92       	push	r6
     f46:	7f 92       	push	r7
     f48:	8f 92       	push	r8
     f4a:	9f 92       	push	r9
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	2b 97       	sbiw	r28, 0x0b	; 11
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	38 2e       	mov	r3, r24
     f72:	68 87       	std	Y+8, r22	; 0x08
     f74:	27 2e       	mov	r2, r23
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     f76:	c0 90 a2 00 	lds	r12, 0x00A2
     f7a:	d0 90 a3 00 	lds	r13, 0x00A3
     f7e:	e0 90 a4 00 	lds	r14, 0x00A4
     f82:	f0 90 a5 00 	lds	r15, 0x00A5
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	83 0d       	add	r24, r3
     f8a:	8f 83       	std	Y+7, r24	; 0x07

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
     f8c:	c7 01       	movw	r24, r14
     f8e:	b6 01       	movw	r22, r12
     f90:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <getFirstSector>
     f94:	6b 83       	std	Y+3, r22	; 0x03
     f96:	7c 83       	std	Y+4, r23	; 0x04
     f98:	8d 83       	std	Y+5, r24	; 0x05
     f9a:	9e 83       	std	Y+6, r25	; 0x06

   for(sector = 0; sector < sectorPerCluster; sector++)
     f9c:	41 2c       	mov	r4, r1
     f9e:	51 2c       	mov	r5, r1
     fa0:	32 01       	movw	r6, r4
     fa2:	80 91 b3 02 	lds	r24, 0x02B3
     fa6:	90 91 b4 02 	lds	r25, 0x02B4
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	48 16       	cp	r4, r24
     fb0:	59 06       	cpc	r5, r25
     fb2:	6a 06       	cpc	r6, r26
     fb4:	7b 06       	cpc	r7, r27
     fb6:	08 f0       	brcs	.+2      	; 0xfba <findFiles+0x7e>
     fb8:	92 c0       	rjmp	.+292    	; 0x10de <findFiles+0x1a2>
   {
     SD_readSingleBlock (firstSector + sector);
     fba:	8b 80       	ldd	r8, Y+3	; 0x03
     fbc:	9c 80       	ldd	r9, Y+4	; 0x04
     fbe:	ad 80       	ldd	r10, Y+5	; 0x05
     fc0:	be 80       	ldd	r11, Y+6	; 0x06
     fc2:	84 0c       	add	r8, r4
     fc4:	95 1c       	adc	r9, r5
     fc6:	a6 1c       	adc	r10, r6
     fc8:	b7 1c       	adc	r11, r7
     fca:	c5 01       	movw	r24, r10
     fcc:	b4 01       	movw	r22, r8
     fce:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
     fd2:	0e eb       	ldi	r16, 0xBE	; 190
     fd4:	10 e0       	ldi	r17, 0x00	; 0
	

     for(i=0; i<bytesPerSector; i+=32)
     fd6:	a3 eb       	ldi	r26, 0xB3	; 179
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	bb 87       	std	Y+11, r27	; 0x0b
     fdc:	aa 87       	std	Y+10, r26	; 0x0a
     fde:	2a 85       	ldd	r18, Y+10	; 0x0a
     fe0:	3b 85       	ldd	r19, Y+11	; 0x0b
     fe2:	23 5b       	subi	r18, 0xB3	; 179
     fe4:	30 40       	sbci	r19, 0x00	; 0
     fe6:	80 91 95 00 	lds	r24, 0x0095
     fea:	90 91 96 00 	lds	r25, 0x0096
     fee:	28 17       	cp	r18, r24
     ff0:	39 07       	cpc	r19, r25
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <findFiles+0xba>
     ff4:	6e c0       	rjmp	.+220    	; 0x10d2 <findFiles+0x196>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     ff6:	ea 85       	ldd	r30, Y+10	; 0x0a
     ff8:	fb 85       	ldd	r31, Y+11	; 0x0b
     ffa:	80 81       	ld	r24, Z
     ffc:	81 11       	cpse	r24, r1
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <findFiles+0xd0>
		{
		  if(flag == DELETE)
    1000:	f2 e0       	ldi	r31, 0x02	; 2
    1002:	3f 12       	cpse	r3, r31
    1004:	88 c0       	rjmp	.+272    	; 0x1116 <findFiles+0x1da>
		      transmitString_F(PSTR("File does not exist!"));
    1006:	86 ed       	ldi	r24, 0xD6	; 214
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	83 c0       	rjmp	.+262    	; 0x1112 <findFiles+0x1d6>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    100c:	85 3e       	cpi	r24, 0xE5	; 229
    100e:	09 f4       	brne	.+2      	; 0x1012 <findFiles+0xd6>
    1010:	58 c0       	rjmp	.+176    	; 0x10c2 <findFiles+0x186>
    1012:	d8 01       	movw	r26, r16
    1014:	8c 91       	ld	r24, X
    1016:	8f 30       	cpi	r24, 0x0F	; 15
    1018:	09 f4       	brne	.+2      	; 0x101c <findFiles+0xe0>
    101a:	53 c0       	rjmp	.+166    	; 0x10c2 <findFiles+0x186>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    101c:	bf 81       	ldd	r27, Y+7	; 0x07
    101e:	b2 30       	cpi	r27, 0x02	; 2
    1020:	60 f4       	brcc	.+24     	; 0x103a <findFiles+0xfe>
    1022:	e8 85       	ldd	r30, Y+8	; 0x08
    1024:	f2 2d       	mov	r31, r2
    1026:	aa 85       	ldd	r26, Y+10	; 0x0a
    1028:	bb 85       	ldd	r27, Y+11	; 0x0b
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    102a:	9d 91       	ld	r25, X+
    102c:	81 91       	ld	r24, Z+
    102e:	98 13       	cpse	r25, r24
    1030:	48 c0       	rjmp	.+144    	; 0x10c2 <findFiles+0x186>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1032:	a0 17       	cp	r26, r16
    1034:	b1 07       	cpc	r27, r17
    1036:	c9 f7       	brne	.-14     	; 0x102a <findFiles+0xee>
    1038:	71 c0       	rjmp	.+226    	; 0x111c <findFiles+0x1e0>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    103a:	8d e0       	ldi	r24, 0x0D	; 13
    103c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1046:	ea 85       	ldd	r30, Y+10	; 0x0a
    1048:	fb 85       	ldd	r31, Y+11	; 0x0b
    104a:	fa 83       	std	Y+2, r31	; 0x02
    104c:	e9 83       	std	Y+1, r30	; 0x01
			 for(j=0; j<11; j++)
    104e:	90 e0       	ldi	r25, 0x00	; 0
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
    1050:	a9 81       	ldd	r26, Y+1	; 0x01
    1052:	ba 81       	ldd	r27, Y+2	; 0x02
    1054:	8d 91       	ld	r24, X+
    1056:	ba 83       	std	Y+2, r27	; 0x02
    1058:	a9 83       	std	Y+1, r26	; 0x01
    105a:	99 87       	std	Y+9, r25	; 0x09
    105c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1060:	99 85       	ldd	r25, Y+9	; 0x09
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	9b 30       	cpi	r25, 0x0B	; 11
    1066:	41 f0       	breq	.+16     	; 0x1078 <findFiles+0x13c>
		     {
			   if(j == 8) transmitByte(' ');
    1068:	98 30       	cpi	r25, 0x08	; 8
    106a:	91 f7       	brne	.-28     	; 0x1050 <findFiles+0x114>
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	99 87       	std	Y+9, r25	; 0x09
    1070:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1074:	99 85       	ldd	r25, Y+9	; 0x09
    1076:	ec cf       	rjmp	.-40     	; 0x1050 <findFiles+0x114>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    1078:	89 eb       	ldi	r24, 0xB9	; 185
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1080:	f8 01       	movw	r30, r16
    1082:	80 81       	ld	r24, Z
    1084:	80 31       	cpi	r24, 0x10	; 16
    1086:	b1 f0       	breq	.+44     	; 0x10b4 <findFiles+0x178>
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	b9 f0       	breq	.+46     	; 0x10ba <findFiles+0x17e>
			 {
			     transmitString_F (PSTR("FILE" ));
    108c:	84 eb       	ldi	r24, 0xB4	; 180
    108e:	93 e0       	ldi	r25, 0x03	; 3
    1090:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
		         transmitString_F (PSTR("   "));
    1094:	80 eb       	ldi	r24, 0xB0	; 176
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    109c:	aa 85       	ldd	r26, Y+10	; 0x0a
    109e:	bb 85       	ldd	r27, Y+11	; 0x0b
    10a0:	5c 96       	adiw	r26, 0x1c	; 28
    10a2:	4d 91       	ld	r20, X+
    10a4:	5d 91       	ld	r21, X+
    10a6:	6d 91       	ld	r22, X+
    10a8:	7c 91       	ld	r23, X
    10aa:	5f 97       	sbiw	r26, 0x1f	; 31
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <displayMemory>
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <findFiles+0x186>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    10b4:	8c ea       	ldi	r24, 0xAC	; 172
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <findFiles+0x182>
    10ba:	87 ea       	ldi	r24, 0xA7	; 167
    10bc:	93 e0       	ldi	r25, 0x03	; 3
    10be:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
    10c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    10c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    10c6:	b0 96       	adiw	r30, 0x20	; 32
    10c8:	fb 87       	std	Y+11, r31	; 0x0b
    10ca:	ea 87       	std	Y+10, r30	; 0x0a
    10cc:	00 5e       	subi	r16, 0xE0	; 224
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	86 cf       	rjmp	.-244    	; 0xfde <findFiles+0xa2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    10d2:	ff ef       	ldi	r31, 0xFF	; 255
    10d4:	4f 1a       	sub	r4, r31
    10d6:	5f 0a       	sbc	r5, r31
    10d8:	6f 0a       	sbc	r6, r31
    10da:	7f 0a       	sbc	r7, r31
    10dc:	62 cf       	rjmp	.-316    	; 0xfa2 <findFiles+0x66>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    10de:	00 e0       	ldi	r16, 0x00	; 0
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	98 01       	movw	r18, r16
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	c7 01       	movw	r24, r14
    10e8:	b6 01       	movw	r22, r12
    10ea:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
    10ee:	6b 01       	movw	r12, r22
    10f0:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    10f2:	87 ef       	ldi	r24, 0xF7	; 247
    10f4:	c8 16       	cp	r12, r24
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	d8 06       	cpc	r13, r24
    10fa:	e8 06       	cpc	r14, r24
    10fc:	8f e0       	ldi	r24, 0x0F	; 15
    10fe:	f8 06       	cpc	r15, r24
    1100:	50 f4       	brcc	.+20     	; 0x1116 <findFiles+0x1da>
   	 return 0;
   if(cluster == 0) 
    1102:	c1 14       	cp	r12, r1
    1104:	d1 04       	cpc	r13, r1
    1106:	e1 04       	cpc	r14, r1
    1108:	f1 04       	cpc	r15, r1
    110a:	09 f0       	breq	.+2      	; 0x110e <findFiles+0x1d2>
    110c:	3f cf       	rjmp	.-386    	; 0xf8c <findFiles+0x50>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    110e:	8e e8       	ldi	r24, 0x8E	; 142
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	ae c0       	rjmp	.+348    	; 0x1278 <findFiles+0x33c>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	39 12       	cpse	r3, r25
    1120:	3b c0       	rjmp	.+118    	; 0x1198 <findFiles+0x25c>
              {
			    appendFileSector = firstSector + sector;
    1122:	80 92 3f 03 	sts	0x033F, r8
    1126:	90 92 40 03 	sts	0x0340, r9
    112a:	a0 92 41 03 	sts	0x0341, r10
    112e:	b0 92 42 03 	sts	0x0342, r11
				appendFileLocation = i;
    1132:	c9 01       	movw	r24, r18
    1134:	a0 e0       	ldi	r26, 0x00	; 0
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	80 93 87 00 	sts	0x0087, r24
    113c:	90 93 88 00 	sts	0x0088, r25
    1140:	a0 93 89 00 	sts	0x0089, r26
    1144:	b0 93 8a 00 	sts	0x008A, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1148:	ea 85       	ldd	r30, Y+10	; 0x0a
    114a:	fb 85       	ldd	r31, Y+11	; 0x0b
    114c:	84 89       	ldd	r24, Z+20	; 0x14
    114e:	95 89       	ldd	r25, Z+21	; 0x15
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	dc 01       	movw	r26, r24
    1156:	99 27       	eor	r25, r25
    1158:	88 27       	eor	r24, r24
    115a:	42 8d       	ldd	r20, Z+26	; 0x1a
    115c:	53 8d       	ldd	r21, Z+27	; 0x1b
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	84 2b       	or	r24, r20
    1164:	95 2b       	or	r25, r21
    1166:	a6 2b       	or	r26, r22
    1168:	b7 2b       	or	r27, r23
    116a:	80 93 c9 02 	sts	0x02C9, r24
    116e:	90 93 ca 02 	sts	0x02CA, r25
    1172:	a0 93 cb 02 	sts	0x02CB, r26
    1176:	b0 93 cc 02 	sts	0x02CC, r27
				fileSize = dir->fileSize;
    117a:	84 8d       	ldd	r24, Z+28	; 0x1c
    117c:	95 8d       	ldd	r25, Z+29	; 0x1d
    117e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1180:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1182:	80 93 91 00 	sts	0x0091, r24
    1186:	90 93 92 00 	sts	0x0092, r25
    118a:	a0 93 93 00 	sts	0x0093, r26
    118e:	b0 93 94 00 	sts	0x0094, r27
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	9b 85       	ldd	r25, Y+11	; 0x0b
              {
			    appendFileSector = firstSector + sector;
				appendFileLocation = i;
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
				fileSize = dir->fileSize;
			    return (dir);
    1196:	70 c0       	rjmp	.+224    	; 0x1278 <findFiles+0x33c>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    1198:	8d e0       	ldi	r24, 0x0D	; 13
    119a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    11a4:	8b ec       	ldi	r24, 0xCB	; 203
    11a6:	93 e0       	ldi	r25, 0x03	; 3
    11a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
				 TX_NEWLINE;
    11ac:	8d e0       	ldi	r24, 0x0D	; 13
    11ae:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    11b2:	8a e0       	ldi	r24, 0x0A	; 10
    11b4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
				 TX_NEWLINE;
    11b8:	8d e0       	ldi	r24, 0x0D	; 13
    11ba:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    11be:	8a e0       	ldi	r24, 0x0A	; 10
    11c0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    11c4:	aa 85       	ldd	r26, Y+10	; 0x0a
    11c6:	bb 85       	ldd	r27, Y+11	; 0x0b
    11c8:	54 96       	adiw	r26, 0x14	; 20
    11ca:	cd 90       	ld	r12, X+
    11cc:	dc 90       	ld	r13, X
    11ce:	55 97       	sbiw	r26, 0x15	; 21
    11d0:	e1 2c       	mov	r14, r1
    11d2:	f1 2c       	mov	r15, r1
    11d4:	76 01       	movw	r14, r12
    11d6:	dd 24       	eor	r13, r13
    11d8:	cc 24       	eor	r12, r12
    11da:	5a 96       	adiw	r26, 0x1a	; 26
    11dc:	8d 91       	ld	r24, X+
    11de:	9c 91       	ld	r25, X
    11e0:	5b 97       	sbiw	r26, 0x1b	; 27
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	c8 2a       	or	r12, r24
    11e8:	d9 2a       	or	r13, r25
    11ea:	ea 2a       	or	r14, r26
    11ec:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    11ee:	85 ee       	ldi	r24, 0xE5	; 229
    11f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    11f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    11f4:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    11f6:	c5 01       	movw	r24, r10
    11f8:	b4 01       	movw	r22, r8
    11fa:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    11fe:	aa 85       	ldd	r26, Y+10	; 0x0a
    1200:	bb 85       	ldd	r27, Y+11	; 0x0b
    1202:	5c 96       	adiw	r26, 0x1c	; 28
    1204:	4d 91       	ld	r20, X+
    1206:	5d 91       	ld	r21, X+
    1208:	6d 91       	ld	r22, X+
    120a:	7c 91       	ld	r23, X
    120c:	5f 97       	sbiw	r26, 0x1f	; 31
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	0e 94 3e 07 	call	0xe7c	; 0xe7c <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	0e 94 91 04 	call	0x922	; 0x922 <getSetFreeCluster>
				 if(firstCluster < cluster)
    1222:	c6 16       	cp	r12, r22
    1224:	d7 06       	cpc	r13, r23
    1226:	e8 06       	cpc	r14, r24
    1228:	f9 06       	cpc	r15, r25
    122a:	30 f4       	brcc	.+12     	; 0x1238 <findFiles+0x2fc>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    122c:	a7 01       	movw	r20, r14
    122e:	96 01       	movw	r18, r12
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 91 04 	call	0x922	; 0x922 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	98 01       	movw	r18, r16
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	c7 01       	movw	r24, r14
    1242:	b6 01       	movw	r22, r12
    1244:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
    1248:	4b 01       	movw	r8, r22
    124a:	5c 01       	movw	r10, r24
					getSetNextCluster (firstCluster, SET, 0);
    124c:	00 e0       	ldi	r16, 0x00	; 0
    124e:	10 e0       	ldi	r17, 0x00	; 0
    1250:	98 01       	movw	r18, r16
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	c7 01       	movw	r24, r14
    1256:	b6 01       	movw	r22, r12
    1258:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    125c:	b7 ef       	ldi	r27, 0xF7	; 247
    125e:	8b 16       	cp	r8, r27
    1260:	bf ef       	ldi	r27, 0xFF	; 255
    1262:	9b 06       	cpc	r9, r27
    1264:	ab 06       	cpc	r10, r27
    1266:	bf e0       	ldi	r27, 0x0F	; 15
    1268:	bb 06       	cpc	r11, r27
    126a:	18 f4       	brcc	.+6      	; 0x1272 <findFiles+0x336>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    126c:	75 01       	movw	r14, r10
    126e:	64 01       	movw	r12, r8
    1270:	e3 cf       	rjmp	.-58     	; 0x1238 <findFiles+0x2fc>
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    1272:	8d eb       	ldi	r24, 0xBD	; 189
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	4d cf       	rjmp	.-358    	; 0x1112 <findFiles+0x1d6>
   	 return 0;
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    1278:	2b 96       	adiw	r28, 0x0b	; 11
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	7f 90       	pop	r7
    129e:	6f 90       	pop	r6
    12a0:	5f 90       	pop	r5
    12a2:	4f 90       	pop	r4
    12a4:	3f 90       	pop	r3
    12a6:	2f 90       	pop	r2
    12a8:	08 95       	ret

000012aa <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    12aa:	2f 92       	push	r2
    12ac:	3f 92       	push	r3
    12ae:	4f 92       	push	r4
    12b0:	5f 92       	push	r5
    12b2:	6f 92       	push	r6
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	28 97       	sbiw	r28, 0x08	; 8
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	18 2f       	mov	r17, r24
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    12e0:	cb 01       	movw	r24, r22
    12e2:	6f 83       	std	Y+7, r22	; 0x07
    12e4:	78 87       	std	Y+8, r23	; 0x08
    12e6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <convertFileName>
if(error) return 2;
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	81 11       	cpse	r24, r1
    12f0:	89 c0       	rjmp	.+274    	; 0x1404 <readFile+0x15a>

dir = findFiles (GET_FILE, fileName); //get the file location
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <findFiles>
    12f8:	fc 01       	movw	r30, r24
if(dir == 0) 
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	29 f4       	brne	.+10     	; 0x1308 <readFile+0x5e>
{
  if(flag == READ) return (1);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	11 23       	and	r17, r17
    1302:	09 f4       	brne	.+2      	; 0x1306 <readFile+0x5c>
    1304:	84 c0       	rjmp	.+264    	; 0x140e <readFile+0x164>
    1306:	82 c0       	rjmp	.+260    	; 0x140c <readFile+0x162>
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    1308:	11 30       	cpi	r17, 0x01	; 1
    130a:	09 f4       	brne	.+2      	; 0x130e <readFile+0x64>
    130c:	7d c0       	rjmp	.+250    	; 0x1408 <readFile+0x15e>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    130e:	c4 88       	ldd	r12, Z+20	; 0x14
    1310:	d5 88       	ldd	r13, Z+21	; 0x15
    1312:	e1 2c       	mov	r14, r1
    1314:	f1 2c       	mov	r15, r1
    1316:	76 01       	movw	r14, r12
    1318:	dd 24       	eor	r13, r13
    131a:	cc 24       	eor	r12, r12
    131c:	42 8d       	ldd	r20, Z+26	; 0x1a
    131e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	c4 2a       	or	r12, r20
    1326:	d5 2a       	or	r13, r21
    1328:	e6 2a       	or	r14, r22
    132a:	f7 2a       	or	r15, r23

fileSize = dir->fileSize;
    132c:	44 8c       	ldd	r4, Z+28	; 0x1c
    132e:	55 8c       	ldd	r5, Z+29	; 0x1d
    1330:	66 8c       	ldd	r6, Z+30	; 0x1e
    1332:	77 8c       	ldd	r7, Z+31	; 0x1f

TX_NEWLINE;
    1334:	8d e0       	ldi	r24, 0x0D	; 13
    1336:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
TX_NEWLINE;
    1340:	8d e0       	ldi	r24, 0x0D	; 13
    1342:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1346:	8a e0       	ldi	r24, 0x0A	; 10
    1348:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    134c:	81 2c       	mov	r8, r1
    134e:	91 2c       	mov	r9, r1
    1350:	54 01       	movw	r10, r8
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <getFirstSector>
    135a:	69 83       	std	Y+1, r22	; 0x01
    135c:	7a 83       	std	Y+2, r23	; 0x02
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	9c 83       	std	Y+4, r25	; 0x04

  for(j=0; j<sectorPerCluster; j++)
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	80 91 b3 02 	lds	r24, 0x02B3
    1368:	90 91 b4 02 	lds	r25, 0x02B4
    136c:	21 2f       	mov	r18, r17
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	28 17       	cp	r18, r24
    1372:	39 07       	cpc	r19, r25
    1374:	90 f5       	brcc	.+100    	; 0x13da <readFile+0x130>
  {
    SD_readSingleBlock(firstSector + j);
    1376:	69 81       	ldd	r22, Y+1	; 0x01
    1378:	7a 81       	ldd	r23, Y+2	; 0x02
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	61 0f       	add	r22, r17
    1380:	71 1d       	adc	r23, r1
    1382:	81 1d       	adc	r24, r1
    1384:	91 1d       	adc	r25, r1
    1386:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
    138a:	b5 01       	movw	r22, r10
    138c:	a4 01       	movw	r20, r8
    
	for(k=0; k<512; k++)
    138e:	21 2c       	mov	r2, r1
    1390:	31 2c       	mov	r3, r1
    {
      transmitByte(buffer[k]);
    1392:	f1 01       	movw	r30, r2
    1394:	ed 54       	subi	r30, 0x4D	; 77
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	80 81       	ld	r24, Z
    139a:	4d 83       	std	Y+5, r20	; 0x05
    139c:	5e 83       	std	Y+6, r21	; 0x06
    139e:	6f 83       	std	Y+7, r22	; 0x07
    13a0:	78 87       	std	Y+8, r23	; 0x08
    13a2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	88 1a       	sub	r8, r24
    13aa:	98 0a       	sbc	r9, r24
    13ac:	a8 0a       	sbc	r10, r24
    13ae:	b8 0a       	sbc	r11, r24
    13b0:	4d 81       	ldd	r20, Y+5	; 0x05
    13b2:	5e 81       	ldd	r21, Y+6	; 0x06
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	44 15       	cp	r20, r4
    13ba:	55 05       	cpc	r21, r5
    13bc:	66 05       	cpc	r22, r6
    13be:	77 05       	cpc	r23, r7
    13c0:	28 f5       	brcc	.+74     	; 0x140c <readFile+0x162>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    13c2:	ef ef       	ldi	r30, 0xFF	; 255
    13c4:	2e 1a       	sub	r2, r30
    13c6:	3e 0a       	sbc	r3, r30
    13c8:	21 14       	cp	r2, r1
    13ca:	f2 e0       	ldi	r31, 0x02	; 2
    13cc:	3f 06       	cpc	r3, r31
    13ce:	19 f0       	breq	.+6      	; 0x13d6 <readFile+0x12c>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    13d0:	b5 01       	movw	r22, r10
    13d2:	a4 01       	movw	r20, r8
    13d4:	de cf       	rjmp	.-68     	; 0x1392 <readFile+0xe8>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    13d6:	1f 5f       	subi	r17, 0xFF	; 255
    13d8:	c5 cf       	rjmp	.-118    	; 0x1364 <readFile+0xba>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    13da:	00 e0       	ldi	r16, 0x00	; 0
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	98 01       	movw	r18, r16
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	c7 01       	movw	r24, r14
    13e4:	b6 01       	movw	r22, r12
    13e6:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
    13ea:	6b 01       	movw	r12, r22
    13ec:	7c 01       	movw	r14, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    13ee:	61 15       	cp	r22, r1
    13f0:	71 05       	cpc	r23, r1
    13f2:	81 05       	cpc	r24, r1
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <readFile+0x150>
    13f8:	ac cf       	rjmp	.-168    	; 0x1352 <readFile+0xa8>
    13fa:	85 e7       	ldi	r24, 0x75	; 117
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
    1402:	04 c0       	rjmp	.+8      	; 0x140c <readFile+0x162>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	03 c0       	rjmp	.+6      	; 0x140e <readFile+0x164>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	01 c0       	rjmp	.+2      	; 0x140e <readFile+0x164>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    140c:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    140e:	28 96       	adiw	r28, 0x08	; 8
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	7f 90       	pop	r7
    1434:	6f 90       	pop	r6
    1436:	5f 90       	pop	r5
    1438:	4f 90       	pop	r4
    143a:	3f 90       	pop	r3
    143c:	2f 90       	pop	r2
    143e:	08 95       	ret

00001440 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1446:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <convertFileName>
  if(error) return;
    144a:	81 11       	cpse	r24, r1
    144c:	06 c0       	rjmp	.+12     	; 0x145a <deleteFile+0x1a>

  findFiles (DELETE, fileName);
    144e:	be 01       	movw	r22, r28
    1450:	82 e0       	ldi	r24, 0x02	; 2
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
  unsigned char error;

  error = convertFileName (fileName);
  if(error) return;

  findFiles (DELETE, fileName);
    1456:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <findFiles>
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    1460:	2f 92       	push	r2
    1462:	3f 92       	push	r3
    1464:	4f 92       	push	r4
    1466:	5f 92       	push	r5
    1468:	6f 92       	push	r6
    146a:	7f 92       	push	r7
    146c:	8f 92       	push	r8
    146e:	9f 92       	push	r9
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	28 97       	sbiw	r28, 0x08	; 8
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    1498:	bc 01       	movw	r22, r24
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	0e 94 55 09 	call	0x12aa	; 0x12aa <readFile>

if(j == 1) 
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <writeFile+0x46>
    14a4:	51 c0       	rjmp	.+162    	; 0x1548 <writeFile+0xe8>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    14a6:	c0 90 c9 02 	lds	r12, 0x02C9
    14aa:	d0 90 ca 02 	lds	r13, 0x02CA
    14ae:	e0 90 cb 02 	lds	r14, 0x02CB
    14b2:	f0 90 cc 02 	lds	r15, 0x02CC
  clusterCount=0;
    14b6:	81 2c       	mov	r8, r1
    14b8:	91 2c       	mov	r9, r1
    14ba:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    14bc:	00 e0       	ldi	r16, 0x00	; 0
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	98 01       	movw	r18, r16
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	c7 01       	movw	r24, r14
    14c6:	b6 01       	movw	r22, r12
    14c8:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
    if(nextCluster == EOF) break;
    14cc:	6f 3f       	cpi	r22, 0xFF	; 255
    14ce:	2f ef       	ldi	r18, 0xFF	; 255
    14d0:	72 07       	cpc	r23, r18
    14d2:	82 07       	cpc	r24, r18
    14d4:	2f e0       	ldi	r18, 0x0F	; 15
    14d6:	92 07       	cpc	r25, r18
    14d8:	41 f0       	breq	.+16     	; 0x14ea <writeFile+0x8a>
	cluster = nextCluster;
	clusterCount++;
    14da:	4f ef       	ldi	r20, 0xFF	; 255
    14dc:	84 1a       	sub	r8, r20
    14de:	94 0a       	sbc	r9, r20
    14e0:	a4 0a       	sbc	r10, r20
    14e2:	b4 0a       	sbc	r11, r20
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    14e4:	6b 01       	movw	r12, r22
    14e6:	7c 01       	movw	r14, r24
	clusterCount++;
  }
    14e8:	e9 cf       	rjmp	.-46     	; 0x14bc <writeFile+0x5c>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    14ea:	a0 91 b3 02 	lds	r26, 0x02B3
    14ee:	b0 91 b4 02 	lds	r27, 0x02B4
    14f2:	20 91 95 00 	lds	r18, 0x0095
    14f6:	30 91 96 00 	lds	r19, 0x0096
    14fa:	e0 91 95 00 	lds	r30, 0x0095
    14fe:	f0 91 96 00 	lds	r31, 0x0096
    1502:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__umulhisi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	c5 01       	movw	r24, r10
    150c:	b4 01       	movw	r22, r8
    150e:	0e 94 75 15 	call	0x2aea	; 0x2aea <__mulsi3>
    1512:	8b 01       	movw	r16, r22
    1514:	9c 01       	movw	r18, r24
    1516:	60 91 91 00 	lds	r22, 0x0091
    151a:	70 91 92 00 	lds	r23, 0x0092
    151e:	80 91 93 00 	lds	r24, 0x0093
    1522:	90 91 94 00 	lds	r25, 0x0094
    1526:	60 1b       	sub	r22, r16
    1528:	71 0b       	sbc	r23, r17
    152a:	82 0b       	sbc	r24, r18
    152c:	93 0b       	sbc	r25, r19
    152e:	9f 01       	movw	r18, r30
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
    1538:	02 2f       	mov	r16, r18
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    153a:	21 2c       	mov	r2, r1
    153c:	31 2c       	mov	r3, r1
    153e:	1c 82       	std	Y+4, r1	; 0x04
    1540:	1b 82       	std	Y+3, r1	; 0x03
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    1542:	77 24       	eor	r7, r7
    1544:	73 94       	inc	r7
    1546:	45 c0       	rjmp	.+138    	; 0x15d2 <writeFile+0x172>
}
else if(j == 2) 
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	09 f4       	brne	.+2      	; 0x154e <writeFile+0xee>
    154c:	46 c2       	rjmp	.+1164   	; 0x19da <writeFile+0x57a>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	0e 94 91 04 	call	0x922	; 0x922 <getSetFreeCluster>
  if(cluster > totalClusters)
    155c:	00 91 97 00 	lds	r16, 0x0097
    1560:	10 91 98 00 	lds	r17, 0x0098
    1564:	20 91 99 00 	lds	r18, 0x0099
    1568:	30 91 9a 00 	lds	r19, 0x009A
    156c:	06 17       	cp	r16, r22
    156e:	17 07       	cpc	r17, r23
    1570:	28 07       	cpc	r18, r24
    1572:	39 07       	cpc	r19, r25
    1574:	40 f4       	brcc	.+16     	; 0x1586 <writeFile+0x126>
     cluster = rootCluster;
    1576:	60 91 a2 00 	lds	r22, 0x00A2
    157a:	70 91 a3 00 	lds	r23, 0x00A3
    157e:	80 91 a4 00 	lds	r24, 0x00A4
    1582:	90 91 a5 00 	lds	r25, 0x00A5

  cluster = searchNextFreeCluster(cluster);
    1586:	0e 94 63 06 	call	0xcc6	; 0xcc6 <searchNextFreeCluster>
    158a:	6b 01       	movw	r12, r22
    158c:	7c 01       	movw	r14, r24
   if(cluster == 0)
    158e:	61 15       	cp	r22, r1
    1590:	71 05       	cpc	r23, r1
    1592:	81 05       	cpc	r24, r1
    1594:	91 05       	cpc	r25, r1
    1596:	49 f4       	brne	.+18     	; 0x15aa <writeFile+0x14a>
   {
      TX_NEWLINE;
    1598:	8d e0       	ldi	r24, 0x0D	; 13
    159a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    159e:	8a e0       	ldi	r24, 0x0A	; 10
    15a0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    15a4:	80 e5       	ldi	r24, 0x50	; 80
    15a6:	93 e0       	ldi	r25, 0x03	; 3
    15a8:	16 c2       	rjmp	.+1068   	; 0x19d6 <writeFile+0x576>
	  return 1;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    15aa:	0f ef       	ldi	r16, 0xFF	; 255
    15ac:	1f ef       	ldi	r17, 0xFF	; 255
    15ae:	2f ef       	ldi	r18, 0xFF	; 255
    15b0:	3f e0       	ldi	r19, 0x0F	; 15
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    15b8:	fc 82       	std	Y+4, r15	; 0x04
    15ba:	eb 82       	std	Y+3, r14	; 0x03
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    15bc:	16 01       	movw	r2, r12
  fileSize = 0;
    15be:	10 92 91 00 	sts	0x0091, r1
    15c2:	10 92 92 00 	sts	0x0092, r1
    15c6:	10 92 93 00 	sts	0x0093, r1
    15ca:	10 92 94 00 	sts	0x0094, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    15ce:	00 e0       	ldi	r16, 0x00	; 0
    15d0:	71 2c       	mov	r7, r1
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
}

k=0;
    15d2:	61 2c       	mov	r6, r1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    15d4:	80 2e       	mov	r8, r16
    15d6:	91 2c       	mov	r9, r1
    15d8:	a1 2c       	mov	r10, r1
    15da:	b1 2c       	mov	r11, r1

k=0;

while(1)
{
   if(start)
    15dc:	77 20       	and	r7, r7
    15de:	e9 f1       	breq	.+122    	; 0x165a <writeFile+0x1fa>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    15e0:	c7 01       	movw	r24, r14
    15e2:	b6 01       	movw	r22, r12
    15e4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <getFirstSector>
    15e8:	68 0d       	add	r22, r8
    15ea:	79 1d       	adc	r23, r9
    15ec:	8a 1d       	adc	r24, r10
    15ee:	9b 1d       	adc	r25, r11
    15f0:	60 93 af 00 	sts	0x00AF, r22
    15f4:	70 93 b0 00 	sts	0x00B0, r23
    15f8:	80 93 b1 00 	sts	0x00B1, r24
    15fc:	90 93 b2 00 	sts	0x00B2, r25
	  SD_readSingleBlock (startBlock);
    1600:	60 91 af 00 	lds	r22, 0x00AF
    1604:	70 91 b0 00 	lds	r23, 0x00B0
    1608:	80 91 b1 00 	lds	r24, 0x00B1
    160c:	90 91 b2 00 	lds	r25, 0x00B2
    1610:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    1614:	20 91 95 00 	lds	r18, 0x0095
    1618:	30 91 96 00 	lds	r19, 0x0096
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	60 91 91 00 	lds	r22, 0x0091
    1624:	70 91 92 00 	lds	r23, 0x0092
    1628:	80 91 93 00 	lds	r24, 0x0093
    162c:	90 91 94 00 	lds	r25, 0x0094
    1630:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
    1634:	73 c0       	rjmp	.+230    	; 0x171c <writeFile+0x2bc>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return 1;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1636:	8b 01       	movw	r16, r22
    1638:	9c 01       	movw	r18, r24
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	c7 01       	movw	r24, r14
    163e:	b6 01       	movw	r22, r12
    1640:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1644:	0f ef       	ldi	r16, 0xFF	; 255
    1646:	1f ef       	ldi	r17, 0xFF	; 255
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	3f e0       	ldi	r19, 0x0F	; 15
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	c5 01       	movw	r24, r10
    1650:	b4 01       	movw	r22, r8
    1652:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
}        
    1656:	75 01       	movw	r14, r10
    1658:	64 01       	movw	r12, r8
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    165a:	c7 01       	movw	r24, r14
    165c:	b6 01       	movw	r22, r12
    165e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <getFirstSector>
    1662:	60 93 af 00 	sts	0x00AF, r22
    1666:	70 93 b0 00 	sts	0x00B0, r23
    166a:	80 93 b1 00 	sts	0x00B1, r24
    166e:	90 93 b2 00 	sts	0x00B2, r25
	  i=0;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
	  j=0;
    1676:	00 e0       	ldi	r16, 0x00	; 0
    1678:	e6 2d       	mov	r30, r6
   
   
   do
   {

	 data = dataString[k++];
    167a:	63 94       	inc	r6
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	e3 53       	subi	r30, 0x33	; 51
    1680:	fd 4f       	sbci	r31, 0xFD	; 253
    1682:	10 81       	ld	r17, Z
	 //transmitByte(data);
     buffer[i++] = data;
    1684:	bc 01       	movw	r22, r24
    1686:	6f 5f       	subi	r22, 0xFF	; 255
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	fc 01       	movw	r30, r24
    168c:	ed 54       	subi	r30, 0x4D	; 77
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	10 83       	st	Z, r17
	 fileSize++;
    1692:	80 91 91 00 	lds	r24, 0x0091
    1696:	90 91 92 00 	lds	r25, 0x0092
    169a:	a0 91 93 00 	lds	r26, 0x0093
    169e:	b0 91 94 00 	lds	r27, 0x0094
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	a1 1d       	adc	r26, r1
    16a6:	b1 1d       	adc	r27, r1
    16a8:	80 93 91 00 	sts	0x0091, r24
    16ac:	90 93 92 00 	sts	0x0092, r25
    16b0:	a0 93 93 00 	sts	0x0093, r26
    16b4:	b0 93 94 00 	sts	0x0094, r27
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    16b8:	61 15       	cp	r22, r1
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	78 07       	cpc	r23, r24
    16be:	48 f1       	brcs	.+82     	; 0x1712 <writeFile+0x2b2>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    16c0:	60 91 af 00 	lds	r22, 0x00AF
    16c4:	70 91 b0 00 	lds	r23, 0x00B0
    16c8:	80 91 b1 00 	lds	r24, 0x00B1
    16cc:	90 91 b2 00 	lds	r25, 0x00B2
    16d0:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>
       j++;
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    16d6:	80 91 b3 02 	lds	r24, 0x02B3
    16da:	90 91 b4 02 	lds	r25, 0x02B4
    16de:	40 2f       	mov	r20, r16
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	48 17       	cp	r20, r24
    16e4:	59 07       	cpc	r21, r25
    16e6:	e1 f0       	breq	.+56     	; 0x1720 <writeFile+0x2c0>
	   startBlock++; 
    16e8:	80 91 af 00 	lds	r24, 0x00AF
    16ec:	90 91 b0 00 	lds	r25, 0x00B0
    16f0:	a0 91 b1 00 	lds	r26, 0x00B1
    16f4:	b0 91 b2 00 	lds	r27, 0x00B2
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	a1 1d       	adc	r26, r1
    16fc:	b1 1d       	adc	r27, r1
    16fe:	80 93 af 00 	sts	0x00AF, r24
    1702:	90 93 b0 00 	sts	0x00B0, r25
    1706:	a0 93 b1 00 	sts	0x00B1, r26
    170a:	b0 93 b2 00 	sts	0x00B2, r27
     buffer[i++] = data;
	 fileSize++;
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
    1712:	1a 30       	cpi	r17, 0x0A	; 10
    1714:	71 f0       	breq	.+28     	; 0x1732 <writeFile+0x2d2>
    1716:	93 e6       	ldi	r25, 0x63	; 99
    1718:	96 15       	cp	r25, r6
    171a:	58 f0       	brcs	.+22     	; 0x1732 <writeFile+0x2d2>
   
   
   do
   {

	 data = dataString[k++];
    171c:	cb 01       	movw	r24, r22
    171e:	ac cf       	rjmp	.-168    	; 0x1678 <writeFile+0x218>
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    1720:	1a 30       	cpi	r17, 0x0A	; 10
    1722:	19 f4       	brne	.+6      	; 0x172a <writeFile+0x2ca>
     buffer[i++] = data;
	 fileSize++;
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <writeFile+0x2d2>
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    172a:	a3 e6       	ldi	r26, 0x63	; 99
    172c:	a6 15       	cp	r26, r6
    172e:	40 f5       	brcc	.+80     	; 0x1780 <writeFile+0x320>
    1730:	f9 cf       	rjmp	.-14     	; 0x1724 <writeFile+0x2c4>
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    1732:	fb 01       	movw	r30, r22
    1734:	ed 54       	subi	r30, 0x4D	; 77
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	10 82       	st	Z, r1
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	61 15       	cp	r22, r1
    1740:	b2 e0       	ldi	r27, 0x02	; 2
    1742:	7b 07       	cpc	r23, r27
    1744:	b1 f7       	brne	.-20     	; 0x1732 <writeFile+0x2d2>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    1746:	60 91 af 00 	lds	r22, 0x00AF
    174a:	70 91 b0 00 	lds	r23, 0x00B0
    174e:	80 91 b1 00 	lds	r24, 0x00B1
    1752:	90 91 b2 00 	lds	r25, 0x00B2
    1756:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    175a:	a7 01       	movw	r20, r14
    175c:	96 01       	movw	r18, r12
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	0e 94 91 04 	call	0x922	; 0x922 <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    1766:	0e 94 54 10 	call	0x20a8	; 0x20a8 <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    176a:	88 23       	and	r24, r24
    176c:	f1 f0       	breq	.+60     	; 0x17aa <writeFile+0x34a>
    176e:	10 92 8c 00 	sts	0x008C, r1
    1772:	10 92 8b 00 	sts	0x008B, r1
    1776:	10 92 a7 00 	sts	0x00A7, r1
    177a:	10 92 a6 00 	sts	0x00A6, r1
    177e:	15 c0       	rjmp	.+42     	; 0x17aa <writeFile+0x34a>
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1780:	c7 01       	movw	r24, r14
    1782:	b6 01       	movw	r22, r12
    1784:	0e 94 63 06 	call	0xcc6	; 0xcc6 <searchNextFreeCluster>
    1788:	4b 01       	movw	r8, r22
    178a:	5c 01       	movw	r10, r24

   if(cluster == 0)
    178c:	61 15       	cp	r22, r1
    178e:	71 05       	cpc	r23, r1
    1790:	81 05       	cpc	r24, r1
    1792:	91 05       	cpc	r25, r1
    1794:	09 f0       	breq	.+2      	; 0x1798 <writeFile+0x338>
    1796:	4f cf       	rjmp	.-354    	; 0x1636 <writeFile+0x1d6>
   {
      TX_NEWLINE;
    1798:	8d e0       	ldi	r24, 0x0D	; 13
    179a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    179e:	8a e0       	ldi	r24, 0x0A	; 10
    17a0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    17a4:	8e e3       	ldi	r24, 0x3E	; 62
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	16 c1       	rjmp	.+556    	; 0x19d6 <writeFile+0x576>
getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
    17aa:	77 20       	and	r7, r7
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <writeFile+0x350>
    17ae:	44 c0       	rjmp	.+136    	; 0x1838 <writeFile+0x3d8>
{
  SD_readSingleBlock (appendFileSector);    
    17b0:	60 91 3f 03 	lds	r22, 0x033F
    17b4:	70 91 40 03 	lds	r23, 0x0340
    17b8:	80 91 41 03 	lds	r24, 0x0341
    17bc:	90 91 42 03 	lds	r25, 0x0342
    17c0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    17c4:	e0 91 87 00 	lds	r30, 0x0087
    17c8:	f0 91 88 00 	lds	r31, 0x0088
    17cc:	ed 54       	subi	r30, 0x4D	; 77
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255

  dir->lastAccessDate = 0;   //date of last access ignored
    17d0:	13 8a       	std	Z+19, r1	; 0x13
    17d2:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    17d4:	80 91 a6 00 	lds	r24, 0x00A6
    17d8:	90 91 a7 00 	lds	r25, 0x00A7
    17dc:	97 8b       	std	Z+23, r25	; 0x17
    17de:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    17e0:	80 91 8b 00 	lds	r24, 0x008B
    17e4:	90 91 8c 00 	lds	r25, 0x008C
    17e8:	91 8f       	std	Z+25, r25	; 0x19
    17ea:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    17ec:	80 91 91 00 	lds	r24, 0x0091
    17f0:	90 91 92 00 	lds	r25, 0x0092
    17f4:	a0 91 93 00 	lds	r26, 0x0093
    17f8:	b0 91 94 00 	lds	r27, 0x0094
    17fc:	44 8d       	ldd	r20, Z+28	; 0x1c
    17fe:	55 8d       	ldd	r21, Z+29	; 0x1d
    1800:	66 8d       	ldd	r22, Z+30	; 0x1e
    1802:	77 8d       	ldd	r23, Z+31	; 0x1f
    1804:	6c 01       	movw	r12, r24
    1806:	7d 01       	movw	r14, r26
    1808:	c4 1a       	sub	r12, r20
    180a:	d5 0a       	sbc	r13, r21
    180c:	e6 0a       	sbc	r14, r22
    180e:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    1810:	84 8f       	std	Z+28, r24	; 0x1c
    1812:	95 8f       	std	Z+29, r25	; 0x1d
    1814:	a6 8f       	std	Z+30, r26	; 0x1e
    1816:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1818:	60 91 3f 03 	lds	r22, 0x033F
    181c:	70 91 40 03 	lds	r23, 0x0340
    1820:	80 91 41 03 	lds	r24, 0x0341
    1824:	90 91 42 03 	lds	r25, 0x0342
    1828:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    182c:	b7 01       	movw	r22, r14
    182e:	a6 01       	movw	r20, r12
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	0e 94 3e 07 	call	0xe7c	; 0xe7c <freeMemoryUpdate>
    1836:	d3 c0       	rjmp	.+422    	; 0x19de <writeFile+0x57e>
  return 0;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1838:	c0 90 a2 00 	lds	r12, 0x00A2
    183c:	d0 90 a3 00 	lds	r13, 0x00A3
    1840:	e0 90 a4 00 	lds	r14, 0x00A4
    1844:	f0 90 a5 00 	lds	r15, 0x00A5
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    1848:	1a 82       	std	Y+2, r1	; 0x02

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    184a:	c7 01       	movw	r24, r14
    184c:	b6 01       	movw	r22, r12
    184e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <getFirstSector>
    1852:	2b 01       	movw	r4, r22
    1854:	3c 01       	movw	r6, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	80 91 b3 02 	lds	r24, 0x02B3
    185c:	90 91 b4 02 	lds	r25, 0x02B4
    1860:	49 81       	ldd	r20, Y+1	; 0x01
    1862:	24 2f       	mov	r18, r20
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	28 17       	cp	r18, r24
    1868:	39 07       	cpc	r19, r25
    186a:	08 f0       	brcs	.+2      	; 0x186e <writeFile+0x40e>
    186c:	77 c0       	rjmp	.+238    	; 0x195c <writeFile+0x4fc>
   {
     SD_readSingleBlock (firstSector + sector);
    186e:	53 01       	movw	r10, r6
    1870:	42 01       	movw	r8, r4
    1872:	29 81       	ldd	r18, Y+1	; 0x01
    1874:	82 0e       	add	r8, r18
    1876:	91 1c       	adc	r9, r1
    1878:	a1 1c       	adc	r10, r1
    187a:	b1 1c       	adc	r11, r1
    187c:	c5 01       	movw	r24, r10
    187e:	b4 01       	movw	r22, r8
    1880:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <SD_readSingleBlock>
    1884:	83 eb       	ldi	r24, 0xB3	; 179
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	98 87       	std	Y+8, r25	; 0x08
    188a:	8f 83       	std	Y+7, r24	; 0x07
	

     for(i=0; i<bytesPerSector; i+=32)
    188c:	00 e0       	ldi	r16, 0x00	; 0
    188e:	10 e0       	ldi	r17, 0x00	; 0
    1890:	80 91 95 00 	lds	r24, 0x0095
    1894:	90 91 96 00 	lds	r25, 0x0096
    1898:	08 17       	cp	r16, r24
    189a:	19 07       	cpc	r17, r25
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <writeFile+0x440>
    189e:	5a c0       	rjmp	.+180    	; 0x1954 <writeFile+0x4f4>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	91 11       	cpse	r25, r1
    18a4:	9c c0       	rjmp	.+312    	; 0x19de <writeFile+0x57e>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    18a6:	af 81       	ldd	r26, Y+7	; 0x07
    18a8:	b8 85       	ldd	r27, Y+8	; 0x08
    18aa:	8c 91       	ld	r24, X
    18ac:	88 23       	and	r24, r24
    18ae:	19 f0       	breq	.+6      	; 0x18b6 <writeFile+0x456>
    18b0:	85 3e       	cpi	r24, 0xE5	; 229
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <writeFile+0x456>
    18b4:	47 c0       	rjmp	.+142    	; 0x1944 <writeFile+0x4e4>
    18b6:	ed 81       	ldd	r30, Y+5	; 0x05
    18b8:	fe 81       	ldd	r31, Y+6	; 0x06
	    return 1;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
   
   prevCluster = cluster;
    18ba:	af 81       	ldd	r26, Y+7	; 0x07
    18bc:	b8 85       	ldd	r27, Y+8	; 0x08
    18be:	8b e0       	ldi	r24, 0x0B	; 11
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    18c0:	91 91       	ld	r25, Z+
    18c2:	9d 93       	st	X+, r25
    18c4:	81 50       	subi	r24, 0x01	; 1
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <writeFile+0x460>
    18c8:	f8 01       	movw	r30, r16
    18ca:	ed 54       	subi	r30, 0x4D	; 77
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    18ce:	b0 e2       	ldi	r27, 0x20	; 32
    18d0:	b3 87       	std	Z+11, r27	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    18d2:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    18d4:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    18d6:	80 91 a6 00 	lds	r24, 0x00A6
    18da:	90 91 a7 00 	lds	r25, 0x00A7
    18de:	ef 81       	ldd	r30, Y+7	; 0x07
    18e0:	f8 85       	ldd	r31, Y+8	; 0x08
    18e2:	97 87       	std	Z+15, r25	; 0x0f
    18e4:	86 87       	std	Z+14, r24	; 0x0e
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    18e6:	20 91 8b 00 	lds	r18, 0x008B
    18ea:	30 91 8c 00 	lds	r19, 0x008C
    18ee:	31 8b       	std	Z+17, r19	; 0x11
    18f0:	20 8b       	std	Z+16, r18	; 0x10
		  dir->lastAccessDate = 0;   	//date of last access ignored
    18f2:	13 8a       	std	Z+19, r1	; 0x13
    18f4:	12 8a       	std	Z+18, r1	; 0x12
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    18f6:	97 8b       	std	Z+23, r25	; 0x17
    18f8:	86 8b       	std	Z+22, r24	; 0x16
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    18fa:	31 8f       	std	Z+25, r19	; 0x19
    18fc:	20 8f       	std	Z+24, r18	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	95 8b       	std	Z+21, r25	; 0x15
    1904:	84 8b       	std	Z+20, r24	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1906:	33 8e       	std	Z+27, r3	; 0x1b
    1908:	22 8e       	std	Z+26, r2	; 0x1a
		  dir->fileSize = fileSize;
    190a:	80 91 91 00 	lds	r24, 0x0091
    190e:	90 91 92 00 	lds	r25, 0x0092
    1912:	a0 91 93 00 	lds	r26, 0x0093
    1916:	b0 91 94 00 	lds	r27, 0x0094
    191a:	84 8f       	std	Z+28, r24	; 0x1c
    191c:	95 8f       	std	Z+29, r25	; 0x1d
    191e:	a6 8f       	std	Z+30, r26	; 0x1e
    1920:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1922:	c5 01       	movw	r24, r10
    1924:	b4 01       	movw	r22, r8
    1926:	0e 94 11 12 	call	0x2422	; 0x2422 <SD_writeSingleBlock>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    192a:	40 91 91 00 	lds	r20, 0x0091
    192e:	50 91 92 00 	lds	r21, 0x0092
    1932:	60 91 93 00 	lds	r22, 0x0093
    1936:	70 91 94 00 	lds	r23, 0x0094
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    1940:	f1 e0       	ldi	r31, 0x01	; 1
    1942:	fa 83       	std	Y+2, r31	; 0x02
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1944:	00 5e       	subi	r16, 0xE0	; 224
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	8f 81       	ldd	r24, Y+7	; 0x07
    194a:	98 85       	ldd	r25, Y+8	; 0x08
    194c:	80 96       	adiw	r24, 0x20	; 32
    194e:	98 87       	std	Y+8, r25	; 0x08
    1950:	8f 83       	std	Y+7, r24	; 0x07
    1952:	9e cf       	rjmp	.-196    	; 0x1890 <writeFile+0x430>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1954:	29 81       	ldd	r18, Y+1	; 0x01
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	29 83       	std	Y+1, r18	; 0x01
    195a:	7e cf       	rjmp	.-260    	; 0x1858 <writeFile+0x3f8>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	98 01       	movw	r18, r16
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	c7 01       	movw	r24, r14
    1966:	b6 01       	movw	r22, r12
    1968:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
    196c:	4b 01       	movw	r8, r22
    196e:	5c 01       	movw	r10, r24

   if(cluster > 0x0ffffff6)
    1970:	87 ef       	ldi	r24, 0xF7	; 247
    1972:	88 16       	cp	r8, r24
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	98 06       	cpc	r9, r24
    1978:	a8 06       	cpc	r10, r24
    197a:	8f e0       	ldi	r24, 0x0F	; 15
    197c:	b8 06       	cpc	r11, r24
    197e:	08 f1       	brcs	.+66     	; 0x19c2 <writeFile+0x562>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	89 16       	cp	r8, r25
    1984:	99 06       	cpc	r9, r25
    1986:	a9 06       	cpc	r10, r25
    1988:	9f e0       	ldi	r25, 0x0F	; 15
    198a:	b9 06       	cpc	r11, r25
    198c:	b9 f4       	brne	.+46     	; 0x19bc <writeFile+0x55c>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    198e:	c7 01       	movw	r24, r14
    1990:	b6 01       	movw	r22, r12
    1992:	0e 94 63 06 	call	0xcc6	; 0xcc6 <searchNextFreeCluster>
    1996:	4b 01       	movw	r8, r22
    1998:	5c 01       	movw	r10, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    199a:	8b 01       	movw	r16, r22
    199c:	9c 01       	movw	r18, r24
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	c7 01       	movw	r24, r14
    19a2:	b6 01       	movw	r22, r12
    19a4:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    19a8:	0f ef       	ldi	r16, 0xFF	; 255
    19aa:	1f ef       	ldi	r17, 0xFF	; 255
    19ac:	2f ef       	ldi	r18, 0xFF	; 255
    19ae:	3f e0       	ldi	r19, 0x0F	; 15
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	c5 01       	movw	r24, r10
    19b4:	b4 01       	movw	r22, r8
    19b6:	0e 94 1b 04 	call	0x836	; 0x836 <getSetNextCluster>
    19ba:	03 c0       	rjmp	.+6      	; 0x19c2 <writeFile+0x562>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    19bc:	89 e2       	ldi	r24, 0x29	; 41
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <writeFile+0x576>
	    return 1;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
    19c2:	81 14       	cp	r8, r1
    19c4:	91 04       	cpc	r9, r1
    19c6:	a1 04       	cpc	r10, r1
    19c8:	b1 04       	cpc	r11, r1
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <writeFile+0x572>
   
   prevCluster = cluster;
    19cc:	75 01       	movw	r14, r10
    19ce:	64 01       	movw	r12, r8
    19d0:	3c cf       	rjmp	.-392    	; 0x184a <writeFile+0x3ea>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return 1;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
    19d2:	80 e1       	ldi	r24, 0x10	; 16
    19d4:	93 e0       	ldi	r25, 0x03	; 3
    19d6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <writeFile+0x580>

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    19de:	80 e0       	ldi	r24, 0x00	; 0
   
   prevCluster = cluster;
 }
 
 return 0;
}
    19e0:	28 96       	adiw	r28, 0x08	; 8
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	9f 90       	pop	r9
    1a02:	8f 90       	pop	r8
    1a04:	7f 90       	pop	r7
    1a06:	6f 90       	pop	r6
    1a08:	5f 90       	pop	r5
    1a0a:	4f 90       	pop	r4
    1a0c:	3f 90       	pop	r3
    1a0e:	2f 90       	pop	r2
    1a10:	08 95       	ret

00001a12 <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz @16MHz)
//************************************************
void twi_init(void)
{
 TWCR= 0x00; //disable twi
    1a12:	16 be       	out	0x36, r1	; 54
 TWBR= 0x12; //set bit rate
    1a14:	82 e1       	ldi	r24, 0x12	; 18
    1a16:	80 b9       	out	0x00, r24	; 0
 TWSR= 0x00; //set prescale
    1a18:	11 b8       	out	0x01, r1	; 1
    1a1a:	08 95       	ret

00001a1c <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    1a1c:	84 ea       	ldi	r24, 0xA4	; 164
    1a1e:	86 bf       	out	0x36, r24	; 54
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1a20:	06 b6       	in	r0, 0x36	; 54
    1a22:	07 fe       	sbrs	r0, 7
    1a24:	fd cf       	rjmp	.-6      	; 0x1a20 <i2c_start+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    1a26:	91 b1       	in	r25, 0x01	; 1
    1a28:	98 7f       	andi	r25, 0xF8	; 248
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	98 30       	cpi	r25, 0x08	; 8
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <i2c_start+0x16>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
 	   return(0);
	else
	   return(1);
}
    1a32:	08 95       	ret

00001a34 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    1a34:	84 ea       	ldi	r24, 0xA4	; 164
    1a36:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1a38:	06 b6       	in	r0, 0x36	; 54
    1a3a:	07 fe       	sbrs	r0, 7
    1a3c:	fd cf       	rjmp	.-6      	; 0x1a38 <i2c_repeatStart+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    1a3e:	91 b1       	in	r25, 0x01	; 1
    1a40:	98 7f       	andi	r25, 0xF8	; 248
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 31       	cpi	r25, 0x10	; 16
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <i2c_repeatStart+0x16>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
 	   return(0);
	else
	   return(1);
}
    1a4a:	08 95       	ret

00001a4c <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    1a4c:	80 fd       	sbrc	r24, 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
    1a50:	28 e1       	ldi	r18, 0x18	; 24
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
    1a54:	20 e4       	ldi	r18, 0x40	; 64
   
   TWDR = address; 
    1a56:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    1a58:	84 e8       	ldi	r24, 0x84	; 132
    1a5a:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    1a5c:	06 b6       	in	r0, 0x36	; 54
    1a5e:	07 fe       	sbrs	r0, 7
    1a60:	fd cf       	rjmp	.-6      	; 0x1a5c <i2c_sendAddress+0x10>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    1a62:	91 b1       	in	r25, 0x01	; 1
    1a64:	98 7f       	andi	r25, 0xF8	; 248
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	92 13       	cpse	r25, r18
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <i2c_sendAddress+0x22>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
   	  return(0);
   else 
      return(1);
}
    1a6e:	08 95       	ret

00001a70 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
    1a70:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    1a72:	84 e8       	ldi	r24, 0x84	; 132
    1a74:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    1a76:	06 b6       	in	r0, 0x36	; 54
    1a78:	07 fe       	sbrs	r0, 7
    1a7a:	fd cf       	rjmp	.-6      	; 0x1a76 <i2c_sendData+0x6>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    1a7c:	91 b1       	in	r25, 0x01	; 1
    1a7e:	98 7f       	andi	r25, 0xF8	; 248
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	98 32       	cpi	r25, 0x28	; 40
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <i2c_sendData+0x18>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
   	  return(1);
   else
      return(0);
}
    1a88:	08 95       	ret

00001a8a <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    1a8a:	84 ec       	ldi	r24, 0xC4	; 196
    1a8c:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    1a8e:	06 b6       	in	r0, 0x36	; 54
    1a90:	07 fe       	sbrs	r0, 7
    1a92:	fd cf       	rjmp	.-6      	; 0x1a8e <i2c_receiveData_ACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    1a94:	81 b1       	in	r24, 0x01	; 1
    1a96:	88 7f       	andi	r24, 0xF8	; 248
    1a98:	80 35       	cpi	r24, 0x50	; 80
    1a9a:	11 f4       	brne	.+4      	; 0x1aa0 <i2c_receiveData_ACK+0x16>
   	  return(ERROR_CODE);
  
  data = TWDR;
    1a9c:	83 b1       	in	r24, 0x03	; 3
  return(data);
    1a9e:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    1aa0:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    1aa2:	08 95       	ret

00001aa4 <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    1aa4:	84 e8       	ldi	r24, 0x84	; 132
    1aa6:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    1aa8:	06 b6       	in	r0, 0x36	; 54
    1aaa:	07 fe       	sbrs	r0, 7
    1aac:	fd cf       	rjmp	.-6      	; 0x1aa8 <i2c_receiveData_NACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    1aae:	81 b1       	in	r24, 0x01	; 1
    1ab0:	88 7f       	andi	r24, 0xF8	; 248
    1ab2:	88 35       	cpi	r24, 0x58	; 88
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <i2c_receiveData_NACK+0x16>
   	  return(ERROR_CODE);
  
  data = TWDR;
    1ab6:	83 b1       	in	r24, 0x03	; 3
  return(data);
    1ab8:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    1aba:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    1abc:	08 95       	ret

00001abe <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    1abe:	84 e9       	ldi	r24, 0x94	; 148
    1ac0:	86 bf       	out	0x36, r24	; 54
    1ac2:	08 95       	ret

00001ac4 <RTC_setStartAddress>:
//***************************************************************************
unsigned char RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
    1ac4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <i2c_start>
   if(errorStatus == 1)
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <RTC_setStartAddress+0x10>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    1acc:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	 return 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	08 95       	ret
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1ad4:	80 ed       	ldi	r24, 0xD0	; 208
    1ad6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <i2c_sendAddress>
   
   if(errorStatus == 1)
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	b9 f3       	breq	.-18     	; 0x1acc <RTC_setStartAddress+0x8>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_sendData>
   if(errorStatus == 1)
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 f3       	breq	.-28     	; 0x1acc <RTC_setStartAddress+0x8>
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
	 return 1;
   } 

   i2c_stop();
    1ae8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
   return 0;
    1aec:	80 e0       	ldi	r24, 0x00	; 0
}
    1aee:	08 95       	ret

00001af0 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    1af6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <i2c_start>
   if(errorStatus == 1)
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	f9 f0       	breq	.+62     	; 0x1b3c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1afe:	80 ed       	ldi	r24, 0xD0	; 208
    1b00:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <i2c_sendAddress>
   
   if(errorStatus == 1)
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	d1 f0       	breq	.+52     	; 0x1b3c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_sendData>
   if(errorStatus == 1)
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	a9 f0       	breq	.+42     	; 0x1b3c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    1b12:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <i2c_repeatStart>
   if(errorStatus == 1)
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	89 f0       	breq	.+34     	; 0x1b3c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    1b1a:	81 ed       	ldi	r24, 0xD1	; 209
    1b1c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <i2c_sendAddress>
   
   if(errorStatus == 1)
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <RTC_read+0x4c>
    1b24:	c0 e8       	ldi	r28, 0x80	; 128
    1b26:	d0 e0       	ldi	r29, 0x00	; 0
    1b28:	10 e0       	ldi	r17, 0x00	; 0
	 return 1;
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    1b2a:	16 30       	cpi	r17, 0x06	; 6
    1b2c:	19 f4       	brne	.+6      	; 0x1b34 <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
    1b2e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <i2c_receiveData_NACK>
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
    1b34:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    1b38:	8e 37       	cpi	r24, 0x7E	; 126
    1b3a:	21 f4       	brne	.+8      	; 0x1b44 <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    1b3c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	   		return 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	07 c0       	rjmp	.+14     	; 0x1b52 <RTC_read+0x62>
   	  }
	  
	  rtc_register[i] = data;
    1b44:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    1b46:	1f 5f       	subi	r17, 0xFF	; 255
    1b48:	17 30       	cpi	r17, 0x07	; 7
    1b4a:	79 f7       	brne	.-34     	; 0x1b2a <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    1b4c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	return 0;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
}	  
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	08 95       	ret

00001b5a <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    1b5a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <RTC_read>
   if(error) return 1;
    1b5e:	81 11       	cpse	r24, r1
    1b60:	32 c0       	rjmp	.+100    	; 0x1bc6 <RTC_getTime+0x6c>

   RTC_read();
    1b62:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <RTC_read>
   time[8] = 0x00;	  //NULL
    1b66:	10 92 c8 02 	sts	0x02C8, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    1b6a:	80 91 80 00 	lds	r24, 0x0080
    1b6e:	98 2f       	mov	r25, r24
    1b70:	9f 70       	andi	r25, 0x0F	; 15
    1b72:	90 63       	ori	r25, 0x30	; 48
    1b74:	90 93 c7 02 	sts	0x02C7, r25
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    1b78:	80 77       	andi	r24, 0x70	; 112
    1b7a:	82 95       	swap	r24
    1b7c:	8f 70       	andi	r24, 0x0F	; 15
    1b7e:	80 63       	ori	r24, 0x30	; 48
    1b80:	80 93 c6 02 	sts	0x02C6, r24
   time[5] = ':';
    1b84:	2a e3       	ldi	r18, 0x3A	; 58
    1b86:	20 93 c5 02 	sts	0x02C5, r18
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    1b8a:	80 91 81 00 	lds	r24, 0x0081
    1b8e:	98 2f       	mov	r25, r24
    1b90:	9f 70       	andi	r25, 0x0F	; 15
    1b92:	90 63       	ori	r25, 0x30	; 48
    1b94:	90 93 c4 02 	sts	0x02C4, r25
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    1b98:	80 77       	andi	r24, 0x70	; 112
    1b9a:	82 95       	swap	r24
    1b9c:	8f 70       	andi	r24, 0x0F	; 15
    1b9e:	80 63       	ori	r24, 0x30	; 48
    1ba0:	80 93 c3 02 	sts	0x02C3, r24
   time[2] = ':'; 
    1ba4:	20 93 c2 02 	sts	0x02C2, r18
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    1ba8:	80 91 82 00 	lds	r24, 0x0082
    1bac:	98 2f       	mov	r25, r24
    1bae:	9f 70       	andi	r25, 0x0F	; 15
    1bb0:	90 63       	ori	r25, 0x30	; 48
    1bb2:	90 93 c1 02 	sts	0x02C1, r25
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    1bb6:	80 73       	andi	r24, 0x30	; 48
    1bb8:	82 95       	swap	r24
    1bba:	8f 70       	andi	r24, 0x0F	; 15
    1bbc:	80 63       	ori	r24, 0x30	; 48
    1bbe:	80 93 c0 02 	sts	0x02C0, r24

   return 0;
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
    1bc8:	08 95       	ret

00001bca <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    1bca:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <RTC_read>
  if(error) return 1;
    1bce:	81 11       	cpse	r24, r1
    1bd0:	34 c0       	rjmp	.+104    	; 0x1c3a <RTC_getDate+0x70>

  date[10] = 0x00;  //NULL
    1bd2:	10 92 3d 03 	sts	0x033D, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    1bd6:	80 91 86 00 	lds	r24, 0x0086
    1bda:	98 2f       	mov	r25, r24
    1bdc:	9f 70       	andi	r25, 0x0F	; 15
    1bde:	90 63       	ori	r25, 0x30	; 48
    1be0:	90 93 3c 03 	sts	0x033C, r25
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    1be4:	82 95       	swap	r24
    1be6:	8f 70       	andi	r24, 0x0F	; 15
    1be8:	80 63       	ori	r24, 0x30	; 48
    1bea:	80 93 3b 03 	sts	0x033B, r24
  date[7] = '0';
    1bee:	80 e3       	ldi	r24, 0x30	; 48
    1bf0:	80 93 3a 03 	sts	0x033A, r24
  date[6] = '2';
    1bf4:	82 e3       	ldi	r24, 0x32	; 50
    1bf6:	80 93 39 03 	sts	0x0339, r24
  date[5] = '/';
    1bfa:	9f e2       	ldi	r25, 0x2F	; 47
    1bfc:	90 93 38 03 	sts	0x0338, r25
  date[4] = (MONTH & 0x0f) | 0x30;
    1c00:	20 91 85 00 	lds	r18, 0x0085
    1c04:	82 2f       	mov	r24, r18
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	80 63       	ori	r24, 0x30	; 48
    1c0a:	80 93 37 03 	sts	0x0337, r24
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    1c0e:	22 95       	swap	r18
    1c10:	21 70       	andi	r18, 0x01	; 1
    1c12:	20 63       	ori	r18, 0x30	; 48
    1c14:	20 93 36 03 	sts	0x0336, r18
  date[2] = '/';
    1c18:	90 93 35 03 	sts	0x0335, r25
  date[1] = (DATE & 0x0f) | 0x30;
    1c1c:	80 91 84 00 	lds	r24, 0x0084
    1c20:	98 2f       	mov	r25, r24
    1c22:	9f 70       	andi	r25, 0x0F	; 15
    1c24:	90 63       	ori	r25, 0x30	; 48
    1c26:	90 93 34 03 	sts	0x0334, r25
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    1c2a:	80 73       	andi	r24, 0x30	; 48
    1c2c:	82 95       	swap	r24
    1c2e:	8f 70       	andi	r24, 0x0F	; 15
    1c30:	80 63       	ori	r24, 0x30	; 48
    1c32:	80 93 33 03 	sts	0x0333, r24
  return 0;
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
    1c3c:	08 95       	ret

00001c3e <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    1c3e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <RTC_getTime>
  if(error) return 1;
    1c42:	81 11       	cpse	r24, r1
    1c44:	10 c0       	rjmp	.+32     	; 0x1c66 <RTC_displayTime+0x28>
  
  TX_NEWLINE;
    1c46:	8d e0       	ldi	r24, 0x0D	; 13
    1c48:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1c4c:	8a e0       	ldi	r24, 0x0A	; 10
    1c4e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  transmitString_F(PSTR("Time:"));
    1c52:	8e e1       	ldi	r24, 0x1E	; 30
    1c54:	95 e0       	ldi	r25, 0x05	; 5
    1c56:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  transmitString(time);
    1c5a:	80 ec       	ldi	r24, 0xC0	; 192
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
    1c5e:	0e 94 05 03 	call	0x60a	; 0x60a <transmitString>

  return 0;
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
    1c68:	08 95       	ret

00001c6a <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    1c6a:	8e e0       	ldi	r24, 0x0E	; 14
    1c6c:	95 e0       	ldi	r25, 0x05	; 5
    1c6e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  
  switch(DAY)
    1c72:	80 91 83 00 	lds	r24, 0x0083
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	87 30       	cpi	r24, 0x07	; 7
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	d0 f4       	brcc	.+52     	; 0x1cb2 <RTC_displayDay+0x48>
    1c7e:	fc 01       	movw	r30, r24
    1c80:	ef 5c       	subi	r30, 0xCF	; 207
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__tablejump2__>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    1c88:	87 e0       	ldi	r24, 0x07	; 7
    1c8a:	95 e0       	ldi	r25, 0x05	; 5
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	95 e0       	ldi	r25, 0x05	; 5
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    1c94:	88 ef       	ldi	r24, 0xF8	; 248
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	0e c0       	rjmp	.+28     	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    1c9a:	8e ee       	ldi	r24, 0xEE	; 238
    1c9c:	94 e0       	ldi	r25, 0x04	; 4
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    1ca0:	85 ee       	ldi	r24, 0xE5	; 229
    1ca2:	94 e0       	ldi	r25, 0x04	; 4
    1ca4:	08 c0       	rjmp	.+16     	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    1ca6:	8e ed       	ldi	r24, 0xDE	; 222
    1ca8:	94 e0       	ldi	r25, 0x04	; 4
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
    1cac:	85 ed       	ldi	r24, 0xD5	; 213
    1cae:	94 e0       	ldi	r25, 0x04	; 4
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <RTC_displayDay+0x4c>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    1cb2:	8d ec       	ldi	r24, 0xCD	; 205
    1cb4:	94 e0       	ldi	r25, 0x04	; 4
    1cb6:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <transmitString_F>

00001cba <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    1cba:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <RTC_getDate>
  if(error) return 1;
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	12 c0       	rjmp	.+36     	; 0x1ce6 <RTC_displayDate+0x2c>
  
  TX_NEWLINE;
    1cc2:	8d e0       	ldi	r24, 0x0D	; 13
    1cc4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1cc8:	8a e0       	ldi	r24, 0x0A	; 10
    1cca:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  transmitString_F(PSTR("Date:")); 
    1cce:	88 e1       	ldi	r24, 0x18	; 24
    1cd0:	95 e0       	ldi	r25, 0x05	; 5
    1cd2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  transmitString(date);  
    1cd6:	83 e3       	ldi	r24, 0x33	; 51
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	0e 94 05 03 	call	0x60a	; 0x60a <transmitString>
  RTC_displayDay();  
    1cde:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <RTC_displayDay>
  
  return 0; 
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
    1ce8:	08 95       	ret

00001cea <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    1cea:	20 91 c6 02 	lds	r18, 0x02C6
    1cee:	27 70       	andi	r18, 0x07	; 7
    1cf0:	80 e1       	ldi	r24, 0x10	; 16
    1cf2:	28 9f       	mul	r18, r24
    1cf4:	90 01       	movw	r18, r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	30 91 c7 02 	lds	r19, 0x02C7
    1cfc:	3f 70       	andi	r19, 0x0F	; 15
    1cfe:	32 2b       	or	r19, r18
    1d00:	30 93 80 00 	sts	0x0080, r19
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    1d04:	20 91 c3 02 	lds	r18, 0x02C3
    1d08:	27 70       	andi	r18, 0x07	; 7
    1d0a:	80 e1       	ldi	r24, 0x10	; 16
    1d0c:	28 9f       	mul	r18, r24
    1d0e:	90 01       	movw	r18, r0
    1d10:	11 24       	eor	r1, r1
    1d12:	30 91 c4 02 	lds	r19, 0x02C4
    1d16:	3f 70       	andi	r19, 0x0F	; 15
    1d18:	32 2b       	or	r19, r18
    1d1a:	30 93 81 00 	sts	0x0081, r19
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    1d1e:	20 91 c0 02 	lds	r18, 0x02C0
    1d22:	23 70       	andi	r18, 0x03	; 3
    1d24:	80 e1       	ldi	r24, 0x10	; 16
    1d26:	28 9f       	mul	r18, r24
    1d28:	90 01       	movw	r18, r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	30 91 c1 02 	lds	r19, 0x02C1
    1d30:	3f 70       	andi	r19, 0x0F	; 15
    1d32:	32 2b       	or	r19, r18
    1d34:	30 93 82 00 	sts	0x0082, r19
  DAY = date[10];
    1d38:	20 91 3d 03 	lds	r18, 0x033D
    1d3c:	20 93 83 00 	sts	0x0083, r18
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    1d40:	20 91 33 03 	lds	r18, 0x0333
    1d44:	23 70       	andi	r18, 0x03	; 3
    1d46:	80 e1       	ldi	r24, 0x10	; 16
    1d48:	28 9f       	mul	r18, r24
    1d4a:	90 01       	movw	r18, r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	30 91 34 03 	lds	r19, 0x0334
    1d52:	3f 70       	andi	r19, 0x0F	; 15
    1d54:	32 2b       	or	r19, r18
    1d56:	30 93 84 00 	sts	0x0084, r19
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    1d5a:	20 91 36 03 	lds	r18, 0x0336
    1d5e:	82 2f       	mov	r24, r18
    1d60:	81 70       	andi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	24 e0       	ldi	r18, 0x04	; 4
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	2a 95       	dec	r18
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <RTC_updateRegisters+0x7c>
    1d6e:	90 91 37 03 	lds	r25, 0x0337
    1d72:	9f 70       	andi	r25, 0x0F	; 15
    1d74:	98 2b       	or	r25, r24
    1d76:	90 93 85 00 	sts	0x0085, r25
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    1d7a:	80 91 3b 03 	lds	r24, 0x033B
    1d7e:	20 e1       	ldi	r18, 0x10	; 16
    1d80:	82 9f       	mul	r24, r18
    1d82:	c0 01       	movw	r24, r0
    1d84:	11 24       	eor	r1, r1
    1d86:	90 91 3c 03 	lds	r25, 0x033C
    1d8a:	9f 70       	andi	r25, 0x0F	; 15
    1d8c:	98 2b       	or	r25, r24
    1d8e:	90 93 86 00 	sts	0x0086, r25
    1d92:	08 95       	ret

00001d94 <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    1d98:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <i2c_start>
   if(errorStatus == 1)
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	21 f4       	brne	.+8      	; 0x1da8 <RTC_writeTime+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    1da0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	 return(1);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	18 c0       	rjmp	.+48     	; 0x1dd8 <RTC_writeTime+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1da8:	80 ed       	ldi	r24, 0xD0	; 208
    1daa:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <i2c_sendAddress>
   
   if(errorStatus == 1)
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	b9 f3       	breq	.-18     	; 0x1da0 <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_sendData>
   if(errorStatus == 1)
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	91 f3       	breq	.-28     	; 0x1da0 <RTC_writeTime+0xc>
    1dbc:	c0 e8       	ldi	r28, 0x80	; 128
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    1dc0:	89 91       	ld	r24, Y+
    1dc2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_sendData>
   	  if(errorStatus == 1)
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	59 f3       	breq	.-42     	; 0x1da0 <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	c3 38       	cpi	r28, 0x83	; 131
    1dce:	d8 07       	cpc	r29, r24
    1dd0:	b9 f7       	brne	.-18     	; 0x1dc0 <RTC_writeTime+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    1dd2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	return(0);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
}
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	08 95       	ret

00001dde <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    1de2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <i2c_start>
   if(errorStatus == 1)
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	21 f4       	brne	.+8      	; 0x1df2 <RTC_writeDate+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    1dea:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	 return(1);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	18 c0       	rjmp	.+48     	; 0x1e22 <RTC_writeDate+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1df2:	80 ed       	ldi	r24, 0xD0	; 208
    1df4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <i2c_sendAddress>
   
   if(errorStatus == 1)
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	b9 f3       	breq	.-18     	; 0x1dea <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_sendData>
   if(errorStatus == 1)
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 f3       	breq	.-28     	; 0x1dea <RTC_writeDate+0xc>
    1e06:	c3 e8       	ldi	r28, 0x83	; 131
    1e08:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    1e0a:	89 91       	ld	r24, Y+
    1e0c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <i2c_sendData>
   	  if(errorStatus == 1)
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	59 f3       	breq	.-42     	; 0x1dea <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	c7 38       	cpi	r28, 0x87	; 135
    1e18:	d8 07       	cpc	r29, r24
    1e1a:	b9 f7       	brne	.-18     	; 0x1e0a <RTC_writeDate+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    1e1c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <i2c_stop>
	return(0);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
}
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    1e28:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
    1e2a:	8d e0       	ldi	r24, 0x0D	; 13
    1e2c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1e30:	8a e0       	ldi	r24, 0x0A	; 10
    1e32:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    1e36:	89 ea       	ldi	r24, 0xA9	; 169
    1e38:	94 e0       	ldi	r25, 0x04	; 4
    1e3a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    1e3e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1e42:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1e44:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x32)
    1e48:	80 ed       	ldi	r24, 0xD0	; 208
    1e4a:	8c 0f       	add	r24, r28
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <RTC_updateTime+0x2a>
    1e50:	65 c0       	rjmp	.+202    	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[0]= data;
    1e52:	c0 93 c0 02 	sts	0x02C0, r28
	 
	data = receiveByte();
    1e56:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1e5a:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1e5c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1e60:	80 ed       	ldi	r24, 0xD0	; 208
    1e62:	8c 0f       	add	r24, r28
    1e64:	8a 30       	cpi	r24, 0x0A	; 10
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <RTC_updateTime+0x42>
    1e68:	59 c0       	rjmp	.+178    	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	time[1]= data;
    1e6a:	c0 93 c1 02 	sts	0x02C1, r28
	
	transmitByte(':');
    1e6e:	8a e3       	ldi	r24, 0x3A	; 58
    1e70:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    1e74:	80 91 c0 02 	lds	r24, 0x02C0
    1e78:	83 70       	andi	r24, 0x03	; 3
    1e7a:	20 91 c1 02 	lds	r18, 0x02C1
    1e7e:	2f 70       	andi	r18, 0x0F	; 15
    1e80:	3a e0       	ldi	r19, 0x0A	; 10
    1e82:	83 9f       	mul	r24, r19
    1e84:	c0 01       	movw	r24, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	82 0f       	add	r24, r18
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	48 97       	sbiw	r24, 0x18	; 24
    1e8e:	0c f0       	brlt	.+2      	; 0x1e92 <RTC_updateTime+0x6a>
    1e90:	45 c0       	rjmp	.+138    	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    1e92:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1e96:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    1e98:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x35)
    1e9c:	80 ed       	ldi	r24, 0xD0	; 208
    1e9e:	8c 0f       	add	r24, r28
    1ea0:	86 30       	cpi	r24, 0x06	; 6
    1ea2:	e0 f5       	brcc	.+120    	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    1ea4:	c0 93 c3 02 	sts	0x02C3, r28
	
	data = receiveByte();
    1ea8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1eac:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1eae:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1eb2:	80 ed       	ldi	r24, 0xD0	; 208
    1eb4:	8c 0f       	add	r24, r28
    1eb6:	8a 30       	cpi	r24, 0x0A	; 10
    1eb8:	88 f5       	brcc	.+98     	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    1eba:	c0 93 c4 02 	sts	0x02C4, r28
	
	transmitByte(':');
    1ebe:	8a e3       	ldi	r24, 0x3A	; 58
    1ec0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    1ec4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1ec8:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    1eca:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x35)
    1ece:	80 ed       	ldi	r24, 0xD0	; 208
    1ed0:	8c 0f       	add	r24, r28
    1ed2:	86 30       	cpi	r24, 0x06	; 6
    1ed4:	18 f5       	brcc	.+70     	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    1ed6:	c0 93 c6 02 	sts	0x02C6, r28
	
	data = receiveByte();
    1eda:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1ede:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1ee0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1ee4:	80 ed       	ldi	r24, 0xD0	; 208
    1ee6:	8c 0f       	add	r24, r28
    1ee8:	8a 30       	cpi	r24, 0x0A	; 10
    1eea:	c0 f4       	brcc	.+48     	; 0x1f1c <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    1eec:	c0 93 c7 02 	sts	0x02C7, r28
	
	 	  
  RTC_updateRegisters(); 
    1ef0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <RTC_updateRegisters>
  data = RTC_writeTime();
    1ef4:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <RTC_writeTime>
    1ef8:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    1efa:	8d e0       	ldi	r24, 0x0D	; 13
    1efc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1f00:	8a e0       	ldi	r24, 0x0A	; 10
    1f02:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  if(data == 0)
    1f06:	c1 11       	cpse	r28, r1
    1f08:	06 c0       	rjmp	.+12     	; 0x1f16 <RTC_updateTime+0xee>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    1f0a:	8f e8       	ldi	r24, 0x8F	; 143
    1f0c:	94 e0       	ldi	r25, 0x04	; 4
    1f0e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
	 return 0;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e c0       	rjmp	.+28     	; 0x1f32 <RTC_updateTime+0x10a>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    1f16:	8a e7       	ldi	r24, 0x7A	; 122
    1f18:	94 e0       	ldi	r25, 0x04	; 4
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <RTC_updateTime+0x104>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    1f1c:	8d e0       	ldi	r24, 0x0D	; 13
    1f1e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1f22:	8a e0       	ldi	r24, 0x0A	; 10
    1f24:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    1f28:	8a e6       	ldi	r24, 0x6A	; 106
    1f2a:	94 e0       	ldi	r25, 0x04	; 4
    1f2c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  return 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
}  
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
  unsigned char data;
  TX_NEWLINE;
    1f3a:	8d e0       	ldi	r24, 0x0D	; 13
    1f3c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    1f40:	8a e0       	ldi	r24, 0x0A	; 10
    1f42:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    1f46:	83 e5       	ldi	r24, 0x53	; 83
    1f48:	94 e0       	ldi	r25, 0x04	; 4
    1f4a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    1f4e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1f52:	c8 2f       	mov	r28, r24
	transmitByte(data); 	   	  	  				
    1f54:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x33)
    1f58:	80 ed       	ldi	r24, 0xD0	; 208
    1f5a:	8c 0f       	add	r24, r28
    1f5c:	84 30       	cpi	r24, 0x04	; 4
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <RTC_updateDate+0x2c>
    1f60:	95 c0       	rjmp	.+298    	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[0]= data;
    1f62:	c0 93 33 03 	sts	0x0333, r28
	 
	data = receiveByte();
    1f66:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1f6a:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1f6c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1f70:	80 ed       	ldi	r24, 0xD0	; 208
    1f72:	8c 0f       	add	r24, r28
    1f74:	8a 30       	cpi	r24, 0x0A	; 10
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <RTC_updateDate+0x44>
    1f78:	89 c0       	rjmp	.+274    	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[1]= data;
    1f7a:	c0 93 34 03 	sts	0x0334, r28
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    1f7e:	20 91 33 03 	lds	r18, 0x0333
    1f82:	23 70       	andi	r18, 0x03	; 3
    1f84:	cf 70       	andi	r28, 0x0F	; 15
    1f86:	8a e0       	ldi	r24, 0x0A	; 10
    1f88:	28 9f       	mul	r18, r24
    1f8a:	90 01       	movw	r18, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	2c 0f       	add	r18, r28
    1f90:	31 1d       	adc	r19, r1
    1f92:	20 32       	cpi	r18, 0x20	; 32
    1f94:	31 05       	cpc	r19, r1
    1f96:	0c f0       	brlt	.+2      	; 0x1f9a <RTC_updateDate+0x64>
    1f98:	79 c0       	rjmp	.+242    	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
    transmitByte('/');
    1f9a:	8f e2       	ldi	r24, 0x2F	; 47
    1f9c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	
	date[2] = '/';
    1fa0:	df e2       	ldi	r29, 0x2F	; 47
    1fa2:	d0 93 35 03 	sts	0x0335, r29
	   
	
	data = receiveByte();			   			  //receive month
    1fa6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1faa:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1fac:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x31)
    1fb0:	80 ed       	ldi	r24, 0xD0	; 208
    1fb2:	8c 0f       	add	r24, r28
    1fb4:	82 30       	cpi	r24, 0x02	; 2
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <RTC_updateDate+0x84>
    1fb8:	69 c0       	rjmp	.+210    	; 0x208c <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    1fba:	c0 93 36 03 	sts	0x0336, r28
	
	data = receiveByte();
    1fbe:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    1fc2:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1fc4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1fc8:	80 ed       	ldi	r24, 0xD0	; 208
    1fca:	8c 0f       	add	r24, r28
    1fcc:	8a 30       	cpi	r24, 0x0A	; 10
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <RTC_updateDate+0x9c>
    1fd0:	5d c0       	rjmp	.+186    	; 0x208c <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    1fd2:	c0 93 37 03 	sts	0x0337, r28
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    1fd6:	20 91 36 03 	lds	r18, 0x0336
    1fda:	23 70       	andi	r18, 0x03	; 3
    1fdc:	cf 70       	andi	r28, 0x0F	; 15
    1fde:	8a e0       	ldi	r24, 0x0A	; 10
    1fe0:	28 9f       	mul	r18, r24
    1fe2:	90 01       	movw	r18, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	2c 0f       	add	r18, r28
    1fe8:	31 1d       	adc	r19, r1
    1fea:	2d 30       	cpi	r18, 0x0D	; 13
    1fec:	31 05       	cpc	r19, r1
    1fee:	0c f0       	brlt	.+2      	; 0x1ff2 <RTC_updateDate+0xbc>
    1ff0:	4d c0       	rjmp	.+154    	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	transmitByte('/');
    1ff2:	8f e2       	ldi	r24, 0x2F	; 47
    1ff4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	   
	
	date[5] = '/';
    1ff8:	d0 93 38 03 	sts	0x0338, r29
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    1ffc:	82 e3       	ldi	r24, 0x32	; 50
    1ffe:	80 93 39 03 	sts	0x0339, r24
	date[7] = '0';
    2002:	80 e3       	ldi	r24, 0x30	; 48
    2004:	80 93 3a 03 	sts	0x033A, r24
	
	data = receiveByte();			   			 
    2008:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    200c:	c8 2f       	mov	r28, r24
	transmitByte(data);
    200e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2012:	80 ed       	ldi	r24, 0xD0	; 208
    2014:	8c 0f       	add	r24, r28
    2016:	8a 30       	cpi	r24, 0x0A	; 10
    2018:	c8 f5       	brcc	.+114    	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    201a:	c0 93 3b 03 	sts	0x033B, r28
	
	data = receiveByte();
    201e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    2022:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2024:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2028:	80 ed       	ldi	r24, 0xD0	; 208
    202a:	8c 0f       	add	r24, r28
    202c:	8a 30       	cpi	r24, 0x0A	; 10
    202e:	70 f5       	brcc	.+92     	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    2030:	c0 93 3c 03 	sts	0x033C, r28
	
	TX_NEWLINE;
    2034:	8d e0       	ldi	r24, 0x0D	; 13
    2036:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    203a:	8a e0       	ldi	r24, 0x0A	; 10
    203c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    2040:	8a e2       	ldi	r24, 0x2A	; 42
    2042:	94 e0       	ldi	r25, 0x04	; 4
    2044:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    2048:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    204c:	c8 2f       	mov	r28, r24
	transmitByte(data);
    204e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	if(data < 0x30 || data > 0x36)
    2052:	80 ed       	ldi	r24, 0xD0	; 208
    2054:	8c 0f       	add	r24, r28
    2056:	87 30       	cpi	r24, 0x07	; 7
    2058:	c8 f4       	brcc	.+50     	; 0x208c <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    205a:	cf 70       	andi	r28, 0x0F	; 15
    205c:	c0 93 3d 03 	sts	0x033D, r28
		 	  
  RTC_updateRegisters(); 
    2060:	0e 94 75 0e 	call	0x1cea	; 0x1cea <RTC_updateRegisters>
  data = RTC_writeDate();
    2064:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <RTC_writeDate>
    2068:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    206a:	8d e0       	ldi	r24, 0x0D	; 13
    206c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    2070:	8a e0       	ldi	r24, 0x0A	; 10
    2072:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  if(data == 0)
    2076:	c1 11       	cpse	r28, r1
    2078:	06 c0       	rjmp	.+12     	; 0x2086 <RTC_updateDate+0x150>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    207a:	80 e1       	ldi	r24, 0x10	; 16
    207c:	94 e0       	ldi	r25, 0x04	; 4
    207e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
	 return 0;
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	0e c0       	rjmp	.+28     	; 0x20a2 <RTC_updateDate+0x16c>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    2086:	8b ef       	ldi	r24, 0xFB	; 251
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	08 c0       	rjmp	.+16     	; 0x209c <RTC_updateDate+0x166>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    208c:	8d e0       	ldi	r24, 0x0D	; 13
    208e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    2092:	8a e0       	ldi	r24, 0x0A	; 10
    2094:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2098:	8b ee       	ldi	r24, 0xEB	; 235
    209a:	93 e0       	ldi	r25, 0x03	; 3
    209c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  return 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
}  
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	08 95       	ret

000020a8 <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    20a8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <RTC_read>
   if(error) return 1;
    20ac:	81 11       	cpse	r24, r1
    20ae:	61 c0       	rjmp	.+194    	; 0x2172 <getDateTime_FAT+0xca>

   yr = (YEAR & 0xf0) >> 4;
    20b0:	80 91 86 00 	lds	r24, 0x0086
    20b4:	68 2f       	mov	r22, r24
    20b6:	62 95       	swap	r22
    20b8:	6f 70       	andi	r22, 0x0F	; 15
   yr = (yr * 10)+(YEAR & 0x0f);
    20ba:	8f 70       	andi	r24, 0x0F	; 15
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	44 96       	adiw	r24, 0x14	; 20
   yr = yr+2000;
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    20c0:	30 91 85 00 	lds	r19, 0x0085
    20c4:	53 2f       	mov	r21, r19
    20c6:	52 95       	swap	r21
    20c8:	5f 70       	andi	r21, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    20ca:	20 91 84 00 	lds	r18, 0x0084
    20ce:	42 2f       	mov	r20, r18
    20d0:	42 95       	swap	r20
    20d2:	4f 70       	andi	r20, 0x0F	; 15
   if(error) return 1;

   yr = (YEAR & 0xf0) >> 4;
   yr = (yr * 10)+(YEAR & 0x0f);
   yr = yr+2000;
   yr = yr - 1980;
    20d4:	7a e0       	ldi	r23, 0x0A	; 10
    20d6:	67 9f       	mul	r22, r23
    20d8:	80 0d       	add	r24, r0
    20da:	91 1d       	adc	r25, r1
    20dc:	11 24       	eor	r1, r1
   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;
    20de:	64 e0       	ldi	r22, 0x04	; 4
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	6a 95       	dec	r22
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <getDateTime_FAT+0x38>
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);
    20e8:	3f 70       	andi	r19, 0x0F	; 15
    20ea:	6a e0       	ldi	r22, 0x0A	; 10
    20ec:	56 9f       	mul	r21, r22
    20ee:	30 0d       	add	r19, r0
    20f0:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;
    20f2:	83 2b       	or	r24, r19

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);

   dateFAT = (dateFAT << 5) | dt;
    20f4:	75 e0       	ldi	r23, 0x05	; 5
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	7a 95       	dec	r23
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <getDateTime_FAT+0x4e>
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);
    20fe:	2f 70       	andi	r18, 0x0F	; 15
    2100:	7a e0       	ldi	r23, 0x0A	; 10
    2102:	47 9f       	mul	r20, r23
    2104:	20 0d       	add	r18, r0
    2106:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
    2108:	82 2b       	or	r24, r18
    210a:	90 93 8c 00 	sts	0x008C, r25
    210e:	80 93 8b 00 	sts	0x008B, r24


   hr = (HOURS & 0xf0) >> 4;
    2112:	80 91 82 00 	lds	r24, 0x0082
    2116:	98 2f       	mov	r25, r24
    2118:	92 95       	swap	r25
    211a:	9f 70       	andi	r25, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    211c:	30 91 81 00 	lds	r19, 0x0081
    2120:	43 2f       	mov	r20, r19
    2122:	42 95       	swap	r20
    2124:	4f 70       	andi	r20, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    2126:	20 91 80 00 	lds	r18, 0x0080
    212a:	52 2f       	mov	r21, r18
    212c:	52 95       	swap	r21
    212e:	5f 70       	andi	r21, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
    2130:	2f 70       	andi	r18, 0x0F	; 15
    2132:	6a e0       	ldi	r22, 0x0A	; 10
    2134:	56 9f       	mul	r21, r22
    2136:	20 0d       	add	r18, r0
    2138:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;


   hr = (HOURS & 0xf0) >> 4;
   hr = (hr * 10)+(HOURS & 0x0f);
    213a:	8f 70       	andi	r24, 0x0F	; 15
    213c:	7a e0       	ldi	r23, 0x0A	; 10
    213e:	97 9f       	mul	r25, r23
    2140:	80 0d       	add	r24, r0
    2142:	11 24       	eor	r1, r1
   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;
    2144:	50 e4       	ldi	r21, 0x40	; 64
    2146:	85 9f       	mul	r24, r21
    2148:	c0 01       	movw	r24, r0
    214a:	11 24       	eor	r1, r1
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);
    214c:	3f 70       	andi	r19, 0x0F	; 15
    214e:	6a e0       	ldi	r22, 0x0A	; 10
    2150:	46 9f       	mul	r20, r22
    2152:	30 0d       	add	r19, r0
    2154:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;
    2156:	83 2b       	or	r24, r19

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    2158:	e5 e0       	ldi	r30, 0x05	; 5
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	ea 95       	dec	r30
    2160:	e1 f7       	brne	.-8      	; 0x215a <getDateTime_FAT+0xb2>

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    2162:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    2164:	82 2b       	or	r24, r18
    2166:	90 93 a7 00 	sts	0x00A7, r25
    216a:	80 93 a6 00 	sts	0x00A6, r24

   
   return 0;
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    2174:	08 95       	ret

00002176 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	00 d0       	rcall	.+0      	; 0x2182 <SD_sendCommand+0xc>
    2182:	00 d0       	rcall	.+0      	; 0x2184 <SD_sendCommand+0xe>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	08 2f       	mov	r16, r24
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    218a:	80 91 b9 02 	lds	r24, 0x02B9
    218e:	81 11       	cpse	r24, r1
    2190:	13 c0       	rjmp	.+38     	; 0x21b8 <SD_sendCommand+0x42>
if(cmd == READ_SINGLE_BLOCK     ||
    2192:	8f ee       	ldi	r24, 0xEF	; 239
    2194:	80 0f       	add	r24, r16
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	40 f0       	brcs	.+16     	; 0x21aa <SD_sendCommand+0x34>
   cmd == READ_MULTIPLE_BLOCKS  ||
    219a:	88 ee       	ldi	r24, 0xE8	; 232
    219c:	80 0f       	add	r24, r16
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	20 f0       	brcs	.+8      	; 0x21aa <SD_sendCommand+0x34>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    21a2:	80 ee       	ldi	r24, 0xE0	; 224
    21a4:	80 0f       	add	r24, r16
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	38 f4       	brcc	.+14     	; 0x21b8 <SD_sendCommand+0x42>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    21aa:	89 e0       	ldi	r24, 0x09	; 9
    21ac:	44 0f       	add	r20, r20
    21ae:	55 1f       	adc	r21, r21
    21b0:	66 1f       	adc	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	8a 95       	dec	r24
    21b6:	d1 f7       	brne	.-12     	; 0x21ac <SD_sendCommand+0x36>
   }	   

SD_CS_ASSERT;
    21b8:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    21ba:	80 2f       	mov	r24, r16
    21bc:	80 64       	ori	r24, 0x40	; 64
    21be:	49 83       	std	Y+1, r20	; 0x01
    21c0:	5a 83       	std	Y+2, r21	; 0x02
    21c2:	6b 83       	std	Y+3, r22	; 0x03
    21c4:	7c 83       	std	Y+4, r23	; 0x04
    21c6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SPI_transmit(arg>>24);
    21ca:	7c 81       	ldd	r23, Y+4	; 0x04
    21cc:	87 2f       	mov	r24, r23
    21ce:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SPI_transmit(arg>>16);
    21d2:	6b 81       	ldd	r22, Y+3	; 0x03
    21d4:	86 2f       	mov	r24, r22
    21d6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SPI_transmit(arg>>8);
    21da:	5a 81       	ldd	r21, Y+2	; 0x02
    21dc:	85 2f       	mov	r24, r21
    21de:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SPI_transmit(arg);
    21e2:	49 81       	ldd	r20, Y+1	; 0x01
    21e4:	84 2f       	mov	r24, r20
    21e6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    21ea:	08 30       	cpi	r16, 0x08	; 8
    21ec:	11 f4       	brne	.+4      	; 0x21f2 <SD_sendCommand+0x7c>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    21ee:	87 e8       	ldi	r24, 0x87	; 135
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <SD_sendCommand+0x7e>
else 
  SPI_transmit(0x95); 
    21f2:	85 e9       	ldi	r24, 0x95	; 149
    21f4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    21f8:	10 e0       	ldi	r17, 0x00	; 0
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    21fa:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
    21fe:	f8 2e       	mov	r15, r24
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	f8 12       	cpse	r15, r24
    2204:	03 c0       	rjmp	.+6      	; 0x220c <SD_sendCommand+0x96>
    2206:	11 50       	subi	r17, 0x01	; 1
   if(retry++ > 0xfe) break; //time out error
    2208:	c1 f7       	brne	.-16     	; 0x21fa <SD_sendCommand+0x84>
    220a:	15 c0       	rjmp	.+42     	; 0x2236 <SD_sendCommand+0xc0>

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    220c:	f1 10       	cpse	r15, r1
    220e:	13 c0       	rjmp	.+38     	; 0x2236 <SD_sendCommand+0xc0>
    2210:	0a 33       	cpi	r16, 0x3A	; 58
    2212:	89 f4       	brne	.+34     	; 0x2236 <SD_sendCommand+0xc0>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2214:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    2218:	86 ff       	sbrs	r24, 6
    221a:	04 c0       	rjmp	.+8      	; 0x2224 <SD_sendCommand+0xae>
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	80 93 b9 02 	sts	0x02B9, r24
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <SD_sendCommand+0xb2>
  else SDHC_flag = 0;
    2224:	10 92 b9 02 	sts	0x02B9, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    2228:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    222c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
  SPI_receive(); 
    2230:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
    2234:	f1 2c       	mov	r15, r1
}

SPI_receive(); //extra 8 CLK
    2236:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
SD_CS_DEASSERT;
    223a:	c4 9a       	sbi	0x18, 4	; 24

return response; //return state
}
    223c:	8f 2d       	mov	r24, r15
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	08 95       	ret

00002252 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
    2262:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    2264:	d9 f7       	brne	.-10     	; 0x225c <SD_init+0xa>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    2266:	c4 98       	cbi	0x18, 4	; 24
    2268:	c1 e2       	ldi	r28, 0x21	; 33
    226a:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	ba 01       	movw	r22, r20
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
    2278:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    227a:	20 97       	sbiw	r28, 0x00	; 0
    227c:	09 f4       	brne	.+2      	; 0x2280 <SD_init+0x2e>
    227e:	63 c0       	rjmp	.+198    	; 0x2346 <SD_init+0xf4>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	a1 f7       	brne	.-24     	; 0x226c <SD_init+0x1a>

SD_CS_DEASSERT;
    2284:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit (0xff);
    2286:	8f ef       	ldi	r24, 0xFF	; 255
    2288:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SPI_transmit (0xff);
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
    2292:	cf ef       	ldi	r28, 0xFF	; 255
    2294:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    2296:	4a ea       	ldi	r20, 0xAA	; 170
    2298:	51 e0       	ldi	r21, 0x01	; 1
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	88 e0       	ldi	r24, 0x08	; 8
    22a0:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
    22a4:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    22a6:	20 97       	sbiw	r28, 0x00	; 0
    22a8:	59 f4       	brne	.+22     	; 0x22c0 <SD_init+0x6e>
   {
	  TX_NEWLINE;
    22aa:	8d e0       	ldi	r24, 0x0D	; 13
    22ac:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    22b0:	8a e0       	ldi	r24, 0x0A	; 10
    22b2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	80 93 31 03 	sts	0x0331, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
	  SD_version = 1;
    22bc:	01 e0       	ldi	r16, 0x01	; 1
	  cardType = 1;
	  break;
    22be:	03 c0       	rjmp	.+6      	; 0x22c6 <SD_init+0x74>
   } //time out

}while(response != 0x01);
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	49 f7       	brne	.-46     	; 0x2296 <SD_init+0x44>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    22c4:	02 e0       	ldi	r16, 0x02	; 2
    22c6:	cf ef       	ldi	r28, 0xFF	; 255
    22c8:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	ba 01       	movw	r22, r20
    22d0:	87 e3       	ldi	r24, 0x37	; 55
    22d2:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	70 e4       	ldi	r23, 0x40	; 64
    22de:	89 e2       	ldi	r24, 0x29	; 41
    22e0:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
    22e4:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    22e6:	20 97       	sbiw	r28, 0x00	; 0
    22e8:	41 f4       	brne	.+16     	; 0x22fa <SD_init+0xa8>
   {
      TX_NEWLINE;
    22ea:	8d e0       	ldi	r24, 0x0D	; 13
    22ec:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    22f0:	8a e0       	ldi	r24, 0x0A	; 10
    22f2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	  return 2;  //time out, card initialization failed
    22f6:	12 e0       	ldi	r17, 0x02	; 2
    22f8:	27 c0       	rjmp	.+78     	; 0x2348 <SD_init+0xf6>
   } 

}while(response != 0x00);
    22fa:	81 11       	cpse	r24, r1
    22fc:	e6 cf       	rjmp	.-52     	; 0x22ca <SD_init+0x78>


retry = 0;
SDHC_flag = 0;
    22fe:	10 92 b9 02 	sts	0x02B9, r1

if (SD_version == 2)
    2302:	02 30       	cpi	r16, 0x02	; 2
    2304:	09 f5       	brne	.+66     	; 0x2348 <SD_init+0xf6>
    2306:	cf ef       	ldi	r28, 0xFF	; 255
    2308:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	ba 01       	movw	r22, r20
    2310:	8a e3       	ldi	r24, 0x3A	; 58
    2312:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
    2316:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    2318:	20 97       	sbiw	r28, 0x00	; 0
    231a:	49 f4       	brne	.+18     	; 0x232e <SD_init+0xdc>
     {
       TX_NEWLINE;
    231c:	8d e0       	ldi	r24, 0x0D	; 13
    231e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    2322:	8a e0       	ldi	r24, 0x0A	; 10
    2324:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	   cardType = 0;
    2328:	10 92 31 03 	sts	0x0331, r1
	   break;
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <SD_init+0xe0>
     } //time out

   }while(response != 0x00);
    232e:	81 11       	cpse	r24, r1
    2330:	ec cf       	rjmp	.-40     	; 0x230a <SD_init+0xb8>

   if(SDHC_flag == 1) cardType = 2;
    2332:	80 91 b9 02 	lds	r24, 0x02B9
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	11 f4       	brne	.+4      	; 0x233e <SD_init+0xec>
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <SD_init+0xee>
   else cardType = 3;
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	80 93 31 03 	sts	0x0331, r24
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <SD_init+0xf6>
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    2346:	11 e0       	ldi	r17, 0x01	; 1
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    2348:	81 2f       	mov	r24, r17
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    2354:	8f 92       	push	r8
    2356:	9f 92       	push	r9
    2358:	af 92       	push	r10
    235a:	bf 92       	push	r11
    235c:	cf 92       	push	r12
    235e:	df 92       	push	r13
    2360:	ef 92       	push	r14
    2362:	ff 92       	push	r15
    2364:	6b 01       	movw	r12, r22
    2366:	7c 01       	movw	r14, r24
    2368:	49 01       	movw	r8, r18
    236a:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    236c:	ab 01       	movw	r20, r22
    236e:	bc 01       	movw	r22, r24
    2370:	80 e2       	ldi	r24, 0x20	; 32
    2372:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2376:	81 11       	cpse	r24, r1
    2378:	1d c0       	rjmp	.+58     	; 0x23b4 <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    237a:	b5 01       	movw	r22, r10
    237c:	a4 01       	movw	r20, r8
    237e:	41 50       	subi	r20, 0x01	; 1
    2380:	51 09       	sbc	r21, r1
    2382:	61 09       	sbc	r22, r1
    2384:	71 09       	sbc	r23, r1
    2386:	4c 0d       	add	r20, r12
    2388:	5d 1d       	adc	r21, r13
    238a:	6e 1d       	adc	r22, r14
    238c:	7f 1d       	adc	r23, r15
    238e:	81 e2       	ldi	r24, 0x21	; 33
    2390:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
if(response != 0x00)
    2394:	81 11       	cpse	r24, r1
    2396:	0e c0       	rjmp	.+28     	; 0x23b4 <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	ba 01       	movw	r22, r20
    239e:	86 e2       	ldi	r24, 0x26	; 38
if(response != 0x00)
  return response;

return 0; //normal return
}
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	bf 90       	pop	r11
    23aa:	af 90       	pop	r10
    23ac:	9f 90       	pop	r9
    23ae:	8f 90       	pop	r8

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
if(response != 0x00)
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    23b0:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	bf 90       	pop	r11
    23be:	af 90       	pop	r10
    23c0:	9f 90       	pop	r9
    23c2:	8f 90       	pop	r8
    23c4:	08 95       	ret

000023c6 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	ab 01       	movw	r20, r22
    23cc:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    23ce:	81 e1       	ldi	r24, 0x11	; 17
    23d0:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    23d4:	81 11       	cpse	r24, r1
    23d6:	22 c0       	rjmp	.+68     	; 0x241c <SD_readSingleBlock+0x56>

SD_CS_ASSERT;
    23d8:	c4 98       	cbi	0x18, 4	; 24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    23da:	c0 e0       	ldi	r28, 0x00	; 0
    23dc:	d0 e0       	ldi	r29, 0x00	; 0
    23de:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
    23e2:	8e 3f       	cpi	r24, 0xFE	; 254
    23e4:	31 f0       	breq	.+12     	; 0x23f2 <SD_readSingleBlock+0x2c>
    23e6:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    23e8:	20 97       	sbiw	r28, 0x00	; 0
    23ea:	c9 f7       	brne	.-14     	; 0x23de <SD_readSingleBlock+0x18>
    23ec:	c4 9a       	sbi	0x18, 4	; 24
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	15 c0       	rjmp	.+42     	; 0x241c <SD_readSingleBlock+0x56>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    23f2:	c0 e0       	ldi	r28, 0x00	; 0
    23f4:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    23f6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
    23fa:	fe 01       	movw	r30, r28
    23fc:	ed 54       	subi	r30, 0x4D	; 77
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2402:	21 96       	adiw	r28, 0x01	; 1
    2404:	c1 15       	cp	r28, r1
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	d8 07       	cpc	r29, r24
    240a:	a9 f7       	brne	.-22     	; 0x23f6 <SD_readSingleBlock+0x30>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    240c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
SPI_receive();
    2410:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    2414:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
SD_CS_DEASSERT;
    2418:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    241a:	80 e0       	ldi	r24, 0x00	; 0
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	ab 01       	movw	r20, r22
    2428:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    242a:	88 e1       	ldi	r24, 0x18	; 24
    242c:	0e 94 bb 10 	call	0x2176	; 0x2176 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2430:	81 11       	cpse	r24, r1
    2432:	3c c0       	rjmp	.+120    	; 0x24ac <SD_writeSingleBlock+0x8a>

SD_CS_ASSERT;
    2434:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2436:	8e ef       	ldi	r24, 0xFE	; 254
    2438:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    243c:	c0 e0       	ldi	r28, 0x00	; 0
    243e:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    2440:	fe 01       	movw	r30, r28
    2442:	ed 54       	subi	r30, 0x4D	; 77
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    244c:	21 96       	adiw	r28, 0x01	; 1
    244e:	c1 15       	cp	r28, r1
    2450:	22 e0       	ldi	r18, 0x02	; 2
    2452:	d2 07       	cpc	r29, r18
    2454:	a9 f7       	brne	.-22     	; 0x2440 <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SPI_transmit(0xff);
    245c:	8f ef       	ldi	r24, 0xFF	; 255
    245e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>

response = SPI_receive();
    2462:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2466:	98 2f       	mov	r25, r24
    2468:	9f 71       	andi	r25, 0x1F	; 31
    246a:	95 30       	cpi	r25, 0x05	; 5
    246c:	11 f0       	breq	.+4      	; 0x2472 <SD_writeSingleBlock+0x50>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    246e:	c4 9a       	sbi	0x18, 4	; 24
  return response;
    2470:	1d c0       	rjmp	.+58     	; 0x24ac <SD_writeSingleBlock+0x8a>
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2472:	c0 e0       	ldi	r28, 0x00	; 0
    2474:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2476:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
    247a:	81 11       	cpse	r24, r1
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <SD_writeSingleBlock+0x62>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    247e:	21 96       	adiw	r28, 0x01	; 1
    2480:	d1 f7       	brne	.-12     	; 0x2476 <SD_writeSingleBlock+0x54>
    2482:	06 c0       	rjmp	.+12     	; 0x2490 <SD_writeSingleBlock+0x6e>

SD_CS_DEASSERT;
    2484:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2486:	8f ef       	ldi	r24, 0xFF	; 255
    2488:	0e 94 5d 12 	call	0x24ba	; 0x24ba <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    248c:	c4 98       	cbi	0x18, 4	; 24

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    248e:	08 c0       	rjmp	.+16     	; 0x24a0 <SD_writeSingleBlock+0x7e>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2490:	c4 9a       	sbi	0x18, 4	; 24
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	0b c0       	rjmp	.+22     	; 0x24ac <SD_writeSingleBlock+0x8a>
    2496:	ce 01       	movw	r24, r28
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	21 96       	adiw	r28, 0x01	; 1
    249c:	c9 f3       	breq	.-14     	; 0x2490 <SD_writeSingleBlock+0x6e>
    249e:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    24a0:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_receive>
    24a4:	88 23       	and	r24, r24
    24a6:	b9 f3       	breq	.-18     	; 0x2496 <SD_writeSingleBlock+0x74>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    24a8:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    24aa:	80 e0       	ldi	r24, 0x00	; 0
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    24b2:	82 e5       	ldi	r24, 0x52	; 82
    24b4:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    24b6:	1e b8       	out	0x0e, r1	; 14
    24b8:	08 95       	ret

000024ba <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    24ba:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    24bc:	77 9b       	sbis	0x0e, 7	; 14
    24be:	fe cf       	rjmp	.-4      	; 0x24bc <SPI_transmit+0x2>
data = SPDR;
    24c0:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    24c2:	08 95       	ret

000024c4 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    24c8:	77 9b       	sbis	0x0e, 7	; 14
    24ca:	fe cf       	rjmp	.-4      	; 0x24c8 <SPI_receive+0x4>
data = SPDR;
    24cc:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    24ce:	08 95       	ret

000024d0 <main>:

}

//*************************** MAIN *******************************//
int main(void)
{
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	2e 97       	sbiw	r28, 0x0e	; 14
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	2f ef       	ldi	r18, 0xFF	; 255
    24e6:	30 e7       	ldi	r19, 0x70	; 112
    24e8:	42 e0       	ldi	r20, 0x02	; 2
    24ea:	21 50       	subi	r18, 0x01	; 1
    24ec:	30 40       	sbci	r19, 0x00	; 0
    24ee:	40 40       	sbci	r20, 0x00	; 0
    24f0:	e1 f7       	brne	.-8      	; 0x24ea <main+0x1a>
    24f2:	00 c0       	rjmp	.+0      	; 0x24f4 <main+0x24>
    24f4:	00 00       	nop
  unsigned char fileName[13];
  unsigned int delay, k;

  _delay_ms(100);  //delay for VCC stabilization

  init_devices();
    24f6:	0e 94 bd 02 	call	0x57a	; 0x57a <init_devices>

  //GREEN_LED_ON;  //turn on green LED to indicate power on
  RED_LED_OFF; 	 //keep red LED off for now
    24fa:	ae 98       	cbi	0x15, 6	; 21

  transmitString_F (PSTR("\n\r\n\r****************************************************"));
    24fc:	87 ed       	ldi	r24, 0xD7	; 215
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  transmitString_F (PSTR("\n\r         microSD Datalogger - by CC Dharmani "));
    2504:	87 ea       	ldi	r24, 0xA7	; 167
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  transmitString_F (PSTR("\n\r****************************************************\n\r"));
    250c:	8e e6       	ldi	r24, 0x6E	; 110
    250e:	92 e0       	ldi	r25, 0x02	; 2
    2510:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>

  cardType = 0;
    2514:	10 92 31 03 	sts	0x0331, r1
    2518:	1a e0       	ldi	r17, 0x0A	; 10

  for (i=0; i<10; i++)
  {
  	error = SD_init();
    251a:	0e 94 29 11 	call	0x2252	; 0x2252 <SD_init>
  	if(!error) break;
    251e:	88 23       	and	r24, r24
    2520:	79 f0       	breq	.+30     	; 0x2540 <main+0x70>
    2522:	11 50       	subi	r17, 0x01	; 1
  transmitString_F (PSTR("\n\r         microSD Datalogger - by CC Dharmani "));
  transmitString_F (PSTR("\n\r****************************************************\n\r"));

  cardType = 0;

  for (i=0; i<10; i++)
    2524:	d1 f7       	brne	.-12     	; 0x251a <main+0x4a>
  	if(!error) break;
  }

  if(error)
  {
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	19 f4       	brne	.+6      	; 0x2530 <main+0x60>
    252a:	87 e5       	ldi	r24, 0x57	; 87
    252c:	92 e0       	ldi	r25, 0x02	; 2
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <main+0x68>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    2530:	82 30       	cpi	r24, 0x02	; 2
    2532:	21 f4       	brne	.+8      	; 0x253c <main+0x6c>
    2534:	8a e3       	ldi	r24, 0x3A	; 58
    2536:	92 e0       	ldi	r25, 0x02	; 2
    2538:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  
  	blinkRedLED();
    253c:	0e 94 cc 02 	call	0x598	; 0x598 <blinkRedLED>
  }

  switch (cardType)
    2540:	80 91 31 03 	lds	r24, 0x0331
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	39 f0       	breq	.+14     	; 0x2556 <main+0x86>
    2548:	83 30       	cpi	r24, 0x03	; 3
    254a:	41 f0       	breq	.+16     	; 0x255c <main+0x8c>
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	49 f4       	brne	.+18     	; 0x2562 <main+0x92>
  {
  	case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    2550:	8f e0       	ldi	r24, 0x0F	; 15
    2552:	92 e0       	ldi	r25, 0x02	; 2
    2554:	08 c0       	rjmp	.+16     	; 0x2566 <main+0x96>
  		   break;
  	case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    2556:	82 ef       	ldi	r24, 0xF2	; 242
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <main+0x96>
  		   break;
  	case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    255c:	87 ec       	ldi	r24, 0xC7	; 199
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <main+0x96>
  		   break;
  	default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    2562:	8d ea       	ldi	r24, 0xAD	; 173
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  		   break; 
  }

  error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    256a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <getBootSectorData>
  if(error) 
    256e:	88 23       	and	r24, r24
    2570:	19 f0       	breq	.+6      	; 0x2578 <main+0xa8>
  {
   	transmitString_F (PSTR("\n\rFAT32 not found!"));  //FAT32 incompatible drive
    2572:	8a e9       	ldi	r24, 0x9A	; 154
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	e0 cf       	rjmp	.-64     	; 0x2538 <main+0x68>
   	blinkRedLED();
  }

  SPI_HIGH_SPEED;	//SCK - 4 MHz
    2578:	80 e5       	ldi	r24, 0x50	; 80
    257a:	8d b9       	out	0x0d, r24	; 13
    257c:	70 9a       	sbi	0x0e, 0	; 14
    257e:	8f ec       	ldi	r24, 0xCF	; 207
    2580:	97 e0       	ldi	r25, 0x07	; 7
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <main+0xb2>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <main+0xb8>
    2588:	00 00       	nop

 //For displaying menu on hyper terminal, the key (psh-button) must be kept pressed while 
 //powering ON or while reset. If key is not kept pressed, the program will not display menu and it will 
 //simply wait for start recording command (i.e. pressing of key afterwards)

  if(KEY_PRESSED)
    258a:	9f 99       	sbic	0x13, 7	; 19
    258c:	b1 c0       	rjmp	.+354    	; 0x26f0 <main+0x220>
    258e:	8e 01       	movw	r16, r28
    2590:	02 5f       	subi	r16, 0xF2	; 242
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
  while(1)
  {
  	transmitString_F(PSTR("\n\r\n\r> 0 : Exit the Menu"));
    2594:	82 e8       	ldi	r24, 0x82	; 130
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 1 : Display current Date/Time"));
    259c:	80 e6       	ldi	r24, 0x60	; 96
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 2 : Update Date"));
    25a4:	8c e4       	ldi	r24, 0x4C	; 76
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 3 : Update Time"));
    25ac:	88 e3       	ldi	r24, 0x38	; 56
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 4 : Get file list"));
    25b4:	82 e2       	ldi	r24, 0x22	; 34
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 5 : Read File"));
    25bc:	80 e1       	ldi	r24, 0x10	; 16
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 6 : Delete File"));
    25c4:	8c ef       	ldi	r24, 0xFC	; 252
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>

  	transmitString_F(PSTR("\n\r\n\r> Enter the option:"));
    25cc:	84 ee       	ldi	r24, 0xE4	; 228
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
  	option = receiveByte();
    25d4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    25d8:	e8 2e       	mov	r14, r24
  	transmitByte(option);
    25da:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>


	switch (option)
    25de:	4e 2d       	mov	r20, r14
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	fa 01       	movw	r30, r20
    25e4:	f0 97       	sbiw	r30, 0x30	; 48
    25e6:	e7 30       	cpi	r30, 0x07	; 7
    25e8:	f1 05       	cpc	r31, r1
    25ea:	08 f0       	brcs	.+2      	; 0x25ee <main+0x11e>
    25ec:	71 c0       	rjmp	.+226    	; 0x26d0 <main+0x200>
    25ee:	e6 5d       	subi	r30, 0xD6	; 214
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__tablejump2__>
	{
		case '0':transmitString_F(PSTR("\n\rNormal operation started.."));
    25f6:	87 ec       	ldi	r24, 0xC7	; 199
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
		  		 goto STOP;
    25fe:	37 c1       	rjmp	.+622    	; 0x286e <main+0x39e>

		case '1':RTC_displayDate();
    2600:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <RTC_displayDate>
		  		 RTC_displayTime();
    2604:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <RTC_displayTime>
		  		 break;
    2608:	c5 cf       	rjmp	.-118    	; 0x2594 <main+0xc4>

		case '2':RTC_updateDate();
    260a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <RTC_updateDate>
		  		 break;
    260e:	c2 cf       	rjmp	.-124    	; 0x2594 <main+0xc4>

		case '3':RTC_updateTime();
    2610:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <RTC_updateTime>
	      		 break;
    2614:	bf cf       	rjmp	.-130    	; 0x2594 <main+0xc4>

		case '4':TX_NEWLINE;
    2616:	8d e0       	ldi	r24, 0x0D	; 13
    2618:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    261c:	8a e0       	ldi	r24, 0x0A	; 10
    261e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
  		  		 findFiles(GET_LIST,0);
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 9e 07 	call	0xf3c	; 0xf3c <findFiles>
          		 break;
    262c:	b3 cf       	rjmp	.-154    	; 0x2594 <main+0xc4>

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
    262e:	83 eb       	ldi	r24, 0xB3	; 179
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
    2636:	fe 01       	movw	r30, r28
    2638:	31 96       	adiw	r30, 0x01	; 1
          		 for(i=0; i<13; i++)
				 fileName[i] = 0x00;   //clearing any previously stored file name
    263a:	11 92       	st	Z+, r1
  		  		 findFiles(GET_LIST,0);
          		 break;

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
          		 for(i=0; i<13; i++)
    263c:	e0 17       	cp	r30, r16
    263e:	f1 07       	cpc	r31, r17
    2640:	e1 f7       	brne	.-8      	; 0x263a <main+0x16a>
    2642:	f1 2c       	mov	r15, r1
				 fileName[i] = 0x00;   //clearing any previously stored file name
          		 i=0;
          		 while(1)
          		 {
            		data = receiveByte();
    2644:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <receiveByte>
    2648:	98 2f       	mov	r25, r24
            		if(data == 0x0d) break;  //'ENTER' key pressed
    264a:	8d 30       	cpi	r24, 0x0D	; 13
    264c:	41 f1       	breq	.+80     	; 0x269e <main+0x1ce>
					if(data == 0x08)	//'Back Space' key pressed
    264e:	88 30       	cpi	r24, 0x08	; 8
    2650:	69 f4       	brne	.+26     	; 0x266c <main+0x19c>
	 				{ 
	   					if(i != 0)
    2652:	ff 20       	and	r15, r15
    2654:	b9 f3       	breq	.-18     	; 0x2644 <main+0x174>
	   					{ 
	     					transmitByte(data);
    2656:	88 e0       	ldi	r24, 0x08	; 8
    2658:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
							transmitByte(' '); 
    265c:	80 e2       	ldi	r24, 0x20	; 32
    265e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	     					transmitByte(data); 
    2662:	88 e0       	ldi	r24, 0x08	; 8
    2664:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
	     					i--; 
    2668:	fa 94       	dec	r15
    266a:	ec cf       	rjmp	.-40     	; 0x2644 <main+0x174>
	   					} 
	   					continue;     
	 				}
					if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    266c:	80 ee       	ldi	r24, 0xE0	; 224
    266e:	89 0f       	add	r24, r25
    2670:	8f 35       	cpi	r24, 0x5F	; 95
    2672:	40 f7       	brcc	.-48     	; 0x2644 <main+0x174>
					transmitByte(data);
    2674:	89 2f       	mov	r24, r25
    2676:	9e 87       	std	Y+14, r25	; 0x0e
    2678:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
            		fileName[i++] = data;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	8f 0d       	add	r24, r15
    2680:	e1 e0       	ldi	r30, 0x01	; 1
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	ec 0f       	add	r30, r28
    2686:	fd 1f       	adc	r31, r29
    2688:	ef 0d       	add	r30, r15
    268a:	f1 1d       	adc	r31, r1
    268c:	9e 85       	ldd	r25, Y+14	; 0x0e
    268e:	90 83       	st	Z, r25
            		if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    2690:	8d 30       	cpi	r24, 0x0D	; 13
    2692:	11 f0       	breq	.+4      	; 0x2698 <main+0x1c8>
    2694:	f8 2e       	mov	r15, r24
    2696:	d6 cf       	rjmp	.-84     	; 0x2644 <main+0x174>
    2698:	8d e9       	ldi	r24, 0x9D	; 157
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	1b c0       	rjmp	.+54     	; 0x26d4 <main+0x204>
          		}
          		if(i>12) break;
    269e:	9c e0       	ldi	r25, 0x0C	; 12
    26a0:	9f 15       	cp	r25, r15
    26a2:	08 f4       	brcc	.+2      	; 0x26a6 <main+0x1d6>
    26a4:	77 cf       	rjmp	.-274    	; 0x2594 <main+0xc4>
       
	      		TX_NEWLINE;
    26a6:	8d e0       	ldi	r24, 0x0D	; 13
    26a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
    26ac:	8a e0       	ldi	r24, 0x0A	; 10
    26ae:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <transmitByte>
		  		if(option == '5') 
    26b2:	e5 e3       	ldi	r30, 0x35	; 53
    26b4:	ee 12       	cpse	r14, r30
    26b6:	dd c0       	rjmp	.+442    	; 0x2872 <main+0x3a2>
				{ 
					error = readFile( READ, fileName);
    26b8:	be 01       	movw	r22, r28
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0e 94 55 09 	call	0x12aa	; 0x12aa <readFile>
					if(error == 1) transmitString_F(PSTR("File does not exist.."));
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	09 f0       	breq	.+2      	; 0x26ca <main+0x1fa>
    26c8:	65 cf       	rjmp	.-310    	; 0x2594 <main+0xc4>
    26ca:	87 e8       	ldi	r24, 0x87	; 135
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <main+0x204>
				}
		  		if(option == '6') deleteFile(fileName);
          		break;

    	default:transmitString_F(PSTR("\n\r\n\r Invalid option!\n\r"));
    26d0:	80 e7       	ldi	r24, 0x70	; 112
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <transmitString_F>
    26d8:	5d cf       	rjmp	.-326    	; 0x2594 <main+0xc4>
    26da:	ff ef       	ldi	r31, 0xFF	; 255
    26dc:	29 ef       	ldi	r18, 0xF9	; 249
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	f1 50       	subi	r31, 0x01	; 1
    26e2:	20 40       	sbci	r18, 0x00	; 0
    26e4:	30 40       	sbci	r19, 0x00	; 0
    26e6:	e1 f7       	brne	.-8      	; 0x26e0 <main+0x210>
    26e8:	00 c0       	rjmp	.+0      	; 0x26ea <main+0x21a>
    26ea:	00 00       	nop
  while(1)
  { 
  	while(!KEY_PRESSED); 	//wait here for key-press, recording starts when key is pressed
  	_delay_ms(40);	   		//key debounce delay

  	if(!KEY_PRESSED) continue;
    26ec:	9f 9b       	sbis	0x13, 7	; 19
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <main+0x226>
  }

  
  while(1)
  { 
  	while(!KEY_PRESSED); 	//wait here for key-press, recording starts when key is pressed
    26f0:	9f 99       	sbic	0x13, 7	; 19
    26f2:	fe cf       	rjmp	.-4      	; 0x26f0 <main+0x220>
    26f4:	f2 cf       	rjmp	.-28     	; 0x26da <main+0x20a>
  	_delay_ms(40);	   		//key debounce delay

  	if(!KEY_PRESSED) continue;

  	while(KEY_PRESSED);  	//wait here for key-depress
    26f6:	9f 9b       	sbis	0x13, 7	; 19
    26f8:	fe cf       	rjmp	.-4      	; 0x26f6 <main+0x226>
    26fa:	4f ef       	ldi	r20, 0xFF	; 255
    26fc:	89 ef       	ldi	r24, 0xF9	; 249
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	41 50       	subi	r20, 0x01	; 1
    2702:	80 40       	sbci	r24, 0x00	; 0
    2704:	90 40       	sbci	r25, 0x00	; 0
    2706:	e1 f7       	brne	.-8      	; 0x2700 <main+0x230>
    2708:	00 c0       	rjmp	.+0      	; 0x270a <main+0x23a>
    270a:	00 00       	nop
  	_delay_ms(40);	   		//key debounce delay

  
	RED_LED_ON;  //turn on red LED to indicate that recording has started
    270c:	ae 9a       	sbi	0x15, 6	; 21
    270e:	7e 01       	movw	r14, r28
    2710:	e9 e0       	ldi	r30, 0x09	; 9
    2712:	ee 0e       	add	r14, r30
    2714:	f1 1c       	adc	r15, r1

	while(1)
	{
		error = RTC_getDate();
    2716:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <RTC_getDate>
		if(error) blinkRedLED();
    271a:	81 11       	cpse	r24, r1
    271c:	0f cf       	rjmp	.-482    	; 0x253c <main+0x6c>
    271e:	fe 01       	movw	r30, r28
    2720:	31 96       	adiw	r30, 0x01	; 1

		j=0;
		for(i=0; i<8; i++)
		{
			fileName[i] = date[j++];
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	98 0f       	add	r25, r24
    2726:	a8 2f       	mov	r26, r24
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ad 5c       	subi	r26, 0xCD	; 205
    272c:	bc 4f       	sbci	r27, 0xFC	; 252
    272e:	2c 91       	ld	r18, X
    2730:	21 93       	st	Z+, r18
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
    2732:	92 30       	cpi	r25, 0x02	; 2
    2734:	11 f0       	breq	.+4      	; 0x273a <main+0x26a>
    2736:	95 30       	cpi	r25, 0x05	; 5
    2738:	11 f4       	brne	.+4      	; 0x273e <main+0x26e>
    273a:	92 e0       	ldi	r25, 0x02	; 2
    273c:	98 0f       	add	r25, r24
	{
		error = RTC_getDate();
		if(error) blinkRedLED();

		j=0;
		for(i=0; i<8; i++)
    273e:	ee 15       	cp	r30, r14
    2740:	ff 05       	cpc	r31, r15
    2742:	11 f0       	breq	.+4      	; 0x2748 <main+0x278>
    2744:	89 2f       	mov	r24, r25
    2746:	ed cf       	rjmp	.-38     	; 0x2722 <main+0x252>
		{
			fileName[i] = date[j++];
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
		}

		fileName[8] = '.';
    2748:	8e e2       	ldi	r24, 0x2E	; 46
    274a:	89 87       	std	Y+9, r24	; 0x09
		fileName[9] = 'C';
    274c:	83 e4       	ldi	r24, 0x43	; 67
    274e:	8a 87       	std	Y+10, r24	; 0x0a
		fileName[10] = 'S';
    2750:	83 e5       	ldi	r24, 0x53	; 83
    2752:	8b 87       	std	Y+11, r24	; 0x0b
		fileName[11] = 'V';
    2754:	86 e5       	ldi	r24, 0x56	; 86
    2756:	8c 87       	std	Y+12, r24	; 0x0c

		error = RTC_getTime();
    2758:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <RTC_getTime>
    	if(error) blinkRedLED();
    275c:	81 11       	cpse	r24, r1
    275e:	ee ce       	rjmp	.-548    	; 0x253c <main+0x6c>
    2760:	e3 e3       	ldi	r30, 0x33	; 51
    2762:	f3 e0       	ldi	r31, 0x03	; 3
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
		//From here onwards, gather data by appending strings in dataString
		//dataString is declared in FAT32.h
		//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h
		//Also, end the data string with '\r' & '\n' characters to maintain CSV format

		for(i=0; i<10; i++) dataString[i] = date[i];
    2768:	21 91       	ld	r18, Z+
    276a:	dc 01       	movw	r26, r24
    276c:	a3 53       	subi	r26, 0x33	; 51
    276e:	bd 4f       	sbci	r27, 0xFD	; 253
    2770:	2c 93       	st	X, r18
    2772:	01 96       	adiw	r24, 0x01	; 1
    2774:	8a 30       	cpi	r24, 0x0A	; 10
    2776:	91 05       	cpc	r25, r1
    2778:	b9 f7       	brne	.-18     	; 0x2768 <main+0x298>
		dataString[i++] = ',';
    277a:	8c e2       	ldi	r24, 0x2C	; 44
    277c:	80 93 d7 02 	sts	0x02D7, r24
    2780:	e0 ec       	ldi	r30, 0xC0	; 192
    2782:	f2 e0       	ldi	r31, 0x02	; 2
    2784:	8b e0       	ldi	r24, 0x0B	; 11
    2786:	90 e0       	ldi	r25, 0x00	; 0

		for(j=0;j<8; j++)  dataString[i++] = time[j];
    2788:	21 91       	ld	r18, Z+
    278a:	dc 01       	movw	r26, r24
    278c:	a3 53       	subi	r26, 0x33	; 51
    278e:	bd 4f       	sbci	r27, 0xFD	; 253
    2790:	2c 93       	st	X, r18
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	83 31       	cpi	r24, 0x13	; 19
    2796:	91 05       	cpc	r25, r1
    2798:	b9 f7       	brne	.-18     	; 0x2788 <main+0x2b8>
		dataString[i++] = ',';
    279a:	8c e2       	ldi	r24, 0x2C	; 44
    279c:	80 93 e0 02 	sts	0x02E0, r24
		
		readTemperature(0); //read temperature from adc channel-0
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <readTemperature>
    27a6:	eb e9       	ldi	r30, 0x9B	; 155
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	84 e1       	ldi	r24, 0x14	; 20
    27ac:	90 e0       	ldi	r25, 0x00	; 0
		for(j=0;j<7; j++)  dataString[i++] = temperature[j];
    27ae:	21 91       	ld	r18, Z+
    27b0:	dc 01       	movw	r26, r24
    27b2:	a3 53       	subi	r26, 0x33	; 51
    27b4:	bd 4f       	sbci	r27, 0xFD	; 253
    27b6:	2c 93       	st	X, r18
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	8b 31       	cpi	r24, 0x1B	; 27
    27bc:	91 05       	cpc	r25, r1
    27be:	b9 f7       	brne	.-18     	; 0x27ae <main+0x2de>
    27c0:	0b e1       	ldi	r16, 0x1B	; 27
    27c2:	10 e0       	ldi	r17, 0x00	; 0
    27c4:	91 e0       	ldi	r25, 0x01	; 1
		

		for(channel=1; channel<8; channel++)  //read voltages from ADC channel 1 to 7
		{
			dataString[i++] = ',';
    27c6:	8c e2       	ldi	r24, 0x2C	; 44
    27c8:	c8 2e       	mov	r12, r24
    27ca:	dd 24       	eor	r13, r13
    27cc:	d3 94       	inc	r13
    27ce:	d0 0e       	add	r13, r16
    27d0:	d8 01       	movw	r26, r16
    27d2:	a3 53       	subi	r26, 0x33	; 51
    27d4:	bd 4f       	sbci	r27, 0xFD	; 253
    27d6:	cc 92       	st	X, r12
			readVoltage(channel); 
    27d8:	89 2f       	mov	r24, r25
    27da:	9e 87       	std	Y+14, r25	; 0x0e
    27dc:	0e 94 b9 03 	call	0x772	; 0x772 <readVoltage>
    27e0:	a8 ea       	ldi	r26, 0xA8	; 168
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	28 e0       	ldi	r18, 0x08	; 8
    27e6:	20 0f       	add	r18, r16
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	8d 0d       	add	r24, r13
    27ee:	ed 2d       	mov	r30, r13
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	3d 91       	ld	r19, X+
    27f4:	e3 53       	subi	r30, 0x33	; 51
    27f6:	fd 4f       	sbci	r31, 0xFD	; 253
    27f8:	30 83       	st	Z, r19
    27fa:	82 17       	cp	r24, r18
    27fc:	11 f0       	breq	.+4      	; 0x2802 <main+0x332>
    27fe:	d8 2e       	mov	r13, r24
    2800:	f4 cf       	rjmp	.-24     	; 0x27ea <main+0x31a>
		
		readTemperature(0); //read temperature from adc channel-0
		for(j=0;j<7; j++)  dataString[i++] = temperature[j];
		

		for(channel=1; channel<8; channel++)  //read voltages from ADC channel 1 to 7
    2802:	9f 5f       	subi	r25, 0xFF	; 255
    2804:	08 5f       	subi	r16, 0xF8	; 248
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	98 30       	cpi	r25, 0x08	; 8
    280a:	f9 f6       	brne	.-66     	; 0x27ca <main+0x2fa>
			dataString[i++] = ',';
			readVoltage(channel); 
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
		}

		dataString[i++] = '\r';
    280c:	8d e0       	ldi	r24, 0x0D	; 13
    280e:	80 93 20 03 	sts	0x0320, r24
		dataString[i] = '\n';    //always end the string with these two characters,
    2812:	8a e0       	ldi	r24, 0x0A	; 10
    2814:	80 93 21 03 	sts	0x0321, r24
								 //before calling the writeFile function

		error = writeFile(fileName);
    2818:	ce 01       	movw	r24, r28
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	0e 94 30 0a 	call	0x1460	; 0x1460 <writeFile>
		if(error) blinkRedLED();
    2820:	81 11       	cpse	r24, r1
    2822:	8c ce       	rjmp	.-744    	; 0x253c <main+0x6c>
    2824:	84 e6       	ldi	r24, 0x64	; 100
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	ef e1       	ldi	r30, 0x1F	; 31
    282a:	fe e4       	ldi	r31, 0x4E	; 78
    282c:	31 97       	sbiw	r30, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <main+0x35c>
    2830:	00 c0       	rjmp	.+0      	; 0x2832 <main+0x362>
    2832:	00 00       	nop
		delay = INTERVAL / 10;
		for(k=0; k<delay; k++) 
		{
		 	_delay_ms(10);  //10ms delay in each loop
			
			if(KEY_PRESSED) 	//check for key-press
    2834:	9f 99       	sbic	0x13, 7	; 19
    2836:	17 c0       	rjmp	.+46     	; 0x2866 <main+0x396>
    2838:	ff ef       	ldi	r31, 0xFF	; 255
    283a:	29 ef       	ldi	r18, 0xF9	; 249
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	f1 50       	subi	r31, 0x01	; 1
    2840:	20 40       	sbci	r18, 0x00	; 0
    2842:	30 40       	sbci	r19, 0x00	; 0
    2844:	e1 f7       	brne	.-8      	; 0x283e <main+0x36e>
    2846:	00 c0       	rjmp	.+0      	; 0x2848 <main+0x378>
    2848:	00 00       	nop
  			{
				_delay_ms(40);	   		//key debounce delay
  				if(KEY_PRESSED) 
    284a:	9f 99       	sbic	0x13, 7	; 19
    284c:	0c c0       	rjmp	.+24     	; 0x2866 <main+0x396>
  				{
					while(KEY_PRESSED);  	//wait here for key-depress
    284e:	9f 9b       	sbis	0x13, 7	; 19
    2850:	fe cf       	rjmp	.-4      	; 0x284e <main+0x37e>
    2852:	4f ef       	ldi	r20, 0xFF	; 255
    2854:	89 ef       	ldi	r24, 0xF9	; 249
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	41 50       	subi	r20, 0x01	; 1
    285a:	80 40       	sbci	r24, 0x00	; 0
    285c:	90 40       	sbci	r25, 0x00	; 0
    285e:	e1 f7       	brne	.-8      	; 0x2858 <main+0x388>
    2860:	00 c0       	rjmp	.+0      	; 0x2862 <main+0x392>
    2862:	00 00       	nop
    2864:	04 c0       	rjmp	.+8      	; 0x286e <main+0x39e>
    2866:	01 97       	sbiw	r24, 0x01	; 1

		error = writeFile(fileName);
		if(error) blinkRedLED();

		delay = INTERVAL / 10;
		for(k=0; k<delay; k++) 
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	f1 f6       	brne	.-68     	; 0x2828 <main+0x358>
    286c:	54 cf       	rjmp	.-344    	; 0x2716 <main+0x246>
		}

	}//end of while(1)

	STOP: 
	RED_LED_OFF;  //recording stopped
    286e:	ae 98       	cbi	0x15, 6	; 21
    2870:	3f cf       	rjmp	.-386    	; 0x26f0 <main+0x220>
		  		if(option == '5') 
				{ 
					error = readFile( READ, fileName);
					if(error == 1) transmitString_F(PSTR("File does not exist.."));
				}
		  		if(option == '6') deleteFile(fileName);
    2872:	ce 01       	movw	r24, r28
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	0e 94 20 0a 	call	0x1440	; 0x1440 <deleteFile>
    287a:	8c ce       	rjmp	.-744    	; 0x2594 <main+0xc4>

0000287c <__fixunssfsi>:
    287c:	70 d0       	rcall	.+224    	; 0x295e <__fp_splitA>
    287e:	88 f0       	brcs	.+34     	; 0x28a2 <__fixunssfsi+0x26>
    2880:	9f 57       	subi	r25, 0x7F	; 127
    2882:	90 f0       	brcs	.+36     	; 0x28a8 <__fixunssfsi+0x2c>
    2884:	b9 2f       	mov	r27, r25
    2886:	99 27       	eor	r25, r25
    2888:	b7 51       	subi	r27, 0x17	; 23
    288a:	a0 f0       	brcs	.+40     	; 0x28b4 <__fixunssfsi+0x38>
    288c:	d1 f0       	breq	.+52     	; 0x28c2 <__fixunssfsi+0x46>
    288e:	66 0f       	add	r22, r22
    2890:	77 1f       	adc	r23, r23
    2892:	88 1f       	adc	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	1a f0       	brmi	.+6      	; 0x289e <__fixunssfsi+0x22>
    2898:	ba 95       	dec	r27
    289a:	c9 f7       	brne	.-14     	; 0x288e <__fixunssfsi+0x12>
    289c:	12 c0       	rjmp	.+36     	; 0x28c2 <__fixunssfsi+0x46>
    289e:	b1 30       	cpi	r27, 0x01	; 1
    28a0:	81 f0       	breq	.+32     	; 0x28c2 <__fixunssfsi+0x46>
    28a2:	77 d0       	rcall	.+238    	; 0x2992 <__fp_zero>
    28a4:	b1 e0       	ldi	r27, 0x01	; 1
    28a6:	08 95       	ret
    28a8:	74 c0       	rjmp	.+232    	; 0x2992 <__fp_zero>
    28aa:	67 2f       	mov	r22, r23
    28ac:	78 2f       	mov	r23, r24
    28ae:	88 27       	eor	r24, r24
    28b0:	b8 5f       	subi	r27, 0xF8	; 248
    28b2:	39 f0       	breq	.+14     	; 0x28c2 <__fixunssfsi+0x46>
    28b4:	b9 3f       	cpi	r27, 0xF9	; 249
    28b6:	cc f3       	brlt	.-14     	; 0x28aa <__fixunssfsi+0x2e>
    28b8:	86 95       	lsr	r24
    28ba:	77 95       	ror	r23
    28bc:	67 95       	ror	r22
    28be:	b3 95       	inc	r27
    28c0:	d9 f7       	brne	.-10     	; 0x28b8 <__fixunssfsi+0x3c>
    28c2:	3e f4       	brtc	.+14     	; 0x28d2 <__fixunssfsi+0x56>
    28c4:	90 95       	com	r25
    28c6:	80 95       	com	r24
    28c8:	70 95       	com	r23
    28ca:	61 95       	neg	r22
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	8f 4f       	sbci	r24, 0xFF	; 255
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	08 95       	ret

000028d4 <__floatunsisf>:
    28d4:	e8 94       	clt
    28d6:	09 c0       	rjmp	.+18     	; 0x28ea <__floatsisf+0x12>

000028d8 <__floatsisf>:
    28d8:	97 fb       	bst	r25, 7
    28da:	3e f4       	brtc	.+14     	; 0x28ea <__floatsisf+0x12>
    28dc:	90 95       	com	r25
    28de:	80 95       	com	r24
    28e0:	70 95       	com	r23
    28e2:	61 95       	neg	r22
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	8f 4f       	sbci	r24, 0xFF	; 255
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	99 23       	and	r25, r25
    28ec:	a9 f0       	breq	.+42     	; 0x2918 <__floatsisf+0x40>
    28ee:	f9 2f       	mov	r31, r25
    28f0:	96 e9       	ldi	r25, 0x96	; 150
    28f2:	bb 27       	eor	r27, r27
    28f4:	93 95       	inc	r25
    28f6:	f6 95       	lsr	r31
    28f8:	87 95       	ror	r24
    28fa:	77 95       	ror	r23
    28fc:	67 95       	ror	r22
    28fe:	b7 95       	ror	r27
    2900:	f1 11       	cpse	r31, r1
    2902:	f8 cf       	rjmp	.-16     	; 0x28f4 <__floatsisf+0x1c>
    2904:	fa f4       	brpl	.+62     	; 0x2944 <__floatsisf+0x6c>
    2906:	bb 0f       	add	r27, r27
    2908:	11 f4       	brne	.+4      	; 0x290e <__floatsisf+0x36>
    290a:	60 ff       	sbrs	r22, 0
    290c:	1b c0       	rjmp	.+54     	; 0x2944 <__floatsisf+0x6c>
    290e:	6f 5f       	subi	r22, 0xFF	; 255
    2910:	7f 4f       	sbci	r23, 0xFF	; 255
    2912:	8f 4f       	sbci	r24, 0xFF	; 255
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	16 c0       	rjmp	.+44     	; 0x2944 <__floatsisf+0x6c>
    2918:	88 23       	and	r24, r24
    291a:	11 f0       	breq	.+4      	; 0x2920 <__floatsisf+0x48>
    291c:	96 e9       	ldi	r25, 0x96	; 150
    291e:	11 c0       	rjmp	.+34     	; 0x2942 <__floatsisf+0x6a>
    2920:	77 23       	and	r23, r23
    2922:	21 f0       	breq	.+8      	; 0x292c <__floatsisf+0x54>
    2924:	9e e8       	ldi	r25, 0x8E	; 142
    2926:	87 2f       	mov	r24, r23
    2928:	76 2f       	mov	r23, r22
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <__floatsisf+0x5e>
    292c:	66 23       	and	r22, r22
    292e:	71 f0       	breq	.+28     	; 0x294c <__floatsisf+0x74>
    2930:	96 e8       	ldi	r25, 0x86	; 134
    2932:	86 2f       	mov	r24, r22
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	2a f0       	brmi	.+10     	; 0x2944 <__floatsisf+0x6c>
    293a:	9a 95       	dec	r25
    293c:	66 0f       	add	r22, r22
    293e:	77 1f       	adc	r23, r23
    2940:	88 1f       	adc	r24, r24
    2942:	da f7       	brpl	.-10     	; 0x293a <__floatsisf+0x62>
    2944:	88 0f       	add	r24, r24
    2946:	96 95       	lsr	r25
    2948:	87 95       	ror	r24
    294a:	97 f9       	bld	r25, 7
    294c:	08 95       	ret

0000294e <__fp_split3>:
    294e:	57 fd       	sbrc	r21, 7
    2950:	90 58       	subi	r25, 0x80	; 128
    2952:	44 0f       	add	r20, r20
    2954:	55 1f       	adc	r21, r21
    2956:	59 f0       	breq	.+22     	; 0x296e <__fp_splitA+0x10>
    2958:	5f 3f       	cpi	r21, 0xFF	; 255
    295a:	71 f0       	breq	.+28     	; 0x2978 <__fp_splitA+0x1a>
    295c:	47 95       	ror	r20

0000295e <__fp_splitA>:
    295e:	88 0f       	add	r24, r24
    2960:	97 fb       	bst	r25, 7
    2962:	99 1f       	adc	r25, r25
    2964:	61 f0       	breq	.+24     	; 0x297e <__fp_splitA+0x20>
    2966:	9f 3f       	cpi	r25, 0xFF	; 255
    2968:	79 f0       	breq	.+30     	; 0x2988 <__fp_splitA+0x2a>
    296a:	87 95       	ror	r24
    296c:	08 95       	ret
    296e:	12 16       	cp	r1, r18
    2970:	13 06       	cpc	r1, r19
    2972:	14 06       	cpc	r1, r20
    2974:	55 1f       	adc	r21, r21
    2976:	f2 cf       	rjmp	.-28     	; 0x295c <__fp_split3+0xe>
    2978:	46 95       	lsr	r20
    297a:	f1 df       	rcall	.-30     	; 0x295e <__fp_splitA>
    297c:	08 c0       	rjmp	.+16     	; 0x298e <__fp_splitA+0x30>
    297e:	16 16       	cp	r1, r22
    2980:	17 06       	cpc	r1, r23
    2982:	18 06       	cpc	r1, r24
    2984:	99 1f       	adc	r25, r25
    2986:	f1 cf       	rjmp	.-30     	; 0x296a <__fp_splitA+0xc>
    2988:	86 95       	lsr	r24
    298a:	71 05       	cpc	r23, r1
    298c:	61 05       	cpc	r22, r1
    298e:	08 94       	sec
    2990:	08 95       	ret

00002992 <__fp_zero>:
    2992:	e8 94       	clt

00002994 <__fp_szero>:
    2994:	bb 27       	eor	r27, r27
    2996:	66 27       	eor	r22, r22
    2998:	77 27       	eor	r23, r23
    299a:	cb 01       	movw	r24, r22
    299c:	97 f9       	bld	r25, 7
    299e:	08 95       	ret

000029a0 <__mulsf3>:
    29a0:	0b d0       	rcall	.+22     	; 0x29b8 <__mulsf3x>
    29a2:	78 c0       	rjmp	.+240    	; 0x2a94 <__fp_round>
    29a4:	69 d0       	rcall	.+210    	; 0x2a78 <__fp_pscA>
    29a6:	28 f0       	brcs	.+10     	; 0x29b2 <__mulsf3+0x12>
    29a8:	6e d0       	rcall	.+220    	; 0x2a86 <__fp_pscB>
    29aa:	18 f0       	brcs	.+6      	; 0x29b2 <__mulsf3+0x12>
    29ac:	95 23       	and	r25, r21
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <__mulsf3+0x12>
    29b0:	5a c0       	rjmp	.+180    	; 0x2a66 <__fp_inf>
    29b2:	5f c0       	rjmp	.+190    	; 0x2a72 <__fp_nan>
    29b4:	11 24       	eor	r1, r1
    29b6:	ee cf       	rjmp	.-36     	; 0x2994 <__fp_szero>

000029b8 <__mulsf3x>:
    29b8:	ca df       	rcall	.-108    	; 0x294e <__fp_split3>
    29ba:	a0 f3       	brcs	.-24     	; 0x29a4 <__mulsf3+0x4>

000029bc <__mulsf3_pse>:
    29bc:	95 9f       	mul	r25, r21
    29be:	d1 f3       	breq	.-12     	; 0x29b4 <__mulsf3+0x14>
    29c0:	95 0f       	add	r25, r21
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	55 1f       	adc	r21, r21
    29c6:	62 9f       	mul	r22, r18
    29c8:	f0 01       	movw	r30, r0
    29ca:	72 9f       	mul	r23, r18
    29cc:	bb 27       	eor	r27, r27
    29ce:	f0 0d       	add	r31, r0
    29d0:	b1 1d       	adc	r27, r1
    29d2:	63 9f       	mul	r22, r19
    29d4:	aa 27       	eor	r26, r26
    29d6:	f0 0d       	add	r31, r0
    29d8:	b1 1d       	adc	r27, r1
    29da:	aa 1f       	adc	r26, r26
    29dc:	64 9f       	mul	r22, r20
    29de:	66 27       	eor	r22, r22
    29e0:	b0 0d       	add	r27, r0
    29e2:	a1 1d       	adc	r26, r1
    29e4:	66 1f       	adc	r22, r22
    29e6:	82 9f       	mul	r24, r18
    29e8:	22 27       	eor	r18, r18
    29ea:	b0 0d       	add	r27, r0
    29ec:	a1 1d       	adc	r26, r1
    29ee:	62 1f       	adc	r22, r18
    29f0:	73 9f       	mul	r23, r19
    29f2:	b0 0d       	add	r27, r0
    29f4:	a1 1d       	adc	r26, r1
    29f6:	62 1f       	adc	r22, r18
    29f8:	83 9f       	mul	r24, r19
    29fa:	a0 0d       	add	r26, r0
    29fc:	61 1d       	adc	r22, r1
    29fe:	22 1f       	adc	r18, r18
    2a00:	74 9f       	mul	r23, r20
    2a02:	33 27       	eor	r19, r19
    2a04:	a0 0d       	add	r26, r0
    2a06:	61 1d       	adc	r22, r1
    2a08:	23 1f       	adc	r18, r19
    2a0a:	84 9f       	mul	r24, r20
    2a0c:	60 0d       	add	r22, r0
    2a0e:	21 1d       	adc	r18, r1
    2a10:	82 2f       	mov	r24, r18
    2a12:	76 2f       	mov	r23, r22
    2a14:	6a 2f       	mov	r22, r26
    2a16:	11 24       	eor	r1, r1
    2a18:	9f 57       	subi	r25, 0x7F	; 127
    2a1a:	50 40       	sbci	r21, 0x00	; 0
    2a1c:	8a f0       	brmi	.+34     	; 0x2a40 <__mulsf3_pse+0x84>
    2a1e:	e1 f0       	breq	.+56     	; 0x2a58 <__mulsf3_pse+0x9c>
    2a20:	88 23       	and	r24, r24
    2a22:	4a f0       	brmi	.+18     	; 0x2a36 <__mulsf3_pse+0x7a>
    2a24:	ee 0f       	add	r30, r30
    2a26:	ff 1f       	adc	r31, r31
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	66 1f       	adc	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	88 1f       	adc	r24, r24
    2a30:	91 50       	subi	r25, 0x01	; 1
    2a32:	50 40       	sbci	r21, 0x00	; 0
    2a34:	a9 f7       	brne	.-22     	; 0x2a20 <__mulsf3_pse+0x64>
    2a36:	9e 3f       	cpi	r25, 0xFE	; 254
    2a38:	51 05       	cpc	r21, r1
    2a3a:	70 f0       	brcs	.+28     	; 0x2a58 <__mulsf3_pse+0x9c>
    2a3c:	14 c0       	rjmp	.+40     	; 0x2a66 <__fp_inf>
    2a3e:	aa cf       	rjmp	.-172    	; 0x2994 <__fp_szero>
    2a40:	5f 3f       	cpi	r21, 0xFF	; 255
    2a42:	ec f3       	brlt	.-6      	; 0x2a3e <__mulsf3_pse+0x82>
    2a44:	98 3e       	cpi	r25, 0xE8	; 232
    2a46:	dc f3       	brlt	.-10     	; 0x2a3e <__mulsf3_pse+0x82>
    2a48:	86 95       	lsr	r24
    2a4a:	77 95       	ror	r23
    2a4c:	67 95       	ror	r22
    2a4e:	b7 95       	ror	r27
    2a50:	f7 95       	ror	r31
    2a52:	e7 95       	ror	r30
    2a54:	9f 5f       	subi	r25, 0xFF	; 255
    2a56:	c1 f7       	brne	.-16     	; 0x2a48 <__mulsf3_pse+0x8c>
    2a58:	fe 2b       	or	r31, r30
    2a5a:	88 0f       	add	r24, r24
    2a5c:	91 1d       	adc	r25, r1
    2a5e:	96 95       	lsr	r25
    2a60:	87 95       	ror	r24
    2a62:	97 f9       	bld	r25, 7
    2a64:	08 95       	ret

00002a66 <__fp_inf>:
    2a66:	97 f9       	bld	r25, 7
    2a68:	9f 67       	ori	r25, 0x7F	; 127
    2a6a:	80 e8       	ldi	r24, 0x80	; 128
    2a6c:	70 e0       	ldi	r23, 0x00	; 0
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	08 95       	ret

00002a72 <__fp_nan>:
    2a72:	9f ef       	ldi	r25, 0xFF	; 255
    2a74:	80 ec       	ldi	r24, 0xC0	; 192
    2a76:	08 95       	ret

00002a78 <__fp_pscA>:
    2a78:	00 24       	eor	r0, r0
    2a7a:	0a 94       	dec	r0
    2a7c:	16 16       	cp	r1, r22
    2a7e:	17 06       	cpc	r1, r23
    2a80:	18 06       	cpc	r1, r24
    2a82:	09 06       	cpc	r0, r25
    2a84:	08 95       	ret

00002a86 <__fp_pscB>:
    2a86:	00 24       	eor	r0, r0
    2a88:	0a 94       	dec	r0
    2a8a:	12 16       	cp	r1, r18
    2a8c:	13 06       	cpc	r1, r19
    2a8e:	14 06       	cpc	r1, r20
    2a90:	05 06       	cpc	r0, r21
    2a92:	08 95       	ret

00002a94 <__fp_round>:
    2a94:	09 2e       	mov	r0, r25
    2a96:	03 94       	inc	r0
    2a98:	00 0c       	add	r0, r0
    2a9a:	11 f4       	brne	.+4      	; 0x2aa0 <__fp_round+0xc>
    2a9c:	88 23       	and	r24, r24
    2a9e:	52 f0       	brmi	.+20     	; 0x2ab4 <__fp_round+0x20>
    2aa0:	bb 0f       	add	r27, r27
    2aa2:	40 f4       	brcc	.+16     	; 0x2ab4 <__fp_round+0x20>
    2aa4:	bf 2b       	or	r27, r31
    2aa6:	11 f4       	brne	.+4      	; 0x2aac <__fp_round+0x18>
    2aa8:	60 ff       	sbrs	r22, 0
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <__fp_round+0x20>
    2aac:	6f 5f       	subi	r22, 0xFF	; 255
    2aae:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab4:	08 95       	ret

00002ab6 <__umulhisi3>:
    2ab6:	a2 9f       	mul	r26, r18
    2ab8:	b0 01       	movw	r22, r0
    2aba:	b3 9f       	mul	r27, r19
    2abc:	c0 01       	movw	r24, r0
    2abe:	a3 9f       	mul	r26, r19
    2ac0:	70 0d       	add	r23, r0
    2ac2:	81 1d       	adc	r24, r1
    2ac4:	11 24       	eor	r1, r1
    2ac6:	91 1d       	adc	r25, r1
    2ac8:	b2 9f       	mul	r27, r18
    2aca:	70 0d       	add	r23, r0
    2acc:	81 1d       	adc	r24, r1
    2ace:	11 24       	eor	r1, r1
    2ad0:	91 1d       	adc	r25, r1
    2ad2:	08 95       	ret

00002ad4 <__muluhisi3>:
    2ad4:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__umulhisi3>
    2ad8:	a5 9f       	mul	r26, r21
    2ada:	90 0d       	add	r25, r0
    2adc:	b4 9f       	mul	r27, r20
    2ade:	90 0d       	add	r25, r0
    2ae0:	a4 9f       	mul	r26, r20
    2ae2:	80 0d       	add	r24, r0
    2ae4:	91 1d       	adc	r25, r1
    2ae6:	11 24       	eor	r1, r1
    2ae8:	08 95       	ret

00002aea <__mulsi3>:
    2aea:	db 01       	movw	r26, r22
    2aec:	8f 93       	push	r24
    2aee:	9f 93       	push	r25
    2af0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__muluhisi3>
    2af4:	bf 91       	pop	r27
    2af6:	af 91       	pop	r26
    2af8:	a2 9f       	mul	r26, r18
    2afa:	80 0d       	add	r24, r0
    2afc:	91 1d       	adc	r25, r1
    2afe:	a3 9f       	mul	r26, r19
    2b00:	90 0d       	add	r25, r0
    2b02:	b2 9f       	mul	r27, r18
    2b04:	90 0d       	add	r25, r0
    2b06:	11 24       	eor	r1, r1
    2b08:	08 95       	ret

00002b0a <__udivmodhi4>:
    2b0a:	aa 1b       	sub	r26, r26
    2b0c:	bb 1b       	sub	r27, r27
    2b0e:	51 e1       	ldi	r21, 0x11	; 17
    2b10:	07 c0       	rjmp	.+14     	; 0x2b20 <__udivmodhi4_ep>

00002b12 <__udivmodhi4_loop>:
    2b12:	aa 1f       	adc	r26, r26
    2b14:	bb 1f       	adc	r27, r27
    2b16:	a6 17       	cp	r26, r22
    2b18:	b7 07       	cpc	r27, r23
    2b1a:	10 f0       	brcs	.+4      	; 0x2b20 <__udivmodhi4_ep>
    2b1c:	a6 1b       	sub	r26, r22
    2b1e:	b7 0b       	sbc	r27, r23

00002b20 <__udivmodhi4_ep>:
    2b20:	88 1f       	adc	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	5a 95       	dec	r21
    2b26:	a9 f7       	brne	.-22     	; 0x2b12 <__udivmodhi4_loop>
    2b28:	80 95       	com	r24
    2b2a:	90 95       	com	r25
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	08 95       	ret

00002b32 <__udivmodsi4>:
    2b32:	a1 e2       	ldi	r26, 0x21	; 33
    2b34:	1a 2e       	mov	r1, r26
    2b36:	aa 1b       	sub	r26, r26
    2b38:	bb 1b       	sub	r27, r27
    2b3a:	fd 01       	movw	r30, r26
    2b3c:	0d c0       	rjmp	.+26     	; 0x2b58 <__udivmodsi4_ep>

00002b3e <__udivmodsi4_loop>:
    2b3e:	aa 1f       	adc	r26, r26
    2b40:	bb 1f       	adc	r27, r27
    2b42:	ee 1f       	adc	r30, r30
    2b44:	ff 1f       	adc	r31, r31
    2b46:	a2 17       	cp	r26, r18
    2b48:	b3 07       	cpc	r27, r19
    2b4a:	e4 07       	cpc	r30, r20
    2b4c:	f5 07       	cpc	r31, r21
    2b4e:	20 f0       	brcs	.+8      	; 0x2b58 <__udivmodsi4_ep>
    2b50:	a2 1b       	sub	r26, r18
    2b52:	b3 0b       	sbc	r27, r19
    2b54:	e4 0b       	sbc	r30, r20
    2b56:	f5 0b       	sbc	r31, r21

00002b58 <__udivmodsi4_ep>:
    2b58:	66 1f       	adc	r22, r22
    2b5a:	77 1f       	adc	r23, r23
    2b5c:	88 1f       	adc	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	1a 94       	dec	r1
    2b62:	69 f7       	brne	.-38     	; 0x2b3e <__udivmodsi4_loop>
    2b64:	60 95       	com	r22
    2b66:	70 95       	com	r23
    2b68:	80 95       	com	r24
    2b6a:	90 95       	com	r25
    2b6c:	9b 01       	movw	r18, r22
    2b6e:	ac 01       	movw	r20, r24
    2b70:	bd 01       	movw	r22, r26
    2b72:	cf 01       	movw	r24, r30
    2b74:	08 95       	ret

00002b76 <__tablejump2__>:
    2b76:	ee 0f       	add	r30, r30
    2b78:	ff 1f       	adc	r31, r31

00002b7a <__tablejump__>:
    2b7a:	05 90       	lpm	r0, Z+
    2b7c:	f4 91       	lpm	r31, Z
    2b7e:	e0 2d       	mov	r30, r0
    2b80:	09 94       	ijmp

00002b82 <_exit>:
    2b82:	f8 94       	cli

00002b84 <__stop_program>:
    2b84:	ff cf       	rjmp	.-2      	; 0x2b84 <__stop_program>
