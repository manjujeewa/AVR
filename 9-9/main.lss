
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  00000556  2**0
                  ALLOC
  3 .stab         00000b64  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000973  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003d6  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ef  00000000  00000000  00001e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000108  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000108  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c3  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000025b  00000000  00000000  00002403  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
   8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  8a:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:




void init(void){
	DDRC = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRA = 1<<2 | 1<<3 | 1<<4| 1<<5| 1<<6 | 1<<7 ; 
  96:	8c ef       	ldi	r24, 0xFC	; 252
  98:	8a bb       	out	0x1a, r24	; 26
	
	DDRD = DDRD | ~(1<<2) | 1<<4;
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8b 6f       	ori	r24, 0xFB	; 251
  9e:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 1<<3 ;
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	8b bb       	out	0x1b, r24	; 27
	
	TCCR0 = 1<<FOC0 | 1<<WGM01 | 0<<WGM00 | 0<<CS02 | 1<<CS01 | 0<<CS00 ;  //prescaler 8
  a4:	8a e8       	ldi	r24, 0x8A	; 138
  a6:	83 bf       	out	0x33, r24	; 51
	
	OCR0=249; // compare value 250 * 8 * 1/4 MHz = 250us
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= 1<<OCIE0; //enable interrupt on compare
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	89 bf       	out	0x39, r24	; 57
	
	// enableing external interrupts
	MCUCR = 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	85 bf       	out	0x35, r24	; 53
	GICR = 1<<INT0 | 1<<INT1;
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	8b bf       	out	0x3b, r24	; 59
  ba:	08 95       	ret

000000bc <__vector_10>:
	
}

ISR(TIMER0_COMP_vect){ //compare match timer0 at each 250us
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	
	if(on){
  d4:	80 91 75 00 	lds	r24, 0x0075
  d8:	88 23       	and	r24, r24
  da:	19 f1       	breq	.+70     	; 0x122 <__vector_10+0x66>

		if (--countU==0){
  dc:	80 91 61 00 	lds	r24, 0x0061
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	80 93 61 00 	sts	0x0061, r24
  e6:	81 11       	cpse	r24, r1
  e8:	1c c0       	rjmp	.+56     	; 0x122 <__vector_10+0x66>
			countU=4;
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	80 93 61 00 	sts	0x0061, r24
						
				
				if (++countMS==1000) {
  f0:	80 91 76 00 	lds	r24, 0x0076
  f4:	90 91 77 00 	lds	r25, 0x0077
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 77 00 	sts	0x0077, r25
  fe:	80 93 76 00 	sts	0x0076, r24
 102:	88 3e       	cpi	r24, 0xE8	; 232
 104:	93 40       	sbci	r25, 0x03	; 3
 106:	69 f4       	brne	.+26     	; 0x122 <__vector_10+0x66>
					countMS=0;
 108:	10 92 77 00 	sts	0x0077, r1
 10c:	10 92 76 00 	sts	0x0076, r1
					
					if(++valS==10){
 110:	80 91 78 00 	lds	r24, 0x0078
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 78 00 	sts	0x0078, r24
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	11 f4       	brne	.+4      	; 0x122 <__vector_10+0x66>
						valS=0;
 11e:	10 92 78 00 	sts	0x0078, r1
				}
			
		}
	}
		
		count=valS*1000 + countMS;
 122:	60 91 78 00 	lds	r22, 0x0078
 126:	20 91 76 00 	lds	r18, 0x0076
 12a:	30 91 77 00 	lds	r19, 0x0077
 12e:	48 ee       	ldi	r20, 0xE8	; 232
 130:	53 e0       	ldi	r21, 0x03	; 3
 132:	64 9f       	mul	r22, r20
 134:	c0 01       	movw	r24, r0
 136:	65 9f       	mul	r22, r21
 138:	90 0d       	add	r25, r0
 13a:	11 24       	eor	r1, r1
 13c:	82 0f       	add	r24, r18
 13e:	93 1f       	adc	r25, r19
 140:	90 93 7b 00 	sts	0x007B, r25
 144:	80 93 7a 00 	sts	0x007A, r24
	
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_1>:

ISR(INT0_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1

	responce_on = 0;			
 16a:	10 92 60 00 	sts	0x0060, r1
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_2>:


ISR(INT1_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
	on=0;
 184:	10 92 75 00 	sts	0x0075, r1
	responce_on = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 60 00 	sts	0x0060, r24
}
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <getDigi>:


void getDigi(unsigned int val){
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	9c 01       	movw	r18, r24

	dig[0] = val%10;	
 1a0:	ea e0       	ldi	r30, 0x0A	; 10
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	bf 01       	movw	r22, r30
 1a6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 1aa:	80 93 62 00 	sts	0x0062, r24
	dig[1] = (val%100)/10;	
 1ae:	c9 01       	movw	r24, r18
 1b0:	64 e6       	ldi	r22, 0x64	; 100
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 1b8:	eb 01       	movw	r28, r22
 1ba:	bf 01       	movw	r22, r30
 1bc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 1c0:	60 93 63 00 	sts	0x0063, r22
	dig[2] = (val/100)%10;	
 1c4:	ce 01       	movw	r24, r28
 1c6:	bf 01       	movw	r22, r30
 1c8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 1cc:	80 93 64 00 	sts	0x0064, r24
	dig[3] = val/1000;
 1d0:	c9 01       	movw	r24, r18
 1d2:	68 ee       	ldi	r22, 0xE8	; 232
 1d4:	73 e0       	ldi	r23, 0x03	; 3
 1d6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 1da:	60 93 65 00 	sts	0x0065, r22
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <displaySSD>:

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
			if(i==3) {
				PORTC=SSD[dig[i]] + 128; //Displaying Dot
			}else{
				PORTC=SSD[dig[i]];
			}
			PORTA = (1<<i+4) ;
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	70 e0       	ldi	r23, 0x00	; 0

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 1ec:	48 17       	cp	r20, r24
 1ee:	59 07       	cpc	r21, r25
 1f0:	59 f1       	breq	.+86     	; 0x248 <displaySSD+0x64>
 1f2:	24 e0       	ldi	r18, 0x04	; 4
 1f4:	30 e0       	ldi	r19, 0x00	; 0
		unsigned char i ;
	
		for(i=0;i != 4;i++){
		
			
			if(i==3) {
 1f6:	27 30       	cpi	r18, 0x07	; 7
 1f8:	41 f4       	brne	.+16     	; 0x20a <displaySSD+0x26>
				PORTC=SSD[dig[i]] + 128; //Displaying Dot
 1fa:	e0 91 65 00 	lds	r30, 0x0065
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ea 59       	subi	r30, 0x9A	; 154
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	e0 81       	ld	r30, Z
 206:	e0 58       	subi	r30, 0x80	; 128
 208:	08 c0       	rjmp	.+16     	; 0x21a <displaySSD+0x36>
 20a:	f9 01       	movw	r30, r18
 20c:	e2 5a       	subi	r30, 0xA2	; 162
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
			}else{
				PORTC=SSD[dig[i]];
 210:	e0 81       	ld	r30, Z
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ea 59       	subi	r30, 0x9A	; 154
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	e0 81       	ld	r30, Z
 21a:	e5 bb       	out	0x15, r30	; 21
			}
			PORTA = (1<<i+4) ;
 21c:	fb 01       	movw	r30, r22
 21e:	02 2e       	mov	r0, r18
 220:	01 c0       	rjmp	.+2      	; 0x224 <displaySSD+0x40>
 222:	ee 0f       	add	r30, r30
 224:	0a 94       	dec	r0
 226:	ea f7       	brpl	.-6      	; 0x222 <displaySSD+0x3e>
 228:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	ef ec       	ldi	r30, 0xCF	; 207
 22c:	f7 e0       	ldi	r31, 0x07	; 7
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <displaySSD+0x4a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <displaySSD+0x50>
 234:	00 00       	nop
			_delay_ms(1);
			PORTA=0;
 236:	1b ba       	out	0x1b, r1	; 27
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int j;
	
	for(j=0;j<n;j++){
		unsigned char i ;
	
		for(i=0;i != 4;i++){
 23c:	28 30       	cpi	r18, 0x08	; 8
 23e:	31 05       	cpc	r19, r1
 240:	d1 f6       	brne	.-76     	; 0x1f6 <displaySSD+0x12>

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 242:	4f 5f       	subi	r20, 0xFF	; 255
 244:	5f 4f       	sbci	r21, 0xFF	; 255
 246:	d2 cf       	rjmp	.-92     	; 0x1ec <displaySSD+0x8>
 248:	08 95       	ret

0000024a <start>:
		}
	}
}


void start(void){
 24a:	08 95       	ret

0000024c <delay>:
		
	
}

void delay (int d){
	for(unsigned int i=0;i<d;i++){
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	28 17       	cp	r18, r24
 252:	39 07       	cpc	r19, r25
 254:	49 f0       	breq	.+18     	; 0x268 <delay+0x1c>
 256:	ef ec       	ldi	r30, 0xCF	; 207
 258:	f7 e0       	ldi	r31, 0x07	; 7
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <delay+0xe>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <delay+0x14>
 260:	00 00       	nop
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	f4 cf       	rjmp	.-24     	; 0x250 <delay+0x4>
				_delay_ms(1);
	}
}
 268:	08 95       	ret

0000026a <main>:



int main(void){
		
	init();
 26a:	0e 94 49 00 	call	0x92	; 0x92 <init>
	
	sei();// Global interrupt enable
 26e:	78 94       	sei
			getDigi(count);
			displaySSD(1);
		}

		while(!responce_on){
			if(!counting_on) delay((rand() % 5 + 3)*1000);
 270:	c5 e0       	ldi	r28, 0x05	; 5
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	08 ee       	ldi	r16, 0xE8	; 232
 276:	13 e0       	ldi	r17, 0x03	; 3
			PORTD = 1<<4;
 278:	80 e1       	ldi	r24, 0x10	; 16
 27a:	e8 2e       	mov	r14, r24
			on = 1;
 27c:	ff 24       	eor	r15, r15
 27e:	f3 94       	inc	r15
		
	
		getDigi(count);
		displaySSD(1);
		while(responce_on){
			getDigi(count);
 280:	80 91 7a 00 	lds	r24, 0x007A
 284:	90 91 7b 00 	lds	r25, 0x007B
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <getDigi>
			displaySSD(1);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <displaySSD>
	while(1){
		
	
		getDigi(count);
		displaySSD(1);
		while(responce_on){
 294:	80 91 60 00 	lds	r24, 0x0060
 298:	81 11       	cpse	r24, r1
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <main+0x16>
			getDigi(count);
			displaySSD(1);
		}

		while(!responce_on){
 29c:	80 91 60 00 	lds	r24, 0x0060
 2a0:	81 11       	cpse	r24, r1
 2a2:	ee cf       	rjmp	.-36     	; 0x280 <main+0x16>
			if(!counting_on) delay((rand() % 5 + 3)*1000);
 2a4:	80 91 74 00 	lds	r24, 0x0074
 2a8:	81 11       	cpse	r24, r1
 2aa:	10 c0       	rjmp	.+32     	; 0x2cc <main+0x62>
 2ac:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <rand>
 2b0:	be 01       	movw	r22, r28
 2b2:	0e 94 80 01 	call	0x300	; 0x300 <__divmodhi4>
 2b6:	03 96       	adiw	r24, 0x03	; 3
 2b8:	9c 01       	movw	r18, r24
 2ba:	20 9f       	mul	r18, r16
 2bc:	c0 01       	movw	r24, r0
 2be:	21 9f       	mul	r18, r17
 2c0:	90 0d       	add	r25, r0
 2c2:	30 9f       	mul	r19, r16
 2c4:	90 0d       	add	r25, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0e 94 26 01 	call	0x24c	; 0x24c <delay>
			PORTD = 1<<4;
 2cc:	e2 ba       	out	0x12, r14	; 18
			on = 1;
 2ce:	f0 92 75 00 	sts	0x0075, r15
			counting_on = 1;
 2d2:	f0 92 74 00 	sts	0x0074, r15
			break;
 2d6:	d4 cf       	rjmp	.-88     	; 0x280 <main+0x16>

000002d8 <__udivmodhi4>:
 2d8:	aa 1b       	sub	r26, r26
 2da:	bb 1b       	sub	r27, r27
 2dc:	51 e1       	ldi	r21, 0x11	; 17
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <__udivmodhi4_ep>

000002e0 <__udivmodhi4_loop>:
 2e0:	aa 1f       	adc	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	a6 17       	cp	r26, r22
 2e6:	b7 07       	cpc	r27, r23
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <__udivmodhi4_ep>
 2ea:	a6 1b       	sub	r26, r22
 2ec:	b7 0b       	sbc	r27, r23

000002ee <__udivmodhi4_ep>:
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	5a 95       	dec	r21
 2f4:	a9 f7       	brne	.-22     	; 0x2e0 <__udivmodhi4_loop>
 2f6:	80 95       	com	r24
 2f8:	90 95       	com	r25
 2fa:	bc 01       	movw	r22, r24
 2fc:	cd 01       	movw	r24, r26
 2fe:	08 95       	ret

00000300 <__divmodhi4>:
 300:	97 fb       	bst	r25, 7
 302:	07 2e       	mov	r0, r23
 304:	16 f4       	brtc	.+4      	; 0x30a <__divmodhi4+0xa>
 306:	00 94       	com	r0
 308:	07 d0       	rcall	.+14     	; 0x318 <__divmodhi4_neg1>
 30a:	77 fd       	sbrc	r23, 7
 30c:	09 d0       	rcall	.+18     	; 0x320 <__divmodhi4_neg2>
 30e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 312:	07 fc       	sbrc	r0, 7
 314:	05 d0       	rcall	.+10     	; 0x320 <__divmodhi4_neg2>
 316:	3e f4       	brtc	.+14     	; 0x326 <__divmodhi4_exit>

00000318 <__divmodhi4_neg1>:
 318:	90 95       	com	r25
 31a:	81 95       	neg	r24
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	08 95       	ret

00000320 <__divmodhi4_neg2>:
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255

00000326 <__divmodhi4_exit>:
 326:	08 95       	ret

00000328 <do_rand>:
 328:	8f 92       	push	r8
 32a:	9f 92       	push	r9
 32c:	af 92       	push	r10
 32e:	bf 92       	push	r11
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ec 01       	movw	r28, r24
 33e:	68 81       	ld	r22, Y
 340:	79 81       	ldd	r23, Y+1	; 0x01
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	9b 81       	ldd	r25, Y+3	; 0x03
 346:	61 15       	cp	r22, r1
 348:	71 05       	cpc	r23, r1
 34a:	81 05       	cpc	r24, r1
 34c:	91 05       	cpc	r25, r1
 34e:	21 f4       	brne	.+8      	; 0x358 <do_rand+0x30>
 350:	64 e2       	ldi	r22, 0x24	; 36
 352:	79 ed       	ldi	r23, 0xD9	; 217
 354:	8b e5       	ldi	r24, 0x5B	; 91
 356:	97 e0       	ldi	r25, 0x07	; 7
 358:	2d e1       	ldi	r18, 0x1D	; 29
 35a:	33 ef       	ldi	r19, 0xF3	; 243
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	0e 94 05 02 	call	0x40a	; 0x40a <__divmodsi4>
 364:	49 01       	movw	r8, r18
 366:	5a 01       	movw	r10, r20
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	a7 ea       	ldi	r26, 0xA7	; 167
 36e:	b1 e4       	ldi	r27, 0x41	; 65
 370:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__muluhisi3>
 374:	6b 01       	movw	r12, r22
 376:	7c 01       	movw	r14, r24
 378:	ac ee       	ldi	r26, 0xEC	; 236
 37a:	b4 ef       	ldi	r27, 0xF4	; 244
 37c:	a5 01       	movw	r20, r10
 37e:	94 01       	movw	r18, r8
 380:	0e 94 00 02 	call	0x400	; 0x400 <__mulohisi3>
 384:	c6 0e       	add	r12, r22
 386:	d7 1e       	adc	r13, r23
 388:	e8 1e       	adc	r14, r24
 38a:	f9 1e       	adc	r15, r25
 38c:	f7 fe       	sbrs	r15, 7
 38e:	06 c0       	rjmp	.+12     	; 0x39c <do_rand+0x74>
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	c8 1a       	sub	r12, r24
 394:	d1 08       	sbc	r13, r1
 396:	e1 08       	sbc	r14, r1
 398:	80 e8       	ldi	r24, 0x80	; 128
 39a:	f8 0a       	sbc	r15, r24
 39c:	c8 82       	st	Y, r12
 39e:	d9 82       	std	Y+1, r13	; 0x01
 3a0:	ea 82       	std	Y+2, r14	; 0x02
 3a2:	fb 82       	std	Y+3, r15	; 0x03
 3a4:	c6 01       	movw	r24, r12
 3a6:	9f 77       	andi	r25, 0x7F	; 127
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	08 95       	ret

000003be <rand_r>:
 3be:	0e 94 94 01 	call	0x328	; 0x328 <do_rand>
 3c2:	08 95       	ret

000003c4 <rand>:
 3c4:	80 e7       	ldi	r24, 0x70	; 112
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 94 01 	call	0x328	; 0x328 <do_rand>
 3cc:	08 95       	ret

000003ce <srand>:
 3ce:	a0 e0       	ldi	r26, 0x00	; 0
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	80 93 70 00 	sts	0x0070, r24
 3d6:	90 93 71 00 	sts	0x0071, r25
 3da:	a0 93 72 00 	sts	0x0072, r26
 3de:	b0 93 73 00 	sts	0x0073, r27
 3e2:	08 95       	ret

000003e4 <__muluhisi3>:
 3e4:	0e 94 24 02 	call	0x448	; 0x448 <__umulhisi3>
 3e8:	a5 9f       	mul	r26, r21
 3ea:	90 0d       	add	r25, r0
 3ec:	b4 9f       	mul	r27, r20
 3ee:	90 0d       	add	r25, r0
 3f0:	a4 9f       	mul	r26, r20
 3f2:	80 0d       	add	r24, r0
 3f4:	91 1d       	adc	r25, r1
 3f6:	11 24       	eor	r1, r1
 3f8:	08 95       	ret

000003fa <__mulshisi3>:
 3fa:	b7 ff       	sbrs	r27, 7
 3fc:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__muluhisi3>

00000400 <__mulohisi3>:
 400:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__muluhisi3>
 404:	82 1b       	sub	r24, r18
 406:	93 0b       	sbc	r25, r19
 408:	08 95       	ret

0000040a <__divmodsi4>:
 40a:	05 2e       	mov	r0, r21
 40c:	97 fb       	bst	r25, 7
 40e:	1e f4       	brtc	.+6      	; 0x416 <__divmodsi4+0xc>
 410:	00 94       	com	r0
 412:	0e 94 1c 02 	call	0x438	; 0x438 <__negsi2>
 416:	57 fd       	sbrc	r21, 7
 418:	07 d0       	rcall	.+14     	; 0x428 <__divmodsi4_neg2>
 41a:	0e 94 33 02 	call	0x466	; 0x466 <__udivmodsi4>
 41e:	07 fc       	sbrc	r0, 7
 420:	03 d0       	rcall	.+6      	; 0x428 <__divmodsi4_neg2>
 422:	4e f4       	brtc	.+18     	; 0x436 <__divmodsi4_exit>
 424:	0c 94 1c 02 	jmp	0x438	; 0x438 <__negsi2>

00000428 <__divmodsi4_neg2>:
 428:	50 95       	com	r21
 42a:	40 95       	com	r20
 42c:	30 95       	com	r19
 42e:	21 95       	neg	r18
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	4f 4f       	sbci	r20, 0xFF	; 255
 434:	5f 4f       	sbci	r21, 0xFF	; 255

00000436 <__divmodsi4_exit>:
 436:	08 95       	ret

00000438 <__negsi2>:
 438:	90 95       	com	r25
 43a:	80 95       	com	r24
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	8f 4f       	sbci	r24, 0xFF	; 255
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	08 95       	ret

00000448 <__umulhisi3>:
 448:	a2 9f       	mul	r26, r18
 44a:	b0 01       	movw	r22, r0
 44c:	b3 9f       	mul	r27, r19
 44e:	c0 01       	movw	r24, r0
 450:	a3 9f       	mul	r26, r19
 452:	70 0d       	add	r23, r0
 454:	81 1d       	adc	r24, r1
 456:	11 24       	eor	r1, r1
 458:	91 1d       	adc	r25, r1
 45a:	b2 9f       	mul	r27, r18
 45c:	70 0d       	add	r23, r0
 45e:	81 1d       	adc	r24, r1
 460:	11 24       	eor	r1, r1
 462:	91 1d       	adc	r25, r1
 464:	08 95       	ret

00000466 <__udivmodsi4>:
 466:	a1 e2       	ldi	r26, 0x21	; 33
 468:	1a 2e       	mov	r1, r26
 46a:	aa 1b       	sub	r26, r26
 46c:	bb 1b       	sub	r27, r27
 46e:	fd 01       	movw	r30, r26
 470:	0d c0       	rjmp	.+26     	; 0x48c <__udivmodsi4_ep>

00000472 <__udivmodsi4_loop>:
 472:	aa 1f       	adc	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	ee 1f       	adc	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	a2 17       	cp	r26, r18
 47c:	b3 07       	cpc	r27, r19
 47e:	e4 07       	cpc	r30, r20
 480:	f5 07       	cpc	r31, r21
 482:	20 f0       	brcs	.+8      	; 0x48c <__udivmodsi4_ep>
 484:	a2 1b       	sub	r26, r18
 486:	b3 0b       	sbc	r27, r19
 488:	e4 0b       	sbc	r30, r20
 48a:	f5 0b       	sbc	r31, r21

0000048c <__udivmodsi4_ep>:
 48c:	66 1f       	adc	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	1a 94       	dec	r1
 496:	69 f7       	brne	.-38     	; 0x472 <__udivmodsi4_loop>
 498:	60 95       	com	r22
 49a:	70 95       	com	r23
 49c:	80 95       	com	r24
 49e:	90 95       	com	r25
 4a0:	9b 01       	movw	r18, r22
 4a2:	ac 01       	movw	r20, r24
 4a4:	bd 01       	movw	r22, r26
 4a6:	cf 01       	movw	r24, r30
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
