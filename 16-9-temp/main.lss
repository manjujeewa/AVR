
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001c2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000023a  00000000  00000000  0000099d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000019f  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c3  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015e  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  7a:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init>:
}


void init(void){

	DDRC = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	DDRA =  1<<3| 1<<4| 1<<5| 1<<6 | 1<<7 ;
  86:	88 ef       	ldi	r24, 0xF8	; 248
  88:	8a bb       	out	0x1a, r24	; 26
	DDRD = DDRD | ~(1<<2) | 1<<4 | 1<<5;	
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	8b 6f       	ori	r24, 0xFB	; 251
  8e:	81 bb       	out	0x11, r24	; 17
	//ADMUX = 1 << MUX1 | 1 << REFS0 | 1 << REFS1;
	//ADCSRA = 1 << ADEN | 1 << ADPS1 | 1 << ADPS2 ;
	ADCSRA = 0b10000110;
  90:	86 e8       	ldi	r24, 0x86	; 134
  92:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0b11000000;
  94:	80 ec       	ldi	r24, 0xC0	; 192
  96:	87 b9       	out	0x07, r24	; 7
  98:	08 95       	ret

0000009a <getDigi>:
}



void getDigi(unsigned int val){
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	9c 01       	movw	r18, r24

	dig[0] = val%10;
  a0:	ea e0       	ldi	r30, 0x0A	; 10
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	bf 01       	movw	r22, r30
  a6:	0e 94 b7 00 	call	0x16e	; 0x16e <__udivmodhi4>
  aa:	80 93 60 00 	sts	0x0060, r24
	dig[1] = (val%100)/10;
  ae:	c9 01       	movw	r24, r18
  b0:	64 e6       	ldi	r22, 0x64	; 100
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	0e 94 b7 00 	call	0x16e	; 0x16e <__udivmodhi4>
  b8:	eb 01       	movw	r28, r22
  ba:	bf 01       	movw	r22, r30
  bc:	0e 94 b7 00 	call	0x16e	; 0x16e <__udivmodhi4>
  c0:	60 93 61 00 	sts	0x0061, r22
	dig[2] = (val/100)%10;
  c4:	ce 01       	movw	r24, r28
  c6:	bf 01       	movw	r22, r30
  c8:	0e 94 b7 00 	call	0x16e	; 0x16e <__udivmodhi4>
  cc:	80 93 62 00 	sts	0x0062, r24
	dig[3] = val/1000;
  d0:	c9 01       	movw	r24, r18
  d2:	68 ee       	ldi	r22, 0xE8	; 232
  d4:	73 e0       	ldi	r23, 0x03	; 3
  d6:	0e 94 b7 00 	call	0x16e	; 0x16e <__udivmodhi4>
  da:	60 93 63 00 	sts	0x0063, r22
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <displaySSD>:

void displaySSD(unsigned int n){

	unsigned int j;

	for(j=0;j<n;j++){
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
			if(i==3) {
				PORTC=SSD[dig[i]] ; //Displaying Dot
			}else{
				PORTC=SSD[dig[i]];
			}
			PORTA = (1<<i+4) ;
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	70 e0       	ldi	r23, 0x00	; 0

void displaySSD(unsigned int n){

	unsigned int j;

	for(j=0;j<n;j++){
  ec:	48 17       	cp	r20, r24
  ee:	59 07       	cpc	r21, r25
  f0:	31 f1       	breq	.+76     	; 0x13e <displaySSD+0x5a>
  f2:	24 e0       	ldi	r18, 0x04	; 4
  f4:	30 e0       	ldi	r19, 0x00	; 0
		unsigned char i ;

		for(i=0;i != 4;i++){


			if(i==3) {
  f6:	27 30       	cpi	r18, 0x07	; 7
  f8:	19 f4       	brne	.+6      	; 0x100 <displaySSD+0x1c>
				PORTC=SSD[dig[i]] ; //Displaying Dot
  fa:	e0 91 63 00 	lds	r30, 0x0063
  fe:	04 c0       	rjmp	.+8      	; 0x108 <displaySSD+0x24>
 100:	f9 01       	movw	r30, r18
 102:	e4 5a       	subi	r30, 0xA4	; 164
 104:	ff 4f       	sbci	r31, 0xFF	; 255
			}else{
				PORTC=SSD[dig[i]];
 106:	e0 81       	ld	r30, Z
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 59       	subi	r30, 0x9C	; 156
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	e0 81       	ld	r30, Z
 110:	e5 bb       	out	0x15, r30	; 21
			}
			PORTA = (1<<i+4) ;
 112:	fb 01       	movw	r30, r22
 114:	02 2e       	mov	r0, r18
 116:	01 c0       	rjmp	.+2      	; 0x11a <displaySSD+0x36>
 118:	ee 0f       	add	r30, r30
 11a:	0a 94       	dec	r0
 11c:	ea f7       	brpl	.-6      	; 0x118 <displaySSD+0x34>
 11e:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <displaySSD+0x40>
 128:	00 c0       	rjmp	.+0      	; 0x12a <displaySSD+0x46>
 12a:	00 00       	nop
			_delay_ms(1);
			PORTA=0;
 12c:	1b ba       	out	0x1b, r1	; 27
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int j;

	for(j=0;j<n;j++){
		unsigned char i ;

		for(i=0;i != 4;i++){
 132:	28 30       	cpi	r18, 0x08	; 8
 134:	31 05       	cpc	r19, r1
 136:	f9 f6       	brne	.-66     	; 0xf6 <displaySSD+0x12>

void displaySSD(unsigned int n){

	unsigned int j;

	for(j=0;j<n;j++){
 138:	4f 5f       	subi	r20, 0xFF	; 255
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	d7 cf       	rjmp	.-82     	; 0xec <displaySSD+0x8>
 13e:	08 95       	ret

00000140 <main>:
unsigned char dig[] = {1,2,3,4};


int main(void){

	init();
 140:	0e 94 41 00 	call	0x82	; 0x82 <init>

	sei();// Global interrupt enable
 144:	78 94       	sei

	while(1){
		ADCSRA |= (1<<ADSC);
		while(ADCSRA & 1<<ADSC);
		double c = ((ADCL | ADCH << 8)*256)/(1023);
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	d3 e0       	ldi	r29, 0x03	; 3
	init();

	sei();// Global interrupt enable

	while(1){
		ADCSRA |= (1<<ADSC);
 14a:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & 1<<ADSC);
 14c:	36 99       	sbic	0x06, 6	; 6
 14e:	fe cf       	rjmp	.-4      	; 0x14c <main+0xc>
		double c = ((ADCL | ADCH << 8)*256)/(1023);
 150:	84 b1       	in	r24, 0x04	; 4
 152:	95 b1       	in	r25, 0x05	; 5
 154:	98 2f       	mov	r25, r24
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	be 01       	movw	r22, r28
 15a:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodhi4>
 15e:	cb 01       	movw	r24, r22
		getDigi((int)c);
 160:	0e 94 4d 00 	call	0x9a	; 0x9a <getDigi>
		displaySSD(1);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 72 00 	call	0xe4	; 0xe4 <displaySSD>
	}
 16c:	ee cf       	rjmp	.-36     	; 0x14a <main+0xa>

0000016e <__udivmodhi4>:
 16e:	aa 1b       	sub	r26, r26
 170:	bb 1b       	sub	r27, r27
 172:	51 e1       	ldi	r21, 0x11	; 17
 174:	07 c0       	rjmp	.+14     	; 0x184 <__udivmodhi4_ep>

00000176 <__udivmodhi4_loop>:
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	a6 17       	cp	r26, r22
 17c:	b7 07       	cpc	r27, r23
 17e:	10 f0       	brcs	.+4      	; 0x184 <__udivmodhi4_ep>
 180:	a6 1b       	sub	r26, r22
 182:	b7 0b       	sbc	r27, r23

00000184 <__udivmodhi4_ep>:
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	5a 95       	dec	r21
 18a:	a9 f7       	brne	.-22     	; 0x176 <__udivmodhi4_loop>
 18c:	80 95       	com	r24
 18e:	90 95       	com	r25
 190:	bc 01       	movw	r22, r24
 192:	cd 01       	movw	r24, r26
 194:	08 95       	ret

00000196 <__divmodhi4>:
 196:	97 fb       	bst	r25, 7
 198:	07 2e       	mov	r0, r23
 19a:	16 f4       	brtc	.+4      	; 0x1a0 <__divmodhi4+0xa>
 19c:	00 94       	com	r0
 19e:	07 d0       	rcall	.+14     	; 0x1ae <__divmodhi4_neg1>
 1a0:	77 fd       	sbrc	r23, 7
 1a2:	09 d0       	rcall	.+18     	; 0x1b6 <__divmodhi4_neg2>
 1a4:	0e 94 b7 00 	call	0x16e	; 0x16e <__udivmodhi4>
 1a8:	07 fc       	sbrc	r0, 7
 1aa:	05 d0       	rcall	.+10     	; 0x1b6 <__divmodhi4_neg2>
 1ac:	3e f4       	brtc	.+14     	; 0x1bc <__divmodhi4_exit>

000001ae <__divmodhi4_neg1>:
 1ae:	90 95       	com	r25
 1b0:	81 95       	neg	r24
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	08 95       	ret

000001b6 <__divmodhi4_neg2>:
 1b6:	70 95       	com	r23
 1b8:	61 95       	neg	r22
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255

000001bc <__divmodhi4_exit>:
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
