
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000004d0  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000012e  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008f9  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000429  00000000  00000000  00000f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007bb  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000026f  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000354  00000000  00000000  00001f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000226f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 23 01 	call	0x246	; 0x246 <main>
  74:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_i2c>:

unsigned char ch;

void init_i2c()
{
	TWSR = 0X00; // Setting prescalar bits
  7c:	11 b8       	out	0x01, r1	; 1
	TWBR = 0X47; // Bit rate
  7e:	87 e4       	ldi	r24, 0x47	; 71
  80:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN);
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	86 bf       	out	0x36, r24	; 54
}
  86:	08 95       	ret

00000088 <start>:

void start(){
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  88:	84 ea       	ldi	r24, 0xA4	; 164
  8a:	86 bf       	out	0x36, r24	; 54
	// Wait till start condition is transmitted
	while((TWCR &(1<<TWINT))==0); 
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <start+0x4>
}
  92:	08 95       	ret

00000094 <read_i2c>:

unsigned char read_i2c(){
	TWCR = (1<<TWINT)|(1<<TWEN);
  94:	84 e8       	ldi	r24, 0x84	; 132
  96:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))); 
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <read_i2c+0x4>
	return TWDR;
  9e:	83 b1       	in	r24, 0x03	; 3
}
  a0:	08 95       	ret

000000a2 <write_i2c>:

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
  a2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  a4:	84 ec       	ldi	r24, 0xC4	; 196
  a6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <write_i2c+0x6>
}
  ae:	08 95       	ret

000000b0 <stop>:

void stop(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	86 bf       	out	0x36, r24	; 54
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	80 ed       	ldi	r24, 0xD0	; 208
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <stop+0x8>
	_delay_ms(1);
}
  bc:	08 95       	ret

000000be <rtc_write>:

void rtc_write(char dev_addr,char dev_loc,char dev_data){
  be:	98 2f       	mov	r25, r24
	TWCR = (1<<TWEN);
}

void start(){
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  c0:	84 ea       	ldi	r24, 0xA4	; 164
  c2:	86 bf       	out	0x36, r24	; 54
	// Wait till start condition is transmitted
	while((TWCR &(1<<TWINT))==0); 
  c4:	06 b6       	in	r0, 0x36	; 54
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <rtc_write+0x6>
	while(!(TWCR & (1<<TWINT))); 
	return TWDR;
}

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
  ca:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  cc:	84 ec       	ldi	r24, 0xC4	; 196
  ce:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <rtc_write+0x12>
	while(!(TWCR & (1<<TWINT))); 
	return TWDR;
}

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
  d6:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  d8:	84 ec       	ldi	r24, 0xC4	; 196
  da:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  dc:	06 b6       	in	r0, 0x36	; 54
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <rtc_write+0x1e>
	while(!(TWCR & (1<<TWINT))); 
	return TWDR;
}

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
  e2:	43 b9       	out	0x03, r20	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  e4:	84 ec       	ldi	r24, 0xC4	; 196
  e6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <rtc_write+0x2a>
}

void stop(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  ee:	84 e9       	ldi	r24, 0x94	; 148
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	80 ed       	ldi	r24, 0xD0	; 208
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <rtc_write+0x38>
	write_i2c(dev_addr);
	write_i2c(dev_loc);
	write_i2c(dev_data);
	stop();
	_delay_ms(10);
}
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	9e e4       	ldi	r25, 0x4E	; 78
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <rtc_write+0x40>
 102:	08 95       	ret

00000104 <rtc_read>:

unsigned char rtc_read(char dev_addr,char dev_loc){
 104:	98 2f       	mov	r25, r24
	TWCR = (1<<TWEN);
}

void start(){
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 106:	84 ea       	ldi	r24, 0xA4	; 164
 108:	86 bf       	out	0x36, r24	; 54
	// Wait till start condition is transmitted
	while((TWCR &(1<<TWINT))==0); 
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <rtc_read+0x6>
	while(!(TWCR & (1<<TWINT))); 
	return TWDR;
}

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
 110:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 112:	84 ec       	ldi	r24, 0xC4	; 196
 114:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
 116:	06 b6       	in	r0, 0x36	; 54
 118:	07 fe       	sbrs	r0, 7
 11a:	fd cf       	rjmp	.-6      	; 0x116 <rtc_read+0x12>
	while(!(TWCR & (1<<TWINT))); 
	return TWDR;
}

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
 11c:	63 b9       	out	0x03, r22	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 11e:	84 ec       	ldi	r24, 0xC4	; 196
 120:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
 122:	06 b6       	in	r0, 0x36	; 54
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <rtc_read+0x1e>
	TWCR = (1<<TWEN);
}

void start(){
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 128:	84 ea       	ldi	r24, 0xA4	; 164
 12a:	86 bf       	out	0x36, r24	; 54
	// Wait till start condition is transmitted
	while((TWCR &(1<<TWINT))==0); 
 12c:	06 b6       	in	r0, 0x36	; 54
 12e:	07 fe       	sbrs	r0, 7
 130:	fd cf       	rjmp	.-6      	; 0x12c <rtc_read+0x28>

	start();
	write_i2c(dev_addr);
	write_i2c(dev_loc);
	start();
	write_i2c(dev_addr|0x01);
 132:	91 60       	ori	r25, 0x01	; 1
	while(!(TWCR & (1<<TWINT))); 
	return TWDR;
}

void write_i2c(unsigned char ch){
	TWDR = ch;	// put data in TWDR
 134:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 136:	84 ec       	ldi	r24, 0xC4	; 196
 138:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <rtc_read+0x36>
	// Wait till start condition is transmitted
	while((TWCR &(1<<TWINT))==0); 
}

unsigned char read_i2c(){
	TWCR = (1<<TWINT)|(1<<TWEN);
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))); 
 144:	06 b6       	in	r0, 0x36	; 54
 146:	07 fe       	sbrs	r0, 7
 148:	fd cf       	rjmp	.-6      	; 0x144 <rtc_read+0x40>
	return TWDR;
 14a:	83 b1       	in	r24, 0x03	; 3
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!(TWCR&(1<<TWINT)));
}

void stop(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 14c:	94 e9       	ldi	r25, 0x94	; 148
 14e:	96 bf       	out	0x36, r25	; 54
 150:	e0 ed       	ldi	r30, 0xD0	; 208
 152:	f7 e0       	ldi	r31, 0x07	; 7
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <rtc_read+0x50>
	write_i2c(dev_addr|0x01);
	ch = read_i2c();
	stop();
	
	return ch;
}
 158:	08 95       	ret

0000015a <getDate>:


unsigned char getDate(){
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
	unsigned char *date;
	date[1] = rtc_read(0xd0 , 0x04)/16+48;
 15e:	80 ed       	ldi	r24, 0xD0	; 208
 160:	64 e0       	ldi	r22, 0x04	; 4
 162:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 166:	82 95       	swap	r24
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	f8 01       	movw	r30, r16
 172:	81 83       	std	Z+1, r24	; 0x01
	date[2] = rtc_read(0xd0 , 0x04)%16+48;
 174:	80 ed       	ldi	r24, 0xD0	; 208
 176:	64 e0       	ldi	r22, 0x04	; 4
 178:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 17c:	8f 70       	andi	r24, 0x0F	; 15
 17e:	80 5d       	subi	r24, 0xD0	; 208
 180:	f8 01       	movw	r30, r16
 182:	82 83       	std	Z+2, r24	; 0x02
	date[3] = rtc_read(0xd0 , 0x05)/16+48;
 184:	80 ed       	ldi	r24, 0xD0	; 208
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 18c:	82 95       	swap	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	80 5d       	subi	r24, 0xD0	; 208
 192:	f8 01       	movw	r30, r16
 194:	83 83       	std	Z+3, r24	; 0x03
	date[4] = rtc_read(0xd0 , 0x05)%16+48;
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	65 e0       	ldi	r22, 0x05	; 5
 19a:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 5d       	subi	r24, 0xD0	; 208
 1a2:	f8 01       	movw	r30, r16
 1a4:	84 83       	std	Z+4, r24	; 0x04
	date[5] = rtc_read(0xd0 , 0x06)/16+48;
 1a6:	80 ed       	ldi	r24, 0xD0	; 208
 1a8:	66 e0       	ldi	r22, 0x06	; 6
 1aa:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	f8 01       	movw	r30, r16
 1b6:	85 83       	std	Z+5, r24	; 0x05
	date[6] = rtc_read(0xd0 , 0x06)%16+48;
 1b8:	80 ed       	ldi	r24, 0xD0	; 208
 1ba:	66 e0       	ldi	r22, 0x06	; 6
 1bc:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	80 5d       	subi	r24, 0xD0	; 208
 1c4:	f8 01       	movw	r30, r16
 1c6:	86 83       	std	Z+6, r24	; 0x06
	return date;
}
 1c8:	80 2f       	mov	r24, r16
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <getTime>:

unsigned char getTime(){
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
	unsigned char *time;
	time[1] = rtc_read(0xd0 , 0x02)/16+48;
 1d4:	80 ed       	ldi	r24, 0xD0	; 208
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 1dc:	82 95       	swap	r24
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	80 5d       	subi	r24, 0xD0	; 208
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	f8 01       	movw	r30, r16
 1e8:	81 83       	std	Z+1, r24	; 0x01
	time[2] = rtc_read(0xd0 , 0x02)%16+48;
 1ea:	80 ed       	ldi	r24, 0xD0	; 208
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	80 5d       	subi	r24, 0xD0	; 208
 1f6:	f8 01       	movw	r30, r16
 1f8:	82 83       	std	Z+2, r24	; 0x02
	time[3] = rtc_read(0xd0 , 0x01)/16+48;
 1fa:	80 ed       	ldi	r24, 0xD0	; 208
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 202:	82 95       	swap	r24
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	f8 01       	movw	r30, r16
 20a:	83 83       	std	Z+3, r24	; 0x03
	time[4] = rtc_read(0xd0 , 0x01)%16+48;
 20c:	80 ed       	ldi	r24, 0xD0	; 208
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 5d       	subi	r24, 0xD0	; 208
 218:	f8 01       	movw	r30, r16
 21a:	84 83       	std	Z+4, r24	; 0x04
	time[5] = rtc_read(0xd0 , 0x00)/16+48;
 21c:	80 ed       	ldi	r24, 0xD0	; 208
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 224:	82 95       	swap	r24
 226:	8f 70       	andi	r24, 0x0F	; 15
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	f8 01       	movw	r30, r16
 22c:	85 83       	std	Z+5, r24	; 0x05
	time[6] = rtc_read(0xd0 , 0x00)%16+48;
 22e:	80 ed       	ldi	r24, 0xD0	; 208
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	0e 94 82 00 	call	0x104	; 0x104 <rtc_read>
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	80 5d       	subi	r24, 0xD0	; 208
 23a:	f8 01       	movw	r30, r16
 23c:	86 83       	std	Z+6, r24	; 0x06
	return time;
}
 23e:	80 2f       	mov	r24, r16
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <main>:

int main(){
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
	DDRC =0XFF;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	84 bb       	out	0x14, r24	; 20

unsigned char ch;

void init_i2c()
{
	TWSR = 0X00; // Setting prescalar bits
 24e:	11 b8       	out	0x01, r1	; 1
	TWBR = 0X47; // Bit rate
 250:	87 e4       	ldi	r24, 0x47	; 71
 252:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN);
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	86 bf       	out	0x36, r24	; 54

int main(){
	DDRC =0XFF;
	init_i2c();

	rtc_write(0xd0,0x00,0x27);
 258:	80 ed       	ldi	r24, 0xD0	; 208
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	47 e2       	ldi	r20, 0x27	; 39
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <rtc_write>
	rtc_write(0xd0,0x01,0x27);
 262:	80 ed       	ldi	r24, 0xD0	; 208
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	47 e2       	ldi	r20, 0x27	; 39
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <rtc_write>
	rtc_write(0xd0,0x02,0x08);
 26c:	80 ed       	ldi	r24, 0xD0	; 208
 26e:	62 e0       	ldi	r22, 0x02	; 2
 270:	48 e0       	ldi	r20, 0x08	; 8
 272:	0e 94 5f 00 	call	0xbe	; 0xbe <rtc_write>

	rtc_write(0xd0,0x04,0x27);
 276:	80 ed       	ldi	r24, 0xD0	; 208
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	47 e2       	ldi	r20, 0x27	; 39
 27c:	0e 94 5f 00 	call	0xbe	; 0xbe <rtc_write>
	rtc_write(0xd0,0x05,0x09);
 280:	80 ed       	ldi	r24, 0xD0	; 208
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	49 e0       	ldi	r20, 0x09	; 9
 286:	0e 94 5f 00 	call	0xbe	; 0xbe <rtc_write>
	rtc_write(0xd0,0x06,0x13);
 28a:	80 ed       	ldi	r24, 0xD0	; 208
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	43 e1       	ldi	r20, 0x13	; 19
 290:	0e 94 5f 00 	call	0xbe	; 0xbe <rtc_write>

	//_delay_ms(10000); 

	/* initialize display, cursor off */
	lcd_init(LCD_DISP_ON);
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_init>
 29a:	c8 ec       	ldi	r28, 0xC8	; 200
 29c:	d0 e0       	ldi	r29, 0x00	; 0

	while(1){
			lcd_clrscr();
 29e:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_clrscr>
			lcd_puts(getTime());
 2a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <getTime>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_puts>
 2ac:	88 ee       	ldi	r24, 0xE8	; 232
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	fe 01       	movw	r30, r28
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x6c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b8:	d9 f7       	brne	.-10     	; 0x2b0 <main+0x6a>
 2ba:	f1 cf       	rjmp	.-30     	; 0x29e <main+0x58>

000002bc <lcd_write>:
 2bc:	28 2f       	mov	r18, r24
 2be:	66 23       	and	r22, r22
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <lcd_write+0xa>
 2c2:	dc 9a       	sbi	0x1b, 4	; 27
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <lcd_write+0xc>
 2c6:	dc 98       	cbi	0x1b, 4	; 27
 2c8:	dd 98       	cbi	0x1b, 5	; 27
 2ca:	8a b3       	in	r24, 0x1a	; 26
 2cc:	8f 60       	ori	r24, 0x0F	; 15
 2ce:	8a bb       	out	0x1a, r24	; 26
 2d0:	9b b3       	in	r25, 0x1b	; 27
 2d2:	90 7f       	andi	r25, 0xF0	; 240
 2d4:	82 2f       	mov	r24, r18
 2d6:	82 95       	swap	r24
 2d8:	8f 70       	andi	r24, 0x0F	; 15
 2da:	89 2b       	or	r24, r25
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	de 9a       	sbi	0x1b, 6	; 27
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_write+0x26>
 2e2:	de 98       	cbi	0x1b, 6	; 27
 2e4:	2f 70       	andi	r18, 0x0F	; 15
 2e6:	29 2b       	or	r18, r25
 2e8:	2b bb       	out	0x1b, r18	; 27
 2ea:	de 9a       	sbi	0x1b, 6	; 27
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_write+0x32>
 2ee:	de 98       	cbi	0x1b, 6	; 27
 2f0:	9f 60       	ori	r25, 0x0F	; 15
 2f2:	9b bb       	out	0x1b, r25	; 27
 2f4:	08 95       	ret

000002f6 <lcd_read>:
 2f6:	88 23       	and	r24, r24
 2f8:	11 f0       	breq	.+4      	; 0x2fe <lcd_read+0x8>
 2fa:	dc 9a       	sbi	0x1b, 4	; 27
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <lcd_read+0xa>
 2fe:	dc 98       	cbi	0x1b, 4	; 27
 300:	dd 9a       	sbi	0x1b, 5	; 27
 302:	8a b3       	in	r24, 0x1a	; 26
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	8a bb       	out	0x1a, r24	; 26
 308:	de 9a       	sbi	0x1b, 6	; 27
 30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_read+0x16>
 30c:	99 b3       	in	r25, 0x19	; 25
 30e:	de 98       	cbi	0x1b, 6	; 27
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_read+0x1c>
 312:	de 9a       	sbi	0x1b, 6	; 27
 314:	00 c0       	rjmp	.+0      	; 0x316 <lcd_read+0x20>
 316:	89 b3       	in	r24, 0x19	; 25
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	92 95       	swap	r25
 31c:	90 7f       	andi	r25, 0xF0	; 240
 31e:	de 98       	cbi	0x1b, 6	; 27
 320:	89 2b       	or	r24, r25
 322:	08 95       	ret

00000324 <lcd_waitbusy>:
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_read>
 32a:	87 fd       	sbrc	r24, 7
 32c:	fb cf       	rjmp	.-10     	; 0x324 <lcd_waitbusy>
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <lcd_waitbusy+0xe>
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_read>
 33c:	08 95       	ret

0000033e <lcd_command>:
 33e:	1f 93       	push	r17
 340:	18 2f       	mov	r17, r24
 342:	0e 94 92 01 	call	0x324	; 0x324 <lcd_waitbusy>
 346:	81 2f       	mov	r24, r17
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_write>
 34e:	1f 91       	pop	r17
 350:	08 95       	ret

00000352 <lcd_data>:
 352:	1f 93       	push	r17
 354:	18 2f       	mov	r17, r24
 356:	0e 94 92 01 	call	0x324	; 0x324 <lcd_waitbusy>
 35a:	81 2f       	mov	r24, r17
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_write>
 362:	1f 91       	pop	r17
 364:	08 95       	ret

00000366 <lcd_gotoxy>:
 366:	66 23       	and	r22, r22
 368:	11 f4       	brne	.+4      	; 0x36e <lcd_gotoxy+0x8>
 36a:	80 58       	subi	r24, 0x80	; 128
 36c:	01 c0       	rjmp	.+2      	; 0x370 <lcd_gotoxy+0xa>
 36e:	80 54       	subi	r24, 0x40	; 64
 370:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 374:	08 95       	ret

00000376 <lcd_getxy>:
 376:	0e 94 92 01 	call	0x324	; 0x324 <lcd_waitbusy>
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	08 95       	ret

0000037e <lcd_clrscr>:
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 384:	08 95       	ret

00000386 <lcd_home>:
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 38c:	08 95       	ret

0000038e <lcd_putc>:
 38e:	1f 93       	push	r17
 390:	18 2f       	mov	r17, r24
 392:	0e 94 92 01 	call	0x324	; 0x324 <lcd_waitbusy>
 396:	1a 30       	cpi	r17, 0x0A	; 10
 398:	49 f4       	brne	.+18     	; 0x3ac <lcd_putc+0x1e>
 39a:	80 34       	cpi	r24, 0x40	; 64
 39c:	10 f0       	brcs	.+4      	; 0x3a2 <lcd_putc+0x14>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <lcd_putc+0x16>
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	80 58       	subi	r24, 0x80	; 128
 3a6:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <lcd_putc+0x26>
 3ac:	81 2f       	mov	r24, r17
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_write>
 3b4:	1f 91       	pop	r17
 3b6:	08 95       	ret

000003b8 <lcd_puts>:
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ec 01       	movw	r28, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <lcd_puts+0xc>
 3c0:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_putc>
 3c4:	89 91       	ld	r24, Y+
 3c6:	88 23       	and	r24, r24
 3c8:	d9 f7       	brne	.-10     	; 0x3c0 <lcd_puts+0x8>
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <lcd_puts_p>:
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <lcd_puts_p+0xc>
 3d8:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_putc>
 3dc:	fe 01       	movw	r30, r28
 3de:	21 96       	adiw	r28, 0x01	; 1
 3e0:	84 91       	lpm	r24, Z+
 3e2:	88 23       	and	r24, r24
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <lcd_puts_p+0x8>
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <lcd_init>:
 3ec:	1f 93       	push	r17
 3ee:	18 2f       	mov	r17, r24
 3f0:	8a b3       	in	r24, 0x1a	; 26
 3f2:	8f 67       	ori	r24, 0x7F	; 127
 3f4:	8a bb       	out	0x1a, r24	; 26
 3f6:	80 e8       	ldi	r24, 0x80	; 128
 3f8:	9e e3       	ldi	r25, 0x3E	; 62
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_init+0xe>
 3fe:	d9 9a       	sbi	0x1b, 1	; 27
 400:	d8 9a       	sbi	0x1b, 0	; 27
 402:	de 9a       	sbi	0x1b, 6	; 27
 404:	00 c0       	rjmp	.+0      	; 0x406 <lcd_init+0x1a>
 406:	de 98       	cbi	0x1b, 6	; 27
 408:	80 e8       	ldi	r24, 0x80	; 128
 40a:	93 e1       	ldi	r25, 0x13	; 19
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_init+0x20>
 410:	de 9a       	sbi	0x1b, 6	; 27
 412:	00 c0       	rjmp	.+0      	; 0x414 <lcd_init+0x28>
 414:	de 98       	cbi	0x1b, 6	; 27
 416:	80 e4       	ldi	r24, 0x40	; 64
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	fc 01       	movw	r30, r24
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <lcd_init+0x30>
 420:	de 9a       	sbi	0x1b, 6	; 27
 422:	00 c0       	rjmp	.+0      	; 0x424 <lcd_init+0x38>
 424:	de 98       	cbi	0x1b, 6	; 27
 426:	fc 01       	movw	r30, r24
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x3c>
 42c:	d8 98       	cbi	0x1b, 0	; 27
 42e:	de 9a       	sbi	0x1b, 6	; 27
 430:	00 c0       	rjmp	.+0      	; 0x432 <lcd_init+0x46>
 432:	de 98       	cbi	0x1b, 6	; 27
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <lcd_init+0x48>
 438:	88 e2       	ldi	r24, 0x28	; 40
 43a:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 444:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_clrscr>
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 44e:	81 2f       	mov	r24, r17
 450:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_command>
 454:	1f 91       	pop	r17
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
