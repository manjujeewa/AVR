
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000017c  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e9  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000097  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013f  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void){
	DDRC= 255;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA= 1<<3;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	8a bb       	out	0x1a, r24	; 26
	PORTA= 1<<3;
  74:	8b bb       	out	0x1b, r24	; 27
	
	
	
	while(1){ 
		PORTC=0x01;
  76:	31 e0       	ldi	r19, 0x01	; 1
  78:	35 bb       	out	0x15, r19	; 21
  7a:	87 e0       	ldi	r24, 0x07	; 7
  7c:	90 e0       	ldi	r25, 0x00	; 0
		int n=0;
		while(n<7){
			
			PORTC = PORTC << 1;
  7e:	25 b3       	in	r18, 0x15	; 21
  80:	22 0f       	add	r18, r18
  82:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	40 e7       	ldi	r20, 0x70	; 112
  88:	52 e0       	ldi	r21, 0x02	; 2
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	40 40       	sbci	r20, 0x00	; 0
  8e:	50 40       	sbci	r21, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	01 97       	sbiw	r24, 0x01	; 1
	
	
	while(1){ 
		PORTC=0x01;
		int n=0;
		while(n<7){
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	89 f7       	brne	.-30     	; 0x7e <main+0x12>
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	90 e0       	ldi	r25, 0x00	; 0

		}
		
		while(n>0){
			
			PORTC = PORTC >> 1;
  a0:	25 b3       	in	r18, 0x15	; 21
  a2:	26 95       	lsr	r18
  a4:	25 bb       	out	0x15, r18	; 21
  a6:	ef e4       	ldi	r30, 0x4F	; 79
  a8:	f3 ec       	ldi	r31, 0xC3	; 195
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	01 97       	sbiw	r24, 0x01	; 1
			n++;
			_delay_ms(800);

		}
		
		while(n>0){
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	a1 f7       	brne	.-24     	; 0xa0 <main+0x34>
  b8:	df cf       	rjmp	.-66     	; 0x78 <main+0xc>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
