
SD_Datalogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000038fe  00003992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c3  00800188  00800188  00003aba  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00003aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000837  00000000  00000000  00003bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029b2  00000000  00000000  000043f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b1  00000000  00000000  00006da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002386  00000000  00000000  00007754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  00009adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a43  00000000  00000000  00009ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b2a  00000000  00000000  0000a90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000318  00000000  00000000  0000c439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 02 	jmp	0x508	; 0x508 <__ctors_end>
       4:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
       8:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
       c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      10:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      14:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      18:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      1c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      20:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      24:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      28:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      2c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      30:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      34:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      38:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      3c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      40:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      44:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      48:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      4c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>
      50:	0c 94 a1 02 	jmp	0x542	; 0x542 <__bad_interrupt>

00000054 <__c.1777>:
      54:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      64:	20 63 6c 75 73 74 65 72 00                           cluster.

0000006d <__c.1775>:
      6d:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      7d:	68 61 69 6e 00                                      hain.

00000082 <__c.1763>:
      82:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      92:	21 00                                               !.

00000094 <__c.1755>:
      94:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      a4:	21 00                                               !.

000000a6 <__c.1700>:
      a6:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
      b6:	2e 2e 00                                            ...

000000b9 <__c.1671>:
      b9:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      c9:	20 63 6c 75 73 74 65 72 00                           cluster.

000000d2 <__c.1621>:
      d2:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      e2:	20 63 6c 75 73 74 65 72 00                           cluster.

000000eb <__c.1613>:
      eb:	52 4f 4f 54 00                                      ROOT.

000000f0 <__c.1611>:
      f0:	44 49 52 00                                         DIR.

000000f4 <__c.1609>:
      f4:	20 20 20 00                                            .

000000f8 <__c.1607>:
      f8:	46 49 4c 45 00                                      FILE.

000000fd <__c.1605>:
      fd:	20 20 20 00                                            .

00000101 <__c.1599>:
     101:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

0000010f <__c.1597>:
     10f:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

0000011a <__c.1592>:
     11a:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     12a:	69 73 74 21 00                                      ist!.

0000012f <__c.1661>:
     12f:	0a 0d 0a 0d 20 49 6e 76 61 6c 69 64 20 6f 70 74     .... Invalid opt
     13f:	69 6f 6e 21 0a 0d 00                                ion!...

00000146 <__c.1658>:
     146:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     156:	69 73 74 2e 2e 00                                   ist...

0000015c <__c.1655>:
     15c:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     16c:	6f 6e 67 2e 2e 00                                   ong...

00000172 <__c.1648>:
     172:	0a 0d 45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d     ..Enter file nam
     182:	65 3a 20 00                                         e: .

00000186 <__c.1638>:
     186:	0a 0d 4e 6f 72 6d 61 6c 20 6f 70 65 72 61 74 69     ..Normal operati
     196:	6f 6e 20 73 74 61 72 74 65 64 2e 2e 00              on started...

000001a3 <__c.1635>:
     1a3:	0a 0d 0a 0d 3e 20 45 6e 74 65 72 20 74 68 65 20     ....> Enter the 
     1b3:	6f 70 74 69 6f 6e 3a 00                             option:.

000001bb <__c.1633>:
     1bb:	0a 0d 3e 20 36 20 3a 20 44 65 6c 65 74 65 20 46     ..> 6 : Delete F
     1cb:	69 6c 65 00                                         ile.

000001cf <__c.1631>:
     1cf:	0a 0d 3e 20 35 20 3a 20 52 65 61 64 20 46 69 6c     ..> 5 : Read Fil
     1df:	65 00                                               e.

000001e1 <__c.1629>:
     1e1:	0a 0d 3e 20 34 20 3a 20 47 65 74 20 66 69 6c 65     ..> 4 : Get file
     1f1:	20 6c 69 73 74 00                                    list.

000001f7 <__c.1627>:
     1f7:	0a 0d 3e 20 33 20 3a 20 55 70 64 61 74 65 20 54     ..> 3 : Update T
     207:	69 6d 65 00                                         ime.

0000020b <__c.1625>:
     20b:	0a 0d 3e 20 32 20 3a 20 55 70 64 61 74 65 20 44     ..> 2 : Update D
     21b:	61 74 65 00                                         ate.

0000021f <__c.1623>:
     21f:	0a 0d 3e 20 31 20 3a 20 44 69 73 70 6c 61 79 20     ..> 1 : Display 
     22f:	63 75 72 72 65 6e 74 20 44 61 74 65 2f 54 69 6d     current Date/Tim
     23f:	65 00                                               e.

00000241 <__c.1621>:
     241:	0a 0d 0a 0d 3e 20 30 20 3a 20 45 78 69 74 20 74     ....> 0 : Exit t
     251:	68 65 20 4d 65 6e 75 00                             he Menu.

00000259 <__c.1619>:
     259:	0a 0d 46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e     ..FAT32 not foun
     269:	64 21 00                                            d!.

0000026c <__c.1617>:
     26c:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     27c:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000286 <__c.1614>:
     286:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     296:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     2a6:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000002b1 <__c.1611>:
     2b1:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     2c1:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000002ce <__c.1607>:
     2ce:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     2de:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     2ee:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000002f9 <__c.1604>:
     2f9:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     309:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000316 <__c.1602>:
     316:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     326:	63 74 65 64 2e 2e 00                                cted...

0000032d <__c.1597>:
     32d:	0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     33d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     34d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     35d:	2a 2a 2a 2a 2a 2a 0a 0d 00                          ******...

00000366 <__c.1595>:
     366:	0a 0d 20 20 20 20 20 20 20 20 20 6d 69 63 72 6f     ..         micro
     376:	53 44 20 44 61 74 61 6c 6f 67 67 65 72 20 2d 20     SD Datalogger - 
     386:	62 79 20 43 43 20 44 68 61 72 6d 61 6e 69 20 00     by CC Dharmani .

00000396 <__c.1593>:
     396:	0a 0d 0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ....************
     3a6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3b6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3c6:	2a 2a 2a 2a 2a 2a 2a 2a 00                          ********.

000003cf <__c.1662>:
     3cf:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000003df <__c.1660>:
     3df:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     3ef:	65 64 2e 2e 00                                      ed...

000003f4 <__c.1658>:
     3f4:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     404:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

0000040e <__c.1656>:
     40e:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     41e:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     42e:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

00000437 <__c.1653>:
     437:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     447:	6d 2f 79 79 29 3a 00                                m/yy):.

0000044e <__c.1630>:
     44e:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

0000045e <__c.1628>:
     45e:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     46e:	65 64 2e 2e 00                                      ed...

00000473 <__c.1626>:
     473:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     483:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

0000048d <__c.1623>:
     48d:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     49d:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     4ad:	73 29 3a 00                                         s):.

000004b1 <__c.1522>:
     4b1:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000004b9 <__c.1519>:
     4b9:	53 61 74 75 72 64 61 79 00                          Saturday.

000004c2 <__c.1516>:
     4c2:	46 72 69 64 61 79 00                                Friday.

000004c9 <__c.1513>:
     4c9:	54 68 75 72 73 64 61 79 00                          Thursday.

000004d2 <__c.1510>:
     4d2:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

000004dc <__c.1507>:
     4dc:	54 75 65 73 64 61 79 00                             Tuesday.

000004e4 <__c.1504>:
     4e4:	4d 6f 6e 64 61 79 00                                Monday.

000004eb <__c.1500>:
     4eb:	53 75 6e 64 61 79 00                                Sunday.

000004f2 <__c.1497>:
     4f2:	20 20 20 20 44 61 79 3a 20 00                           Day: .

000004fc <__c.1490>:
     4fc:	44 61 74 65 3a 00                                   Date:.

00000502 <__c.1482>:
     502:	54 69 6d 65 3a 00                                   Time:.

00000508 <__ctors_end>:
     508:	11 24       	eor	r1, r1
     50a:	1f be       	out	0x3f, r1	; 63
     50c:	cf e5       	ldi	r28, 0x5F	; 95
     50e:	d8 e0       	ldi	r29, 0x08	; 8
     510:	de bf       	out	0x3e, r29	; 62
     512:	cd bf       	out	0x3d, r28	; 61

00000514 <__do_copy_data>:
     514:	11 e0       	ldi	r17, 0x01	; 1
     516:	a0 e6       	ldi	r26, 0x60	; 96
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	ee ef       	ldi	r30, 0xFE	; 254
     51c:	f8 e3       	ldi	r31, 0x38	; 56
     51e:	02 c0       	rjmp	.+4      	; 0x524 <.do_copy_data_start>

00000520 <.do_copy_data_loop>:
     520:	05 90       	lpm	r0, Z+
     522:	0d 92       	st	X+, r0

00000524 <.do_copy_data_start>:
     524:	a8 38       	cpi	r26, 0x88	; 136
     526:	b1 07       	cpc	r27, r17
     528:	d9 f7       	brne	.-10     	; 0x520 <.do_copy_data_loop>

0000052a <__do_clear_bss>:
     52a:	14 e0       	ldi	r17, 0x04	; 4
     52c:	a8 e8       	ldi	r26, 0x88	; 136
     52e:	b1 e0       	ldi	r27, 0x01	; 1
     530:	01 c0       	rjmp	.+2      	; 0x534 <.do_clear_bss_start>

00000532 <.do_clear_bss_loop>:
     532:	1d 92       	st	X+, r1

00000534 <.do_clear_bss_start>:
     534:	ab 34       	cpi	r26, 0x4B	; 75
     536:	b1 07       	cpc	r27, r17
     538:	e1 f7       	brne	.-8      	; 0x532 <.do_clear_bss_loop>
     53a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <main>
     53e:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <_exit>

00000542 <__bad_interrupt>:
     542:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000546 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     54e:	20 91 ad 03 	lds	r18, 0x03AD
     552:	30 91 ae 03 	lds	r19, 0x03AE
     556:	e0 90 95 01 	lds	r14, 0x0195
     55a:	f0 90 96 01 	lds	r15, 0x0196
     55e:	00 91 97 01 	lds	r16, 0x0197
     562:	10 91 98 01 	lds	r17, 0x0198
     566:	62 50       	subi	r22, 0x02	; 2
     568:	70 40       	sbci	r23, 0x00	; 0
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	2e 0d       	add	r18, r14
     57c:	3f 1d       	adc	r19, r15
     57e:	40 1f       	adc	r20, r16
     580:	51 1f       	adc	r21, r17
}
     582:	b9 01       	movw	r22, r18
     584:	ca 01       	movw	r24, r20
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     590:	8f 92       	push	r8
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	64 97       	sbiw	r28, 0x14	; 20
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	98 2e       	mov	r9, r24
     5b8:	6a 01       	movw	r12, r20
     5ba:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     5bc:	de 01       	movw	r26, r28
     5be:	11 96       	adiw	r26, 0x01	; 1
     5c0:	e0 e6       	ldi	r30, 0x60	; 96
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	84 e1       	ldi	r24, 0x14	; 20
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	81 50       	subi	r24, 0x01	; 1
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <displayMemory+0x36>
     5ce:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     5d0:	8c e2       	ldi	r24, 0x2C	; 44
     5d2:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     5d4:	05 30       	cpi	r16, 0x05	; 5
     5d6:	11 f0       	breq	.+4      	; 0x5dc <displayMemory+0x4c>
     5d8:	09 30       	cpi	r16, 0x09	; 9
     5da:	29 f4       	brne	.+10     	; 0x5e6 <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
     5dc:	fe 01       	movw	r30, r28
     5de:	e0 0f       	add	r30, r16
     5e0:	f1 1d       	adc	r31, r1
     5e2:	80 82       	st	Z, r8
	   i--;
     5e4:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     5e6:	5e 01       	movw	r10, r28
     5e8:	a0 0e       	add	r10, r16
     5ea:	b1 1c       	adc	r11, r1
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	2a e0       	ldi	r18, 0x0A	; 10
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
     5fc:	60 63       	ori	r22, 0x30	; 48
     5fe:	f5 01       	movw	r30, r10
     600:	60 83       	st	Z, r22
    memory /= 10;
     602:	c7 01       	movw	r24, r14
     604:	b6 01       	movw	r22, r12
     606:	2a e0       	ldi	r18, 0x0A	; 10
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
     612:	c9 01       	movw	r24, r18
     614:	da 01       	movw	r26, r20
     616:	6c 01       	movw	r12, r24
     618:	7d 01       	movw	r14, r26
	if(memory == 0) break;
     61a:	c1 14       	cp	r12, r1
     61c:	d1 04       	cpc	r13, r1
     61e:	e1 04       	cpc	r14, r1
     620:	f1 04       	cpc	r15, r1
     622:	11 f0       	breq	.+4      	; 0x628 <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     624:	01 50       	subi	r16, 0x01	; 1
     626:	b1 f6       	brne	.-84     	; 0x5d4 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	9f 16       	cp	r9, r31
     62c:	11 f4       	brne	.+4      	; 0x632 <displayMemory+0xa2>
     62e:	8b e4       	ldi	r24, 0x4B	; 75
     630:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 49 15 	call	0x2a92	; 0x2a92 <transmitString>
}
     63a:	64 96       	adiw	r28, 0x14	; 20
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	08 95       	ret

0000065e <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     65e:	6f 92       	push	r6
     660:	7f 92       	push	r7
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     676:	60 78       	andi	r22, 0x80	; 128
     678:	3b 01       	movw	r6, r22
     67a:	4c 01       	movw	r8, r24
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	66 0c       	add	r6, r6
     680:	77 1c       	adc	r7, r7
     682:	88 1c       	adc	r8, r8
     684:	99 1c       	adc	r9, r9
     686:	2a 95       	dec	r18
     688:	d1 f7       	brne	.-12     	; 0x67e <searchNextFreeCluster+0x20>
     68a:	5b 01       	movw	r10, r22
     68c:	6c 01       	movw	r12, r24
     68e:	50 c0       	rjmp	.+160    	; 0x730 <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     690:	e0 90 b8 03 	lds	r14, 0x03B8
     694:	f0 90 b9 03 	lds	r15, 0x03B9
     698:	20 91 9d 01 	lds	r18, 0x019D
     69c:	30 91 9e 01 	lds	r19, 0x019E
      SD_readSingleBlock(sector);
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	80 91 af 03 	lds	r24, 0x03AF
     6a8:	90 91 b0 03 	lds	r25, 0x03B0
     6ac:	a0 91 b1 03 	lds	r26, 0x03B1
     6b0:	b0 91 b2 03 	lds	r27, 0x03B2
     6b4:	e8 0e       	add	r14, r24
     6b6:	f9 1e       	adc	r15, r25
     6b8:	0a 1f       	adc	r16, r26
     6ba:	1b 1f       	adc	r17, r27
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	c4 01       	movw	r24, r8
     6c2:	b3 01       	movw	r22, r6
     6c4:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
     6c8:	e2 0e       	add	r14, r18
     6ca:	f3 1e       	adc	r15, r19
     6cc:	04 1f       	adc	r16, r20
     6ce:	15 1f       	adc	r17, r21
     6d0:	c8 01       	movw	r24, r16
     6d2:	b7 01       	movw	r22, r14
     6d4:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
     6d8:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     6da:	e6 2f       	mov	r30, r22
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	e3 55       	subi	r30, 0x53	; 83
     6e8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	a2 81       	ldd	r26, Z+2	; 0x02
     6f0:	b3 81       	ldd	r27, Z+3	; 0x03
     6f2:	bf 70       	andi	r27, 0x0F	; 15
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	a1 05       	cpc	r26, r1
     6f8:	b1 05       	cpc	r27, r1
     6fa:	39 f4       	brne	.+14     	; 0x70a <searchNextFreeCluster+0xac>
            return(cluster+i);
     6fc:	a6 01       	movw	r20, r12
     6fe:	95 01       	movw	r18, r10
     700:	26 0f       	add	r18, r22
     702:	31 1d       	adc	r19, r1
     704:	41 1d       	adc	r20, r1
     706:	51 1d       	adc	r21, r1
     708:	25 c0       	rjmp	.+74     	; 0x754 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     70a:	6f 5f       	subi	r22, 0xFF	; 255
     70c:	60 38       	cpi	r22, 0x80	; 128
     70e:	29 f7       	brne	.-54     	; 0x6da <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     710:	80 e8       	ldi	r24, 0x80	; 128
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	a0 e0       	ldi	r26, 0x00	; 0
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	a8 0e       	add	r10, r24
     71a:	b9 1e       	adc	r11, r25
     71c:	ca 1e       	adc	r12, r26
     71e:	db 1e       	adc	r13, r27
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	a0 e0       	ldi	r26, 0x00	; 0
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	68 0e       	add	r6, r24
     72a:	79 1e       	adc	r7, r25
     72c:	8a 1e       	adc	r8, r26
     72e:	9b 1e       	adc	r9, r27
     730:	80 91 9f 01 	lds	r24, 0x019F
     734:	90 91 a0 01 	lds	r25, 0x01A0
     738:	a0 91 a1 01 	lds	r26, 0x01A1
     73c:	b0 91 a2 01 	lds	r27, 0x01A2
     740:	a8 16       	cp	r10, r24
     742:	b9 06       	cpc	r11, r25
     744:	ca 06       	cpc	r12, r26
     746:	db 06       	cpc	r13, r27
     748:	08 f4       	brcc	.+2      	; 0x74c <searchNextFreeCluster+0xee>
     74a:	a2 cf       	rjmp	.-188    	; 0x690 <searchNextFreeCluster+0x32>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
     754:	b9 01       	movw	r22, r18
     756:	ca 01       	movw	r24, r20
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	7f 90       	pop	r7
     76e:	6f 90       	pop	r6
     770:	08 95       	ret

00000772 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	2b 97       	sbiw	r28, 0x0b	; 11
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	8c 01       	movw	r16, r24
     78c:	58 2f       	mov	r21, r24
     78e:	a1 2f       	mov	r26, r17
     790:	fc 01       	movw	r30, r24
     792:	40 e0       	ldi	r20, 0x00	; 0
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     794:	80 81       	ld	r24, Z
     796:	8e 32       	cpi	r24, 0x2E	; 46
     798:	19 f4       	brne	.+6      	; 0x7a0 <convertFileName+0x2e>

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     79a:	49 30       	cpi	r20, 0x09	; 9
     79c:	30 f0       	brcs	.+12     	; 0x7aa <convertFileName+0x38>
     79e:	0e c0       	rjmp	.+28     	; 0x7bc <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     7a0:	4f 5f       	subi	r20, 0xFF	; 255
     7a2:	31 96       	adiw	r30, 0x01	; 1
     7a4:	4c 30       	cpi	r20, 0x0C	; 12
     7a6:	b1 f7       	brne	.-20     	; 0x794 <convertFileName+0x22>
     7a8:	09 c0       	rjmp	.+18     	; 0x7bc <convertFileName+0x4a>
     7aa:	be 01       	movw	r22, r28
     7ac:	6f 5f       	subi	r22, 0xFF	; 255
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	85 2f       	mov	r24, r21
     7b2:	9a 2f       	mov	r25, r26
     7b4:	9c 01       	movw	r18, r24
     7b6:	f9 01       	movw	r30, r18
     7b8:	db 01       	movw	r26, r22
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <convertFileName+0x5a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     7bc:	86 ea       	ldi	r24, 0xA6	; 166
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	52 c0       	rjmp	.+164    	; 0x86c <__stack+0xd>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     7c8:	81 91       	ld	r24, Z+
     7ca:	8d 93       	st	X+, r24
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     7cc:	8e 2f       	mov	r24, r30
     7ce:	85 1b       	sub	r24, r21
     7d0:	84 17       	cp	r24, r20
     7d2:	d0 f3       	brcs	.-12     	; 0x7c8 <convertFileName+0x56>
     7d4:	84 2f       	mov	r24, r20
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     7d6:	9e 01       	movw	r18, r28
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	90 e2       	ldi	r25, 0x20	; 32
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <convertFileName+0x78>
     7e0:	f9 01       	movw	r30, r18
     7e2:	e8 0f       	add	r30, r24
     7e4:	f1 1d       	adc	r31, r1
     7e6:	90 83       	st	Z, r25
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	88 30       	cpi	r24, 0x08	; 8
     7ec:	c9 f7       	brne	.-14     	; 0x7e0 <convertFileName+0x6e>
  fileNameFAT[k] = ' ';

j++;
     7ee:	24 2f       	mov	r18, r20
     7f0:	2f 5f       	subi	r18, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     7f2:	ae 01       	movw	r20, r28
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	30 e2       	ldi	r19, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     7fa:	f8 01       	movw	r30, r16
     7fc:	e2 0f       	add	r30, r18
     7fe:	f1 1d       	adc	r31, r1
     800:	90 81       	ld	r25, Z
     802:	99 23       	and	r25, r25
     804:	59 f0       	breq	.+22     	; 0x81c <convertFileName+0xaa>
    fileNameFAT[k] = fileName[j++];
     806:	fa 01       	movw	r30, r20
     808:	e8 0f       	add	r30, r24
     80a:	f1 1d       	adc	r31, r1
     80c:	90 83       	st	Z, r25
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	07 c0       	rjmp	.+14     	; 0x820 <convertFileName+0xae>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     812:	fa 01       	movw	r30, r20
     814:	e8 0f       	add	r30, r24
     816:	f1 1d       	adc	r31, r1
     818:	30 83       	st	Z, r19
     81a:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     81c:	8b 30       	cpi	r24, 0x0B	; 11
     81e:	c8 f3       	brcs	.-14     	; 0x812 <convertFileName+0xa0>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     820:	8f 5f       	subi	r24, 0xFF	; 255
     822:	8b 30       	cpi	r24, 0x0B	; 11
     824:	50 f3       	brcs	.-44     	; 0x7fa <convertFileName+0x88>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     826:	9e 01       	movw	r18, r28
     828:	24 5f       	subi	r18, 0xF4	; 244
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     82c:	fb 01       	movw	r30, r22
     82e:	90 81       	ld	r25, Z
     830:	89 2f       	mov	r24, r25
     832:	81 56       	subi	r24, 0x61	; 97
     834:	8a 31       	cpi	r24, 0x1A	; 26
     836:	10 f4       	brcc	.+4      	; 0x83c <convertFileName+0xca>
    fileNameFAT[j] -= 0x20;
     838:	90 52       	subi	r25, 0x20	; 32
     83a:	90 83       	st	Z, r25
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     840:	62 17       	cp	r22, r18
     842:	73 07       	cpc	r23, r19
     844:	99 f7       	brne	.-26     	; 0x82c <convertFileName+0xba>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     84a:	ae 01       	movw	r20, r28
     84c:	4f 5f       	subi	r20, 0xFF	; 255
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	f8 01       	movw	r30, r16
     852:	e2 0f       	add	r30, r18
     854:	f3 1f       	adc	r31, r19
     856:	da 01       	movw	r26, r20
     858:	a2 0f       	add	r26, r18
     85a:	b3 1f       	adc	r27, r19
     85c:	8c 91       	ld	r24, X
     85e:	80 83       	st	Z, r24
     860:	2f 5f       	subi	r18, 0xFF	; 255
     862:	3f 4f       	sbci	r19, 0xFF	; 255

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     864:	2b 30       	cpi	r18, 0x0B	; 11
     866:	31 05       	cpc	r19, r1
     868:	99 f7       	brne	.-26     	; 0x850 <convertFileName+0xde>
     86a:	80 e0       	ldi	r24, 0x00	; 0
  fileName[j] = fileNameFAT[j];

return 0;
}
     86c:	2b 96       	adiw	r28, 0x0b	; 11
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	cf 91       	pop	r28
     87a:	df 91       	pop	r29
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	d8 2e       	mov	r13, r24
     890:	c6 2e       	mov	r12, r22
     892:	79 01       	movw	r14, r18
     894:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     896:	60 91 af 03 	lds	r22, 0x03AF
     89a:	70 91 b0 03 	lds	r23, 0x03B0
     89e:	80 91 b1 03 	lds	r24, 0x03B1
     8a2:	90 91 b2 03 	lds	r25, 0x03B2
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	8f 4f       	sbci	r24, 0xFF	; 255
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     8b2:	80 91 ad 01 	lds	r24, 0x01AD
     8b6:	90 91 ae 01 	lds	r25, 0x01AE
     8ba:	a0 91 af 01 	lds	r26, 0x01AF
     8be:	b0 91 b0 01 	lds	r27, 0x01B0
     8c2:	82 55       	subi	r24, 0x52	; 82
     8c4:	92 45       	sbci	r25, 0x52	; 82
     8c6:	a1 46       	sbci	r26, 0x61	; 97
     8c8:	b1 44       	sbci	r27, 0x41	; 65
     8ca:	09 f0       	breq	.+2      	; 0x8ce <getSetFreeCluster+0x4c>
     8cc:	54 c0       	rjmp	.+168    	; 0x976 <getSetFreeCluster+0xf4>
     8ce:	80 91 91 03 	lds	r24, 0x0391
     8d2:	90 91 92 03 	lds	r25, 0x0392
     8d6:	a0 91 93 03 	lds	r26, 0x0393
     8da:	b0 91 94 03 	lds	r27, 0x0394
     8de:	82 57       	subi	r24, 0x72	; 114
     8e0:	92 47       	sbci	r25, 0x72	; 114
     8e2:	a1 44       	sbci	r26, 0x41	; 65
     8e4:	b1 46       	sbci	r27, 0x61	; 97
     8e6:	09 f0       	breq	.+2      	; 0x8ea <getSetFreeCluster+0x68>
     8e8:	46 c0       	rjmp	.+140    	; 0x976 <getSetFreeCluster+0xf4>
     8ea:	80 91 a9 03 	lds	r24, 0x03A9
     8ee:	90 91 aa 03 	lds	r25, 0x03AA
     8f2:	a0 91 ab 03 	lds	r26, 0x03AB
     8f6:	b0 91 ac 03 	lds	r27, 0x03AC
     8fa:	80 50       	subi	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	a5 45       	sbci	r26, 0x55	; 85
     900:	ba 4a       	sbci	r27, 0xAA	; 170
     902:	c9 f5       	brne	.+114    	; 0x976 <getSetFreeCluster+0xf4>
  return 0xffffffff;

 if(get_set == GET)
     904:	cc 20       	and	r12, r12
     906:	a9 f4       	brne	.+42     	; 0x932 <getSetFreeCluster+0xb0>
 {
   if(totOrNext == TOTAL_FREE)
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	d8 16       	cp	r13, r24
     90c:	49 f4       	brne	.+18     	; 0x920 <getSetFreeCluster+0x9e>
      return(FS->freeClusterCount);
     90e:	20 91 95 03 	lds	r18, 0x0395
     912:	30 91 96 03 	lds	r19, 0x0396
     916:	40 91 97 03 	lds	r20, 0x0397
     91a:	50 91 98 03 	lds	r21, 0x0398
     91e:	2f c0       	rjmp	.+94     	; 0x97e <getSetFreeCluster+0xfc>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     920:	20 91 99 03 	lds	r18, 0x0399
     924:	30 91 9a 03 	lds	r19, 0x039A
     928:	40 91 9b 03 	lds	r20, 0x039B
     92c:	50 91 9c 03 	lds	r21, 0x039C
     930:	26 c0       	rjmp	.+76     	; 0x97e <getSetFreeCluster+0xfc>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	d2 16       	cp	r13, r18
     936:	49 f4       	brne	.+18     	; 0x94a <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
     938:	e0 92 95 03 	sts	0x0395, r14
     93c:	f0 92 96 03 	sts	0x0396, r15
     940:	00 93 97 03 	sts	0x0397, r16
     944:	10 93 98 03 	sts	0x0398, r17
     948:	08 c0       	rjmp	.+16     	; 0x95a <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     94a:	e0 92 99 03 	sts	0x0399, r14
     94e:	f0 92 9a 03 	sts	0x039A, r15
     952:	00 93 9b 03 	sts	0x039B, r16
     956:	10 93 9c 03 	sts	0x039C, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     95a:	60 91 af 03 	lds	r22, 0x03AF
     95e:	70 91 b0 03 	lds	r23, 0x03B0
     962:	80 91 b1 03 	lds	r24, 0x03B1
     966:	90 91 b2 03 	lds	r25, 0x03B2
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	8f 4f       	sbci	r24, 0xFF	; 255
     970:	9f 4f       	sbci	r25, 0xFF	; 255
     972:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>
 }
 return 0xffffffff;
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	3f ef       	ldi	r19, 0xFF	; 255
     97a:	4f ef       	ldi	r20, 0xFF	; 255
     97c:	5f ef       	ldi	r21, 0xFF	; 255
}
     97e:	b9 01       	movw	r22, r18
     980:	ca 01       	movw	r24, r20
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	08 95       	ret

00000990 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	d8 2e       	mov	r13, r24
     99c:	db 01       	movw	r26, r22
     99e:	ca 01       	movw	r24, r20
     9a0:	e9 e0       	ldi	r30, 0x09	; 9
     9a2:	b6 95       	lsr	r27
     9a4:	a7 95       	ror	r26
     9a6:	97 95       	ror	r25
     9a8:	87 95       	ror	r24
     9aa:	ea 95       	dec	r30
     9ac:	d1 f7       	brne	.-12     	; 0x9a2 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     9ae:	51 70       	andi	r21, 0x01	; 1
     9b0:	60 70       	andi	r22, 0x00	; 0
     9b2:	70 70       	andi	r23, 0x00	; 0
     9b4:	41 15       	cp	r20, r1
     9b6:	51 05       	cpc	r21, r1
     9b8:	61 05       	cpc	r22, r1
     9ba:	71 05       	cpc	r23, r1
     9bc:	19 f4       	brne	.+6      	; 0x9c4 <freeMemoryUpdate+0x34>
     9be:	ac 01       	movw	r20, r24
     9c0:	bd 01       	movw	r22, r26
     9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
     9c4:	ac 01       	movw	r20, r24
     9c6:	bd 01       	movw	r22, r26
     9c8:	4f 5f       	subi	r20, 0xFF	; 255
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	6f 4f       	sbci	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	db 01       	movw	r26, r22
     9d2:	ca 01       	movw	r24, r20
     9d4:	33 e0       	ldi	r19, 0x03	; 3
     9d6:	b6 95       	lsr	r27
     9d8:	a7 95       	ror	r26
     9da:	97 95       	ror	r25
     9dc:	87 95       	ror	r24
     9de:	3a 95       	dec	r19
     9e0:	d1 f7       	brne	.-12     	; 0x9d6 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
     9e2:	47 70       	andi	r20, 0x07	; 7
     9e4:	50 70       	andi	r21, 0x00	; 0
     9e6:	60 70       	andi	r22, 0x00	; 0
     9e8:	70 70       	andi	r23, 0x00	; 0
     9ea:	41 15       	cp	r20, r1
     9ec:	51 05       	cpc	r21, r1
     9ee:	61 05       	cpc	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	19 f4       	brne	.+6      	; 0x9fa <freeMemoryUpdate+0x6a>
     9f4:	7c 01       	movw	r14, r24
     9f6:	8d 01       	movw	r16, r26
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
     9fa:	7c 01       	movw	r14, r24
     9fc:	8d 01       	movw	r16, r26
     9fe:	08 94       	sec
     a00:	e1 1c       	adc	r14, r1
     a02:	f1 1c       	adc	r15, r1
     a04:	01 1d       	adc	r16, r1
     a06:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
     a08:	80 91 38 04 	lds	r24, 0x0438
     a0c:	88 23       	and	r24, r24
     a0e:	d9 f0       	breq	.+54     	; 0xa46 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>
	if(flag == ADD)
     a20:	dd 20       	and	r13, r13
     a22:	39 f4       	brne	.+14     	; 0xa32 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
     a28:	2e 0d       	add	r18, r14
     a2a:	3f 1d       	adc	r19, r15
     a2c:	40 1f       	adc	r20, r16
     a2e:	51 1f       	adc	r21, r17
     a30:	06 c0       	rjmp	.+12     	; 0xa3e <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	2e 19       	sub	r18, r14
     a38:	3f 09       	sbc	r19, r15
     a3a:	40 0b       	sbc	r20, r16
     a3c:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>
  }
}
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	08 95       	ret

00000a52 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	9f 92       	push	r9
     a5a:	af 92       	push	r10
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     a6a:	10 92 af 03 	sts	0x03AF, r1
     a6e:	10 92 b0 03 	sts	0x03B0, r1
     a72:	10 92 b1 03 	sts	0x03B1, r1
     a76:	10 92 b2 03 	sts	0x03B2, r1

SD_readSingleBlock(0);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     a86:	80 91 ad 01 	lds	r24, 0x01AD
     a8a:	89 3e       	cpi	r24, 0xE9	; 233
     a8c:	19 f1       	breq	.+70     	; 0xad4 <getBootSectorData+0x82>
     a8e:	8b 3e       	cpi	r24, 0xEB	; 235
     a90:	09 f1       	breq	.+66     	; 0xad4 <getBootSectorData+0x82>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     a92:	80 91 ab 03 	lds	r24, 0x03AB
     a96:	90 91 ac 03 	lds	r25, 0x03AC
     a9a:	85 55       	subi	r24, 0x55	; 85
     a9c:	9a 4a       	sbci	r25, 0xAA	; 170
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <getBootSectorData+0x50>
     aa0:	b0 c0       	rjmp	.+352    	; 0xc02 <getBootSectorData+0x1b0>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     aa2:	60 91 73 03 	lds	r22, 0x0373
     aa6:	70 91 74 03 	lds	r23, 0x0374
     aaa:	80 91 75 03 	lds	r24, 0x0375
     aae:	90 91 76 03 	lds	r25, 0x0376
     ab2:	60 93 af 03 	sts	0x03AF, r22
     ab6:	70 93 b0 03 	sts	0x03B0, r23
     aba:	80 93 b1 03 	sts	0x03B1, r24
     abe:	90 93 b2 03 	sts	0x03B2, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     ac2:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     ac6:	80 91 ad 01 	lds	r24, 0x01AD
     aca:	89 3e       	cpi	r24, 0xE9	; 233
     acc:	19 f0       	breq	.+6      	; 0xad4 <getBootSectorData+0x82>
     ace:	8b 3e       	cpi	r24, 0xEB	; 235
     ad0:	09 f0       	breq	.+2      	; 0xad4 <getBootSectorData+0x82>
     ad2:	97 c0       	rjmp	.+302    	; 0xc02 <getBootSectorData+0x1b0>
}

bytesPerSector = bpb->bytesPerSector;
     ad4:	80 91 b8 01 	lds	r24, 0x01B8
     ad8:	90 91 b9 01 	lds	r25, 0x01B9
     adc:	90 93 9e 01 	sts	0x019E, r25
     ae0:	80 93 9d 01 	sts	0x019D, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     ae4:	80 91 ba 01 	lds	r24, 0x01BA
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	90 93 ae 03 	sts	0x03AE, r25
     aee:	80 93 ad 03 	sts	0x03AD, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     af2:	a0 90 bb 01 	lds	r10, 0x01BB
     af6:	b0 90 bc 01 	lds	r11, 0x01BC
     afa:	b0 92 b9 03 	sts	0x03B9, r11
     afe:	a0 92 b8 03 	sts	0x03B8, r10
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     b02:	80 91 d9 01 	lds	r24, 0x01D9
     b06:	90 91 da 01 	lds	r25, 0x01DA
     b0a:	a0 91 db 01 	lds	r26, 0x01DB
     b0e:	b0 91 dc 01 	lds	r27, 0x01DC
     b12:	80 93 a3 01 	sts	0x01A3, r24
     b16:	90 93 a4 01 	sts	0x01A4, r25
     b1a:	a0 93 a5 01 	sts	0x01A5, r26
     b1e:	b0 93 a6 01 	sts	0x01A6, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     b22:	e0 90 b8 03 	lds	r14, 0x03B8
     b26:	f0 90 b9 03 	lds	r15, 0x03B9
     b2a:	60 91 bd 01 	lds	r22, 0x01BD
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	20 91 d1 01 	lds	r18, 0x01D1
     b38:	30 91 d2 01 	lds	r19, 0x01D2
     b3c:	40 91 d3 01 	lds	r20, 0x01D3
     b40:	50 91 d4 01 	lds	r21, 0x01D4
     b44:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
     b48:	3b 01       	movw	r6, r22
     b4a:	4c 01       	movw	r8, r24
     b4c:	00 e0       	ldi	r16, 0x00	; 0
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	80 91 c9 01 	lds	r24, 0x01C9
     b54:	90 91 ca 01 	lds	r25, 0x01CA
     b58:	a0 91 cb 01 	lds	r26, 0x01CB
     b5c:	b0 91 cc 01 	lds	r27, 0x01CC
     b60:	e8 0e       	add	r14, r24
     b62:	f9 1e       	adc	r15, r25
     b64:	0a 1f       	adc	r16, r26
     b66:	1b 1f       	adc	r17, r27
     b68:	e6 0c       	add	r14, r6
     b6a:	f7 1c       	adc	r15, r7
     b6c:	08 1d       	adc	r16, r8
     b6e:	19 1d       	adc	r17, r9
     b70:	e0 92 95 01 	sts	0x0195, r14
     b74:	f0 92 96 01 	sts	0x0196, r15
     b78:	00 93 97 01 	sts	0x0197, r16
     b7c:	10 93 98 01 	sts	0x0198, r17

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     b80:	20 91 ad 03 	lds	r18, 0x03AD
     b84:	30 91 ae 03 	lds	r19, 0x03AE
     b88:	cc 24       	eor	r12, r12
     b8a:	dd 24       	eor	r13, r13
     b8c:	60 91 cd 01 	lds	r22, 0x01CD
     b90:	70 91 ce 01 	lds	r23, 0x01CE
     b94:	80 91 cf 01 	lds	r24, 0x01CF
     b98:	90 91 d0 01 	lds	r25, 0x01D0
     b9c:	6a 19       	sub	r22, r10
     b9e:	7b 09       	sbc	r23, r11
     ba0:	8c 09       	sbc	r24, r12
     ba2:	9d 09       	sbc	r25, r13
     ba4:	66 19       	sub	r22, r6
     ba6:	77 09       	sbc	r23, r7
     ba8:	88 09       	sbc	r24, r8
     baa:	99 09       	sbc	r25, r9
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
     bb4:	c9 01       	movw	r24, r18
     bb6:	da 01       	movw	r26, r20
     bb8:	80 93 9f 01 	sts	0x019F, r24
     bbc:	90 93 a0 01 	sts	0x01A0, r25
     bc0:	a0 93 a1 01 	sts	0x01A1, r26
     bc4:	b0 93 a2 01 	sts	0x01A2, r27
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>
     bd8:	20 91 9f 01 	lds	r18, 0x019F
     bdc:	30 91 a0 01 	lds	r19, 0x01A0
     be0:	40 91 a1 01 	lds	r20, 0x01A1
     be4:	50 91 a2 01 	lds	r21, 0x01A2
     be8:	26 17       	cp	r18, r22
     bea:	37 07       	cpc	r19, r23
     bec:	48 07       	cpc	r20, r24
     bee:	59 07       	cpc	r21, r25
     bf0:	18 f4       	brcc	.+6      	; 0xbf8 <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
     bf2:	10 92 38 04 	sts	0x0438, r1
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <getBootSectorData+0x1ac>
else
	 freeClusterCountUpdated = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 38 04 	sts	0x0438, r24
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <getBootSectorData+0x1b2>
     c02:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	7f 90       	pop	r7
     c1a:	6f 90       	pop	r6
     c1c:	08 95       	ret

00000c1e <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     c1e:	4f 92       	push	r4
     c20:	5f 92       	push	r5
     c22:	6f 92       	push	r6
     c24:	7f 92       	push	r7
     c26:	8f 92       	push	r8
     c28:	9f 92       	push	r9
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	5b 01       	movw	r10, r22
     c40:	6c 01       	movw	r12, r24
     c42:	84 2e       	mov	r8, r20
     c44:	28 01       	movw	r4, r16
     c46:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     c48:	80 91 b8 03 	lds	r24, 0x03B8
     c4c:	90 91 b9 03 	lds	r25, 0x03B9
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	aa 0c       	add	r10, r10
     c54:	bb 1c       	adc	r11, r11
     c56:	cc 1c       	adc	r12, r12
     c58:	dd 1c       	adc	r13, r13
     c5a:	fa 95       	dec	r31
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <getSetNextCluster+0x34>
     c5e:	20 91 9d 01 	lds	r18, 0x019D
     c62:	30 91 9e 01 	lds	r19, 0x019E
     c66:	7c 01       	movw	r14, r24
     c68:	00 e0       	ldi	r16, 0x00	; 0
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	80 91 af 03 	lds	r24, 0x03AF
     c70:	90 91 b0 03 	lds	r25, 0x03B0
     c74:	a0 91 b1 03 	lds	r26, 0x03B1
     c78:	b0 91 b2 03 	lds	r27, 0x03B2
     c7c:	e8 0e       	add	r14, r24
     c7e:	f9 1e       	adc	r15, r25
     c80:	0a 1f       	adc	r16, r26
     c82:	1b 1f       	adc	r17, r27
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	c6 01       	movw	r24, r12
     c8a:	b5 01       	movw	r22, r10
     c8c:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
     c90:	e2 0e       	add	r14, r18
     c92:	f3 1e       	adc	r15, r19
     c94:	04 1f       	adc	r16, r20
     c96:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     c98:	c0 91 9d 01 	lds	r28, 0x019D
     c9c:	d0 91 9e 01 	lds	r29, 0x019E
     ca0:	99 24       	eor	r9, r9

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     ca2:	c8 01       	movw	r24, r16
     ca4:	b7 01       	movw	r22, r14
     ca6:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
     caa:	88 23       	and	r24, r24
     cac:	21 f0       	breq	.+8      	; 0xcb6 <getSetNextCluster+0x98>
     cae:	93 94       	inc	r9

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
     cb2:	98 16       	cp	r9, r24
     cb4:	b1 f7       	brne	.-20     	; 0xca2 <getSetNextCluster+0x84>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     cb6:	9e 01       	movw	r18, r28
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	c6 01       	movw	r24, r12
     cbe:	b5 01       	movw	r22, r10
     cc0:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
     cc4:	fb 01       	movw	r30, r22
     cc6:	e3 55       	subi	r30, 0x53	; 83
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254

if(get_set == GET)
     cca:	88 20       	and	r8, r8
     ccc:	31 f4       	brne	.+12     	; 0xcda <getSetNextCluster+0xbc>
  return ((*FATEntryValue) & 0x0fffffff);
     cce:	20 81       	ld	r18, Z
     cd0:	31 81       	ldd	r19, Z+1	; 0x01
     cd2:	42 81       	ldd	r20, Z+2	; 0x02
     cd4:	53 81       	ldd	r21, Z+3	; 0x03
     cd6:	5f 70       	andi	r21, 0x0F	; 15
     cd8:	0c c0       	rjmp	.+24     	; 0xcf2 <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     cda:	40 82       	st	Z, r4
     cdc:	51 82       	std	Z+1, r5	; 0x01
     cde:	62 82       	std	Z+2, r6	; 0x02
     ce0:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     ce2:	c8 01       	movw	r24, r16
     ce4:	b7 01       	movw	r22, r14
     ce6:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	50 e0       	ldi	r21, 0x00	; 0

return (0);
}
     cf2:	b9 01       	movw	r22, r18
     cf4:	ca 01       	movw	r24, r20
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	7f 90       	pop	r7
     d10:	6f 90       	pop	r6
     d12:	5f 90       	pop	r5
     d14:	4f 90       	pop	r4
     d16:	08 95       	ret

00000d18 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     d18:	2f 92       	push	r2
     d1a:	3f 92       	push	r3
     d1c:	4f 92       	push	r4
     d1e:	5f 92       	push	r5
     d20:	6f 92       	push	r6
     d22:	7f 92       	push	r7
     d24:	8f 92       	push	r8
     d26:	9f 92       	push	r9
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	2a 97       	sbiw	r28, 0x0a	; 10
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	8d 83       	std	Y+5, r24	; 0x05
     d4e:	7f 83       	std	Y+7, r23	; 0x07
     d50:	6e 83       	std	Y+6, r22	; 0x06
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     d52:	a0 90 a3 01 	lds	r10, 0x01A3
     d56:	b0 90 a4 01 	lds	r11, 0x01A4
     d5a:	c0 90 a5 01 	lds	r12, 0x01A5
     d5e:	d0 90 a6 01 	lds	r13, 0x01A6
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     d66:	20 91 ad 03 	lds	r18, 0x03AD
     d6a:	30 91 ae 03 	lds	r19, 0x03AE
     d6e:	e0 90 95 01 	lds	r14, 0x0195
     d72:	f0 90 96 01 	lds	r15, 0x0196
     d76:	00 91 97 01 	lds	r16, 0x0197
     d7a:	10 91 98 01 	lds	r17, 0x0198
     d7e:	c6 01       	movw	r24, r12
     d80:	b5 01       	movw	r22, r10
     d82:	62 50       	subi	r22, 0x02	; 2
     d84:	70 40       	sbci	r23, 0x00	; 0
     d86:	80 40       	sbci	r24, 0x00	; 0
     d88:	90 40       	sbci	r25, 0x00	; 0
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
     d92:	1b 01       	movw	r2, r22
     d94:	2c 01       	movw	r4, r24
     d96:	2e 0c       	add	r2, r14
     d98:	3f 1c       	adc	r3, r15
     d9a:	40 1e       	adc	r4, r16
     d9c:	51 1e       	adc	r5, r17
     d9e:	66 24       	eor	r6, r6
     da0:	77 24       	eor	r7, r7
     da2:	43 01       	movw	r8, r6
     da4:	5f c1       	rjmp	.+702    	; 0x1064 <findFiles+0x34c>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
     da6:	d4 01       	movw	r26, r8
     da8:	c3 01       	movw	r24, r6
     daa:	82 0d       	add	r24, r2
     dac:	93 1d       	adc	r25, r3
     dae:	a4 1d       	adc	r26, r4
     db0:	b5 1d       	adc	r27, r5
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	ab 83       	std	Y+3, r26	; 0x03
     db8:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
     dc2:	40 e2       	ldi	r20, 0x20	; 32
     dc4:	e4 2e       	mov	r14, r20
     dc6:	f1 2c       	mov	r15, r1
     dc8:	3d c1       	rjmp	.+634    	; 0x1044 <findFiles+0x32c>
	

     for(i=0; i<bytesPerSector; i+=32)
     dca:	8a 01       	movw	r16, r20
     dcc:	03 55       	subi	r16, 0x53	; 83
     dce:	1e 4f       	sbci	r17, 0xFE	; 254
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     dd0:	f7 01       	movw	r30, r14
     dd2:	e3 55       	subi	r30, 0x53	; 83
     dd4:	fe 4f       	sbci	r31, 0xFE	; 254
     dd6:	b0 97       	sbiw	r30, 0x20	; 32
     dd8:	80 81       	ld	r24, Z
     dda:	b0 96       	adiw	r30, 0x20	; 32
     ddc:	88 23       	and	r24, r24
     dde:	39 f4       	brne	.+14     	; 0xdee <findFiles+0xd6>
		{
		  if(flag == DELETE)
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	92 30       	cpi	r25, 0x02	; 2
     de4:	09 f0       	breq	.+2      	; 0xde8 <findFiles+0xd0>
     de6:	68 c1       	rjmp	.+720    	; 0x10b8 <findFiles+0x3a0>
		      transmitString_F(PSTR("File does not exist!"));
     de8:	8a e1       	ldi	r24, 0x1A	; 26
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	63 c1       	rjmp	.+710    	; 0x10b4 <findFiles+0x39c>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
     dee:	85 3e       	cpi	r24, 0xE5	; 229
     df0:	09 f4       	brne	.+2      	; 0xdf4 <findFiles+0xdc>
     df2:	24 c1       	rjmp	.+584    	; 0x103c <findFiles+0x324>
     df4:	75 97       	sbiw	r30, 0x15	; 21
     df6:	80 81       	ld	r24, Z
     df8:	8f 30       	cpi	r24, 0x0F	; 15
     dfa:	09 f4       	brne	.+2      	; 0xdfe <findFiles+0xe6>
     dfc:	1f c1       	rjmp	.+574    	; 0x103c <findFiles+0x324>
        {
          if((flag == GET_FILE) || (flag == DELETE))
     dfe:	a8 85       	ldd	r26, Y+8	; 0x08
     e00:	a2 30       	cpi	r26, 0x02	; 2
     e02:	08 f0       	brcs	.+2      	; 0xe06 <findFiles+0xee>
     e04:	d2 c0       	rjmp	.+420    	; 0xfaa <findFiles+0x292>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
     e0a:	c8 01       	movw	r24, r16
     e0c:	82 0f       	add	r24, r18
     e0e:	93 1f       	adc	r25, r19
     e10:	ae 81       	ldd	r26, Y+6	; 0x06
     e12:	bf 81       	ldd	r27, Y+7	; 0x07
     e14:	a2 0f       	add	r26, r18
     e16:	b3 1f       	adc	r27, r19
     e18:	fc 01       	movw	r30, r24
     e1a:	90 81       	ld	r25, Z
     e1c:	8c 91       	ld	r24, X
     e1e:	98 17       	cp	r25, r24
     e20:	09 f0       	breq	.+2      	; 0xe24 <findFiles+0x10c>
     e22:	0c c1       	rjmp	.+536    	; 0x103c <findFiles+0x324>
     e24:	82 2f       	mov	r24, r18
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     e2c:	2b 30       	cpi	r18, 0x0B	; 11
     e2e:	31 05       	cpc	r19, r1
     e30:	61 f7       	brne	.-40     	; 0xe0a <findFiles+0xf2>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
     e32:	8b 30       	cpi	r24, 0x0B	; 11
     e34:	09 f0       	breq	.+2      	; 0xe38 <findFiles+0x120>
     e36:	02 c1       	rjmp	.+516    	; 0x103c <findFiles+0x324>
			{
			  if(flag == GET_FILE)
     e38:	fd 81       	ldd	r31, Y+5	; 0x05
     e3a:	f1 30       	cpi	r31, 0x01	; 1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <findFiles+0x128>
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <findFiles+0x1a6>
              {
			    appendFileSector = firstSector + sector;
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	ab 81       	ldd	r26, Y+3	; 0x03
     e46:	bc 81       	ldd	r27, Y+4	; 0x04
     e48:	80 93 39 04 	sts	0x0439, r24
     e4c:	90 93 3a 04 	sts	0x043A, r25
     e50:	a0 93 3b 04 	sts	0x043B, r26
     e54:	b0 93 3c 04 	sts	0x043C, r27
				appendFileLocation = i;
     e58:	ca 01       	movw	r24, r20
     e5a:	a0 e0       	ldi	r26, 0x00	; 0
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	80 93 8f 01 	sts	0x018F, r24
     e62:	90 93 90 01 	sts	0x0190, r25
     e66:	a0 93 91 01 	sts	0x0191, r26
     e6a:	b0 93 92 01 	sts	0x0192, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     e6e:	d8 01       	movw	r26, r16
     e70:	54 96       	adiw	r26, 0x14	; 20
     e72:	8d 91       	ld	r24, X+
     e74:	9c 91       	ld	r25, X
     e76:	55 97       	sbiw	r26, 0x15	; 21
     e78:	a0 e0       	ldi	r26, 0x00	; 0
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	dc 01       	movw	r26, r24
     e7e:	99 27       	eor	r25, r25
     e80:	88 27       	eor	r24, r24
     e82:	f8 01       	movw	r30, r16
     e84:	22 8d       	ldd	r18, Z+26	; 0x1a
     e86:	33 8d       	ldd	r19, Z+27	; 0x1b
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	82 2b       	or	r24, r18
     e8e:	93 2b       	or	r25, r19
     e90:	a4 2b       	or	r26, r20
     e92:	b5 2b       	or	r27, r21
     e94:	80 93 c3 03 	sts	0x03C3, r24
     e98:	90 93 c4 03 	sts	0x03C4, r25
     e9c:	a0 93 c5 03 	sts	0x03C5, r26
     ea0:	b0 93 c6 03 	sts	0x03C6, r27
				fileSize = dir->fileSize;
     ea4:	84 8d       	ldd	r24, Z+28	; 0x1c
     ea6:	95 8d       	ldd	r25, Z+29	; 0x1d
     ea8:	a6 8d       	ldd	r26, Z+30	; 0x1e
     eaa:	b7 8d       	ldd	r27, Z+31	; 0x1f
     eac:	80 93 99 01 	sts	0x0199, r24
     eb0:	90 93 9a 01 	sts	0x019A, r25
     eb4:	a0 93 9b 01 	sts	0x019B, r26
     eb8:	b0 93 9c 01 	sts	0x019C, r27
     ebc:	ff c0       	rjmp	.+510    	; 0x10bc <findFiles+0x3a4>
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
     ebe:	8d e0       	ldi	r24, 0x0D	; 13
     ec0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
     ec4:	8a e0       	ldi	r24, 0x0A	; 10
     ec6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
     eca:	8f e0       	ldi	r24, 0x0F	; 15
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
				 TX_NEWLINE;
     ed2:	8d e0       	ldi	r24, 0x0D	; 13
     ed4:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
				 TX_NEWLINE;
     ede:	8d e0       	ldi	r24, 0x0D	; 13
     ee0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     eea:	d8 01       	movw	r26, r16
     eec:	54 96       	adiw	r26, 0x14	; 20
     eee:	8d 91       	ld	r24, X+
     ef0:	9c 91       	ld	r25, X
     ef2:	55 97       	sbiw	r26, 0x15	; 21
     ef4:	a0 e0       	ldi	r26, 0x00	; 0
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	5c 01       	movw	r10, r24
     efa:	99 24       	eor	r9, r9
     efc:	88 24       	eor	r8, r8
     efe:	f8 01       	movw	r30, r16
     f00:	82 8d       	ldd	r24, Z+26	; 0x1a
     f02:	93 8d       	ldd	r25, Z+27	; 0x1b
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	88 2a       	or	r8, r24
     f0a:	99 2a       	or	r9, r25
     f0c:	aa 2a       	or	r10, r26
     f0e:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
     f10:	85 ee       	ldi	r24, 0xE5	; 229
     f12:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
     f20:	d8 01       	movw	r26, r16
     f22:	5c 96       	adiw	r26, 0x1c	; 28
     f24:	4d 91       	ld	r20, X+
     f26:	5d 91       	ld	r21, X+
     f28:	6d 91       	ld	r22, X+
     f2a:	7c 91       	ld	r23, X
     f2c:	5f 97       	sbiw	r26, 0x1f	; 31
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 c8 04 	call	0x990	; 0x990 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>
				 if(firstCluster < cluster)
     f44:	86 16       	cp	r8, r22
     f46:	97 06       	cpc	r9, r23
     f48:	a8 06       	cpc	r10, r24
     f4a:	b9 06       	cpc	r11, r25
     f4c:	30 f4       	brcc	.+12     	; 0xf5a <findFiles+0x242>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	a5 01       	movw	r20, r10
     f54:	94 01       	movw	r18, r8
     f56:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
     f5a:	c5 01       	movw	r24, r10
     f5c:	b4 01       	movw	r22, r8
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
     f6c:	f6 2e       	mov	r15, r22
     f6e:	e7 2e       	mov	r14, r23
     f70:	d8 2e       	mov	r13, r24
     f72:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
     f74:	c5 01       	movw	r24, r10
     f76:	b4 01       	movw	r22, r8
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	00 e0       	ldi	r16, 0x00	; 0
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
     f86:	8f 2d       	mov	r24, r15
     f88:	9e 2d       	mov	r25, r14
     f8a:	ad 2d       	mov	r26, r13
     f8c:	bc 2d       	mov	r27, r12
     f8e:	4c 01       	movw	r8, r24
     f90:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
     f92:	b7 ef       	ldi	r27, 0xF7	; 247
     f94:	8b 16       	cp	r8, r27
     f96:	bf ef       	ldi	r27, 0xFF	; 255
     f98:	9b 06       	cpc	r9, r27
     f9a:	bf ef       	ldi	r27, 0xFF	; 255
     f9c:	ab 06       	cpc	r10, r27
     f9e:	bf e0       	ldi	r27, 0x0F	; 15
     fa0:	bb 06       	cpc	r11, r27
     fa2:	d8 f2       	brcs	.-74     	; 0xf5a <findFiles+0x242>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	85 c0       	rjmp	.+266    	; 0x10b4 <findFiles+0x39c>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
     faa:	8d e0       	ldi	r24, 0x0D	; 13
     fac:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
     fb0:	8a e0       	ldi	r24, 0x0A	; 10
     fb2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
     fb6:	1a 86       	std	Y+10, r1	; 0x0a
     fb8:	19 86       	std	Y+9, r1	; 0x09
     fba:	0b c0       	rjmp	.+22     	; 0xfd2 <findFiles+0x2ba>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
     fbc:	e9 85       	ldd	r30, Y+9	; 0x09
     fbe:	e7 30       	cpi	r30, 0x07	; 7
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <findFiles+0x2b0>
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	9a 87       	std	Y+10, r25	; 0x0a
     fd0:	89 87       	std	Y+9, r24	; 0x09
			   transmitByte (dir->name[j]);
     fd2:	e9 85       	ldd	r30, Y+9	; 0x09
     fd4:	fa 85       	ldd	r31, Y+10	; 0x0a
     fd6:	e0 0f       	add	r30, r16
     fd8:	f1 1f       	adc	r31, r17
     fda:	80 81       	ld	r24, Z
     fdc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
     fe0:	a9 85       	ldd	r26, Y+9	; 0x09
     fe2:	ba 85       	ldd	r27, Y+10	; 0x0a
     fe4:	1a 97       	sbiw	r26, 0x0a	; 10
     fe6:	51 f7       	brne	.-44     	; 0xfbc <findFiles+0x2a4>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
     fe8:	8d ef       	ldi	r24, 0xFD	; 253
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
     ff0:	87 01       	movw	r16, r14
     ff2:	03 55       	subi	r16, 0x53	; 83
     ff4:	1e 4f       	sbci	r17, 0xFE	; 254
     ff6:	05 51       	subi	r16, 0x15	; 21
     ff8:	10 40       	sbci	r17, 0x00	; 0
     ffa:	f8 01       	movw	r30, r16
     ffc:	80 81       	ld	r24, Z
     ffe:	0b 5e       	subi	r16, 0xEB	; 235
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	80 31       	cpi	r24, 0x10	; 16
    1004:	b9 f0       	breq	.+46     	; 0x1034 <findFiles+0x31c>
    1006:	88 30       	cpi	r24, 0x08	; 8
    1008:	19 f4       	brne	.+6      	; 0x1010 <findFiles+0x2f8>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    100a:	8b ee       	ldi	r24, 0xEB	; 235
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <findFiles+0x320>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     transmitString_F (PSTR("FILE" ));
    1010:	88 ef       	ldi	r24, 0xF8	; 248
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
		         transmitString_F (PSTR("   "));
    1018:	84 ef       	ldi	r24, 0xF4	; 244
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    1020:	f8 01       	movw	r30, r16
    1022:	34 97       	sbiw	r30, 0x04	; 4
    1024:	40 81       	ld	r20, Z
    1026:	51 81       	ldd	r21, Z+1	; 0x01
    1028:	62 81       	ldd	r22, Z+2	; 0x02
    102a:	73 81       	ldd	r23, Z+3	; 0x03
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	0e 94 c8 02 	call	0x590	; 0x590 <displayMemory>
    1032:	04 c0       	rjmp	.+8      	; 0x103c <findFiles+0x324>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1034:	80 ef       	ldi	r24, 0xF0	; 240
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	e8 0e       	add	r14, r24
    1042:	f9 1e       	adc	r15, r25
    1044:	a7 01       	movw	r20, r14
    1046:	40 52       	subi	r20, 0x20	; 32
    1048:	50 40       	sbci	r21, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    104a:	80 91 9d 01 	lds	r24, 0x019D
    104e:	90 91 9e 01 	lds	r25, 0x019E
    1052:	48 17       	cp	r20, r24
    1054:	59 07       	cpc	r21, r25
    1056:	08 f4       	brcc	.+2      	; 0x105a <findFiles+0x342>
    1058:	b8 ce       	rjmp	.-656    	; 0xdca <findFiles+0xb2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    105a:	08 94       	sec
    105c:	61 1c       	adc	r6, r1
    105e:	71 1c       	adc	r7, r1
    1060:	81 1c       	adc	r8, r1
    1062:	91 1c       	adc	r9, r1
    1064:	80 91 ad 03 	lds	r24, 0x03AD
    1068:	90 91 ae 03 	lds	r25, 0x03AE
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	68 16       	cp	r6, r24
    1072:	79 06       	cpc	r7, r25
    1074:	8a 06       	cpc	r8, r26
    1076:	9b 06       	cpc	r9, r27
    1078:	08 f4       	brcc	.+2      	; 0x107c <findFiles+0x364>
    107a:	95 ce       	rjmp	.-726    	; 0xda6 <findFiles+0x8e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    107c:	c6 01       	movw	r24, r12
    107e:	b5 01       	movw	r22, r10
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
    108e:	5b 01       	movw	r10, r22
    1090:	6c 01       	movw	r12, r24

   if(cluster > 0x0ffffff6)
    1092:	97 ef       	ldi	r25, 0xF7	; 247
    1094:	a9 16       	cp	r10, r25
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	b9 06       	cpc	r11, r25
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	c9 06       	cpc	r12, r25
    109e:	9f e0       	ldi	r25, 0x0F	; 15
    10a0:	d9 06       	cpc	r13, r25
    10a2:	50 f4       	brcc	.+20     	; 0x10b8 <findFiles+0x3a0>
   	 return 0;
   if(cluster == 0) 
    10a4:	a1 14       	cp	r10, r1
    10a6:	b1 04       	cpc	r11, r1
    10a8:	c1 04       	cpc	r12, r1
    10aa:	d1 04       	cpc	r13, r1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <findFiles+0x398>
    10ae:	5b ce       	rjmp	.-842    	; 0xd66 <findFiles+0x4e>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    10b0:	82 ed       	ldi	r24, 0xD2	; 210
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
 }
return 0;
}
    10bc:	c8 01       	movw	r24, r16
    10be:	2a 96       	adiw	r28, 0x0a	; 10
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	9f 90       	pop	r9
    10e0:	8f 90       	pop	r8
    10e2:	7f 90       	pop	r7
    10e4:	6f 90       	pop	r6
    10e6:	5f 90       	pop	r5
    10e8:	4f 90       	pop	r4
    10ea:	3f 90       	pop	r3
    10ec:	2f 90       	pop	r2
    10ee:	08 95       	ret

000010f0 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    10f6:	0e 94 b9 03 	call	0x772	; 0x772 <convertFileName>
  if(error) return;
    10fa:	88 23       	and	r24, r24
    10fc:	21 f4       	brne	.+8      	; 0x1106 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	be 01       	movw	r22, r28
    1102:	0e 94 8c 06 	call	0xd18	; 0xd18 <findFiles>
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    110c:	2f 92       	push	r2
    110e:	3f 92       	push	r3
    1110:	4f 92       	push	r4
    1112:	5f 92       	push	r5
    1114:	6f 92       	push	r6
    1116:	7f 92       	push	r7
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <readFile+0x26>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <readFile+0x28>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	e8 2e       	mov	r14, r24
    113a:	8b 01       	movw	r16, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    113c:	cb 01       	movw	r24, r22
    113e:	0e 94 b9 03 	call	0x772	; 0x772 <convertFileName>
if(error) return 2;
    1142:	88 23       	and	r24, r24
    1144:	11 f0       	breq	.+4      	; 0x114a <readFile+0x3e>
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	a0 c0       	rjmp	.+320    	; 0x128a <readFile+0x17e>

dir = findFiles (GET_FILE, fileName); //get the file location
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	b8 01       	movw	r22, r16
    114e:	0e 94 8c 06 	call	0xd18	; 0xd18 <findFiles>
    1152:	9c 01       	movw	r18, r24
if(dir == 0) 
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	31 f4       	brne	.+12     	; 0x1164 <readFile+0x58>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	ee 20       	and	r14, r14
    115c:	09 f0       	breq	.+2      	; 0x1160 <readFile+0x54>
    115e:	95 c0       	rjmp	.+298    	; 0x128a <readFile+0x17e>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	93 c0       	rjmp	.+294    	; 0x128a <readFile+0x17e>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	e8 16       	cp	r14, r24
    1168:	09 f4       	brne	.+2      	; 0x116c <readFile+0x60>
    116a:	8f c0       	rjmp	.+286    	; 0x128a <readFile+0x17e>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    116c:	d9 01       	movw	r26, r18
    116e:	54 96       	adiw	r26, 0x14	; 20
    1170:	8d 91       	ld	r24, X+
    1172:	9c 91       	ld	r25, X
    1174:	55 97       	sbiw	r26, 0x15	; 21
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	4c 01       	movw	r8, r24
    117c:	77 24       	eor	r7, r7
    117e:	66 24       	eor	r6, r6
    1180:	f9 01       	movw	r30, r18
    1182:	82 8d       	ldd	r24, Z+26	; 0x1a
    1184:	93 8d       	ldd	r25, Z+27	; 0x1b
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	68 2a       	or	r6, r24
    118c:	79 2a       	or	r7, r25
    118e:	8a 2a       	or	r8, r26
    1190:	9b 2a       	or	r9, r27

fileSize = dir->fileSize;
    1192:	d9 01       	movw	r26, r18
    1194:	5c 96       	adiw	r26, 0x1c	; 28
    1196:	8d 91       	ld	r24, X+
    1198:	9d 91       	ld	r25, X+
    119a:	0d 90       	ld	r0, X+
    119c:	bc 91       	ld	r27, X
    119e:	a0 2d       	mov	r26, r0
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	ab 83       	std	Y+3, r26	; 0x03
    11a6:	bc 83       	std	Y+4, r27	; 0x04

TX_NEWLINE;
    11a8:	8d e0       	ldi	r24, 0x0D	; 13
    11aa:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    11ae:	8a e0       	ldi	r24, 0x0A	; 10
    11b0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
TX_NEWLINE;
    11b4:	8d e0       	ldi	r24, 0x0D	; 13
    11b6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    11c0:	22 24       	eor	r2, r2
    11c2:	33 24       	eor	r3, r3
    11c4:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    11c6:	20 91 ad 03 	lds	r18, 0x03AD
    11ca:	30 91 ae 03 	lds	r19, 0x03AE
    11ce:	e0 90 95 01 	lds	r14, 0x0195
    11d2:	f0 90 96 01 	lds	r15, 0x0196
    11d6:	00 91 97 01 	lds	r16, 0x0197
    11da:	10 91 98 01 	lds	r17, 0x0198
    11de:	c4 01       	movw	r24, r8
    11e0:	b3 01       	movw	r22, r6
    11e2:	62 50       	subi	r22, 0x02	; 2
    11e4:	70 40       	sbci	r23, 0x00	; 0
    11e6:	80 40       	sbci	r24, 0x00	; 0
    11e8:	90 40       	sbci	r25, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
    11f2:	5b 01       	movw	r10, r22
    11f4:	6c 01       	movw	r12, r24
    11f6:	ae 0c       	add	r10, r14
    11f8:	bf 1c       	adc	r11, r15
    11fa:	c0 1e       	adc	r12, r16
    11fc:	d1 1e       	adc	r13, r17
    11fe:	ee 24       	eor	r14, r14
    1200:	25 c0       	rjmp	.+74     	; 0x124c <readFile+0x140>
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    1202:	c6 01       	movw	r24, r12
    1204:	b5 01       	movw	r22, r10
    1206:	6e 0d       	add	r22, r14
    1208:	71 1d       	adc	r23, r1
    120a:	81 1d       	adc	r24, r1
    120c:	91 1d       	adc	r25, r1
    120e:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    1216:	f8 01       	movw	r30, r16
    1218:	e3 55       	subi	r30, 0x53	; 83
    121a:	fe 4f       	sbci	r31, 0xFE	; 254
    121c:	80 81       	ld	r24, Z
    121e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	ab 81       	ldd	r26, Y+3	; 0x03
    1228:	bc 81       	ldd	r27, Y+4	; 0x04
    122a:	28 16       	cp	r2, r24
    122c:	39 06       	cpc	r3, r25
    122e:	4a 06       	cpc	r4, r26
    1230:	5b 06       	cpc	r5, r27
    1232:	50 f5       	brcc	.+84     	; 0x1288 <readFile+0x17c>
    1234:	08 94       	sec
    1236:	21 1c       	adc	r2, r1
    1238:	31 1c       	adc	r3, r1
    123a:	41 1c       	adc	r4, r1
    123c:	51 1c       	adc	r5, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    123e:	0f 5f       	subi	r16, 0xFF	; 255
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	00 30       	cpi	r16, 0x00	; 0
    1246:	19 07       	cpc	r17, r25
    1248:	31 f7       	brne	.-52     	; 0x1216 <readFile+0x10a>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    124a:	e3 94       	inc	r14
    124c:	20 91 ad 03 	lds	r18, 0x03AD
    1250:	30 91 ae 03 	lds	r19, 0x03AE
    1254:	8e 2d       	mov	r24, r14
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	82 17       	cp	r24, r18
    125a:	93 07       	cpc	r25, r19
    125c:	90 f2       	brcs	.-92     	; 0x1202 <readFile+0xf6>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    125e:	c4 01       	movw	r24, r8
    1260:	b3 01       	movw	r22, r6
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	00 e0       	ldi	r16, 0x00	; 0
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
    1270:	3b 01       	movw	r6, r22
    1272:	4c 01       	movw	r8, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1274:	61 15       	cp	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	81 05       	cpc	r24, r1
    127a:	91 05       	cpc	r25, r1
    127c:	09 f0       	breq	.+2      	; 0x1280 <readFile+0x174>
    127e:	a3 cf       	rjmp	.-186    	; 0x11c6 <readFile+0xba>
    1280:	89 eb       	ldi	r24, 0xB9	; 185
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1288:	80 e0       	ldi	r24, 0x00	; 0
}
return 0;
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	bf 90       	pop	r11
    12a4:	af 90       	pop	r10
    12a6:	9f 90       	pop	r9
    12a8:	8f 90       	pop	r8
    12aa:	7f 90       	pop	r7
    12ac:	6f 90       	pop	r6
    12ae:	5f 90       	pop	r5
    12b0:	4f 90       	pop	r4
    12b2:	3f 90       	pop	r3
    12b4:	2f 90       	pop	r2
    12b6:	08 95       	ret

000012b8 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    12b8:	2f 92       	push	r2
    12ba:	3f 92       	push	r3
    12bc:	4f 92       	push	r4
    12be:	5f 92       	push	r5
    12c0:	6f 92       	push	r6
    12c2:	7f 92       	push	r7
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	27 97       	sbiw	r28, 0x07	; 7
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	9d 83       	std	Y+5, r25	; 0x05
    12ee:	8c 83       	std	Y+4, r24	; 0x04
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	6c 81       	ldd	r22, Y+4	; 0x04
    12f4:	7d 81       	ldd	r23, Y+5	; 0x05
    12f6:	0e 94 86 08 	call	0x110c	; 0x110c <readFile>

if(j == 1) 
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <writeFile+0x48>
    12fe:	56 c0       	rjmp	.+172    	; 0x13ac <writeFile+0xf4>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    1300:	60 90 c3 03 	lds	r6, 0x03C3
    1304:	70 90 c4 03 	lds	r7, 0x03C4
    1308:	80 90 c5 03 	lds	r8, 0x03C5
    130c:	90 90 c6 03 	lds	r9, 0x03C6
    1310:	aa 24       	eor	r10, r10
    1312:	bb 24       	eor	r11, r11
    1314:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    1316:	c4 01       	movw	r24, r8
    1318:	b3 01       	movw	r22, r6
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
    if(nextCluster == EOF) break;
    1328:	6f 3f       	cpi	r22, 0xFF	; 255
    132a:	2f ef       	ldi	r18, 0xFF	; 255
    132c:	72 07       	cpc	r23, r18
    132e:	2f ef       	ldi	r18, 0xFF	; 255
    1330:	82 07       	cpc	r24, r18
    1332:	2f e0       	ldi	r18, 0x0F	; 15
    1334:	92 07       	cpc	r25, r18
    1336:	41 f0       	breq	.+16     	; 0x1348 <writeFile+0x90>
	cluster = nextCluster;
	clusterCount++;
    1338:	08 94       	sec
    133a:	a1 1c       	adc	r10, r1
    133c:	b1 1c       	adc	r11, r1
    133e:	c1 1c       	adc	r12, r1
    1340:	d1 1c       	adc	r13, r1
    1342:	3b 01       	movw	r6, r22
    1344:	4c 01       	movw	r8, r24
    1346:	e7 cf       	rjmp	.-50     	; 0x1316 <writeFile+0x5e>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1348:	20 91 ad 03 	lds	r18, 0x03AD
    134c:	30 91 ae 03 	lds	r19, 0x03AE
    1350:	60 91 9d 01 	lds	r22, 0x019D
    1354:	70 91 9e 01 	lds	r23, 0x019E
    1358:	e0 90 9d 01 	lds	r14, 0x019D
    135c:	f0 90 9e 01 	lds	r15, 0x019E
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
    136c:	a6 01       	movw	r20, r12
    136e:	95 01       	movw	r18, r10
    1370:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	60 91 99 01 	lds	r22, 0x0199
    137c:	70 91 9a 01 	lds	r23, 0x019A
    1380:	80 91 9b 01 	lds	r24, 0x019B
    1384:	90 91 9c 01 	lds	r25, 0x019C
    1388:	62 1b       	sub	r22, r18
    138a:	73 0b       	sbc	r23, r19
    138c:	84 0b       	sbc	r24, r20
    138e:	95 0b       	sbc	r25, r21
    1390:	00 e0       	ldi	r16, 0x00	; 0
    1392:	10 e0       	ldi	r17, 0x00	; 0
    1394:	a8 01       	movw	r20, r16
    1396:	97 01       	movw	r18, r14
    1398:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
    139c:	a2 2e       	mov	r10, r18
    139e:	21 e0       	ldi	r18, 0x01	; 1
    13a0:	2b 83       	std	Y+3, r18	; 0x03
    13a2:	1a 82       	std	Y+2, r1	; 0x02
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	1f 82       	std	Y+7, r1	; 0x07
    13a8:	1e 82       	std	Y+6, r1	; 0x06
    13aa:	4f c0       	rjmp	.+158    	; 0x144a <writeFile+0x192>
  start = 1;
}
else if(j == 2) 
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <writeFile+0xfa>
    13b0:	96 c2       	rjmp	.+1324   	; 0x18de <writeFile+0x626>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    13c6:	80 91 9f 01 	lds	r24, 0x019F
    13ca:	90 91 a0 01 	lds	r25, 0x01A0
    13ce:	a0 91 a1 01 	lds	r26, 0x01A1
    13d2:	b0 91 a2 01 	lds	r27, 0x01A2
    13d6:	82 17       	cp	r24, r18
    13d8:	93 07       	cpc	r25, r19
    13da:	a4 07       	cpc	r26, r20
    13dc:	b5 07       	cpc	r27, r21
    13de:	40 f4       	brcc	.+16     	; 0x13f0 <writeFile+0x138>
     cluster = rootCluster;
    13e0:	20 91 a3 01 	lds	r18, 0x01A3
    13e4:	30 91 a4 01 	lds	r19, 0x01A4
    13e8:	40 91 a5 01 	lds	r20, 0x01A5
    13ec:	50 91 a6 01 	lds	r21, 0x01A6

  cluster = searchNextFreeCluster(cluster);
    13f0:	ca 01       	movw	r24, r20
    13f2:	b9 01       	movw	r22, r18
    13f4:	0e 94 2f 03 	call	0x65e	; 0x65e <searchNextFreeCluster>
    13f8:	3b 01       	movw	r6, r22
    13fa:	4c 01       	movw	r8, r24
   if(cluster == 0)
    13fc:	61 15       	cp	r22, r1
    13fe:	71 05       	cpc	r23, r1
    1400:	81 05       	cpc	r24, r1
    1402:	91 05       	cpc	r25, r1
    1404:	49 f4       	brne	.+18     	; 0x1418 <writeFile+0x160>
   {
      TX_NEWLINE;
    1406:	8d e0       	ldi	r24, 0x0D	; 13
    1408:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    140c:	8a e0       	ldi	r24, 0x0A	; 10
    140e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1412:	84 e9       	ldi	r24, 0x94	; 148
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	61 c2       	rjmp	.+1218   	; 0x18da <writeFile+0x622>
	  return 1;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	0f ef       	ldi	r16, 0xFF	; 255
    141c:	1f ef       	ldi	r17, 0xFF	; 255
    141e:	2f ef       	ldi	r18, 0xFF	; 255
    1420:	3f e0       	ldi	r19, 0x0F	; 15
    1422:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1426:	c4 01       	movw	r24, r8
    1428:	aa 27       	eor	r26, r26
    142a:	bb 27       	eor	r27, r27
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1430:	7f 82       	std	Y+7, r7	; 0x07
    1432:	6e 82       	std	Y+6, r6	; 0x06
  fileSize = 0;
    1434:	10 92 99 01 	sts	0x0199, r1
    1438:	10 92 9a 01 	sts	0x019A, r1
    143c:	10 92 9b 01 	sts	0x019B, r1
    1440:	10 92 9c 01 	sts	0x019C, r1
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	1b 82       	std	Y+3, r1	; 0x03
    1448:	aa 24       	eor	r10, r10
    144a:	bb 24       	eor	r11, r11
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    144c:	2a 2c       	mov	r2, r10
    144e:	33 24       	eor	r3, r3
    1450:	44 24       	eor	r4, r4
    1452:	55 24       	eor	r5, r5
    1454:	c4 01       	movw	r24, r8
    1456:	b3 01       	movw	r22, r6
    1458:	62 50       	subi	r22, 0x02	; 2
    145a:	70 40       	sbci	r23, 0x00	; 0
    145c:	80 40       	sbci	r24, 0x00	; 0
    145e:	90 40       	sbci	r25, 0x00	; 0

k=0;

while(1)
{
   if(start)
    1460:	22 23       	and	r18, r18
    1462:	e1 f1       	breq	.+120    	; 0x14dc <writeFile+0x224>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1464:	20 91 ad 03 	lds	r18, 0x03AD
    1468:	30 91 ae 03 	lds	r19, 0x03AE
    146c:	e0 90 95 01 	lds	r14, 0x0195
    1470:	f0 90 96 01 	lds	r15, 0x0196
    1474:	00 91 97 01 	lds	r16, 0x0197
    1478:	10 91 98 01 	lds	r17, 0x0198
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    147c:	e2 0c       	add	r14, r2
    147e:	f3 1c       	adc	r15, r3
    1480:	04 1d       	adc	r16, r4
    1482:	15 1d       	adc	r17, r5
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
    148c:	e6 0e       	add	r14, r22
    148e:	f7 1e       	adc	r15, r23
    1490:	08 1f       	adc	r16, r24
    1492:	19 1f       	adc	r17, r25
    1494:	e0 92 a9 01 	sts	0x01A9, r14
    1498:	f0 92 aa 01 	sts	0x01AA, r15
    149c:	00 93 ab 01 	sts	0x01AB, r16
    14a0:	10 93 ac 01 	sts	0x01AC, r17
	  SD_readSingleBlock (startBlock);
    14a4:	60 91 a9 01 	lds	r22, 0x01A9
    14a8:	70 91 aa 01 	lds	r23, 0x01AA
    14ac:	80 91 ab 01 	lds	r24, 0x01AB
    14b0:	90 91 ac 01 	lds	r25, 0x01AC
    14b4:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    14b8:	20 91 9d 01 	lds	r18, 0x019D
    14bc:	30 91 9e 01 	lds	r19, 0x019E
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	60 91 99 01 	lds	r22, 0x0199
    14c8:	70 91 9a 01 	lds	r23, 0x019A
    14cc:	80 91 9b 01 	lds	r24, 0x019B
    14d0:	90 91 9c 01 	lds	r25, 0x019C
    14d4:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
    14d8:	0a 2d       	mov	r16, r10
    14da:	1f c0       	rjmp	.+62     	; 0x151a <writeFile+0x262>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    14dc:	20 91 ad 03 	lds	r18, 0x03AD
    14e0:	30 91 ae 03 	lds	r19, 0x03AE
    14e4:	e0 90 95 01 	lds	r14, 0x0195
    14e8:	f0 90 96 01 	lds	r15, 0x0196
    14ec:	00 91 97 01 	lds	r16, 0x0197
    14f0:	10 91 98 01 	lds	r17, 0x0198
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
    14fc:	e6 0e       	add	r14, r22
    14fe:	f7 1e       	adc	r15, r23
    1500:	08 1f       	adc	r16, r24
    1502:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1504:	e0 92 a9 01 	sts	0x01A9, r14
    1508:	f0 92 aa 01 	sts	0x01AA, r15
    150c:	00 93 ab 01 	sts	0x01AB, r16
    1510:	10 93 ac 01 	sts	0x01AC, r17
    1514:	00 e0       	ldi	r16, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
   
   
   do
   {

	 data = dataString[k++];
    151a:	eb 2d       	mov	r30, r11
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	e9 53       	subi	r30, 0x39	; 57
    1520:	fc 4f       	sbci	r31, 0xFC	; 252
    1522:	10 81       	ld	r17, Z
    1524:	b3 94       	inc	r11
	 //transmitByte(data);
     buffer[i++] = data;
    1526:	fb 01       	movw	r30, r22
    1528:	e3 55       	subi	r30, 0x53	; 83
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	10 83       	st	Z, r17
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
	 fileSize++;
    1532:	80 91 99 01 	lds	r24, 0x0199
    1536:	90 91 9a 01 	lds	r25, 0x019A
    153a:	a0 91 9b 01 	lds	r26, 0x019B
    153e:	b0 91 9c 01 	lds	r27, 0x019C
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	a1 1d       	adc	r26, r1
    1546:	b1 1d       	adc	r27, r1
    1548:	80 93 99 01 	sts	0x0199, r24
    154c:	90 93 9a 01 	sts	0x019A, r25
    1550:	a0 93 9b 01 	sts	0x019B, r26
    1554:	b0 93 9c 01 	sts	0x019C, r27
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	60 30       	cpi	r22, 0x00	; 0
    155c:	78 07       	cpc	r23, r24
    155e:	48 f1       	brcs	.+82     	; 0x15b2 <writeFile+0x2fa>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    1560:	60 91 a9 01 	lds	r22, 0x01A9
    1564:	70 91 aa 01 	lds	r23, 0x01AA
    1568:	80 91 ab 01 	lds	r24, 0x01AB
    156c:	90 91 ac 01 	lds	r25, 0x01AC
    1570:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>
       j++;
    1574:	0f 5f       	subi	r16, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    1576:	20 91 ad 03 	lds	r18, 0x03AD
    157a:	30 91 ae 03 	lds	r19, 0x03AE
    157e:	80 2f       	mov	r24, r16
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	82 17       	cp	r24, r18
    1584:	93 07       	cpc	r25, r19
    1586:	e1 f0       	breq	.+56     	; 0x15c0 <writeFile+0x308>
	   startBlock++; 
    1588:	80 91 a9 01 	lds	r24, 0x01A9
    158c:	90 91 aa 01 	lds	r25, 0x01AA
    1590:	a0 91 ab 01 	lds	r26, 0x01AB
    1594:	b0 91 ac 01 	lds	r27, 0x01AC
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	a1 1d       	adc	r26, r1
    159c:	b1 1d       	adc	r27, r1
    159e:	80 93 a9 01 	sts	0x01A9, r24
    15a2:	90 93 aa 01 	sts	0x01AA, r25
    15a6:	a0 93 ab 01 	sts	0x01AB, r26
    15aa:	b0 93 ac 01 	sts	0x01AC, r27
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
    15b2:	1a 30       	cpi	r17, 0x0A	; 10
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <writeFile+0x31a>
    15b6:	93 e6       	ldi	r25, 0x63	; 99
    15b8:	9b 15       	cp	r25, r11
    15ba:	08 f0       	brcs	.+2      	; 0x15be <writeFile+0x306>
    15bc:	ae cf       	rjmp	.-164    	; 0x151a <writeFile+0x262>
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <writeFile+0x31a>
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    15c0:	1a 30       	cpi	r17, 0x0A	; 10
    15c2:	19 f4       	brne	.+6      	; 0x15ca <writeFile+0x312>
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <writeFile+0x31a>
    15ca:	a3 e6       	ldi	r26, 0x63	; 99
    15cc:	ab 15       	cp	r26, r11
    15ce:	00 f5       	brcc	.+64     	; 0x1610 <writeFile+0x358>
    15d0:	f9 cf       	rjmp	.-14     	; 0x15c4 <writeFile+0x30c>
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    15d2:	fb 01       	movw	r30, r22
    15d4:	e3 55       	subi	r30, 0x53	; 83
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	10 82       	st	Z, r1
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    15da:	6f 5f       	subi	r22, 0xFF	; 255
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	b2 e0       	ldi	r27, 0x02	; 2
    15e0:	60 30       	cpi	r22, 0x00	; 0
    15e2:	7b 07       	cpc	r23, r27
    15e4:	b0 f3       	brcs	.-20     	; 0x15d2 <writeFile+0x31a>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    15e6:	60 91 a9 01 	lds	r22, 0x01A9
    15ea:	70 91 aa 01 	lds	r23, 0x01AA
    15ee:	80 91 ab 01 	lds	r24, 0x01AB
    15f2:	90 91 ac 01 	lds	r25, 0x01AC
    15f6:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	a4 01       	movw	r20, r8
    1600:	93 01       	movw	r18, r6
    1602:	0e 94 41 04 	call	0x882	; 0x882 <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    1606:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    160a:	88 23       	and	r24, r24
    160c:	49 f5       	brne	.+82     	; 0x1660 <writeFile+0x3a8>
    160e:	30 c0       	rjmp	.+96     	; 0x1670 <writeFile+0x3b8>
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1610:	c4 01       	movw	r24, r8
    1612:	b3 01       	movw	r22, r6
    1614:	0e 94 2f 03 	call	0x65e	; 0x65e <searchNextFreeCluster>
    1618:	6b 01       	movw	r12, r22
    161a:	7c 01       	movw	r14, r24

   if(cluster == 0)
    161c:	61 15       	cp	r22, r1
    161e:	71 05       	cpc	r23, r1
    1620:	81 05       	cpc	r24, r1
    1622:	91 05       	cpc	r25, r1
    1624:	49 f4       	brne	.+18     	; 0x1638 <writeFile+0x380>
   {
      TX_NEWLINE;
    1626:	8d e0       	ldi	r24, 0x0D	; 13
    1628:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    162c:	8a e0       	ldi	r24, 0x0A	; 10
    162e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1632:	82 e8       	ldi	r24, 0x82	; 130
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	51 c1       	rjmp	.+674    	; 0x18da <writeFile+0x622>
	  return 1;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1638:	c4 01       	movw	r24, r8
    163a:	b3 01       	movw	r22, r6
    163c:	41 e0       	ldi	r20, 0x01	; 1
    163e:	97 01       	movw	r18, r14
    1640:	86 01       	movw	r16, r12
    1642:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1646:	c7 01       	movw	r24, r14
    1648:	b6 01       	movw	r22, r12
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0f ef       	ldi	r16, 0xFF	; 255
    164e:	1f ef       	ldi	r17, 0xFF	; 255
    1650:	2f ef       	ldi	r18, 0xFF	; 255
    1652:	3f e0       	ldi	r19, 0x0F	; 15
    1654:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	36 01       	movw	r6, r12
    165c:	47 01       	movw	r8, r14
    165e:	fa ce       	rjmp	.-524    	; 0x1454 <writeFile+0x19c>
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
    1660:	10 92 94 01 	sts	0x0194, r1
    1664:	10 92 93 01 	sts	0x0193, r1
    1668:	10 92 a8 01 	sts	0x01A8, r1
    166c:	10 92 a7 01 	sts	0x01A7, r1

if(appendFile)  //executes this loop if file is to be appended
    1670:	eb 81       	ldd	r30, Y+3	; 0x03
    1672:	ee 23       	and	r30, r30
    1674:	09 f4       	brne	.+2      	; 0x1678 <writeFile+0x3c0>
    1676:	44 c0       	rjmp	.+136    	; 0x1700 <writeFile+0x448>
{
  SD_readSingleBlock (appendFileSector);    
    1678:	60 91 39 04 	lds	r22, 0x0439
    167c:	70 91 3a 04 	lds	r23, 0x043A
    1680:	80 91 3b 04 	lds	r24, 0x043B
    1684:	90 91 3c 04 	lds	r25, 0x043C
    1688:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    168c:	e0 91 8f 01 	lds	r30, 0x018F
    1690:	f0 91 90 01 	lds	r31, 0x0190
    1694:	e3 55       	subi	r30, 0x53	; 83
    1696:	fe 4f       	sbci	r31, 0xFE	; 254

  dir->lastAccessDate = 0;   //date of last access ignored
    1698:	13 8a       	std	Z+19, r1	; 0x13
    169a:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    169c:	80 91 a7 01 	lds	r24, 0x01A7
    16a0:	90 91 a8 01 	lds	r25, 0x01A8
    16a4:	97 8b       	std	Z+23, r25	; 0x17
    16a6:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    16a8:	80 91 93 01 	lds	r24, 0x0193
    16ac:	90 91 94 01 	lds	r25, 0x0194
    16b0:	91 8f       	std	Z+25, r25	; 0x19
    16b2:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    16b4:	20 91 99 01 	lds	r18, 0x0199
    16b8:	30 91 9a 01 	lds	r19, 0x019A
    16bc:	40 91 9b 01 	lds	r20, 0x019B
    16c0:	50 91 9c 01 	lds	r21, 0x019C
    16c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    16c6:	95 8d       	ldd	r25, Z+29	; 0x1d
    16c8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    16ca:	b7 8d       	ldd	r27, Z+31	; 0x1f
    16cc:	79 01       	movw	r14, r18
    16ce:	8a 01       	movw	r16, r20
    16d0:	e8 1a       	sub	r14, r24
    16d2:	f9 0a       	sbc	r15, r25
    16d4:	0a 0b       	sbc	r16, r26
    16d6:	1b 0b       	sbc	r17, r27
  dir->fileSize = fileSize;
    16d8:	24 8f       	std	Z+28, r18	; 0x1c
    16da:	35 8f       	std	Z+29, r19	; 0x1d
    16dc:	46 8f       	std	Z+30, r20	; 0x1e
    16de:	57 8f       	std	Z+31, r21	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    16e0:	60 91 39 04 	lds	r22, 0x0439
    16e4:	70 91 3a 04 	lds	r23, 0x043A
    16e8:	80 91 3b 04 	lds	r24, 0x043B
    16ec:	90 91 3c 04 	lds	r25, 0x043C
    16f0:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	b8 01       	movw	r22, r16
    16f8:	a7 01       	movw	r20, r14
    16fa:	0e 94 c8 04 	call	0x990	; 0x990 <freeMemoryUpdate>
    16fe:	36 c0       	rjmp	.+108    	; 0x176c <writeFile+0x4b4>
  return 0;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1700:	80 90 a3 01 	lds	r8, 0x01A3
    1704:	90 90 a4 01 	lds	r9, 0x01A4
    1708:	a0 90 a5 01 	lds	r10, 0x01A5
    170c:	b0 90 a6 01 	lds	r11, 0x01A6
    1710:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1712:	20 91 ad 03 	lds	r18, 0x03AD
    1716:	30 91 ae 03 	lds	r19, 0x03AE
    171a:	e0 90 95 01 	lds	r14, 0x0195
    171e:	f0 90 96 01 	lds	r15, 0x0196
    1722:	00 91 97 01 	lds	r16, 0x0197
    1726:	10 91 98 01 	lds	r17, 0x0198
    172a:	c5 01       	movw	r24, r10
    172c:	b4 01       	movw	r22, r8
    172e:	62 50       	subi	r22, 0x02	; 2
    1730:	70 40       	sbci	r23, 0x00	; 0
    1732:	80 40       	sbci	r24, 0x00	; 0
    1734:	90 40       	sbci	r25, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__mulsi3>
    173e:	2b 01       	movw	r4, r22
    1740:	3c 01       	movw	r6, r24
    1742:	4e 0c       	add	r4, r14
    1744:	5f 1c       	adc	r5, r15
    1746:	60 1e       	adc	r6, r16
    1748:	71 1e       	adc	r7, r17
    174a:	33 24       	eor	r3, r3
    174c:	7d c0       	rjmp	.+250    	; 0x1848 <writeFile+0x590>
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    174e:	73 01       	movw	r14, r6
    1750:	62 01       	movw	r12, r4
    1752:	c3 0c       	add	r12, r3
    1754:	d1 1c       	adc	r13, r1
    1756:	e1 1c       	adc	r14, r1
    1758:	f1 1c       	adc	r15, r1
    175a:	c7 01       	movw	r24, r14
    175c:	b6 01       	movw	r22, r12
    175e:	0e 94 1c 14 	call	0x2838	; 0x2838 <SD_readSingleBlock>
    1762:	00 e2       	ldi	r16, 0x20	; 32
    1764:	10 e0       	ldi	r17, 0x00	; 0
    1766:	65 c0       	rjmp	.+202    	; 0x1832 <writeFile+0x57a>

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1768:	22 20       	and	r2, r2
    176a:	11 f0       	breq	.+4      	; 0x1770 <writeFile+0x4b8>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	b8 c0       	rjmp	.+368    	; 0x18e0 <writeFile+0x628>
    1770:	af 01       	movw	r20, r30
    1772:	43 55       	subi	r20, 0x53	; 83
    1774:	5e 4f       	sbci	r21, 0xFE	; 254
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1776:	f8 01       	movw	r30, r16
    1778:	e3 57       	subi	r30, 0x73	; 115
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	e0 81       	ld	r30, Z
    177e:	ee 23       	and	r30, r30
    1780:	19 f0       	breq	.+6      	; 0x1788 <writeFile+0x4d0>
    1782:	e5 3e       	cpi	r30, 0xE5	; 229
    1784:	09 f0       	breq	.+2      	; 0x1788 <writeFile+0x4d0>
    1786:	53 c0       	rjmp	.+166    	; 0x182e <writeFile+0x576>
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    178c:	ba 01       	movw	r22, r20
    178e:	62 0f       	add	r22, r18
    1790:	73 1f       	adc	r23, r19
    1792:	ac 81       	ldd	r26, Y+4	; 0x04
    1794:	bd 81       	ldd	r27, Y+5	; 0x05
    1796:	a2 0f       	add	r26, r18
    1798:	b3 1f       	adc	r27, r19
    179a:	8c 91       	ld	r24, X
    179c:	db 01       	movw	r26, r22
    179e:	8c 93       	st	X, r24
    17a0:	2f 5f       	subi	r18, 0xFF	; 255
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    17a4:	2b 30       	cpi	r18, 0x0B	; 11
    17a6:	31 05       	cpc	r19, r1
    17a8:	89 f7       	brne	.-30     	; 0x178c <writeFile+0x4d4>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    17aa:	f8 01       	movw	r30, r16
    17ac:	e3 55       	subi	r30, 0x53	; 83
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	75 97       	sbiw	r30, 0x15	; 21
    17b2:	b0 e2       	ldi	r27, 0x20	; 32
    17b4:	b1 93       	st	Z+, r27
		  dir->NTreserved = 0;			//always set to 0
    17b6:	11 92       	st	Z+, r1
		  dir->timeTenth = 0;			//always set to 0
    17b8:	11 92       	st	Z+, r1
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    17ba:	20 91 a7 01 	lds	r18, 0x01A7
    17be:	30 91 a8 01 	lds	r19, 0x01A8
    17c2:	21 93       	st	Z+, r18
    17c4:	31 93       	st	Z+, r19
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    17c6:	80 91 93 01 	lds	r24, 0x0193
    17ca:	90 91 94 01 	lds	r25, 0x0194
    17ce:	81 93       	st	Z+, r24
    17d0:	91 93       	st	Z+, r25
		  dir->lastAccessDate = 0;   	//date of last access ignored
    17d2:	11 82       	std	Z+1, r1	; 0x01
    17d4:	10 82       	st	Z, r1
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    17d6:	34 96       	adiw	r30, 0x04	; 4
    17d8:	21 93       	st	Z+, r18
    17da:	31 93       	st	Z+, r19
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
		  dir->firstClusterHI = firstClusterHigh;
    17e0:	34 97       	sbiw	r30, 0x04	; 4
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
		  dir->firstClusterLO = firstClusterLow;
    17ea:	36 96       	adiw	r30, 0x06	; 6
    17ec:	ae 81       	ldd	r26, Y+6	; 0x06
    17ee:	bf 81       	ldd	r27, Y+7	; 0x07
    17f0:	a1 93       	st	Z+, r26
    17f2:	b1 93       	st	Z+, r27
		  dir->fileSize = fileSize;
    17f4:	80 91 99 01 	lds	r24, 0x0199
    17f8:	90 91 9a 01 	lds	r25, 0x019A
    17fc:	a0 91 9b 01 	lds	r26, 0x019B
    1800:	b0 91 9c 01 	lds	r27, 0x019C
    1804:	80 83       	st	Z, r24
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	a2 83       	std	Z+2, r26	; 0x02
    180a:	b3 83       	std	Z+3, r27	; 0x03

		  SD_writeSingleBlock (firstSector + sector);
    180c:	c7 01       	movw	r24, r14
    180e:	b6 01       	movw	r22, r12
    1810:	0e 94 ce 13 	call	0x279c	; 0x279c <SD_writeSingleBlock>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1814:	40 91 99 01 	lds	r20, 0x0199
    1818:	50 91 9a 01 	lds	r21, 0x019A
    181c:	60 91 9b 01 	lds	r22, 0x019B
    1820:	70 91 9c 01 	lds	r23, 0x019C
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e 94 c8 04 	call	0x990	; 0x990 <freeMemoryUpdate>
    182a:	22 24       	eor	r2, r2
    182c:	23 94       	inc	r2
    182e:	00 5e       	subi	r16, 0xE0	; 224
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1832:	80 91 9d 01 	lds	r24, 0x019D
    1836:	90 91 9e 01 	lds	r25, 0x019E
    183a:	f8 01       	movw	r30, r16
    183c:	b0 97       	sbiw	r30, 0x20	; 32
    183e:	e8 17       	cp	r30, r24
    1840:	f9 07       	cpc	r31, r25
    1842:	08 f4       	brcc	.+2      	; 0x1846 <writeFile+0x58e>
    1844:	91 cf       	rjmp	.-222    	; 0x1768 <writeFile+0x4b0>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1846:	33 94       	inc	r3
    1848:	20 91 ad 03 	lds	r18, 0x03AD
    184c:	30 91 ae 03 	lds	r19, 0x03AE
    1850:	83 2d       	mov	r24, r3
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	82 17       	cp	r24, r18
    1856:	93 07       	cpc	r25, r19
    1858:	08 f4       	brcc	.+2      	; 0x185c <writeFile+0x5a4>
    185a:	79 cf       	rjmp	.-270    	; 0x174e <writeFile+0x496>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    185c:	c5 01       	movw	r24, r10
    185e:	b4 01       	movw	r22, r8
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	00 e0       	ldi	r16, 0x00	; 0
    1864:	10 e0       	ldi	r17, 0x00	; 0
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
    186e:	6b 01       	movw	r12, r22
    1870:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1872:	67 3f       	cpi	r22, 0xF7	; 247
    1874:	bf ef       	ldi	r27, 0xFF	; 255
    1876:	7b 07       	cpc	r23, r27
    1878:	bf ef       	ldi	r27, 0xFF	; 255
    187a:	8b 07       	cpc	r24, r27
    187c:	bf e0       	ldi	r27, 0x0F	; 15
    187e:	9b 07       	cpc	r25, r27
    1880:	10 f1       	brcs	.+68     	; 0x18c6 <writeFile+0x60e>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1882:	6f 3f       	cpi	r22, 0xFF	; 255
    1884:	ef ef       	ldi	r30, 0xFF	; 255
    1886:	7e 07       	cpc	r23, r30
    1888:	ef ef       	ldi	r30, 0xFF	; 255
    188a:	8e 07       	cpc	r24, r30
    188c:	ef e0       	ldi	r30, 0x0F	; 15
    188e:	9e 07       	cpc	r25, r30
    1890:	b9 f4       	brne	.+46     	; 0x18c0 <writeFile+0x608>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1892:	c5 01       	movw	r24, r10
    1894:	b4 01       	movw	r22, r8
    1896:	0e 94 2f 03 	call	0x65e	; 0x65e <searchNextFreeCluster>
    189a:	6b 01       	movw	r12, r22
    189c:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    189e:	c5 01       	movw	r24, r10
    18a0:	b4 01       	movw	r22, r8
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	97 01       	movw	r18, r14
    18a6:	86 01       	movw	r16, r12
    18a8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    18ac:	c7 01       	movw	r24, r14
    18ae:	b6 01       	movw	r22, r12
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	0f ef       	ldi	r16, 0xFF	; 255
    18b4:	1f ef       	ldi	r17, 0xFF	; 255
    18b6:	2f ef       	ldi	r18, 0xFF	; 255
    18b8:	3f e0       	ldi	r19, 0x0F	; 15
    18ba:	0e 94 0f 06 	call	0xc1e	; 0xc1e <getSetNextCluster>
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <writeFile+0x60e>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    18c0:	8d e6       	ldi	r24, 0x6D	; 109
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <writeFile+0x622>
	    return 1;
    18c6:	46 01       	movw	r8, r12
    18c8:	57 01       	movw	r10, r14
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
    18ca:	c1 14       	cp	r12, r1
    18cc:	d1 04       	cpc	r13, r1
    18ce:	e1 04       	cpc	r14, r1
    18d0:	f1 04       	cpc	r15, r1
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <writeFile+0x61e>
    18d4:	1e cf       	rjmp	.-452    	; 0x1712 <writeFile+0x45a>
    18d6:	84 e5       	ldi	r24, 0x54	; 84
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    18de:	81 e0       	ldi	r24, 0x01	; 1
   
   prevCluster = cluster;
 }
 
 return 0;
}
    18e0:	27 96       	adiw	r28, 0x07	; 7
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	9f 90       	pop	r9
    1902:	8f 90       	pop	r8
    1904:	7f 90       	pop	r7
    1906:	6f 90       	pop	r6
    1908:	5f 90       	pop	r5
    190a:	4f 90       	pop	r4
    190c:	3f 90       	pop	r3
    190e:	2f 90       	pop	r2
    1910:	08 95       	ret

00001912 <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz @16MHz)
//************************************************
void twi_init(void)
{
 TWCR= 0x00; //disable twi
    1912:	16 be       	out	0x36, r1	; 54
 TWBR= 0x12; //set bit rate
    1914:	82 e1       	ldi	r24, 0x12	; 18
    1916:	80 b9       	out	0x00, r24	; 0
 TWSR= 0x00; //set prescale
    1918:	11 b8       	out	0x01, r1	; 1
 //TWCR= 0x44; //enable twi
}
    191a:	08 95       	ret

0000191c <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    191c:	84 ea       	ldi	r24, 0xA4	; 164
    191e:	86 bf       	out	0x36, r24	; 54
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1920:	06 b6       	in	r0, 0x36	; 54
    1922:	07 fe       	sbrs	r0, 7
    1924:	fd cf       	rjmp	.-6      	; 0x1920 <i2c_start+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    1926:	81 b1       	in	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	88 7f       	andi	r24, 0xF8	; 248
    192c:	88 30       	cpi	r24, 0x08	; 8
    192e:	09 f0       	breq	.+2      	; 0x1932 <i2c_start+0x16>
    1930:	91 e0       	ldi	r25, 0x01	; 1
 	   return(0);
	else
	   return(1);
}
    1932:	89 2f       	mov	r24, r25
    1934:	08 95       	ret

00001936 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    1936:	84 ea       	ldi	r24, 0xA4	; 164
    1938:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    193a:	06 b6       	in	r0, 0x36	; 54
    193c:	07 fe       	sbrs	r0, 7
    193e:	fd cf       	rjmp	.-6      	; 0x193a <i2c_repeatStart+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    1940:	81 b1       	in	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	88 7f       	andi	r24, 0xF8	; 248
    1946:	80 31       	cpi	r24, 0x10	; 16
    1948:	09 f0       	breq	.+2      	; 0x194c <i2c_repeatStart+0x16>
    194a:	91 e0       	ldi	r25, 0x01	; 1
 	   return(0);
	else
	   return(1);
}
    194c:	89 2f       	mov	r24, r25
    194e:	08 95       	ret

00001950 <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    1950:	80 fd       	sbrc	r24, 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <i2c_sendAddress+0x8>
    1954:	28 e1       	ldi	r18, 0x18	; 24
    1956:	01 c0       	rjmp	.+2      	; 0x195a <i2c_sendAddress+0xa>
    1958:	20 e4       	ldi	r18, 0x40	; 64
     STATUS = MT_SLA_ACK;
   else
     STATUS = MR_SLA_ACK; 
   
   TWDR = address; 
    195a:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    195c:	84 e8       	ldi	r24, 0x84	; 132
    195e:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    1960:	06 b6       	in	r0, 0x36	; 54
    1962:	07 fe       	sbrs	r0, 7
    1964:	fd cf       	rjmp	.-6      	; 0x1960 <i2c_sendAddress+0x10>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    1966:	81 b1       	in	r24, 0x01	; 1
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	88 7f       	andi	r24, 0xF8	; 248
    196e:	90 70       	andi	r25, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	09 f0       	breq	.+2      	; 0x197a <i2c_sendAddress+0x2a>
    1978:	41 e0       	ldi	r20, 0x01	; 1
   	  return(0);
   else 
      return(1);
}
    197a:	84 2f       	mov	r24, r20
    197c:	08 95       	ret

0000197e <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
    197e:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    1980:	84 e8       	ldi	r24, 0x84	; 132
    1982:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    1984:	06 b6       	in	r0, 0x36	; 54
    1986:	07 fe       	sbrs	r0, 7
    1988:	fd cf       	rjmp	.-6      	; 0x1984 <i2c_sendData+0x6>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    198a:	81 b1       	in	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	88 7f       	andi	r24, 0xF8	; 248
    1990:	88 32       	cpi	r24, 0x28	; 40
    1992:	09 f0       	breq	.+2      	; 0x1996 <i2c_sendData+0x18>
    1994:	91 e0       	ldi	r25, 0x01	; 1
   	  return(1);
   else
      return(0);
}
    1996:	89 2f       	mov	r24, r25
    1998:	08 95       	ret

0000199a <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    199a:	84 ec       	ldi	r24, 0xC4	; 196
    199c:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    199e:	06 b6       	in	r0, 0x36	; 54
    19a0:	07 fe       	sbrs	r0, 7
    19a2:	fd cf       	rjmp	.-6      	; 0x199e <i2c_receiveData_ACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    19a4:	81 b1       	in	r24, 0x01	; 1
    19a6:	88 7f       	andi	r24, 0xF8	; 248
    19a8:	80 35       	cpi	r24, 0x50	; 80
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <i2c_receiveData_ACK+0x16>
    19ac:	8e e7       	ldi	r24, 0x7E	; 126
    19ae:	08 95       	ret
   	  return(ERROR_CODE);
  
  data = TWDR;
    19b0:	83 b1       	in	r24, 0x03	; 3
  return(data);
}
    19b2:	08 95       	ret

000019b4 <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    19b4:	84 e8       	ldi	r24, 0x84	; 132
    19b6:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    19b8:	06 b6       	in	r0, 0x36	; 54
    19ba:	07 fe       	sbrs	r0, 7
    19bc:	fd cf       	rjmp	.-6      	; 0x19b8 <i2c_receiveData_NACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    19be:	81 b1       	in	r24, 0x01	; 1
    19c0:	88 7f       	andi	r24, 0xF8	; 248
    19c2:	88 35       	cpi	r24, 0x58	; 88
    19c4:	11 f0       	breq	.+4      	; 0x19ca <i2c_receiveData_NACK+0x16>
    19c6:	8e e7       	ldi	r24, 0x7E	; 126
    19c8:	08 95       	ret
   	  return(ERROR_CODE);
  
  data = TWDR;
    19ca:	83 b1       	in	r24, 0x03	; 3
  return(data);
}
    19cc:	08 95       	ret

000019ce <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    19ce:	84 e9       	ldi	r24, 0x94	; 148
    19d0:	86 bf       	out	0x36, r24	; 54
}  
    19d2:	08 95       	ret

000019d4 <port_init>:
#define RED_LED_OFF		PORTC &= ~0x40


void port_init(void)
{
  PORTA = 0x00;
    19d4:	1b ba       	out	0x1b, r1	; 27
  DDRA  = 0x00;
    19d6:	1a ba       	out	0x1a, r1	; 26
  PORTB = 0x00; //pull-up on for pushbutton
    19d8:	18 ba       	out	0x18, r1	; 24
  DDRB  = 0xBF; //MISO line i/p, rest o/p
    19da:	8f eb       	ldi	r24, 0xBF	; 191
    19dc:	87 bb       	out	0x17, r24	; 23
  PORTC = 0x80; //pull-up for push-button
    19de:	80 e8       	ldi	r24, 0x80	; 128
    19e0:	85 bb       	out	0x15, r24	; 21
  DDRC  = 0x60; //PC7- i/p (pushbutton), PC6, PC5 - o/p (two LEDs)
    19e2:	80 e6       	ldi	r24, 0x60	; 96
    19e4:	84 bb       	out	0x14, r24	; 20
  PORTD = 0x00;
    19e6:	12 ba       	out	0x12, r1	; 18
  DDRD  = 0x00;
    19e8:	11 ba       	out	0x11, r1	; 17
}
    19ea:	08 95       	ret

000019ec <blinkRedLED>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ec:	28 ec       	ldi	r18, 0xC8	; 200
    19ee:	30 e0       	ldi	r19, 0x00	; 0
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    19f0:	ae 9a       	sbi	0x15, 6	; 21
    19f2:	80 ea       	ldi	r24, 0xA0	; 160
    19f4:	9f e0       	ldi	r25, 0x0F	; 15
    19f6:	f9 01       	movw	r30, r18
    19f8:	31 97       	sbiw	r30, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <blinkRedLED+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	d9 f7       	brne	.-10     	; 0x19f6 <blinkRedLED+0xa>
	_delay_ms(400);
	RED_LED_OFF;
    1a00:	ae 98       	cbi	0x15, 6	; 21
    1a02:	80 ea       	ldi	r24, 0xA0	; 160
    1a04:	9f e0       	ldi	r25, 0x0F	; 15
    1a06:	f9 01       	movw	r30, r18
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <blinkRedLED+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	d9 f7       	brne	.-10     	; 0x1a06 <blinkRedLED+0x1a>
    1a10:	ef cf       	rjmp	.-34     	; 0x19f0 <blinkRedLED+0x4>

00001a12 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
  cli();  //all interrupts disabled
    1a12:	f8 94       	cli
#define RED_LED_OFF		PORTC &= ~0x40


void port_init(void)
{
  PORTA = 0x00;
    1a14:	1b ba       	out	0x1b, r1	; 27
  DDRA  = 0x00;
    1a16:	1a ba       	out	0x1a, r1	; 26
  PORTB = 0x00; //pull-up on for pushbutton
    1a18:	18 ba       	out	0x18, r1	; 24
  DDRB  = 0xBF; //MISO line i/p, rest o/p
    1a1a:	8f eb       	ldi	r24, 0xBF	; 191
    1a1c:	87 bb       	out	0x17, r24	; 23
  PORTC = 0x80; //pull-up for push-button
    1a1e:	80 e8       	ldi	r24, 0x80	; 128
    1a20:	85 bb       	out	0x15, r24	; 21
  DDRC  = 0x60; //PC7- i/p (pushbutton), PC6, PC5 - o/p (two LEDs)
    1a22:	80 e6       	ldi	r24, 0x60	; 96
    1a24:	84 bb       	out	0x14, r24	; 20
  PORTD = 0x00;
    1a26:	12 ba       	out	0x12, r1	; 18
  DDRD  = 0x00;
    1a28:	11 ba       	out	0x11, r1	; 17
//call this routine to initialize all peripherals
void init_devices(void)
{
  cli();  //all interrupts disabled
  port_init();
  spi_init();
    1a2a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <spi_init>
  twi_init();
    1a2e:	0e 94 89 0c 	call	0x1912	; 0x1912 <twi_init>
  uart0_init();
    1a32:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <uart0_init>
  ADC_init();
    1a36:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_init>

  MCUCR = 0x00;
    1a3a:	15 be       	out	0x35, r1	; 53
  GICR  = 0x00;
    1a3c:	1b be       	out	0x3b, r1	; 59
  TIMSK = 0x00; //timer interrupt sources
    1a3e:	19 be       	out	0x39, r1	; 57
  //all peripherals are now initialized
}
    1a40:	08 95       	ret

00001a42 <main>:

}

//*************************** MAIN *******************************//
int main(void)
{
    1a42:	2f 92       	push	r2
    1a44:	3f 92       	push	r3
    1a46:	4f 92       	push	r4
    1a48:	5f 92       	push	r5
    1a4a:	6f 92       	push	r6
    1a4c:	7f 92       	push	r7
    1a4e:	8f 92       	push	r8
    1a50:	9f 92       	push	r9
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	88 ee       	ldi	r24, 0xE8	; 232
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	28 ec       	ldi	r18, 0xC8	; 200
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	f9 01       	movw	r30, r18
    1a80:	31 97       	sbiw	r30, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <main+0x3c>
  unsigned char fileName[13];
  unsigned int delay, k;

  _delay_ms(100);  //delay for VCC stabilization

  init_devices();
    1a88:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <init_devices>

  GREEN_LED_ON;  //turn on green LED to indicate power on
    1a8c:	ad 9a       	sbi	0x15, 5	; 21
  RED_LED_OFF; 	 //keep red LED off for now
    1a8e:	ae 98       	cbi	0x15, 6	; 21

  transmitString_F (PSTR("\n\r\n\r****************************************************"));
    1a90:	86 e9       	ldi	r24, 0x96	; 150
    1a92:	93 e0       	ldi	r25, 0x03	; 3
    1a94:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  transmitString_F (PSTR("\n\r         microSD Datalogger - by CC Dharmani "));
    1a98:	86 e6       	ldi	r24, 0x66	; 102
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  transmitString_F (PSTR("\n\r****************************************************\n\r"));
    1aa0:	8d e2       	ldi	r24, 0x2D	; 45
    1aa2:	93 e0       	ldi	r25, 0x03	; 3
    1aa4:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>

  cardType = 0;
    1aa8:	10 92 2b 04 	sts	0x042B, r1
    1aac:	10 e0       	ldi	r17, 0x00	; 0

  for (i=0; i<10; i++)
  {
  	error = SD_init();
    1aae:	0e 94 4d 14 	call	0x289a	; 0x289a <SD_init>
  	if(!error) break;
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f1       	breq	.+66     	; 0x1af8 <main+0xb6>
  transmitString_F (PSTR("\n\r         microSD Datalogger - by CC Dharmani "));
  transmitString_F (PSTR("\n\r****************************************************\n\r"));

  cardType = 0;

  for (i=0; i<10; i++)
    1ab6:	1f 5f       	subi	r17, 0xFF	; 255
    1ab8:	1a 30       	cpi	r17, 0x0A	; 10
    1aba:	c9 f7       	brne	.-14     	; 0x1aae <main+0x6c>
  	if(!error) break;
  }

  if(error)
  {
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	19 f4       	brne	.+6      	; 0x1ac6 <main+0x84>
    1ac0:	86 e1       	ldi	r24, 0x16	; 22
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <main+0x8c>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <main+0x90>
    1aca:	89 ef       	ldi	r24, 0xF9	; 249
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1ad2:	28 ec       	ldi	r18, 0xC8	; 200
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    1ad6:	ae 9a       	sbi	0x15, 6	; 21
    1ad8:	80 ea       	ldi	r24, 0xA0	; 160
    1ada:	9f e0       	ldi	r25, 0x0F	; 15
    1adc:	f9 01       	movw	r30, r18
    1ade:	31 97       	sbiw	r30, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <main+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	d9 f7       	brne	.-10     	; 0x1adc <main+0x9a>
	_delay_ms(400);
	RED_LED_OFF;
    1ae6:	ae 98       	cbi	0x15, 6	; 21
    1ae8:	80 ea       	ldi	r24, 0xA0	; 160
    1aea:	9f e0       	ldi	r25, 0x0F	; 15
    1aec:	f9 01       	movw	r30, r18
    1aee:	31 97       	sbiw	r30, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <main+0xac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	d9 f7       	brne	.-10     	; 0x1aec <main+0xaa>
    1af6:	ef cf       	rjmp	.-34     	; 0x1ad6 <main+0x94>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
  
  	blinkRedLED();
  }

  switch (cardType)
    1af8:	80 91 2b 04 	lds	r24, 0x042B
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	39 f0       	breq	.+14     	; 0x1b0e <main+0xcc>
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	41 f0       	breq	.+16     	; 0x1b14 <main+0xd2>
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	49 f4       	brne	.+18     	; 0x1b1a <main+0xd8>
  {
  	case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1b08:	8e ec       	ldi	r24, 0xCE	; 206
    1b0a:	92 e0       	ldi	r25, 0x02	; 2
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <main+0xdc>
  		   break;
  	case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1b0e:	81 eb       	ldi	r24, 0xB1	; 177
    1b10:	92 e0       	ldi	r25, 0x02	; 2
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <main+0xdc>
  		   break;
  	case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1b14:	86 e8       	ldi	r24, 0x86	; 134
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <main+0xdc>
  		   break;
  	default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1b1a:	8c e6       	ldi	r24, 0x6C	; 108
    1b1c:	92 e0       	ldi	r25, 0x02	; 2
    1b1e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  		   break; 
  }

  error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1b22:	0e 94 29 05 	call	0xa52	; 0xa52 <getBootSectorData>
  if(error) 
    1b26:	88 23       	and	r24, r24
    1b28:	b9 f0       	breq	.+46     	; 0x1b58 <main+0x116>
  {
   	transmitString_F (PSTR("\n\rFAT32 not found!"));  //FAT32 incompatible drive
    1b2a:	89 e5       	ldi	r24, 0x59	; 89
    1b2c:	92 e0       	ldi	r25, 0x02	; 2
    1b2e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1b32:	28 ec       	ldi	r18, 0xC8	; 200
    1b34:	30 e0       	ldi	r19, 0x00	; 0
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    1b36:	ae 9a       	sbi	0x15, 6	; 21
    1b38:	80 ea       	ldi	r24, 0xA0	; 160
    1b3a:	9f e0       	ldi	r25, 0x0F	; 15
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	31 97       	sbiw	r30, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <main+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	d9 f7       	brne	.-10     	; 0x1b3c <main+0xfa>
	_delay_ms(400);
	RED_LED_OFF;
    1b46:	ae 98       	cbi	0x15, 6	; 21
    1b48:	80 ea       	ldi	r24, 0xA0	; 160
    1b4a:	9f e0       	ldi	r25, 0x0F	; 15
    1b4c:	f9 01       	movw	r30, r18
    1b4e:	31 97       	sbiw	r30, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <main+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	d9 f7       	brne	.-10     	; 0x1b4c <main+0x10a>
    1b56:	ef cf       	rjmp	.-34     	; 0x1b36 <main+0xf4>
  {
   	transmitString_F (PSTR("\n\rFAT32 not found!"));  //FAT32 incompatible drive
   	blinkRedLED();
  }

  SPI_HIGH_SPEED;	//SCK - 4 MHz
    1b58:	80 e5       	ldi	r24, 0x50	; 80
    1b5a:	8d b9       	out	0x0d, r24	; 13
    1b5c:	70 9a       	sbi	0x0e, 0	; 14
    1b5e:	80 ed       	ldi	r24, 0xD0	; 208
    1b60:	97 e0       	ldi	r25, 0x07	; 7
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <main+0x120>

 //For displaying menu on hyper terminal, the key (psh-button) must be kept pressed while 
 //powering ON or while reset. If key is not kept pressed, the program will not display menu and it will 
 //simply wait for start recording command (i.e. pressing of key afterwards)

  if(KEY_PRESSED)
    1b66:	9f 99       	sbic	0x13, 7	; 19
    1b68:	ae c0       	rjmp	.+348    	; 0x1cc6 <main+0x284>
		case '4':TX_NEWLINE;
  		  		 findFiles(GET_LIST,0);
          		 break;

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
    1b6a:	6e 01       	movw	r12, r28
    1b6c:	08 94       	sec
    1b6e:	c1 1c       	adc	r12, r1
    1b70:	d1 1c       	adc	r13, r1
          		 for(i=0; i<13; i++)
    1b72:	ee e0       	ldi	r30, 0x0E	; 14
    1b74:	ae 2e       	mov	r10, r30
    1b76:	b1 2c       	mov	r11, r1
    1b78:	ac 0e       	add	r10, r28
    1b7a:	bd 1e       	adc	r11, r29
 //simply wait for start recording command (i.e. pressing of key afterwards)

  if(KEY_PRESSED)
  while(1)
  {
  	transmitString_F(PSTR("\n\r\n\r> 0 : Exit the Menu"));
    1b7c:	81 e4       	ldi	r24, 0x41	; 65
    1b7e:	92 e0       	ldi	r25, 0x02	; 2
    1b80:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	transmitString_F(PSTR("\n\r> 1 : Display current Date/Time"));
    1b84:	8f e1       	ldi	r24, 0x1F	; 31
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	transmitString_F(PSTR("\n\r> 2 : Update Date"));
    1b8c:	8b e0       	ldi	r24, 0x0B	; 11
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	transmitString_F(PSTR("\n\r> 3 : Update Time"));
    1b94:	87 ef       	ldi	r24, 0xF7	; 247
    1b96:	91 e0       	ldi	r25, 0x01	; 1
    1b98:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	transmitString_F(PSTR("\n\r> 4 : Get file list"));
    1b9c:	81 ee       	ldi	r24, 0xE1	; 225
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	transmitString_F(PSTR("\n\r> 5 : Read File"));
    1ba4:	8f ec       	ldi	r24, 0xCF	; 207
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	transmitString_F(PSTR("\n\r> 6 : Delete File"));
    1bac:	8b eb       	ldi	r24, 0xBB	; 187
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>

  	transmitString_F(PSTR("\n\r\n\r> Enter the option:"));
    1bb4:	83 ea       	ldi	r24, 0xA3	; 163
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  	option = receiveByte();
    1bbc:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    1bc0:	f8 2e       	mov	r15, r24
  	transmitByte(option);
    1bc2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>


	switch (option)
    1bc6:	83 e3       	ldi	r24, 0x33	; 51
    1bc8:	f8 16       	cp	r15, r24
    1bca:	09 f1       	breq	.+66     	; 0x1c0e <main+0x1cc>
    1bcc:	8f 15       	cp	r24, r15
    1bce:	50 f0       	brcs	.+20     	; 0x1be4 <main+0x1a2>
    1bd0:	81 e3       	ldi	r24, 0x31	; 49
    1bd2:	f8 16       	cp	r15, r24
    1bd4:	a1 f0       	breq	.+40     	; 0x1bfe <main+0x1bc>
    1bd6:	8f 15       	cp	r24, r15
    1bd8:	b8 f0       	brcs	.+46     	; 0x1c08 <main+0x1c6>
    1bda:	80 e3       	ldi	r24, 0x30	; 48
    1bdc:	f8 16       	cp	r15, r24
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <main+0x1a0>
    1be0:	6d c0       	rjmp	.+218    	; 0x1cbc <main+0x27a>
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <main+0x1b2>
    1be4:	84 e3       	ldi	r24, 0x34	; 52
    1be6:	f8 16       	cp	r15, r24
    1be8:	a9 f0       	breq	.+42     	; 0x1c14 <main+0x1d2>
    1bea:	86 e3       	ldi	r24, 0x36	; 54
    1bec:	8f 15       	cp	r24, r15
    1bee:	08 f4       	brcc	.+2      	; 0x1bf2 <main+0x1b0>
    1bf0:	65 c0       	rjmp	.+202    	; 0x1cbc <main+0x27a>
    1bf2:	1c c0       	rjmp	.+56     	; 0x1c2c <main+0x1ea>
	{
		case '0':transmitString_F(PSTR("\n\rNormal operation started.."));
    1bf4:	86 e8       	ldi	r24, 0x86	; 134
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1bfc:	6f c1       	rjmp	.+734    	; 0x1edc <main+0x49a>
		  		 goto STOP;

		case '1':RTC_displayDate();
    1bfe:	0e 94 ba 12 	call	0x2574	; 0x2574 <RTC_displayDate>
		  		 RTC_displayTime();
    1c02:	0e 94 19 13 	call	0x2632	; 0x2632 <RTC_displayTime>
    1c06:	ba cf       	rjmp	.-140    	; 0x1b7c <main+0x13a>
		  		 break;

		case '2':RTC_updateDate();
    1c08:	0e 94 2d 10 	call	0x205a	; 0x205a <RTC_updateDate>
    1c0c:	b7 cf       	rjmp	.-146    	; 0x1b7c <main+0x13a>
		  		 break;

		case '3':RTC_updateTime();
    1c0e:	0e 94 1e 11 	call	0x223c	; 0x223c <RTC_updateTime>
    1c12:	b4 cf       	rjmp	.-152    	; 0x1b7c <main+0x13a>
	      		 break;

		case '4':TX_NEWLINE;
    1c14:	8d e0       	ldi	r24, 0x0D	; 13
    1c16:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    1c1a:	8a e0       	ldi	r24, 0x0A	; 10
    1c1c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  		  		 findFiles(GET_LIST,0);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	0e 94 8c 06 	call	0xd18	; 0xd18 <findFiles>
    1c2a:	a8 cf       	rjmp	.-176    	; 0x1b7c <main+0x13a>
          		 break;

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
    1c2c:	82 e7       	ldi	r24, 0x72	; 114
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1c34:	f6 01       	movw	r30, r12
          		 for(i=0; i<13; i++)
				 fileName[i] = 0x00;   //clearing any previously stored file name
    1c36:	11 92       	st	Z+, r1
  		  		 findFiles(GET_LIST,0);
          		 break;

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
          		 for(i=0; i<13; i++)
    1c38:	ea 15       	cp	r30, r10
    1c3a:	fb 05       	cpc	r31, r11
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <main+0x1f4>
    1c3e:	00 e0       	ldi	r16, 0x00	; 0
				 fileName[i] = 0x00;   //clearing any previously stored file name
          		 i=0;
          		 while(1)
          		 {
            		data = receiveByte();
    1c40:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    1c44:	18 2f       	mov	r17, r24
            		if(data == 0x0d) break;  //'ENTER' key pressed
    1c46:	8d 30       	cpi	r24, 0x0D	; 13
    1c48:	f9 f0       	breq	.+62     	; 0x1c88 <main+0x246>
					if(data == 0x08)	//'Back Space' key pressed
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	69 f4       	brne	.+26     	; 0x1c68 <main+0x226>
	 				{ 
	   					if(i != 0)
    1c4e:	00 23       	and	r16, r16
    1c50:	b9 f3       	breq	.-18     	; 0x1c40 <main+0x1fe>
	   					{ 
	     					transmitByte(data);
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
							transmitByte(' '); 
    1c58:	80 e2       	ldi	r24, 0x20	; 32
    1c5a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	     					transmitByte(data); 
    1c5e:	88 e0       	ldi	r24, 0x08	; 8
    1c60:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	     					i--; 
    1c64:	01 50       	subi	r16, 0x01	; 1
    1c66:	ec cf       	rjmp	.-40     	; 0x1c40 <main+0x1fe>
	   					} 
	   					continue;     
	 				}
					if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    1c68:	80 52       	subi	r24, 0x20	; 32
    1c6a:	8f 35       	cpi	r24, 0x5F	; 95
    1c6c:	48 f7       	brcc	.-46     	; 0x1c40 <main+0x1fe>
					transmitByte(data);
    1c6e:	81 2f       	mov	r24, r17
    1c70:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
            		fileName[i++] = data;
    1c74:	f6 01       	movw	r30, r12
    1c76:	e0 0f       	add	r30, r16
    1c78:	f1 1d       	adc	r31, r1
    1c7a:	10 83       	st	Z, r17
    1c7c:	0f 5f       	subi	r16, 0xFF	; 255
            		if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    1c7e:	0d 30       	cpi	r16, 0x0D	; 13
    1c80:	f9 f6       	brne	.-66     	; 0x1c40 <main+0x1fe>
    1c82:	8c e5       	ldi	r24, 0x5C	; 92
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	1c c0       	rjmp	.+56     	; 0x1cc0 <main+0x27e>
          		}
          		if(i>12) break;
    1c88:	0d 30       	cpi	r16, 0x0D	; 13
    1c8a:	08 f0       	brcs	.+2      	; 0x1c8e <main+0x24c>
    1c8c:	77 cf       	rjmp	.-274    	; 0x1b7c <main+0x13a>
       
	      		TX_NEWLINE;
    1c8e:	8d e0       	ldi	r24, 0x0D	; 13
    1c90:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    1c94:	8a e0       	ldi	r24, 0x0A	; 10
    1c96:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
		  		if(option == '5') 
    1c9a:	85 e3       	ldi	r24, 0x35	; 53
    1c9c:	f8 16       	cp	r15, r24
    1c9e:	51 f4       	brne	.+20     	; 0x1cb4 <main+0x272>
				{ 
					error = readFile( READ, fileName);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	0e 94 86 08 	call	0x110c	; 0x110c <readFile>
					if(error == 1) transmitString_F(PSTR("File does not exist.."));
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <main+0x26c>
    1cac:	67 cf       	rjmp	.-306    	; 0x1b7c <main+0x13a>
    1cae:	86 e4       	ldi	r24, 0x46	; 70
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <main+0x27e>
				}
		  		if(option == '6') deleteFile(fileName);
    1cb4:	c6 01       	movw	r24, r12
    1cb6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <deleteFile>
    1cba:	60 cf       	rjmp	.-320    	; 0x1b7c <main+0x13a>
          		break;

    	default:transmitString_F(PSTR("\n\r\n\r Invalid option!\n\r"));
    1cbc:	8f e2       	ldi	r24, 0x2F	; 47
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1cc4:	5b cf       	rjmp	.-330    	; 0x1b7c <main+0x13a>
    1cc6:	28 ec       	ldi	r18, 0xC8	; 200
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
  }

  
  while(1)
  { 
  	while(!KEY_PRESSED); 	//wait here for key-press, recording starts when key is pressed
    1cca:	9f 99       	sbic	0x13, 7	; 19
    1ccc:	fe cf       	rjmp	.-4      	; 0x1cca <main+0x288>
    1cce:	80 e9       	ldi	r24, 0x90	; 144
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	31 97       	sbiw	r30, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <main+0x292>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	d9 f7       	brne	.-10     	; 0x1cd2 <main+0x290>
  	_delay_ms(40);	   		//key debounce delay

  	if(!KEY_PRESSED) continue;
    1cdc:	9f 99       	sbic	0x13, 7	; 19
    1cde:	f5 cf       	rjmp	.-22     	; 0x1cca <main+0x288>

  	while(KEY_PRESSED);  	//wait here for key-depress
    1ce0:	9f 9b       	sbis	0x13, 7	; 19
    1ce2:	fe cf       	rjmp	.-4      	; 0x1ce0 <main+0x29e>
    1ce4:	80 e9       	ldi	r24, 0x90	; 144
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	28 ec       	ldi	r18, 0xC8	; 200
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	f9 01       	movw	r30, r18
    1cee:	31 97       	sbiw	r30, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <main+0x2ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	d9 f7       	brne	.-10     	; 0x1cec <main+0x2aa>
  	_delay_ms(40);	   		//key debounce delay

  
	RED_LED_ON;  //turn on red LED to indicate that recording has started
    1cf6:	ae 9a       	sbi	0x15, 6	; 21
    1cf8:	5e 01       	movw	r10, r28
    1cfa:	08 94       	sec
    1cfc:	a1 1c       	adc	r10, r1
    1cfe:	b1 1c       	adc	r11, r1
	{
		error = RTC_getDate();
		if(error) blinkRedLED();

		j=0;
		for(i=0; i<8; i++)
    1d00:	79 e0       	ldi	r23, 0x09	; 9
    1d02:	47 2e       	mov	r4, r23
    1d04:	51 2c       	mov	r5, r1
    1d06:	4c 0e       	add	r4, r28
    1d08:	5d 1e       	adc	r5, r29
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
		}

		fileName[8] = '.';
		fileName[9] = 'C';
		fileName[10] = 'S';
    1d0a:	63 e5       	ldi	r22, 0x53	; 83
    1d0c:	26 2e       	mov	r2, r22
		fileName[11] = 'V';
    1d0e:	56 e5       	ldi	r21, 0x56	; 86
    1d10:	35 2e       	mov	r3, r21
		//dataString is declared in FAT32.h
		//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h
		//Also, end the data string with '\r' & '\n' characters to maintain CSV format

		for(i=0; i<10; i++) dataString[i] = date[i];
		dataString[i++] = ',';
    1d12:	4c e2       	ldi	r20, 0x2C	; 44
    1d14:	d4 2e       	mov	r13, r20
			dataString[i++] = ',';
			readVoltage(channel); 
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
		}

		dataString[i++] = '\r';
    1d16:	3d e0       	ldi	r19, 0x0D	; 13
    1d18:	e3 2e       	mov	r14, r19
		dataString[i] = '\n';    //always end the string with these two characters,
    1d1a:	2a e0       	ldi	r18, 0x0A	; 10
    1d1c:	c2 2e       	mov	r12, r18
    1d1e:	90 e2       	ldi	r25, 0x20	; 32
    1d20:	69 2e       	mov	r6, r25
    1d22:	9e e4       	ldi	r25, 0x4E	; 78
    1d24:	79 2e       	mov	r7, r25
  
	RED_LED_ON;  //turn on red LED to indicate that recording has started

	while(1)
	{
		error = RTC_getDate();
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	88 2e       	mov	r8, r24
    1d2a:	91 2c       	mov	r9, r1
    1d2c:	0e 94 75 12 	call	0x24ea	; 0x24ea <RTC_getDate>
		if(error) blinkRedLED();
    1d30:	88 23       	and	r24, r24
    1d32:	99 f0       	breq	.+38     	; 0x1d5a <main+0x318>
    1d34:	28 ec       	ldi	r18, 0xC8	; 200
    1d36:	30 e0       	ldi	r19, 0x00	; 0
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    1d38:	ae 9a       	sbi	0x15, 6	; 21
    1d3a:	80 ea       	ldi	r24, 0xA0	; 160
    1d3c:	9f e0       	ldi	r25, 0x0F	; 15
    1d3e:	f9 01       	movw	r30, r18
    1d40:	31 97       	sbiw	r30, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <main+0x2fe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	d9 f7       	brne	.-10     	; 0x1d3e <main+0x2fc>
	_delay_ms(400);
	RED_LED_OFF;
    1d48:	ae 98       	cbi	0x15, 6	; 21
    1d4a:	80 ea       	ldi	r24, 0xA0	; 160
    1d4c:	9f e0       	ldi	r25, 0x0F	; 15
    1d4e:	f9 01       	movw	r30, r18
    1d50:	31 97       	sbiw	r30, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <main+0x30e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	d9 f7       	brne	.-10     	; 0x1d4e <main+0x30c>
    1d58:	ef cf       	rjmp	.-34     	; 0x1d38 <main+0x2f6>
    1d5a:	d5 01       	movw	r26, r10
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
		if(error) blinkRedLED();

		j=0;
		for(i=0; i<8; i++)
		{
			fileName[i] = date[j++];
    1d5e:	e9 2f       	mov	r30, r25
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	e3 5d       	subi	r30, 0xD3	; 211
    1d64:	fb 4f       	sbci	r31, 0xFB	; 251
    1d66:	80 81       	ld	r24, Z
    1d68:	8c 93       	st	X, r24
    1d6a:	9f 5f       	subi	r25, 0xFF	; 255
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
    1d6c:	92 30       	cpi	r25, 0x02	; 2
    1d6e:	11 f0       	breq	.+4      	; 0x1d74 <main+0x332>
    1d70:	95 30       	cpi	r25, 0x05	; 5
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <main+0x334>
    1d74:	9f 5f       	subi	r25, 0xFF	; 255
    1d76:	11 96       	adiw	r26, 0x01	; 1
	{
		error = RTC_getDate();
		if(error) blinkRedLED();

		j=0;
		for(i=0; i<8; i++)
    1d78:	a4 15       	cp	r26, r4
    1d7a:	b5 05       	cpc	r27, r5
    1d7c:	81 f7       	brne	.-32     	; 0x1d5e <main+0x31c>
		{
			fileName[i] = date[j++];
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
		}

		fileName[8] = '.';
    1d7e:	8e e2       	ldi	r24, 0x2E	; 46
    1d80:	89 87       	std	Y+9, r24	; 0x09
		fileName[9] = 'C';
    1d82:	83 e4       	ldi	r24, 0x43	; 67
    1d84:	8a 87       	std	Y+10, r24	; 0x0a
		fileName[10] = 'S';
    1d86:	2b 86       	std	Y+11, r2	; 0x0b
		fileName[11] = 'V';
    1d88:	3c 86       	std	Y+12, r3	; 0x0c

		error = RTC_getTime();
    1d8a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <RTC_getTime>
    	if(error) blinkRedLED();
    1d8e:	88 23       	and	r24, r24
    1d90:	99 f0       	breq	.+38     	; 0x1db8 <main+0x376>
    1d92:	28 ec       	ldi	r18, 0xC8	; 200
    1d94:	30 e0       	ldi	r19, 0x00	; 0
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    1d96:	ae 9a       	sbi	0x15, 6	; 21
    1d98:	80 ea       	ldi	r24, 0xA0	; 160
    1d9a:	9f e0       	ldi	r25, 0x0F	; 15
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	31 97       	sbiw	r30, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <main+0x35c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	d9 f7       	brne	.-10     	; 0x1d9c <main+0x35a>
	_delay_ms(400);
	RED_LED_OFF;
    1da6:	ae 98       	cbi	0x15, 6	; 21
    1da8:	80 ea       	ldi	r24, 0xA0	; 160
    1daa:	9f e0       	ldi	r25, 0x0F	; 15
    1dac:	f9 01       	movw	r30, r18
    1dae:	31 97       	sbiw	r30, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <main+0x36c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	d9 f7       	brne	.-10     	; 0x1dac <main+0x36a>
    1db6:	ef cf       	rjmp	.-34     	; 0x1d96 <main+0x354>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
		//From here onwards, gather data by appending strings in dataString
		//dataString is declared in FAT32.h
		//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h
		//Also, end the data string with '\r' & '\n' characters to maintain CSV format

		for(i=0; i<10; i++) dataString[i] = date[i];
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	e3 5d       	subi	r30, 0xD3	; 211
    1dc0:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc2:	80 81       	ld	r24, Z
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	e9 53       	subi	r30, 0x39	; 57
    1dc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dca:	80 83       	st	Z, r24
    1dcc:	2f 5f       	subi	r18, 0xFF	; 255
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	2a 30       	cpi	r18, 0x0A	; 10
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	99 f7       	brne	.-26     	; 0x1dbc <main+0x37a>
		dataString[i++] = ',';
    1dd6:	d0 92 d1 03 	sts	0x03D1, r13
    1dda:	2b e0       	ldi	r18, 0x0B	; 11
    1ddc:	30 e0       	ldi	r19, 0x00	; 0

		for(j=0;j<8; j++)  dataString[i++] = time[j];
    1dde:	f9 01       	movw	r30, r18
    1de0:	e1 55       	subi	r30, 0x51	; 81
    1de2:	fc 4f       	sbci	r31, 0xFC	; 252
    1de4:	80 81       	ld	r24, Z
    1de6:	f9 01       	movw	r30, r18
    1de8:	e9 53       	subi	r30, 0x39	; 57
    1dea:	fc 4f       	sbci	r31, 0xFC	; 252
    1dec:	80 83       	st	Z, r24
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	23 31       	cpi	r18, 0x13	; 19
    1df4:	31 05       	cpc	r19, r1
    1df6:	99 f7       	brne	.-26     	; 0x1dde <main+0x39c>
		dataString[i++] = ',';
    1df8:	d0 92 da 03 	sts	0x03DA, r13
		
		readTemperature(0); //read temperature from adc channel-0
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <readTemperature>
    1e02:	24 e1       	ldi	r18, 0x14	; 20
    1e04:	30 e0       	ldi	r19, 0x00	; 0
		for(j=0;j<7; j++)  dataString[i++] = temperature[j];
    1e06:	f9 01       	movw	r30, r18
    1e08:	e7 5d       	subi	r30, 0xD7	; 215
    1e0a:	fb 4f       	sbci	r31, 0xFB	; 251
    1e0c:	80 81       	ld	r24, Z
    1e0e:	f9 01       	movw	r30, r18
    1e10:	e9 53       	subi	r30, 0x39	; 57
    1e12:	fc 4f       	sbci	r31, 0xFC	; 252
    1e14:	80 83       	st	Z, r24
    1e16:	2f 5f       	subi	r18, 0xFF	; 255
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	2b 31       	cpi	r18, 0x1B	; 27
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	99 f7       	brne	.-26     	; 0x1e06 <main+0x3c4>
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	0b e1       	ldi	r16, 0x1B	; 27
    1e24:	10 e0       	ldi	r17, 0x00	; 0
		

		for(channel=1; channel<8; channel++)  //read voltages from ADC channel 1 to 7
		{
			dataString[i++] = ',';
    1e26:	f8 01       	movw	r30, r16
    1e28:	e9 53       	subi	r30, 0x39	; 57
    1e2a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2c:	d0 82       	st	Z, r13
    1e2e:	f0 2e       	mov	r15, r16
    1e30:	f3 94       	inc	r15
			readVoltage(channel); 
    1e32:	89 2f       	mov	r24, r25
    1e34:	9e 87       	std	Y+14, r25	; 0x0e
    1e36:	0e 94 d5 15 	call	0x2baa	; 0x2baa <readVoltage>
    1e3a:	a4 e4       	ldi	r26, 0x44	; 68
    1e3c:	b4 e0       	ldi	r27, 0x04	; 4
    1e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
    1e40:	ef 2d       	mov	r30, r15
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	8d 91       	ld	r24, X+
    1e46:	e9 53       	subi	r30, 0x39	; 57
    1e48:	fc 4f       	sbci	r31, 0xFC	; 252
    1e4a:	80 83       	st	Z, r24
    1e4c:	f3 94       	inc	r15
    1e4e:	84 e0       	ldi	r24, 0x04	; 4
    1e50:	ab 34       	cpi	r26, 0x4B	; 75
    1e52:	b8 07       	cpc	r27, r24
    1e54:	a9 f7       	brne	.-22     	; 0x1e40 <main+0x3fe>
		
		readTemperature(0); //read temperature from adc channel-0
		for(j=0;j<7; j++)  dataString[i++] = temperature[j];
		

		for(channel=1; channel<8; channel++)  //read voltages from ADC channel 1 to 7
    1e56:	9f 5f       	subi	r25, 0xFF	; 255
    1e58:	08 5f       	subi	r16, 0xF8	; 248
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	98 30       	cpi	r25, 0x08	; 8
    1e5e:	19 f7       	brne	.-58     	; 0x1e26 <main+0x3e4>
			dataString[i++] = ',';
			readVoltage(channel); 
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
		}

		dataString[i++] = '\r';
    1e60:	e0 92 1a 04 	sts	0x041A, r14
		dataString[i] = '\n';    //always end the string with these two characters,
    1e64:	c0 92 1b 04 	sts	0x041B, r12
								 //before calling the writeFile function

		error = writeFile(fileName);
    1e68:	c5 01       	movw	r24, r10
    1e6a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <writeFile>
		if(error) blinkRedLED();
    1e6e:	88 23       	and	r24, r24
    1e70:	99 f0       	breq	.+38     	; 0x1e98 <main+0x456>
    1e72:	28 ec       	ldi	r18, 0xC8	; 200
    1e74:	30 e0       	ldi	r19, 0x00	; 0
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    1e76:	ae 9a       	sbi	0x15, 6	; 21
    1e78:	80 ea       	ldi	r24, 0xA0	; 160
    1e7a:	9f e0       	ldi	r25, 0x0F	; 15
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	31 97       	sbiw	r30, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <main+0x43c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	d9 f7       	brne	.-10     	; 0x1e7c <main+0x43a>
	_delay_ms(400);
	RED_LED_OFF;
    1e86:	ae 98       	cbi	0x15, 6	; 21
    1e88:	80 ea       	ldi	r24, 0xA0	; 160
    1e8a:	9f e0       	ldi	r25, 0x0F	; 15
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	31 97       	sbiw	r30, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <main+0x44c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e94:	d9 f7       	brne	.-10     	; 0x1e8c <main+0x44a>
    1e96:	ef cf       	rjmp	.-34     	; 0x1e76 <main+0x434>
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	c3 01       	movw	r24, r6
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <main+0x45c>
		delay = INTERVAL / 10;
		for(k=0; k<delay; k++) 
		{
		 	_delay_ms(10);  //10ms delay in each loop
			
			if(KEY_PRESSED) 	//check for key-press
    1ea2:	9f 99       	sbic	0x13, 7	; 19
    1ea4:	15 c0       	rjmp	.+42     	; 0x1ed0 <main+0x48e>
    1ea6:	80 e9       	ldi	r24, 0x90	; 144
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	f4 01       	movw	r30, r8
    1eac:	31 97       	sbiw	r30, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <main+0x46a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	d9 f7       	brne	.-10     	; 0x1eaa <main+0x468>
  			{
				_delay_ms(40);	   		//key debounce delay
  				if(KEY_PRESSED) 
    1eb4:	9f 99       	sbic	0x13, 7	; 19
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <main+0x48e>
  				{
					while(KEY_PRESSED);  	//wait here for key-depress
    1eb8:	9f 9b       	sbis	0x13, 7	; 19
    1eba:	fe cf       	rjmp	.-4      	; 0x1eb8 <main+0x476>
    1ebc:	80 e9       	ldi	r24, 0x90	; 144
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	28 ec       	ldi	r18, 0xC8	; 200
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	31 97       	sbiw	r30, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <main+0x484>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	d9 f7       	brne	.-10     	; 0x1ec4 <main+0x482>
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <main+0x49a>

		error = writeFile(fileName);
		if(error) blinkRedLED();

		delay = INTERVAL / 10;
		for(k=0; k<delay; k++) 
    1ed0:	2f 5f       	subi	r18, 0xFF	; 255
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	24 36       	cpi	r18, 0x64	; 100
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	09 f7       	brne	.-62     	; 0x1e9c <main+0x45a>
    1eda:	28 cf       	rjmp	.-432    	; 0x1d2c <main+0x2ea>
		}

	}//end of while(1)

	STOP: 
	RED_LED_OFF;  //recording stopped
    1edc:	ae 98       	cbi	0x15, 6	; 21
    1ede:	f3 ce       	rjmp	.-538    	; 0x1cc6 <main+0x284>

00001ee0 <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    1ee0:	80 91 c0 03 	lds	r24, 0x03C0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	87 70       	andi	r24, 0x07	; 7
    1ee8:	90 70       	andi	r25, 0x00	; 0
    1eea:	64 e0       	ldi	r22, 0x04	; 4
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	6a 95       	dec	r22
    1ef2:	e1 f7       	brne	.-8      	; 0x1eec <RTC_updateRegisters+0xc>
    1ef4:	20 91 c1 03 	lds	r18, 0x03C1
    1ef8:	2f 70       	andi	r18, 0x0F	; 15
    1efa:	28 2b       	or	r18, r24
    1efc:	20 93 88 01 	sts	0x0188, r18
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    1f00:	80 91 bd 03 	lds	r24, 0x03BD
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	87 70       	andi	r24, 0x07	; 7
    1f08:	90 70       	andi	r25, 0x00	; 0
    1f0a:	54 e0       	ldi	r21, 0x04	; 4
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	5a 95       	dec	r21
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <RTC_updateRegisters+0x2c>
    1f14:	20 91 be 03 	lds	r18, 0x03BE
    1f18:	2f 70       	andi	r18, 0x0F	; 15
    1f1a:	28 2b       	or	r18, r24
    1f1c:	20 93 89 01 	sts	0x0189, r18
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    1f20:	80 91 ba 03 	lds	r24, 0x03BA
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	83 70       	andi	r24, 0x03	; 3
    1f28:	90 70       	andi	r25, 0x00	; 0
    1f2a:	44 e0       	ldi	r20, 0x04	; 4
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	4a 95       	dec	r20
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <RTC_updateRegisters+0x4c>
    1f34:	20 91 bb 03 	lds	r18, 0x03BB
    1f38:	2f 70       	andi	r18, 0x0F	; 15
    1f3a:	28 2b       	or	r18, r24
    1f3c:	20 93 8a 01 	sts	0x018A, r18
  DAY = date[10];
    1f40:	80 91 37 04 	lds	r24, 0x0437
    1f44:	80 93 8b 01 	sts	0x018B, r24
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    1f48:	80 91 2d 04 	lds	r24, 0x042D
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	83 70       	andi	r24, 0x03	; 3
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	34 e0       	ldi	r19, 0x04	; 4
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	3a 95       	dec	r19
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <RTC_updateRegisters+0x74>
    1f5c:	20 91 2e 04 	lds	r18, 0x042E
    1f60:	2f 70       	andi	r18, 0x0F	; 15
    1f62:	28 2b       	or	r18, r24
    1f64:	20 93 8c 01 	sts	0x018C, r18
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    1f68:	80 91 30 04 	lds	r24, 0x0430
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	81 70       	andi	r24, 0x01	; 1
    1f70:	90 70       	andi	r25, 0x00	; 0
    1f72:	24 e0       	ldi	r18, 0x04	; 4
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	2a 95       	dec	r18
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <RTC_updateRegisters+0x94>
    1f7c:	20 91 31 04 	lds	r18, 0x0431
    1f80:	2f 70       	andi	r18, 0x0F	; 15
    1f82:	28 2b       	or	r18, r24
    1f84:	20 93 8d 01 	sts	0x018D, r18
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    1f88:	90 91 35 04 	lds	r25, 0x0435
    1f8c:	92 95       	swap	r25
    1f8e:	90 7f       	andi	r25, 0xF0	; 240
    1f90:	80 91 36 04 	lds	r24, 0x0436
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	98 2b       	or	r25, r24
    1f98:	90 93 8e 01 	sts	0x018E, r25
}  
    1f9c:	08 95       	ret

00001f9e <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    1f9e:	82 ef       	ldi	r24, 0xF2	; 242
    1fa0:	94 e0       	ldi	r25, 0x04	; 4
    1fa2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  
  switch(DAY)
    1fa6:	80 91 8b 01 	lds	r24, 0x018B
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	b9 f0       	breq	.+46     	; 0x1fdc <RTC_displayDay+0x3e>
    1fae:	84 30       	cpi	r24, 0x04	; 4
    1fb0:	28 f4       	brcc	.+10     	; 0x1fbc <RTC_displayDay+0x1e>
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	69 f0       	breq	.+26     	; 0x1fd0 <RTC_displayDay+0x32>
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	70 f4       	brcc	.+28     	; 0x1fd6 <RTC_displayDay+0x38>
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <RTC_displayDay+0x2c>
    1fbc:	85 30       	cpi	r24, 0x05	; 5
    1fbe:	a1 f0       	breq	.+40     	; 0x1fe8 <RTC_displayDay+0x4a>
    1fc0:	85 30       	cpi	r24, 0x05	; 5
    1fc2:	78 f0       	brcs	.+30     	; 0x1fe2 <RTC_displayDay+0x44>
    1fc4:	86 30       	cpi	r24, 0x06	; 6
    1fc6:	b1 f4       	brne	.+44     	; 0x1ff4 <RTC_displayDay+0x56>
    1fc8:	12 c0       	rjmp	.+36     	; 0x1fee <RTC_displayDay+0x50>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    1fca:	8b ee       	ldi	r24, 0xEB	; 235
    1fcc:	94 e0       	ldi	r25, 0x04	; 4
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    1fd0:	84 ee       	ldi	r24, 0xE4	; 228
    1fd2:	94 e0       	ldi	r25, 0x04	; 4
    1fd4:	11 c0       	rjmp	.+34     	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    1fd6:	8c ed       	ldi	r24, 0xDC	; 220
    1fd8:	94 e0       	ldi	r25, 0x04	; 4
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    1fdc:	82 ed       	ldi	r24, 0xD2	; 210
    1fde:	94 e0       	ldi	r25, 0x04	; 4
    1fe0:	0b c0       	rjmp	.+22     	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    1fe2:	89 ec       	ldi	r24, 0xC9	; 201
    1fe4:	94 e0       	ldi	r25, 0x04	; 4
    1fe6:	08 c0       	rjmp	.+16     	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    1fe8:	82 ec       	ldi	r24, 0xC2	; 194
    1fea:	94 e0       	ldi	r25, 0x04	; 4
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
    1fee:	89 eb       	ldi	r24, 0xB9	; 185
    1ff0:	94 e0       	ldi	r25, 0x04	; 4
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <RTC_displayDay+0x5a>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    1ff4:	81 eb       	ldi	r24, 0xB1	; 177
    1ff6:	94 e0       	ldi	r25, 0x04	; 4
    1ff8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    1ffc:	08 95       	ret

00001ffe <RTC_writeDate>:
//******************************************************************   
unsigned char RTC_writeDate(void)
{
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    1ffe:	0e 94 8e 0c 	call	0x191c	; 0x191c <i2c_start>
   if(errorStatus == 1)
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	11 f1       	breq	.+68     	; 0x204a <RTC_writeDate+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2006:	80 ed       	ldi	r24, 0xD0	; 208
    2008:	0e 94 a8 0c 	call	0x1950	; 0x1950 <i2c_sendAddress>
   
   if(errorStatus == 1)
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	e9 f0       	breq	.+58     	; 0x204a <RTC_writeDate+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   if(errorStatus == 1)
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	c1 f0       	breq	.+48     	; 0x204a <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    201a:	80 91 8b 01 	lds	r24, 0x018B
    201e:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 f0       	breq	.+36     	; 0x204a <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2026:	80 91 8c 01 	lds	r24, 0x018C
    202a:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	61 f0       	breq	.+24     	; 0x204a <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2032:	80 91 8d 01 	lds	r24, 0x018D
    2036:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	31 f0       	breq	.+12     	; 0x204a <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    203e:	80 91 8e 01 	lds	r24, 0x018E
    2042:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	21 f4       	brne	.+8      	; 0x2052 <RTC_writeDate+0x54>
   	  {
       		//transmitString_F(PSTR("RTC write date failed.."));
			i2c_stop();
    204a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	08 95       	ret
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2052:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    2056:	80 e0       	ldi	r24, 0x00	; 0
	return(0);
}
    2058:	08 95       	ret

0000205a <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    205e:	8d e0       	ldi	r24, 0x0D	; 13
    2060:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2064:	8a e0       	ldi	r24, 0x0A	; 10
    2066:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    206a:	87 e3       	ldi	r24, 0x37	; 55
    206c:	94 e0       	ldi	r25, 0x04	; 4
    206e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    2072:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    2076:	18 2f       	mov	r17, r24
	transmitByte(data); 	   	  	  				
    2078:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x33)
    207c:	81 2f       	mov	r24, r17
    207e:	80 53       	subi	r24, 0x30	; 48
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	08 f0       	brcs	.+2      	; 0x2086 <RTC_updateDate+0x2c>
    2084:	a5 c0       	rjmp	.+330    	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[0]= data;
    2086:	10 93 2d 04 	sts	0x042D, r17
	 
	data = receiveByte();
    208a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    208e:	18 2f       	mov	r17, r24
	transmitByte(data);
    2090:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2094:	81 2f       	mov	r24, r17
    2096:	80 53       	subi	r24, 0x30	; 48
    2098:	8a 30       	cpi	r24, 0x0A	; 10
    209a:	08 f0       	brcs	.+2      	; 0x209e <RTC_updateDate+0x44>
    209c:	99 c0       	rjmp	.+306    	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[1]= data;
    209e:	10 93 2e 04 	sts	0x042E, r17
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    20a2:	1f 70       	andi	r17, 0x0F	; 15
    20a4:	80 91 2d 04 	lds	r24, 0x042D
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	83 70       	andi	r24, 0x03	; 3
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	9c 01       	movw	r18, r24
    20b0:	a3 e0       	ldi	r26, 0x03	; 3
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	aa 95       	dec	r26
    20b8:	e1 f7       	brne	.-8      	; 0x20b2 <RTC_updateDate+0x58>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	28 0f       	add	r18, r24
    20c0:	39 1f       	adc	r19, r25
    20c2:	21 0f       	add	r18, r17
    20c4:	31 1d       	adc	r19, r1
    20c6:	20 32       	cpi	r18, 0x20	; 32
    20c8:	31 05       	cpc	r19, r1
    20ca:	0c f0       	brlt	.+2      	; 0x20ce <RTC_updateDate+0x74>
    20cc:	81 c0       	rjmp	.+258    	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
    transmitByte('/');
    20ce:	8f e2       	ldi	r24, 0x2F	; 47
    20d0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	
	date[2] = '/';
    20d4:	0f e2       	ldi	r16, 0x2F	; 47
    20d6:	00 93 2f 04 	sts	0x042F, r16
	   
	
	data = receiveByte();			   			  //receive month
    20da:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    20de:	18 2f       	mov	r17, r24
	transmitByte(data);
    20e0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x31)
    20e4:	81 2f       	mov	r24, r17
    20e6:	80 53       	subi	r24, 0x30	; 48
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	08 f0       	brcs	.+2      	; 0x20ee <RTC_updateDate+0x94>
    20ec:	71 c0       	rjmp	.+226    	; 0x21d0 <RTC_updateDate+0x176>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    20ee:	10 93 30 04 	sts	0x0430, r17
	
	data = receiveByte();
    20f2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    20f6:	18 2f       	mov	r17, r24
	transmitByte(data);
    20f8:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    20fc:	81 2f       	mov	r24, r17
    20fe:	80 53       	subi	r24, 0x30	; 48
    2100:	8a 30       	cpi	r24, 0x0A	; 10
    2102:	08 f0       	brcs	.+2      	; 0x2106 <RTC_updateDate+0xac>
    2104:	65 c0       	rjmp	.+202    	; 0x21d0 <RTC_updateDate+0x176>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    2106:	10 93 31 04 	sts	0x0431, r17
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    210a:	1f 70       	andi	r17, 0x0F	; 15
    210c:	80 91 30 04 	lds	r24, 0x0430
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	83 70       	andi	r24, 0x03	; 3
    2114:	90 70       	andi	r25, 0x00	; 0
    2116:	9c 01       	movw	r18, r24
    2118:	e3 e0       	ldi	r30, 0x03	; 3
    211a:	22 0f       	add	r18, r18
    211c:	33 1f       	adc	r19, r19
    211e:	ea 95       	dec	r30
    2120:	e1 f7       	brne	.-8      	; 0x211a <RTC_updateDate+0xc0>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	28 0f       	add	r18, r24
    2128:	39 1f       	adc	r19, r25
    212a:	21 0f       	add	r18, r17
    212c:	31 1d       	adc	r19, r1
    212e:	2d 30       	cpi	r18, 0x0D	; 13
    2130:	31 05       	cpc	r19, r1
    2132:	0c f0       	brlt	.+2      	; 0x2136 <RTC_updateDate+0xdc>
    2134:	4d c0       	rjmp	.+154    	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	transmitByte('/');
    2136:	8f e2       	ldi	r24, 0x2F	; 47
    2138:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	   
	
	date[5] = '/';
    213c:	00 93 32 04 	sts	0x0432, r16
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    2140:	82 e3       	ldi	r24, 0x32	; 50
    2142:	80 93 33 04 	sts	0x0433, r24
	date[7] = '0';
    2146:	80 e3       	ldi	r24, 0x30	; 48
    2148:	80 93 34 04 	sts	0x0434, r24
	
	data = receiveByte();			   			 
    214c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    2150:	18 2f       	mov	r17, r24
	transmitByte(data);
    2152:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2156:	81 2f       	mov	r24, r17
    2158:	80 53       	subi	r24, 0x30	; 48
    215a:	8a 30       	cpi	r24, 0x0A	; 10
    215c:	c8 f5       	brcc	.+114    	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    215e:	10 93 35 04 	sts	0x0435, r17
	
	data = receiveByte();
    2162:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    2166:	18 2f       	mov	r17, r24
	transmitByte(data);
    2168:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    216c:	81 2f       	mov	r24, r17
    216e:	80 53       	subi	r24, 0x30	; 48
    2170:	8a 30       	cpi	r24, 0x0A	; 10
    2172:	70 f5       	brcc	.+92     	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    2174:	10 93 36 04 	sts	0x0436, r17
	
	TX_NEWLINE;
    2178:	8d e0       	ldi	r24, 0x0D	; 13
    217a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    217e:	8a e0       	ldi	r24, 0x0A	; 10
    2180:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    2184:	8e e0       	ldi	r24, 0x0E	; 14
    2186:	94 e0       	ldi	r25, 0x04	; 4
    2188:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    218c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    2190:	18 2f       	mov	r17, r24
	transmitByte(data);
    2192:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x36)
    2196:	81 2f       	mov	r24, r17
    2198:	80 53       	subi	r24, 0x30	; 48
    219a:	87 30       	cpi	r24, 0x07	; 7
    219c:	c8 f4       	brcc	.+50     	; 0x21d0 <RTC_updateDate+0x176>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    219e:	1f 70       	andi	r17, 0x0F	; 15
    21a0:	10 93 37 04 	sts	0x0437, r17
		 	  
  RTC_updateRegisters(); 
    21a4:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <RTC_updateRegisters>
  data = RTC_writeDate();
    21a8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <RTC_writeDate>
    21ac:	18 2f       	mov	r17, r24

  TX_NEWLINE;
    21ae:	8d e0       	ldi	r24, 0x0D	; 13
    21b0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    21b4:	8a e0       	ldi	r24, 0x0A	; 10
    21b6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  if(data == 0)
    21ba:	11 23       	and	r17, r17
    21bc:	31 f4       	brne	.+12     	; 0x21ca <RTC_updateDate+0x170>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    21be:	84 ef       	ldi	r24, 0xF4	; 244
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <RTC_updateDate+0x18c>
	 return 0;
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    21ca:	8f ed       	ldi	r24, 0xDF	; 223
    21cc:	93 e0       	ldi	r25, 0x03	; 3
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <RTC_updateDate+0x186>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    21d0:	8d e0       	ldi	r24, 0x0D	; 13
    21d2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    21d6:	8a e0       	ldi	r24, 0x0A	; 10
    21d8:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    21dc:	8f ec       	ldi	r24, 0xCF	; 207
    21de:	93 e0       	ldi	r25, 0x03	; 3
    21e0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    21e4:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}  
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	08 95       	ret

000021ec <RTC_writeTime>:
//******************************************************************   
unsigned char RTC_writeTime(void)
{
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    21ec:	0e 94 8e 0c 	call	0x191c	; 0x191c <i2c_start>
   if(errorStatus == 1)
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	e1 f0       	breq	.+56     	; 0x222c <RTC_writeTime+0x40>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    21f4:	80 ed       	ldi	r24, 0xD0	; 208
    21f6:	0e 94 a8 0c 	call	0x1950	; 0x1950 <i2c_sendAddress>
   
   if(errorStatus == 1)
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	b9 f0       	breq	.+46     	; 0x222c <RTC_writeTime+0x40>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   if(errorStatus == 1)
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	91 f0       	breq	.+36     	; 0x222c <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2208:	80 91 88 01 	lds	r24, 0x0188
    220c:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	61 f0       	breq	.+24     	; 0x222c <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2214:	80 91 89 01 	lds	r24, 0x0189
    2218:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    221c:	81 30       	cpi	r24, 0x01	; 1
    221e:	31 f0       	breq	.+12     	; 0x222c <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2220:	80 91 8a 01 	lds	r24, 0x018A
    2224:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   	  if(errorStatus == 1)
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	21 f4       	brne	.+8      	; 0x2234 <RTC_writeTime+0x48>
   	  {
       		//transmitString_F(PSTR("RTC write time failed.."));
			i2c_stop();
    222c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	08 95       	ret
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2234:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    2238:	80 e0       	ldi	r24, 0x00	; 0
	return(0);
}
    223a:	08 95       	ret

0000223c <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    223c:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    223e:	8d e0       	ldi	r24, 0x0D	; 13
    2240:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2244:	8a e0       	ldi	r24, 0x0A	; 10
    2246:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    224a:	8d e8       	ldi	r24, 0x8D	; 141
    224c:	94 e0       	ldi	r25, 0x04	; 4
    224e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    2252:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    2256:	18 2f       	mov	r17, r24
	transmitByte(data);
    2258:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x32)
    225c:	81 2f       	mov	r24, r17
    225e:	80 53       	subi	r24, 0x30	; 48
    2260:	83 30       	cpi	r24, 0x03	; 3
    2262:	08 f0       	brcs	.+2      	; 0x2266 <RTC_updateTime+0x2a>
    2264:	6e c0       	rjmp	.+220    	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[0]= data;
    2266:	10 93 ba 03 	sts	0x03BA, r17
	 
	data = receiveByte();
    226a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    226e:	18 2f       	mov	r17, r24
	transmitByte(data);
    2270:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2274:	81 2f       	mov	r24, r17
    2276:	80 53       	subi	r24, 0x30	; 48
    2278:	8a 30       	cpi	r24, 0x0A	; 10
    227a:	08 f0       	brcs	.+2      	; 0x227e <RTC_updateTime+0x42>
    227c:	62 c0       	rjmp	.+196    	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	 
	time[1]= data;
    227e:	10 93 bb 03 	sts	0x03BB, r17
	
	transmitByte(':');
    2282:	8a e3       	ldi	r24, 0x3A	; 58
    2284:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    2288:	80 91 ba 03 	lds	r24, 0x03BA
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	83 70       	andi	r24, 0x03	; 3
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	9c 01       	movw	r18, r24
    2294:	13 e0       	ldi	r17, 0x03	; 3
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	1a 95       	dec	r17
    229c:	e1 f7       	brne	.-8      	; 0x2296 <RTC_updateTime+0x5a>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	28 0f       	add	r18, r24
    22a4:	39 1f       	adc	r19, r25
    22a6:	80 91 bb 03 	lds	r24, 0x03BB
    22aa:	8f 70       	andi	r24, 0x0F	; 15
    22ac:	28 0f       	add	r18, r24
    22ae:	31 1d       	adc	r19, r1
    22b0:	28 31       	cpi	r18, 0x18	; 24
    22b2:	31 05       	cpc	r19, r1
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <RTC_updateTime+0x7c>
    22b6:	45 c0       	rjmp	.+138    	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    22b8:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    22bc:	18 2f       	mov	r17, r24
	 transmitByte(data);
    22be:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x35)
    22c2:	81 2f       	mov	r24, r17
    22c4:	80 53       	subi	r24, 0x30	; 48
    22c6:	86 30       	cpi	r24, 0x06	; 6
    22c8:	e0 f5       	brcc	.+120    	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    22ca:	10 93 bd 03 	sts	0x03BD, r17
	
	data = receiveByte();
    22ce:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    22d2:	18 2f       	mov	r17, r24
	transmitByte(data);
    22d4:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    22d8:	81 2f       	mov	r24, r17
    22da:	80 53       	subi	r24, 0x30	; 48
    22dc:	8a 30       	cpi	r24, 0x0A	; 10
    22de:	88 f5       	brcc	.+98     	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    22e0:	10 93 be 03 	sts	0x03BE, r17
	
	transmitByte(':');
    22e4:	8a e3       	ldi	r24, 0x3A	; 58
    22e6:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    22ea:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    22ee:	18 2f       	mov	r17, r24
	 transmitByte(data);
    22f0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x35)
    22f4:	81 2f       	mov	r24, r17
    22f6:	80 53       	subi	r24, 0x30	; 48
    22f8:	86 30       	cpi	r24, 0x06	; 6
    22fa:	18 f5       	brcc	.+70     	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    22fc:	10 93 c0 03 	sts	0x03C0, r17
	
	data = receiveByte();
    2300:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <receiveByte>
    2304:	18 2f       	mov	r17, r24
	transmitByte(data);
    2306:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	if(data < 0x30 || data > 0x39)
    230a:	81 2f       	mov	r24, r17
    230c:	80 53       	subi	r24, 0x30	; 48
    230e:	8a 30       	cpi	r24, 0x0A	; 10
    2310:	c0 f4       	brcc	.+48     	; 0x2342 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    2312:	10 93 c1 03 	sts	0x03C1, r17
	
	 	  
  RTC_updateRegisters(); 
    2316:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <RTC_updateRegisters>
  data = RTC_writeTime();
    231a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <RTC_writeTime>
    231e:	18 2f       	mov	r17, r24

  TX_NEWLINE;
    2320:	8d e0       	ldi	r24, 0x0D	; 13
    2322:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2326:	8a e0       	ldi	r24, 0x0A	; 10
    2328:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  if(data == 0)
    232c:	11 23       	and	r17, r17
    232e:	31 f4       	brne	.+12     	; 0x233c <RTC_updateTime+0x100>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    2330:	83 e7       	ldi	r24, 0x73	; 115
    2332:	94 e0       	ldi	r25, 0x04	; 4
    2334:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	0e c0       	rjmp	.+28     	; 0x2358 <RTC_updateTime+0x11c>
	 return 0;
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    233c:	8e e5       	ldi	r24, 0x5E	; 94
    233e:	94 e0       	ldi	r25, 0x04	; 4
    2340:	08 c0       	rjmp	.+16     	; 0x2352 <RTC_updateTime+0x116>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    2342:	8d e0       	ldi	r24, 0x0D	; 13
    2344:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2348:	8a e0       	ldi	r24, 0x0A	; 10
    234a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    234e:	8e e4       	ldi	r24, 0x4E	; 78
    2350:	94 e0       	ldi	r25, 0x04	; 4
    2352:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
    2356:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}  
    2358:	1f 91       	pop	r17
    235a:	08 95       	ret

0000235c <RTC_setStartAddress>:
//***************************************************************************
unsigned char RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
    235c:	0e 94 8e 0c 	call	0x191c	; 0x191c <i2c_start>
   if(errorStatus == 1)
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	51 f0       	breq	.+20     	; 0x2378 <RTC_setStartAddress+0x1c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2364:	80 ed       	ldi	r24, 0xD0	; 208
    2366:	0e 94 a8 0c 	call	0x1950	; 0x1950 <i2c_sendAddress>
   
   if(errorStatus == 1)
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	29 f0       	breq	.+10     	; 0x2378 <RTC_setStartAddress+0x1c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   if(errorStatus == 1)
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	21 f4       	brne	.+8      	; 0x2380 <RTC_setStartAddress+0x24>
   {
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
    2378:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	08 95       	ret
	 return 1;
   } 

   i2c_stop();
    2380:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    2384:	80 e0       	ldi	r24, 0x00	; 0
   return 0;
}
    2386:	08 95       	ret

00002388 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    238e:	0e 94 8e 0c 	call	0x191c	; 0x191c <i2c_start>
   if(errorStatus == 1)
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	f9 f0       	breq	.+62     	; 0x23d4 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2396:	80 ed       	ldi	r24, 0xD0	; 208
    2398:	0e 94 a8 0c 	call	0x1950	; 0x1950 <i2c_sendAddress>
   
   if(errorStatus == 1)
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	d1 f0       	breq	.+52     	; 0x23d4 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 bf 0c 	call	0x197e	; 0x197e <i2c_sendData>
   if(errorStatus == 1)
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	a9 f0       	breq	.+42     	; 0x23d4 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    23aa:	0e 94 9b 0c 	call	0x1936	; 0x1936 <i2c_repeatStart>
   if(errorStatus == 1)
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	89 f0       	breq	.+34     	; 0x23d4 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    23b2:	81 ed       	ldi	r24, 0xD1	; 209
    23b4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <i2c_sendAddress>
   
   if(errorStatus == 1)
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	61 f0       	breq	.+24     	; 0x23d4 <RTC_read+0x4c>
   {
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
    23bc:	c8 e8       	ldi	r28, 0x88	; 136
    23be:	d1 e0       	ldi	r29, 0x01	; 1
    23c0:	10 e0       	ldi	r17, 0x00	; 0
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    23c2:	16 30       	cpi	r17, 0x06	; 6
    23c4:	19 f4       	brne	.+6      	; 0x23cc <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
    23c6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <i2c_receiveData_NACK>
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
    23cc:	0e 94 cd 0c 	call	0x199a	; 0x199a <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    23d0:	8e 37       	cpi	r24, 0x7E	; 126
    23d2:	21 f4       	brne	.+8      	; 0x23dc <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    23d4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	07 c0       	rjmp	.+14     	; 0x23ea <RTC_read+0x62>
	   		return 1;
   	  }
	  
	  rtc_register[i] = data;
    23dc:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    23de:	1f 5f       	subi	r17, 0xFF	; 255
    23e0:	17 30       	cpi	r17, 0x07	; 7
    23e2:	79 f7       	brne	.-34     	; 0x23c2 <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    23e4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <i2c_stop>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}	  
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	08 95       	ret

000023f2 <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    23f2:	0e 94 c4 11 	call	0x2388	; 0x2388 <RTC_read>
   if(error) return 1;
    23f6:	88 23       	and	r24, r24
    23f8:	11 f0       	breq	.+4      	; 0x23fe <getDateTime_FAT+0xc>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	08 95       	ret

   yr = (YEAR & 0xf0) >> 4;
    23fe:	40 91 8e 01 	lds	r20, 0x018E
   yr = (yr * 10)+(YEAR & 0x0f);
    2402:	84 2f       	mov	r24, r20
    2404:	82 95       	swap	r24
    2406:	8f 70       	andi	r24, 0x0F	; 15
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	fc 01       	movw	r30, r24
    240c:	b3 e0       	ldi	r27, 0x03	; 3
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	ba 95       	dec	r27
    2414:	e1 f7       	brne	.-8      	; 0x240e <getDateTime_FAT+0x1c>
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	e8 0f       	add	r30, r24
    241c:	f9 1f       	adc	r31, r25
   yr = yr+2000;
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	4f 70       	andi	r20, 0x0F	; 15
    2422:	50 70       	andi	r21, 0x00	; 0
    2424:	4c 5e       	subi	r20, 0xEC	; 236
    2426:	5f 4f       	sbci	r21, 0xFF	; 255
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    2428:	60 91 8d 01 	lds	r22, 0x018D
   mth = (mth * 10)+(MONTH & 0x0f);
    242c:	86 2f       	mov	r24, r22
    242e:	82 95       	swap	r24
    2430:	8f 70       	andi	r24, 0x0F	; 15
    2432:	aa e0       	ldi	r26, 0x0A	; 10
    2434:	8a 9f       	mul	r24, r26
    2436:	80 2d       	mov	r24, r0
    2438:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    243a:	70 91 8c 01 	lds	r23, 0x018C
   dt = (dt * 10)+(DATE & 0x0f);
    243e:	27 2f       	mov	r18, r23
    2440:	22 95       	swap	r18
    2442:	2f 70       	andi	r18, 0x0F	; 15
    2444:	2a 9f       	mul	r18, r26
    2446:	20 2d       	mov	r18, r0
    2448:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
    244a:	6f 70       	andi	r22, 0x0F	; 15
    244c:	86 0f       	add	r24, r22
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	4e 0f       	add	r20, r30
    2452:	5f 1f       	adc	r21, r31
    2454:	e4 e0       	ldi	r30, 0x04	; 4
    2456:	44 0f       	add	r20, r20
    2458:	55 1f       	adc	r21, r21
    245a:	ea 95       	dec	r30
    245c:	e1 f7       	brne	.-8      	; 0x2456 <getDateTime_FAT+0x64>
    245e:	84 2b       	or	r24, r20
    2460:	95 2b       	or	r25, r21
    2462:	65 e0       	ldi	r22, 0x05	; 5
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	6a 95       	dec	r22
    246a:	e1 f7       	brne	.-8      	; 0x2464 <getDateTime_FAT+0x72>
    246c:	7f 70       	andi	r23, 0x0F	; 15
    246e:	27 0f       	add	r18, r23
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	82 2b       	or	r24, r18
    2474:	93 2b       	or	r25, r19
    2476:	90 93 94 01 	sts	0x0194, r25
    247a:	80 93 93 01 	sts	0x0193, r24


   hr = (HOURS & 0xf0) >> 4;
    247e:	70 91 8a 01 	lds	r23, 0x018A
   hr = (hr * 10)+(HOURS & 0x0f);
    2482:	87 2f       	mov	r24, r23
    2484:	82 95       	swap	r24
    2486:	8f 70       	andi	r24, 0x0F	; 15
    2488:	8a 9f       	mul	r24, r26
    248a:	80 2d       	mov	r24, r0
    248c:	11 24       	eor	r1, r1

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    248e:	e0 91 89 01 	lds	r30, 0x0189
   min = (min * 10)+(MINUTES & 0x0f);
    2492:	4e 2f       	mov	r20, r30
    2494:	42 95       	swap	r20
    2496:	4f 70       	andi	r20, 0x0F	; 15
    2498:	4a 9f       	mul	r20, r26
    249a:	40 2d       	mov	r20, r0
    249c:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    249e:	60 91 88 01 	lds	r22, 0x0188
   sec = (sec * 10)+(SECONDS & 0x0f);
    24a2:	26 2f       	mov	r18, r22
    24a4:	22 95       	swap	r18
    24a6:	2f 70       	andi	r18, 0x0F	; 15
    24a8:	2a 9f       	mul	r18, r26
    24aa:	20 2d       	mov	r18, r0
    24ac:	11 24       	eor	r1, r1
    24ae:	6f 70       	andi	r22, 0x0F	; 15
    24b0:	26 0f       	add	r18, r22
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    24b2:	7f 70       	andi	r23, 0x0F	; 15
    24b4:	87 0f       	add	r24, r23
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	56 e0       	ldi	r21, 0x06	; 6
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	5a 95       	dec	r21
    24c0:	e1 f7       	brne	.-8      	; 0x24ba <getDateTime_FAT+0xc8>
    24c2:	ef 70       	andi	r30, 0x0F	; 15
    24c4:	4e 0f       	add	r20, r30
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	84 2b       	or	r24, r20
    24ca:	95 2b       	or	r25, r21
    24cc:	35 e0       	ldi	r19, 0x05	; 5
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	3a 95       	dec	r19
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <getDateTime_FAT+0xdc>
    24d6:	26 95       	lsr	r18
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	82 2b       	or	r24, r18
    24dc:	93 2b       	or	r25, r19
    24de:	90 93 a8 01 	sts	0x01A8, r25
    24e2:	80 93 a7 01 	sts	0x01A7, r24
    24e6:	80 e0       	ldi	r24, 0x00	; 0

   
   return 0;
}
    24e8:	08 95       	ret

000024ea <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    24ea:	0e 94 c4 11 	call	0x2388	; 0x2388 <RTC_read>
  if(error) return 1;
    24ee:	88 23       	and	r24, r24
    24f0:	11 f0       	breq	.+4      	; 0x24f6 <RTC_getDate+0xc>
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	08 95       	ret

  date[10] = 0x00;  //NULL
    24f6:	10 92 37 04 	sts	0x0437, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    24fa:	90 91 8e 01 	lds	r25, 0x018E
    24fe:	89 2f       	mov	r24, r25
    2500:	8f 70       	andi	r24, 0x0F	; 15
    2502:	80 63       	ori	r24, 0x30	; 48
    2504:	80 93 36 04 	sts	0x0436, r24
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    2508:	92 95       	swap	r25
    250a:	9f 70       	andi	r25, 0x0F	; 15
    250c:	90 63       	ori	r25, 0x30	; 48
    250e:	90 93 35 04 	sts	0x0435, r25
  date[7] = '0';
    2512:	80 e3       	ldi	r24, 0x30	; 48
    2514:	80 93 34 04 	sts	0x0434, r24
  date[6] = '2';
    2518:	82 e3       	ldi	r24, 0x32	; 50
    251a:	80 93 33 04 	sts	0x0433, r24
  date[5] = '/';
    251e:	3f e2       	ldi	r19, 0x2F	; 47
    2520:	30 93 32 04 	sts	0x0432, r19
  date[4] = (MONTH & 0x0f) | 0x30;
    2524:	80 91 8d 01 	lds	r24, 0x018D
    2528:	28 2f       	mov	r18, r24
    252a:	2f 70       	andi	r18, 0x0F	; 15
    252c:	20 63       	ori	r18, 0x30	; 48
    252e:	20 93 31 04 	sts	0x0431, r18
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	80 71       	andi	r24, 0x10	; 16
    2536:	90 70       	andi	r25, 0x00	; 0
    2538:	44 e0       	ldi	r20, 0x04	; 4
    253a:	95 95       	asr	r25
    253c:	87 95       	ror	r24
    253e:	4a 95       	dec	r20
    2540:	e1 f7       	brne	.-8      	; 0x253a <RTC_getDate+0x50>
    2542:	80 63       	ori	r24, 0x30	; 48
    2544:	80 93 30 04 	sts	0x0430, r24
  date[2] = '/';
    2548:	30 93 2f 04 	sts	0x042F, r19
  date[1] = (DATE & 0x0f) | 0x30;
    254c:	80 91 8c 01 	lds	r24, 0x018C
    2550:	28 2f       	mov	r18, r24
    2552:	2f 70       	andi	r18, 0x0F	; 15
    2554:	20 63       	ori	r18, 0x30	; 48
    2556:	20 93 2e 04 	sts	0x042E, r18
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	80 73       	andi	r24, 0x30	; 48
    255e:	90 70       	andi	r25, 0x00	; 0
    2560:	24 e0       	ldi	r18, 0x04	; 4
    2562:	95 95       	asr	r25
    2564:	87 95       	ror	r24
    2566:	2a 95       	dec	r18
    2568:	e1 f7       	brne	.-8      	; 0x2562 <RTC_getDate+0x78>
    256a:	80 63       	ori	r24, 0x30	; 48
    256c:	80 93 2d 04 	sts	0x042D, r24
    2570:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}  
    2572:	08 95       	ret

00002574 <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    2574:	0e 94 75 12 	call	0x24ea	; 0x24ea <RTC_getDate>
  if(error) return 1;
    2578:	88 23       	and	r24, r24
    257a:	11 f0       	breq	.+4      	; 0x2580 <RTC_displayDate+0xc>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	08 95       	ret
  
  TX_NEWLINE;
    2580:	8d e0       	ldi	r24, 0x0D	; 13
    2582:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2586:	8a e0       	ldi	r24, 0x0A	; 10
    2588:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  transmitString_F(PSTR("Date:")); 
    258c:	8c ef       	ldi	r24, 0xFC	; 252
    258e:	94 e0       	ldi	r25, 0x04	; 4
    2590:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  transmitString(date);  
    2594:	8d e2       	ldi	r24, 0x2D	; 45
    2596:	94 e0       	ldi	r25, 0x04	; 4
    2598:	0e 94 49 15 	call	0x2a92	; 0x2a92 <transmitString>
  RTC_displayDay();  
    259c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <RTC_displayDay>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
  
  return 0; 
}
    25a2:	08 95       	ret

000025a4 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    25a4:	0e 94 c4 11 	call	0x2388	; 0x2388 <RTC_read>
   if(error) return 1;
    25a8:	88 23       	and	r24, r24
    25aa:	11 f0       	breq	.+4      	; 0x25b0 <RTC_getTime+0xc>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	08 95       	ret

   RTC_read();
    25b0:	0e 94 c4 11 	call	0x2388	; 0x2388 <RTC_read>
   time[8] = 0x00;	  //NULL
    25b4:	10 92 c2 03 	sts	0x03C2, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    25b8:	80 91 88 01 	lds	r24, 0x0188
    25bc:	28 2f       	mov	r18, r24
    25be:	2f 70       	andi	r18, 0x0F	; 15
    25c0:	20 63       	ori	r18, 0x30	; 48
    25c2:	20 93 c1 03 	sts	0x03C1, r18
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	80 77       	andi	r24, 0x70	; 112
    25ca:	90 70       	andi	r25, 0x00	; 0
    25cc:	74 e0       	ldi	r23, 0x04	; 4
    25ce:	95 95       	asr	r25
    25d0:	87 95       	ror	r24
    25d2:	7a 95       	dec	r23
    25d4:	e1 f7       	brne	.-8      	; 0x25ce <RTC_getTime+0x2a>
    25d6:	80 63       	ori	r24, 0x30	; 48
    25d8:	80 93 c0 03 	sts	0x03C0, r24
   time[5] = ':';
    25dc:	3a e3       	ldi	r19, 0x3A	; 58
    25de:	30 93 bf 03 	sts	0x03BF, r19
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    25e2:	80 91 89 01 	lds	r24, 0x0189
    25e6:	28 2f       	mov	r18, r24
    25e8:	2f 70       	andi	r18, 0x0F	; 15
    25ea:	20 63       	ori	r18, 0x30	; 48
    25ec:	20 93 be 03 	sts	0x03BE, r18
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	80 77       	andi	r24, 0x70	; 112
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	64 e0       	ldi	r22, 0x04	; 4
    25f8:	95 95       	asr	r25
    25fa:	87 95       	ror	r24
    25fc:	6a 95       	dec	r22
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <RTC_getTime+0x54>
    2600:	80 63       	ori	r24, 0x30	; 48
    2602:	80 93 bd 03 	sts	0x03BD, r24
   time[2] = ':'; 
    2606:	30 93 bc 03 	sts	0x03BC, r19
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    260a:	80 91 8a 01 	lds	r24, 0x018A
    260e:	28 2f       	mov	r18, r24
    2610:	2f 70       	andi	r18, 0x0F	; 15
    2612:	20 63       	ori	r18, 0x30	; 48
    2614:	20 93 bb 03 	sts	0x03BB, r18
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	80 73       	andi	r24, 0x30	; 48
    261c:	90 70       	andi	r25, 0x00	; 0
    261e:	54 e0       	ldi	r21, 0x04	; 4
    2620:	95 95       	asr	r25
    2622:	87 95       	ror	r24
    2624:	5a 95       	dec	r21
    2626:	e1 f7       	brne	.-8      	; 0x2620 <RTC_getTime+0x7c>
    2628:	80 63       	ori	r24, 0x30	; 48
    262a:	80 93 ba 03 	sts	0x03BA, r24
    262e:	80 e0       	ldi	r24, 0x00	; 0

   return 0;
}
    2630:	08 95       	ret

00002632 <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    2632:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <RTC_getTime>
  if(error) return 1;
    2636:	88 23       	and	r24, r24
    2638:	11 f0       	breq	.+4      	; 0x263e <RTC_displayTime+0xc>
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	08 95       	ret
  
  TX_NEWLINE;
    263e:	8d e0       	ldi	r24, 0x0D	; 13
    2640:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2644:	8a e0       	ldi	r24, 0x0A	; 10
    2646:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
  transmitString_F(PSTR("Time:"));
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	95 e0       	ldi	r25, 0x05	; 5
    264e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <transmitString_F>
  transmitString(time);
    2652:	8a eb       	ldi	r24, 0xBA	; 186
    2654:	93 e0       	ldi	r25, 0x03	; 3
    2656:	0e 94 49 15 	call	0x2a92	; 0x2a92 <transmitString>
    265a:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
    265c:	08 95       	ret

0000265e <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    265e:	df 92       	push	r13
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	d8 2e       	mov	r13, r24
    266a:	7a 01       	movw	r14, r20
    266c:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    266e:	80 91 b3 03 	lds	r24, 0x03B3
    2672:	88 23       	and	r24, r24
    2674:	b9 f4       	brne	.+46     	; 0x26a4 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
    2676:	8d 2d       	mov	r24, r13
    2678:	81 51       	subi	r24, 0x11	; 17
    267a:	82 30       	cpi	r24, 0x02	; 2
    267c:	60 f0       	brcs	.+24     	; 0x2696 <SD_sendCommand+0x38>
    267e:	88 e1       	ldi	r24, 0x18	; 24
    2680:	d8 16       	cp	r13, r24
    2682:	49 f0       	breq	.+18     	; 0x2696 <SD_sendCommand+0x38>
    2684:	89 e1       	ldi	r24, 0x19	; 25
    2686:	d8 16       	cp	r13, r24
    2688:	31 f0       	breq	.+12     	; 0x2696 <SD_sendCommand+0x38>
    268a:	80 e2       	ldi	r24, 0x20	; 32
    268c:	d8 16       	cp	r13, r24
    268e:	19 f0       	breq	.+6      	; 0x2696 <SD_sendCommand+0x38>
    2690:	81 e2       	ldi	r24, 0x21	; 33
    2692:	d8 16       	cp	r13, r24
    2694:	39 f4       	brne	.+14     	; 0x26a4 <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    2696:	39 e0       	ldi	r19, 0x09	; 9
    2698:	ee 0c       	add	r14, r14
    269a:	ff 1c       	adc	r15, r15
    269c:	00 1f       	adc	r16, r16
    269e:	11 1f       	adc	r17, r17
    26a0:	3a 95       	dec	r19
    26a2:	d1 f7       	brne	.-12     	; 0x2698 <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
    26a4:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    26a6:	8d 2d       	mov	r24, r13
    26a8:	80 64       	ori	r24, 0x40	; 64
    26aa:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SPI_transmit(arg>>24);
    26ae:	81 2f       	mov	r24, r17
    26b0:	99 27       	eor	r25, r25
    26b2:	aa 27       	eor	r26, r26
    26b4:	bb 27       	eor	r27, r27
    26b6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SPI_transmit(arg>>16);
    26ba:	c8 01       	movw	r24, r16
    26bc:	aa 27       	eor	r26, r26
    26be:	bb 27       	eor	r27, r27
    26c0:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SPI_transmit(arg>>8);
    26c4:	bb 27       	eor	r27, r27
    26c6:	a1 2f       	mov	r26, r17
    26c8:	90 2f       	mov	r25, r16
    26ca:	8f 2d       	mov	r24, r15
    26cc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SPI_transmit(arg);
    26d0:	8e 2d       	mov	r24, r14
    26d2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    26d6:	88 e0       	ldi	r24, 0x08	; 8
    26d8:	d8 16       	cp	r13, r24
    26da:	11 f4       	brne	.+4      	; 0x26e0 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    26dc:	87 e8       	ldi	r24, 0x87	; 135
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
    26e0:	85 e9       	ldi	r24, 0x95	; 149
    26e2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    26ea:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    26ec:	d1 f0       	breq	.+52     	; 0x2722 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    26ee:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
    26f2:	08 2f       	mov	r16, r24
    26f4:	8f 3f       	cpi	r24, 0xFF	; 255
    26f6:	c9 f3       	breq	.-14     	; 0x26ea <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    26f8:	88 23       	and	r24, r24
    26fa:	99 f4       	brne	.+38     	; 0x2722 <SD_sendCommand+0xc4>
    26fc:	8a e3       	ldi	r24, 0x3A	; 58
    26fe:	d8 16       	cp	r13, r24
    2700:	81 f4       	brne	.+32     	; 0x2722 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2702:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    2706:	86 ff       	sbrs	r24, 6
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <SD_sendCommand+0xb4>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	80 93 b3 03 	sts	0x03B3, r24
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
    2712:	10 92 b3 03 	sts	0x03B3, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    2716:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    271a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
  SPI_receive(); 
    271e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
    2722:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
SD_CS_DEASSERT;
    2726:	c4 9a       	sbi	0x18, 4	; 24

return response; //return state
}
    2728:	80 2f       	mov	r24, r16
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	df 90       	pop	r13
    2734:	08 95       	ret

00002736 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    2736:	af 92       	push	r10
    2738:	bf 92       	push	r11
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	7b 01       	movw	r14, r22
    2748:	8c 01       	movw	r16, r24
    274a:	59 01       	movw	r10, r18
    274c:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    274e:	80 e2       	ldi	r24, 0x20	; 32
    2750:	b8 01       	movw	r22, r16
    2752:	a7 01       	movw	r20, r14
    2754:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2758:	88 23       	and	r24, r24
    275a:	b9 f4       	brne	.+46     	; 0x278a <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    275c:	08 94       	sec
    275e:	e1 08       	sbc	r14, r1
    2760:	f1 08       	sbc	r15, r1
    2762:	01 09       	sbc	r16, r1
    2764:	11 09       	sbc	r17, r1
    2766:	ea 0c       	add	r14, r10
    2768:	fb 1c       	adc	r15, r11
    276a:	0c 1d       	adc	r16, r12
    276c:	1d 1d       	adc	r17, r13
    276e:	81 e2       	ldi	r24, 0x21	; 33
    2770:	b8 01       	movw	r22, r16
    2772:	a7 01       	movw	r20, r14
    2774:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
if(response != 0x00)
    2778:	88 23       	and	r24, r24
    277a:	39 f4       	brne	.+14     	; 0x278a <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    277c:	86 e2       	ldi	r24, 0x26	; 38
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	ef 90       	pop	r14
    2792:	df 90       	pop	r13
    2794:	cf 90       	pop	r12
    2796:	bf 90       	pop	r11
    2798:	af 90       	pop	r10
    279a:	08 95       	ret

0000279c <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	ab 01       	movw	r20, r22
    27a2:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    27a4:	88 e1       	ldi	r24, 0x18	; 24
    27a6:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    27aa:	88 23       	and	r24, r24
    27ac:	11 f0       	breq	.+4      	; 0x27b2 <SD_writeSingleBlock+0x16>
    27ae:	98 2f       	mov	r25, r24
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
    27b2:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    27b4:	8e ef       	ldi	r24, 0xFE	; 254
    27b6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
    27ba:	c0 e0       	ldi	r28, 0x00	; 0
    27bc:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
    27be:	fe 01       	movw	r30, r28
    27c0:	e3 55       	subi	r30, 0x53	; 83
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	80 81       	ld	r24, Z
    27c6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    27ca:	21 96       	adiw	r28, 0x01	; 1
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	c0 30       	cpi	r28, 0x00	; 0
    27d0:	d8 07       	cpc	r29, r24
    27d2:	a9 f7       	brne	.-22     	; 0x27be <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
    27d6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SPI_transmit(0xff);
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>

response = SPI_receive();
    27e0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
    27e4:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    27e6:	8f 71       	andi	r24, 0x1F	; 31
    27e8:	85 30       	cpi	r24, 0x05	; 5
    27ea:	41 f0       	breq	.+16     	; 0x27fc <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    27ec:	c4 9a       	sbi	0x18, 4	; 24
    27ee:	20 c0       	rjmp	.+64     	; 0x2830 <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	cf 3f       	cpi	r28, 0xFF	; 255
    27f4:	d8 07       	cpc	r29, r24
    27f6:	91 f0       	breq	.+36     	; 0x281c <SD_writeSingleBlock+0x80>
    27f8:	21 96       	adiw	r28, 0x01	; 1
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <SD_writeSingleBlock+0x64>
    27fc:	c0 e0       	ldi	r28, 0x00	; 0
    27fe:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2800:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
    2804:	88 23       	and	r24, r24
    2806:	a1 f3       	breq	.-24     	; 0x27f0 <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    2808:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    2810:	c4 98       	cbi	0x18, 4	; 24
    2812:	08 c0       	rjmp	.+16     	; 0x2824 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	cf 3f       	cpi	r28, 0xFF	; 255
    2818:	d8 07       	cpc	r29, r24
    281a:	19 f4       	brne	.+6      	; 0x2822 <SD_writeSingleBlock+0x86>
    281c:	c4 9a       	sbi	0x18, 4	; 24
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	07 c0       	rjmp	.+14     	; 0x2830 <SD_writeSingleBlock+0x94>
    2822:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2824:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
    2828:	88 23       	and	r24, r24
    282a:	a1 f3       	breq	.-24     	; 0x2814 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    282c:	c4 9a       	sbi	0x18, 4	; 24
    282e:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
    2830:	89 2f       	mov	r24, r25
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret

00002838 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	ab 01       	movw	r20, r22
    2840:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    2842:	81 e1       	ldi	r24, 0x11	; 17
    2844:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
    2848:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    284a:	88 23       	and	r24, r24
    284c:	09 f5       	brne	.+66     	; 0x2890 <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    284e:	c4 98       	cbi	0x18, 4	; 24
    2850:	c0 e0       	ldi	r28, 0x00	; 0
    2852:	d0 e0       	ldi	r29, 0x00	; 0
    2854:	05 c0       	rjmp	.+10     	; 0x2860 <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2856:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2858:	19 f4       	brne	.+6      	; 0x2860 <SD_readSingleBlock+0x28>
    285a:	c4 9a       	sbi	0x18, 4	; 24
    285c:	11 e0       	ldi	r17, 0x01	; 1
    285e:	18 c0       	rjmp	.+48     	; 0x2890 <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2860:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
    2864:	8e 3f       	cpi	r24, 0xFE	; 254
    2866:	b9 f7       	brne	.-18     	; 0x2856 <SD_readSingleBlock+0x1e>
    2868:	c0 e0       	ldi	r28, 0x00	; 0
    286a:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    286c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
    2870:	fe 01       	movw	r30, r28
    2872:	e3 55       	subi	r30, 0x53	; 83
    2874:	fe 4f       	sbci	r31, 0xFE	; 254
    2876:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2878:	21 96       	adiw	r28, 0x01	; 1
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	c0 30       	cpi	r28, 0x00	; 0
    287e:	d8 07       	cpc	r29, r24
    2880:	a9 f7       	brne	.-22     	; 0x286c <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2882:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
SPI_receive();
    2886:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    288a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <SPI_receive>
SD_CS_DEASSERT;
    288e:	c4 9a       	sbi	0x18, 4	; 24

return 0;
}
    2890:	81 2f       	mov	r24, r17
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	08 95       	ret

0000289a <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    28a2:	8f ef       	ldi	r24, 0xFF	; 255
    28a4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    28a8:	1f 5f       	subi	r17, 0xFF	; 255
    28aa:	1a 30       	cpi	r17, 0x0A	; 10
    28ac:	d1 f7       	brne	.-12     	; 0x28a2 <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    28ae:	c4 98       	cbi	0x18, 4	; 24
    28b0:	c0 e0       	ldi	r28, 0x00	; 0
    28b2:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
   retry++;
    28c2:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
    28c4:	c1 32       	cpi	r28, 0x21	; 33
    28c6:	d1 05       	cpc	r29, r1
    28c8:	11 f4       	brne	.+4      	; 0x28ce <SD_init+0x34>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	68 c0       	rjmp	.+208    	; 0x299e <SD_init+0x104>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	89 f7       	brne	.-30     	; 0x28b4 <SD_init+0x1a>

SD_CS_DEASSERT;
    28d2:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit (0xff);
    28d4:	8f ef       	ldi	r24, 0xFF	; 255
    28d6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
SPI_transmit (0xff);
    28da:	8f ef       	ldi	r24, 0xFF	; 255
    28dc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <SPI_transmit>
    28e0:	c0 e0       	ldi	r28, 0x00	; 0
    28e2:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    28e4:	88 e0       	ldi	r24, 0x08	; 8
    28e6:	4a ea       	ldi	r20, 0xAA	; 170
    28e8:	51 e0       	ldi	r21, 0x01	; 1
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
retry++;
    28f2:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    28f4:	cf 3f       	cpi	r28, 0xFF	; 255
    28f6:	d1 05       	cpc	r29, r1
    28f8:	59 f4       	brne	.+22     	; 0x2910 <SD_init+0x76>
   {
	  TX_NEWLINE;
    28fa:	8d e0       	ldi	r24, 0x0D	; 13
    28fc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2900:	8a e0       	ldi	r24, 0x0A	; 10
    2902:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	80 93 2b 04 	sts	0x042B, r24
    290c:	11 e0       	ldi	r17, 0x01	; 1
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <SD_init+0x7c>
	  break;
   } //time out

}while(response != 0x01);
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	41 f7       	brne	.-48     	; 0x28e4 <SD_init+0x4a>
    2914:	12 e0       	ldi	r17, 0x02	; 2
    2916:	c0 e0       	ldi	r28, 0x00	; 0
    2918:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    291a:	87 e3       	ldi	r24, 0x37	; 55
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    2928:	89 e2       	ldi	r24, 0x29	; 41
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	70 e4       	ldi	r23, 0x40	; 64
    2932:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>

retry++;
    2936:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    2938:	cf 3f       	cpi	r28, 0xFF	; 255
    293a:	d1 05       	cpc	r29, r1
    293c:	41 f4       	brne	.+16     	; 0x294e <SD_init+0xb4>
   {
      TX_NEWLINE;
    293e:	8d e0       	ldi	r24, 0x0D	; 13
    2940:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    2944:	8a e0       	ldi	r24, 0x0A	; 10
    2946:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	28 c0       	rjmp	.+80     	; 0x299e <SD_init+0x104>
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    294e:	88 23       	and	r24, r24
    2950:	21 f7       	brne	.-56     	; 0x291a <SD_init+0x80>


retry = 0;
SDHC_flag = 0;
    2952:	10 92 b3 03 	sts	0x03B3, r1

if (SD_version == 2)
    2956:	12 30       	cpi	r17, 0x02	; 2
    2958:	11 f5       	brne	.+68     	; 0x299e <SD_init+0x104>
    295a:	c0 e0       	ldi	r28, 0x00	; 0
    295c:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    295e:	8a e3       	ldi	r24, 0x3A	; 58
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	0e 94 2f 13 	call	0x265e	; 0x265e <SD_sendCommand>
	 retry++;
    296c:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
    296e:	cf 3f       	cpi	r28, 0xFF	; 255
    2970:	d1 05       	cpc	r29, r1
    2972:	49 f4       	brne	.+18     	; 0x2986 <SD_init+0xec>
     {
       TX_NEWLINE;
    2974:	8d e0       	ldi	r24, 0x0D	; 13
    2976:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
    297a:	8a e0       	ldi	r24, 0x0A	; 10
    297c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <transmitByte>
	   cardType = 0;
    2980:	10 92 2b 04 	sts	0x042B, r1
    2984:	02 c0       	rjmp	.+4      	; 0x298a <SD_init+0xf0>
	   break;
     } //time out

   }while(response != 0x00);
    2986:	88 23       	and	r24, r24
    2988:	51 f7       	brne	.-44     	; 0x295e <SD_init+0xc4>

   if(SDHC_flag == 1) cardType = 2;
    298a:	80 91 b3 03 	lds	r24, 0x03B3
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	11 f4       	brne	.+4      	; 0x2996 <SD_init+0xfc>
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <SD_init+0xfe>
   else cardType = 3;
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	80 93 2b 04 	sts	0x042B, r24
    299c:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	08 95       	ret

000029a6 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    29a6:	82 e5       	ldi	r24, 0x52	; 82
    29a8:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    29aa:	1e b8       	out	0x0e, r1	; 14
}
    29ac:	08 95       	ret

000029ae <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    29ae:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    29b0:	77 9b       	sbis	0x0e, 7	; 14
    29b2:	fe cf       	rjmp	.-4      	; 0x29b0 <SPI_transmit+0x2>
data = SPDR;
    29b4:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    29b6:	08 95       	ret

000029b8 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    29b8:	8f ef       	ldi	r24, 0xFF	; 255
    29ba:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    29bc:	77 9b       	sbis	0x0e, 7	; 14
    29be:	fe cf       	rjmp	.-4      	; 0x29bc <SPI_receive+0x4>
data = SPDR;
    29c0:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    29c2:	08 95       	ret

000029c4 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    29c4:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    29c6:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    29c8:	86 e8       	ldi	r24, 0x86	; 134
    29ca:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
    29cc:	89 e1       	ldi	r24, 0x19	; 25
    29ce:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    29d0:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    29d2:	88 e1       	ldi	r24, 0x18	; 24
    29d4:	8a b9       	out	0x0a, r24	; 10
}
    29d6:	08 95       	ret

000029d8 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    29d8:	5f 9b       	sbis	0x0b, 7	; 11
    29da:	fe cf       	rjmp	.-4      	; 0x29d8 <receiveByte>
	
	status = UCSRA;
    29dc:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    29de:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    29e0:	08 95       	ret

000029e2 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    29e2:	5d 9b       	sbis	0x0b, 5	; 11
    29e4:	fe cf       	rjmp	.-4      	; 0x29e2 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    29e6:	8c b9       	out	0x0c, r24	; 12
}
    29e8:	08 95       	ret

000029ea <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	2b 97       	sbiw	r28, 0x0b	; 11
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	11 f4       	brne	.+4      	; 0x2a06 <transmitHex+0x1c>
    2a02:	94 e0       	ldi	r25, 0x04	; 4
    2a04:	05 c0       	rjmp	.+10     	; 0x2a10 <transmitHex+0x26>
if (dataType == LONG) count = 8;
    2a06:	82 30       	cpi	r24, 0x02	; 2
    2a08:	11 f4       	brne	.+4      	; 0x2a0e <transmitHex+0x24>
    2a0a:	98 e0       	ldi	r25, 0x08	; 8
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <transmitHex+0x26>
    2a0e:	92 e0       	ldi	r25, 0x02	; 2
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    2a10:	de 01       	movw	r26, r28
    2a12:	11 96       	adiw	r26, 0x01	; 1
    2a14:	e4 e7       	ldi	r30, 0x74	; 116
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	8b e0       	ldi	r24, 0x0B	; 11
    2a1a:	01 90       	ld	r0, Z+
    2a1c:	0d 92       	st	X+, r0
    2a1e:	81 50       	subi	r24, 0x01	; 1
    2a20:	e1 f7       	brne	.-8      	; 0x2a1a <transmitHex+0x30>
    2a22:	9e 01       	movw	r18, r28
    2a24:	2e 5f       	subi	r18, 0xFE	; 254
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    2a28:	84 2f       	mov	r24, r20
    2a2a:	8f 70       	andi	r24, 0x0F	; 15
    2a2c:	e9 2f       	mov	r30, r25
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    2a30:	8a 30       	cpi	r24, 0x0A	; 10
    2a32:	20 f4       	brcc	.+8      	; 0x2a3c <transmitHex+0x52>
    2a34:	e2 0f       	add	r30, r18
    2a36:	f3 1f       	adc	r31, r19
    2a38:	80 5d       	subi	r24, 0xD0	; 208
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <transmitHex+0x58>
  else dataString [i+1] = (temp - 10) + 0x41;
    2a3c:	e2 0f       	add	r30, r18
    2a3e:	f3 1f       	adc	r31, r19
    2a40:	89 5c       	subi	r24, 0xC9	; 201
    2a42:	80 83       	st	Z, r24

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    2a44:	91 50       	subi	r25, 0x01	; 1
    2a46:	19 f4       	brne	.+6      	; 0x2a4e <transmitHex+0x64>
    2a48:	fe 01       	movw	r30, r28
    2a4a:	31 96       	adiw	r30, 0x01	; 1
    2a4c:	0c c0       	rjmp	.+24     	; 0x2a66 <transmitHex+0x7c>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    2a4e:	84 e0       	ldi	r24, 0x04	; 4
    2a50:	76 95       	lsr	r23
    2a52:	67 95       	ror	r22
    2a54:	57 95       	ror	r21
    2a56:	47 95       	ror	r20
    2a58:	8a 95       	dec	r24
    2a5a:	d1 f7       	brne	.-12     	; 0x2a50 <transmitHex+0x66>
    2a5c:	e5 cf       	rjmp	.-54     	; 0x2a28 <transmitHex+0x3e>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2a5e:	5d 9b       	sbis	0x0b, 5	; 11
    2a60:	fe cf       	rjmp	.-4      	; 0x2a5e <transmitHex+0x74>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    2a62:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2a64:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2a66:	80 81       	ld	r24, Z
    2a68:	88 23       	and	r24, r24
    2a6a:	c9 f7       	brne	.-14     	; 0x2a5e <transmitHex+0x74>

  data = data/16;
}

transmitString (dataString);
}
    2a6c:	2b 96       	adiw	r28, 0x0b	; 11
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    2a7e:	fc 01       	movw	r30, r24
    2a80:	04 c0       	rjmp	.+8      	; 0x2a8a <transmitString_F+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2a82:	5d 9b       	sbis	0x0b, 5	; 11
    2a84:	fe cf       	rjmp	.-4      	; 0x2a82 <transmitString_F+0x4>
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
   transmitByte(pgm_read_byte(&(*string++)));
    2a86:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2a88:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2a8a:	84 91       	lpm	r24, Z+
    2a8c:	88 23       	and	r24, r24
    2a8e:	c9 f7       	brne	.-14     	; 0x2a82 <transmitString_F+0x4>
   transmitByte(pgm_read_byte(&(*string++)));
}
    2a90:	08 95       	ret

00002a92 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    2a92:	fc 01       	movw	r30, r24
    2a94:	04 c0       	rjmp	.+8      	; 0x2a9e <transmitString+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2a96:	5d 9b       	sbis	0x0b, 5	; 11
    2a98:	fe cf       	rjmp	.-4      	; 0x2a96 <transmitString+0x4>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    2a9a:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2a9c:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2a9e:	80 81       	ld	r24, Z
    2aa0:	88 23       	and	r24, r24
    2aa2:	c9 f7       	brne	.-14     	; 0x2a96 <transmitString+0x4>
   transmitByte(*string++);
}
    2aa4:	08 95       	ret

00002aa6 <ADC_init>:
//Purpose : Initialize the ADC
//Conversion time: 52uS
//******************************************************
void ADC_init(void)
{
  ADCSRA = 0x00; //disable adc
    2aa6:	16 b8       	out	0x06, r1	; 6
  ADMUX  = 0x40;  //select adc input 0, ref:AVCC
    2aa8:	80 e4       	ldi	r24, 0x40	; 64
    2aaa:	87 b9       	out	0x07, r24	; 7
  ADCSRA = 0x82; //prescaler:4, single conversion mode
    2aac:	82 e8       	ldi	r24, 0x82	; 130
    2aae:	86 b9       	out	0x06, r24	; 6
  ADC_ENABLE;
    2ab0:	37 9a       	sbi	0x06, 7	; 6
}
    2ab2:	08 95       	ret

00002ab4 <ADC_read>:
//Purpose : Do an Analog to Digital Conversion
//Paramtr :	none
//return  : intger temperature value
//********************************************************************
unsigned int ADC_read(void)
{
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    unsigned int ADC_var = 0;
    
            
    for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
    {
	 	ADC_START_CONVERSION;
    2aba:	36 9a       	sbi	0x06, 6	; 6
        while(!(ADCSRA & 0x10)); // wait for conversion done, ADIF flag active
    2abc:	34 9b       	sbis	0x06, 4	; 6
    2abe:	fe cf       	rjmp	.-4      	; 0x2abc <ADC_read+0x8>
        ADCSRA|=(1<<ADIF);
    2ac0:	34 9a       	sbi	0x06, 4	; 6
		
        ADC_temp = ADCL;         // read out ADCL register
    2ac2:	94 b1       	in	r25, 0x04	; 4
        ADCH_temp = ADCH;        // read out ADCH register        
    2ac4:	85 b1       	in	r24, 0x05	; 5
		ADC_temp +=(ADCH_temp << 8);
        ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
    2ac6:	38 2f       	mov	r19, r24
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	f9 01       	movw	r30, r18
    2acc:	e9 0f       	add	r30, r25
    2ace:	f1 1d       	adc	r31, r1
    2ad0:	4e 0f       	add	r20, r30
    2ad2:	5f 1f       	adc	r21, r31
    char i;
    unsigned int ADC_temp, ADCH_temp;
    unsigned int ADC_var = 0;
    
            
    for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
    2ad4:	6f 5f       	subi	r22, 0xFF	; 255
    2ad6:	68 30       	cpi	r22, 0x08	; 8
    2ad8:	81 f7       	brne	.-32     	; 0x2aba <ADC_read+0x6>
        ADCH_temp = ADCH;        // read out ADCH register        
		ADC_temp +=(ADCH_temp << 8);
        ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
    }

    ADC_var = ADC_var >> 3;       // average the 8 samples
    2ada:	9a 01       	movw	r18, r20
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	36 95       	lsr	r19
    2ae0:	27 95       	ror	r18
    2ae2:	8a 95       	dec	r24
    2ae4:	e1 f7       	brne	.-8      	; 0x2ade <ADC_read+0x2a>
    2ae6:	f4 e0       	ldi	r31, 0x04	; 4
    2ae8:	20 30       	cpi	r18, 0x00	; 0
    2aea:	3f 07       	cpc	r19, r31
    2aec:	10 f0       	brcs	.+4      	; 0x2af2 <ADC_read+0x3e>
    2aee:	2f ef       	ldi	r18, 0xFF	; 255
    2af0:	33 e0       	ldi	r19, 0x03	; 3

	if(ADC_var > 1023) ADC_var = 1023;
	
    return ADC_var;
}
    2af2:	c9 01       	movw	r24, r18
    2af4:	08 95       	ret

00002af6 <readTemperature>:
//Purpose : Read temperature from LM35 connected to the ADC
//Paramtr : unsigned char ADC channel number
//returns : None (modifies the global string 'temperature')
//********************************************************************
void readTemperature(unsigned char channel)
{
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
   unsigned int value;
   float volt;

   ADMUX = 0x40 | channel;
    2afa:	80 64       	ori	r24, 0x40	; 64
    2afc:	87 b9       	out	0x07, r24	; 7
   value = ADC_read();
    2afe:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ADC_read>

   volt = (float)(value * 5.0)/ 1024.0;
   value = (unsigned int)(volt * 1000);
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 83 19 	call	0x3306	; 0x3306 <__floatunsisf>
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 ea       	ldi	r20, 0xA0	; 160
    2b14:	50 e4       	ldi	r21, 0x40	; 64
    2b16:	0e 94 05 18 	call	0x300a	; 0x300a <__mulsf3>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5a e3       	ldi	r21, 0x3A	; 58
    2b22:	0e 94 05 18 	call	0x300a	; 0x300a <__mulsf3>
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a e7       	ldi	r20, 0x7A	; 122
    2b2c:	54 e4       	ldi	r21, 0x44	; 68
    2b2e:	0e 94 05 18 	call	0x300a	; 0x300a <__mulsf3>
    2b32:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__fixunssfsi>
    2b36:	8b 01       	movw	r16, r22
    2b38:	9c 01       	movw	r18, r24

   temperature[6] = 'C';  //centigrade
    2b3a:	83 e4       	ldi	r24, 0x43	; 67
    2b3c:	80 93 43 04 	sts	0x0443, r24
   temperature[5] = 0xb0; //ascii value for degree symbol
    2b40:	80 eb       	ldi	r24, 0xB0	; 176
    2b42:	80 93 42 04 	sts	0x0442, r24
   temperature[4] = (value % 10) | 0x30;
    2b46:	c8 01       	movw	r24, r16
    2b48:	6a e0       	ldi	r22, 0x0A	; 10
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2b50:	80 63       	ori	r24, 0x30	; 48
    2b52:	80 93 41 04 	sts	0x0441, r24
   temperature[3] = '.';  
    2b56:	8e e2       	ldi	r24, 0x2E	; 46
    2b58:	80 93 40 04 	sts	0x0440, r24
   value = value / 10;
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	6a e0       	ldi	r22, 0x0A	; 10
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2b66:	9b 01       	movw	r18, r22
   temperature[2] = (value % 10) | 0x30;
    2b68:	cb 01       	movw	r24, r22
    2b6a:	6a e0       	ldi	r22, 0x0A	; 10
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2b72:	80 63       	ori	r24, 0x30	; 48
    2b74:	80 93 3f 04 	sts	0x043F, r24
   value = value / 10;
    2b78:	c9 01       	movw	r24, r18
    2b7a:	6a e0       	ldi	r22, 0x0A	; 10
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2b82:	9b 01       	movw	r18, r22
   temperature[1] = (value % 10) | 0x30;
    2b84:	cb 01       	movw	r24, r22
    2b86:	6a e0       	ldi	r22, 0x0A	; 10
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2b8e:	80 63       	ori	r24, 0x30	; 48
    2b90:	80 93 3e 04 	sts	0x043E, r24
   value = value / 10;
   temperature[0] = value | 0x30;   
    2b94:	c9 01       	movw	r24, r18
    2b96:	6a e0       	ldi	r22, 0x0A	; 10
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2b9e:	60 63       	ori	r22, 0x30	; 48
    2ba0:	60 93 3d 04 	sts	0x043D, r22
}  
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	08 95       	ret

00002baa <readVoltage>:
//Purpose : Read voltage from ADC channels
//Paramtr : unsigned char ADC channel number
//returns : None (modifies the global string 'voltage')
//********************************************************************
void readVoltage(unsigned char channel)
{
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
   unsigned int value;
   float volt;

   ADMUX = 0x40 | channel;
    2bae:	80 64       	ori	r24, 0x40	; 64
    2bb0:	87 b9       	out	0x07, r24	; 7
   value = ADC_read();
    2bb2:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <ADC_read>

   volt = (float)(value * 5.0)/ 1024.0;
   value = (unsigned int)(volt * 1000);
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 83 19 	call	0x3306	; 0x3306 <__floatunsisf>
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 ea       	ldi	r20, 0xA0	; 160
    2bc8:	50 e4       	ldi	r21, 0x40	; 64
    2bca:	0e 94 05 18 	call	0x300a	; 0x300a <__mulsf3>
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5a e3       	ldi	r21, 0x3A	; 58
    2bd6:	0e 94 05 18 	call	0x300a	; 0x300a <__mulsf3>
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	4a e7       	ldi	r20, 0x7A	; 122
    2be0:	54 e4       	ldi	r21, 0x44	; 68
    2be2:	0e 94 05 18 	call	0x300a	; 0x300a <__mulsf3>
    2be6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__fixunssfsi>
    2bea:	8b 01       	movw	r16, r22
    2bec:	9c 01       	movw	r18, r24

   voltage[6] = 'V';  //V for voltage
    2bee:	86 e5       	ldi	r24, 0x56	; 86
    2bf0:	80 93 4a 04 	sts	0x044A, r24
   voltage[5] = ' '; 
    2bf4:	80 e2       	ldi	r24, 0x20	; 32
    2bf6:	80 93 49 04 	sts	0x0449, r24
   voltage[4] = (value % 10) | 0x30;
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	6a e0       	ldi	r22, 0x0A	; 10
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2c04:	80 63       	ori	r24, 0x30	; 48
    2c06:	80 93 48 04 	sts	0x0448, r24
   value = value / 10;
    2c0a:	c8 01       	movw	r24, r16
    2c0c:	6a e0       	ldi	r22, 0x0A	; 10
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2c14:	9b 01       	movw	r18, r22
   voltage[3] = (value % 10) | 0x30;
    2c16:	cb 01       	movw	r24, r22
    2c18:	6a e0       	ldi	r22, 0x0A	; 10
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2c20:	80 63       	ori	r24, 0x30	; 48
    2c22:	80 93 47 04 	sts	0x0447, r24
   value = value / 10;
    2c26:	c9 01       	movw	r24, r18
    2c28:	6a e0       	ldi	r22, 0x0A	; 10
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2c30:	9b 01       	movw	r18, r22
   voltage[2] = (value % 10) | 0x30;
    2c32:	cb 01       	movw	r24, r22
    2c34:	6a e0       	ldi	r22, 0x0A	; 10
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2c3c:	80 63       	ori	r24, 0x30	; 48
    2c3e:	80 93 46 04 	sts	0x0446, r24
   voltage[1] = '.';  
    2c42:	8e e2       	ldi	r24, 0x2E	; 46
    2c44:	80 93 45 04 	sts	0x0445, r24
   value = value / 10;
   voltage[0] = value | 0x30;   
    2c48:	c9 01       	movw	r24, r18
    2c4a:	6a e0       	ldi	r22, 0x0A	; 10
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	0e 94 10 1c 	call	0x3820	; 0x3820 <__udivmodhi4>
    2c52:	60 63       	ori	r22, 0x30	; 48
    2c54:	60 93 44 04 	sts	0x0444, r22
}  
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret

00002c5e <__fixunssfsi>:
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	7b 01       	movw	r14, r22
    2c68:	8c 01       	movw	r16, r24
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	5f e4       	ldi	r21, 0x4F	; 79
    2c72:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__gesf2>
    2c76:	88 23       	and	r24, r24
    2c78:	8c f0       	brlt	.+34     	; 0x2c9c <__fixunssfsi+0x3e>
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	b7 01       	movw	r22, r14
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	5f e4       	ldi	r21, 0x4F	; 79
    2c86:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__subsf3>
    2c8a:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	20 50       	subi	r18, 0x00	; 0
    2c94:	30 40       	sbci	r19, 0x00	; 0
    2c96:	40 40       	sbci	r20, 0x00	; 0
    2c98:	50 48       	sbci	r21, 0x80	; 128
    2c9a:	06 c0       	rjmp	.+12     	; 0x2ca8 <__fixunssfsi+0x4a>
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	b7 01       	movw	r22, r14
    2ca0:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2ca4:	9b 01       	movw	r18, r22
    2ca6:	ac 01       	movw	r20, r24
    2ca8:	b9 01       	movw	r22, r18
    2caa:	ca 01       	movw	r24, r20
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ff 90       	pop	r15
    2cb2:	ef 90       	pop	r14
    2cb4:	08 95       	ret

00002cb6 <_fpadd_parts>:
    2cb6:	a0 e0       	ldi	r26, 0x00	; 0
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e1 e6       	ldi	r30, 0x61	; 97
    2cbc:	f6 e1       	ldi	r31, 0x16	; 22
    2cbe:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	2b 01       	movw	r4, r22
    2cc6:	fa 01       	movw	r30, r20
    2cc8:	9c 91       	ld	r25, X
    2cca:	92 30       	cpi	r25, 0x02	; 2
    2ccc:	08 f4       	brcc	.+2      	; 0x2cd0 <_fpadd_parts+0x1a>
    2cce:	39 c1       	rjmp	.+626    	; 0x2f42 <_fpadd_parts+0x28c>
    2cd0:	eb 01       	movw	r28, r22
    2cd2:	88 81       	ld	r24, Y
    2cd4:	82 30       	cpi	r24, 0x02	; 2
    2cd6:	08 f4       	brcc	.+2      	; 0x2cda <_fpadd_parts+0x24>
    2cd8:	33 c1       	rjmp	.+614    	; 0x2f40 <_fpadd_parts+0x28a>
    2cda:	94 30       	cpi	r25, 0x04	; 4
    2cdc:	69 f4       	brne	.+26     	; 0x2cf8 <_fpadd_parts+0x42>
    2cde:	84 30       	cpi	r24, 0x04	; 4
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <_fpadd_parts+0x2e>
    2ce2:	2f c1       	rjmp	.+606    	; 0x2f42 <_fpadd_parts+0x28c>
    2ce4:	11 96       	adiw	r26, 0x01	; 1
    2ce6:	9c 91       	ld	r25, X
    2ce8:	11 97       	sbiw	r26, 0x01	; 1
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	98 17       	cp	r25, r24
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <_fpadd_parts+0x3c>
    2cf0:	28 c1       	rjmp	.+592    	; 0x2f42 <_fpadd_parts+0x28c>
    2cf2:	af e7       	ldi	r26, 0x7F	; 127
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	25 c1       	rjmp	.+586    	; 0x2f42 <_fpadd_parts+0x28c>
    2cf8:	84 30       	cpi	r24, 0x04	; 4
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <_fpadd_parts+0x48>
    2cfc:	21 c1       	rjmp	.+578    	; 0x2f40 <_fpadd_parts+0x28a>
    2cfe:	82 30       	cpi	r24, 0x02	; 2
    2d00:	a9 f4       	brne	.+42     	; 0x2d2c <_fpadd_parts+0x76>
    2d02:	92 30       	cpi	r25, 0x02	; 2
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <_fpadd_parts+0x52>
    2d06:	1d c1       	rjmp	.+570    	; 0x2f42 <_fpadd_parts+0x28c>
    2d08:	9a 01       	movw	r18, r20
    2d0a:	ad 01       	movw	r20, r26
    2d0c:	88 e0       	ldi	r24, 0x08	; 8
    2d0e:	ea 01       	movw	r28, r20
    2d10:	09 90       	ld	r0, Y+
    2d12:	ae 01       	movw	r20, r28
    2d14:	e9 01       	movw	r28, r18
    2d16:	09 92       	st	Y+, r0
    2d18:	9e 01       	movw	r18, r28
    2d1a:	81 50       	subi	r24, 0x01	; 1
    2d1c:	c1 f7       	brne	.-16     	; 0x2d0e <_fpadd_parts+0x58>
    2d1e:	e2 01       	movw	r28, r4
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	11 96       	adiw	r26, 0x01	; 1
    2d24:	9c 91       	ld	r25, X
    2d26:	89 23       	and	r24, r25
    2d28:	81 83       	std	Z+1, r24	; 0x01
    2d2a:	08 c1       	rjmp	.+528    	; 0x2f3c <_fpadd_parts+0x286>
    2d2c:	92 30       	cpi	r25, 0x02	; 2
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <_fpadd_parts+0x7c>
    2d30:	07 c1       	rjmp	.+526    	; 0x2f40 <_fpadd_parts+0x28a>
    2d32:	12 96       	adiw	r26, 0x02	; 2
    2d34:	2d 90       	ld	r2, X+
    2d36:	3c 90       	ld	r3, X
    2d38:	13 97       	sbiw	r26, 0x03	; 3
    2d3a:	eb 01       	movw	r28, r22
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	14 96       	adiw	r26, 0x04	; 4
    2d42:	ad 90       	ld	r10, X+
    2d44:	bd 90       	ld	r11, X+
    2d46:	cd 90       	ld	r12, X+
    2d48:	dc 90       	ld	r13, X
    2d4a:	17 97       	sbiw	r26, 0x07	; 7
    2d4c:	ec 80       	ldd	r14, Y+4	; 0x04
    2d4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d50:	0e 81       	ldd	r16, Y+6	; 0x06
    2d52:	1f 81       	ldd	r17, Y+7	; 0x07
    2d54:	91 01       	movw	r18, r2
    2d56:	28 1b       	sub	r18, r24
    2d58:	39 0b       	sbc	r19, r25
    2d5a:	b9 01       	movw	r22, r18
    2d5c:	37 ff       	sbrs	r19, 7
    2d5e:	04 c0       	rjmp	.+8      	; 0x2d68 <_fpadd_parts+0xb2>
    2d60:	66 27       	eor	r22, r22
    2d62:	77 27       	eor	r23, r23
    2d64:	62 1b       	sub	r22, r18
    2d66:	73 0b       	sbc	r23, r19
    2d68:	60 32       	cpi	r22, 0x20	; 32
    2d6a:	71 05       	cpc	r23, r1
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <_fpadd_parts+0xba>
    2d6e:	61 c0       	rjmp	.+194    	; 0x2e32 <_fpadd_parts+0x17c>
    2d70:	12 16       	cp	r1, r18
    2d72:	13 06       	cpc	r1, r19
    2d74:	6c f5       	brge	.+90     	; 0x2dd0 <_fpadd_parts+0x11a>
    2d76:	37 01       	movw	r6, r14
    2d78:	48 01       	movw	r8, r16
    2d7a:	06 2e       	mov	r0, r22
    2d7c:	04 c0       	rjmp	.+8      	; 0x2d86 <_fpadd_parts+0xd0>
    2d7e:	96 94       	lsr	r9
    2d80:	87 94       	ror	r8
    2d82:	77 94       	ror	r7
    2d84:	67 94       	ror	r6
    2d86:	0a 94       	dec	r0
    2d88:	d2 f7       	brpl	.-12     	; 0x2d7e <_fpadd_parts+0xc8>
    2d8a:	21 e0       	ldi	r18, 0x01	; 1
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	04 c0       	rjmp	.+8      	; 0x2d9c <_fpadd_parts+0xe6>
    2d94:	22 0f       	add	r18, r18
    2d96:	33 1f       	adc	r19, r19
    2d98:	44 1f       	adc	r20, r20
    2d9a:	55 1f       	adc	r21, r21
    2d9c:	6a 95       	dec	r22
    2d9e:	d2 f7       	brpl	.-12     	; 0x2d94 <_fpadd_parts+0xde>
    2da0:	21 50       	subi	r18, 0x01	; 1
    2da2:	30 40       	sbci	r19, 0x00	; 0
    2da4:	40 40       	sbci	r20, 0x00	; 0
    2da6:	50 40       	sbci	r21, 0x00	; 0
    2da8:	2e 21       	and	r18, r14
    2daa:	3f 21       	and	r19, r15
    2dac:	40 23       	and	r20, r16
    2dae:	51 23       	and	r21, r17
    2db0:	21 15       	cp	r18, r1
    2db2:	31 05       	cpc	r19, r1
    2db4:	41 05       	cpc	r20, r1
    2db6:	51 05       	cpc	r21, r1
    2db8:	21 f0       	breq	.+8      	; 0x2dc2 <_fpadd_parts+0x10c>
    2dba:	21 e0       	ldi	r18, 0x01	; 1
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	79 01       	movw	r14, r18
    2dc4:	8a 01       	movw	r16, r20
    2dc6:	e6 28       	or	r14, r6
    2dc8:	f7 28       	or	r15, r7
    2dca:	08 29       	or	r16, r8
    2dcc:	19 29       	or	r17, r9
    2dce:	3c c0       	rjmp	.+120    	; 0x2e48 <_fpadd_parts+0x192>
    2dd0:	23 2b       	or	r18, r19
    2dd2:	d1 f1       	breq	.+116    	; 0x2e48 <_fpadd_parts+0x192>
    2dd4:	26 0e       	add	r2, r22
    2dd6:	37 1e       	adc	r3, r23
    2dd8:	35 01       	movw	r6, r10
    2dda:	46 01       	movw	r8, r12
    2ddc:	06 2e       	mov	r0, r22
    2dde:	04 c0       	rjmp	.+8      	; 0x2de8 <_fpadd_parts+0x132>
    2de0:	96 94       	lsr	r9
    2de2:	87 94       	ror	r8
    2de4:	77 94       	ror	r7
    2de6:	67 94       	ror	r6
    2de8:	0a 94       	dec	r0
    2dea:	d2 f7       	brpl	.-12     	; 0x2de0 <_fpadd_parts+0x12a>
    2dec:	21 e0       	ldi	r18, 0x01	; 1
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	04 c0       	rjmp	.+8      	; 0x2dfe <_fpadd_parts+0x148>
    2df6:	22 0f       	add	r18, r18
    2df8:	33 1f       	adc	r19, r19
    2dfa:	44 1f       	adc	r20, r20
    2dfc:	55 1f       	adc	r21, r21
    2dfe:	6a 95       	dec	r22
    2e00:	d2 f7       	brpl	.-12     	; 0x2df6 <_fpadd_parts+0x140>
    2e02:	21 50       	subi	r18, 0x01	; 1
    2e04:	30 40       	sbci	r19, 0x00	; 0
    2e06:	40 40       	sbci	r20, 0x00	; 0
    2e08:	50 40       	sbci	r21, 0x00	; 0
    2e0a:	2a 21       	and	r18, r10
    2e0c:	3b 21       	and	r19, r11
    2e0e:	4c 21       	and	r20, r12
    2e10:	5d 21       	and	r21, r13
    2e12:	21 15       	cp	r18, r1
    2e14:	31 05       	cpc	r19, r1
    2e16:	41 05       	cpc	r20, r1
    2e18:	51 05       	cpc	r21, r1
    2e1a:	21 f0       	breq	.+8      	; 0x2e24 <_fpadd_parts+0x16e>
    2e1c:	21 e0       	ldi	r18, 0x01	; 1
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	50 e0       	ldi	r21, 0x00	; 0
    2e24:	59 01       	movw	r10, r18
    2e26:	6a 01       	movw	r12, r20
    2e28:	a6 28       	or	r10, r6
    2e2a:	b7 28       	or	r11, r7
    2e2c:	c8 28       	or	r12, r8
    2e2e:	d9 28       	or	r13, r9
    2e30:	0b c0       	rjmp	.+22     	; 0x2e48 <_fpadd_parts+0x192>
    2e32:	82 15       	cp	r24, r2
    2e34:	93 05       	cpc	r25, r3
    2e36:	2c f0       	brlt	.+10     	; 0x2e42 <_fpadd_parts+0x18c>
    2e38:	1c 01       	movw	r2, r24
    2e3a:	aa 24       	eor	r10, r10
    2e3c:	bb 24       	eor	r11, r11
    2e3e:	65 01       	movw	r12, r10
    2e40:	03 c0       	rjmp	.+6      	; 0x2e48 <_fpadd_parts+0x192>
    2e42:	ee 24       	eor	r14, r14
    2e44:	ff 24       	eor	r15, r15
    2e46:	87 01       	movw	r16, r14
    2e48:	11 96       	adiw	r26, 0x01	; 1
    2e4a:	9c 91       	ld	r25, X
    2e4c:	d2 01       	movw	r26, r4
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	8c 91       	ld	r24, X
    2e52:	98 17       	cp	r25, r24
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <_fpadd_parts+0x1a2>
    2e56:	45 c0       	rjmp	.+138    	; 0x2ee2 <_fpadd_parts+0x22c>
    2e58:	99 23       	and	r25, r25
    2e5a:	39 f0       	breq	.+14     	; 0x2e6a <_fpadd_parts+0x1b4>
    2e5c:	a8 01       	movw	r20, r16
    2e5e:	97 01       	movw	r18, r14
    2e60:	2a 19       	sub	r18, r10
    2e62:	3b 09       	sbc	r19, r11
    2e64:	4c 09       	sbc	r20, r12
    2e66:	5d 09       	sbc	r21, r13
    2e68:	06 c0       	rjmp	.+12     	; 0x2e76 <_fpadd_parts+0x1c0>
    2e6a:	a6 01       	movw	r20, r12
    2e6c:	95 01       	movw	r18, r10
    2e6e:	2e 19       	sub	r18, r14
    2e70:	3f 09       	sbc	r19, r15
    2e72:	40 0b       	sbc	r20, r16
    2e74:	51 0b       	sbc	r21, r17
    2e76:	57 fd       	sbrc	r21, 7
    2e78:	08 c0       	rjmp	.+16     	; 0x2e8a <_fpadd_parts+0x1d4>
    2e7a:	11 82       	std	Z+1, r1	; 0x01
    2e7c:	33 82       	std	Z+3, r3	; 0x03
    2e7e:	22 82       	std	Z+2, r2	; 0x02
    2e80:	24 83       	std	Z+4, r18	; 0x04
    2e82:	35 83       	std	Z+5, r19	; 0x05
    2e84:	46 83       	std	Z+6, r20	; 0x06
    2e86:	57 83       	std	Z+7, r21	; 0x07
    2e88:	1d c0       	rjmp	.+58     	; 0x2ec4 <_fpadd_parts+0x20e>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	81 83       	std	Z+1, r24	; 0x01
    2e8e:	33 82       	std	Z+3, r3	; 0x03
    2e90:	22 82       	std	Z+2, r2	; 0x02
    2e92:	88 27       	eor	r24, r24
    2e94:	99 27       	eor	r25, r25
    2e96:	dc 01       	movw	r26, r24
    2e98:	82 1b       	sub	r24, r18
    2e9a:	93 0b       	sbc	r25, r19
    2e9c:	a4 0b       	sbc	r26, r20
    2e9e:	b5 0b       	sbc	r27, r21
    2ea0:	84 83       	std	Z+4, r24	; 0x04
    2ea2:	95 83       	std	Z+5, r25	; 0x05
    2ea4:	a6 83       	std	Z+6, r26	; 0x06
    2ea6:	b7 83       	std	Z+7, r27	; 0x07
    2ea8:	0d c0       	rjmp	.+26     	; 0x2ec4 <_fpadd_parts+0x20e>
    2eaa:	22 0f       	add	r18, r18
    2eac:	33 1f       	adc	r19, r19
    2eae:	44 1f       	adc	r20, r20
    2eb0:	55 1f       	adc	r21, r21
    2eb2:	24 83       	std	Z+4, r18	; 0x04
    2eb4:	35 83       	std	Z+5, r19	; 0x05
    2eb6:	46 83       	std	Z+6, r20	; 0x06
    2eb8:	57 83       	std	Z+7, r21	; 0x07
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	93 83       	std	Z+3, r25	; 0x03
    2ec2:	82 83       	std	Z+2, r24	; 0x02
    2ec4:	24 81       	ldd	r18, Z+4	; 0x04
    2ec6:	35 81       	ldd	r19, Z+5	; 0x05
    2ec8:	46 81       	ldd	r20, Z+6	; 0x06
    2eca:	57 81       	ldd	r21, Z+7	; 0x07
    2ecc:	da 01       	movw	r26, r20
    2ece:	c9 01       	movw	r24, r18
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	a1 09       	sbc	r26, r1
    2ed4:	b1 09       	sbc	r27, r1
    2ed6:	8f 5f       	subi	r24, 0xFF	; 255
    2ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eda:	af 4f       	sbci	r26, 0xFF	; 255
    2edc:	bf 43       	sbci	r27, 0x3F	; 63
    2ede:	28 f3       	brcs	.-54     	; 0x2eaa <_fpadd_parts+0x1f4>
    2ee0:	0b c0       	rjmp	.+22     	; 0x2ef8 <_fpadd_parts+0x242>
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	33 82       	std	Z+3, r3	; 0x03
    2ee6:	22 82       	std	Z+2, r2	; 0x02
    2ee8:	ea 0c       	add	r14, r10
    2eea:	fb 1c       	adc	r15, r11
    2eec:	0c 1d       	adc	r16, r12
    2eee:	1d 1d       	adc	r17, r13
    2ef0:	e4 82       	std	Z+4, r14	; 0x04
    2ef2:	f5 82       	std	Z+5, r15	; 0x05
    2ef4:	06 83       	std	Z+6, r16	; 0x06
    2ef6:	17 83       	std	Z+7, r17	; 0x07
    2ef8:	83 e0       	ldi	r24, 0x03	; 3
    2efa:	80 83       	st	Z, r24
    2efc:	24 81       	ldd	r18, Z+4	; 0x04
    2efe:	35 81       	ldd	r19, Z+5	; 0x05
    2f00:	46 81       	ldd	r20, Z+6	; 0x06
    2f02:	57 81       	ldd	r21, Z+7	; 0x07
    2f04:	57 ff       	sbrs	r21, 7
    2f06:	1a c0       	rjmp	.+52     	; 0x2f3c <_fpadd_parts+0x286>
    2f08:	c9 01       	movw	r24, r18
    2f0a:	aa 27       	eor	r26, r26
    2f0c:	97 fd       	sbrc	r25, 7
    2f0e:	a0 95       	com	r26
    2f10:	ba 2f       	mov	r27, r26
    2f12:	81 70       	andi	r24, 0x01	; 1
    2f14:	90 70       	andi	r25, 0x00	; 0
    2f16:	a0 70       	andi	r26, 0x00	; 0
    2f18:	b0 70       	andi	r27, 0x00	; 0
    2f1a:	56 95       	lsr	r21
    2f1c:	47 95       	ror	r20
    2f1e:	37 95       	ror	r19
    2f20:	27 95       	ror	r18
    2f22:	82 2b       	or	r24, r18
    2f24:	93 2b       	or	r25, r19
    2f26:	a4 2b       	or	r26, r20
    2f28:	b5 2b       	or	r27, r21
    2f2a:	84 83       	std	Z+4, r24	; 0x04
    2f2c:	95 83       	std	Z+5, r25	; 0x05
    2f2e:	a6 83       	std	Z+6, r26	; 0x06
    2f30:	b7 83       	std	Z+7, r27	; 0x07
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	01 96       	adiw	r24, 0x01	; 1
    2f38:	93 83       	std	Z+3, r25	; 0x03
    2f3a:	82 83       	std	Z+2, r24	; 0x02
    2f3c:	df 01       	movw	r26, r30
    2f3e:	01 c0       	rjmp	.+2      	; 0x2f42 <_fpadd_parts+0x28c>
    2f40:	d2 01       	movw	r26, r4
    2f42:	cd 01       	movw	r24, r26
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	e2 e1       	ldi	r30, 0x12	; 18
    2f4a:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00002f4e <__subsf3>:
    2f4e:	a0 e2       	ldi	r26, 0x20	; 32
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	ed ea       	ldi	r30, 0xAD	; 173
    2f54:	f7 e1       	ldi	r31, 0x17	; 23
    2f56:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
    2f5a:	69 83       	std	Y+1, r22	; 0x01
    2f5c:	7a 83       	std	Y+2, r23	; 0x02
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
    2f60:	9c 83       	std	Y+4, r25	; 0x04
    2f62:	2d 83       	std	Y+5, r18	; 0x05
    2f64:	3e 83       	std	Y+6, r19	; 0x06
    2f66:	4f 83       	std	Y+7, r20	; 0x07
    2f68:	58 87       	std	Y+8, r21	; 0x08
    2f6a:	e9 e0       	ldi	r30, 0x09	; 9
    2f6c:	ee 2e       	mov	r14, r30
    2f6e:	f1 2c       	mov	r15, r1
    2f70:	ec 0e       	add	r14, r28
    2f72:	fd 1e       	adc	r15, r29
    2f74:	ce 01       	movw	r24, r28
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	b7 01       	movw	r22, r14
    2f7a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    2f7e:	8e 01       	movw	r16, r28
    2f80:	0f 5e       	subi	r16, 0xEF	; 239
    2f82:	1f 4f       	sbci	r17, 0xFF	; 255
    2f84:	ce 01       	movw	r24, r28
    2f86:	05 96       	adiw	r24, 0x05	; 5
    2f88:	b8 01       	movw	r22, r16
    2f8a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    2f8e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	89 27       	eor	r24, r25
    2f94:	8a 8b       	std	Y+18, r24	; 0x12
    2f96:	c7 01       	movw	r24, r14
    2f98:	b8 01       	movw	r22, r16
    2f9a:	ae 01       	movw	r20, r28
    2f9c:	47 5e       	subi	r20, 0xE7	; 231
    2f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa0:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_fpadd_parts>
    2fa4:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__pack_f>
    2fa8:	a0 96       	adiw	r28, 0x20	; 32
    2faa:	e6 e0       	ldi	r30, 0x06	; 6
    2fac:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

00002fb0 <__addsf3>:
    2fb0:	a0 e2       	ldi	r26, 0x20	; 32
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	ee ed       	ldi	r30, 0xDE	; 222
    2fb6:	f7 e1       	ldi	r31, 0x17	; 23
    2fb8:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
    2fbc:	69 83       	std	Y+1, r22	; 0x01
    2fbe:	7a 83       	std	Y+2, r23	; 0x02
    2fc0:	8b 83       	std	Y+3, r24	; 0x03
    2fc2:	9c 83       	std	Y+4, r25	; 0x04
    2fc4:	2d 83       	std	Y+5, r18	; 0x05
    2fc6:	3e 83       	std	Y+6, r19	; 0x06
    2fc8:	4f 83       	std	Y+7, r20	; 0x07
    2fca:	58 87       	std	Y+8, r21	; 0x08
    2fcc:	f9 e0       	ldi	r31, 0x09	; 9
    2fce:	ef 2e       	mov	r14, r31
    2fd0:	f1 2c       	mov	r15, r1
    2fd2:	ec 0e       	add	r14, r28
    2fd4:	fd 1e       	adc	r15, r29
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	01 96       	adiw	r24, 0x01	; 1
    2fda:	b7 01       	movw	r22, r14
    2fdc:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    2fe0:	8e 01       	movw	r16, r28
    2fe2:	0f 5e       	subi	r16, 0xEF	; 239
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	05 96       	adiw	r24, 0x05	; 5
    2fea:	b8 01       	movw	r22, r16
    2fec:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    2ff0:	c7 01       	movw	r24, r14
    2ff2:	b8 01       	movw	r22, r16
    2ff4:	ae 01       	movw	r20, r28
    2ff6:	47 5e       	subi	r20, 0xE7	; 231
    2ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffa:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_fpadd_parts>
    2ffe:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__pack_f>
    3002:	a0 96       	adiw	r28, 0x20	; 32
    3004:	e6 e0       	ldi	r30, 0x06	; 6
    3006:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

0000300a <__mulsf3>:
    300a:	a0 e2       	ldi	r26, 0x20	; 32
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	eb e0       	ldi	r30, 0x0B	; 11
    3010:	f8 e1       	ldi	r31, 0x18	; 24
    3012:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
    3016:	69 83       	std	Y+1, r22	; 0x01
    3018:	7a 83       	std	Y+2, r23	; 0x02
    301a:	8b 83       	std	Y+3, r24	; 0x03
    301c:	9c 83       	std	Y+4, r25	; 0x04
    301e:	2d 83       	std	Y+5, r18	; 0x05
    3020:	3e 83       	std	Y+6, r19	; 0x06
    3022:	4f 83       	std	Y+7, r20	; 0x07
    3024:	58 87       	std	Y+8, r21	; 0x08
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	be 01       	movw	r22, r28
    302c:	67 5f       	subi	r22, 0xF7	; 247
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    3034:	ce 01       	movw	r24, r28
    3036:	05 96       	adiw	r24, 0x05	; 5
    3038:	be 01       	movw	r22, r28
    303a:	6f 5e       	subi	r22, 0xEF	; 239
    303c:	7f 4f       	sbci	r23, 0xFF	; 255
    303e:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    3042:	99 85       	ldd	r25, Y+9	; 0x09
    3044:	92 30       	cpi	r25, 0x02	; 2
    3046:	88 f0       	brcs	.+34     	; 0x306a <__mulsf3+0x60>
    3048:	89 89       	ldd	r24, Y+17	; 0x11
    304a:	82 30       	cpi	r24, 0x02	; 2
    304c:	c8 f0       	brcs	.+50     	; 0x3080 <__mulsf3+0x76>
    304e:	94 30       	cpi	r25, 0x04	; 4
    3050:	19 f4       	brne	.+6      	; 0x3058 <__mulsf3+0x4e>
    3052:	82 30       	cpi	r24, 0x02	; 2
    3054:	51 f4       	brne	.+20     	; 0x306a <__mulsf3+0x60>
    3056:	04 c0       	rjmp	.+8      	; 0x3060 <__mulsf3+0x56>
    3058:	84 30       	cpi	r24, 0x04	; 4
    305a:	29 f4       	brne	.+10     	; 0x3066 <__mulsf3+0x5c>
    305c:	92 30       	cpi	r25, 0x02	; 2
    305e:	81 f4       	brne	.+32     	; 0x3080 <__mulsf3+0x76>
    3060:	8f e7       	ldi	r24, 0x7F	; 127
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	c6 c0       	rjmp	.+396    	; 0x31f2 <__mulsf3+0x1e8>
    3066:	92 30       	cpi	r25, 0x02	; 2
    3068:	49 f4       	brne	.+18     	; 0x307c <__mulsf3+0x72>
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	9a 85       	ldd	r25, Y+10	; 0x0a
    306e:	8a 89       	ldd	r24, Y+18	; 0x12
    3070:	98 13       	cpse	r25, r24
    3072:	21 e0       	ldi	r18, 0x01	; 1
    3074:	2a 87       	std	Y+10, r18	; 0x0a
    3076:	ce 01       	movw	r24, r28
    3078:	09 96       	adiw	r24, 0x09	; 9
    307a:	bb c0       	rjmp	.+374    	; 0x31f2 <__mulsf3+0x1e8>
    307c:	82 30       	cpi	r24, 0x02	; 2
    307e:	49 f4       	brne	.+18     	; 0x3092 <__mulsf3+0x88>
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	8a 89       	ldd	r24, Y+18	; 0x12
    3086:	98 13       	cpse	r25, r24
    3088:	21 e0       	ldi	r18, 0x01	; 1
    308a:	2a 8b       	std	Y+18, r18	; 0x12
    308c:	ce 01       	movw	r24, r28
    308e:	41 96       	adiw	r24, 0x11	; 17
    3090:	b0 c0       	rjmp	.+352    	; 0x31f2 <__mulsf3+0x1e8>
    3092:	2d 84       	ldd	r2, Y+13	; 0x0d
    3094:	3e 84       	ldd	r3, Y+14	; 0x0e
    3096:	4f 84       	ldd	r4, Y+15	; 0x0f
    3098:	58 88       	ldd	r5, Y+16	; 0x10
    309a:	6d 88       	ldd	r6, Y+21	; 0x15
    309c:	7e 88       	ldd	r7, Y+22	; 0x16
    309e:	8f 88       	ldd	r8, Y+23	; 0x17
    30a0:	98 8c       	ldd	r9, Y+24	; 0x18
    30a2:	ee 24       	eor	r14, r14
    30a4:	ff 24       	eor	r15, r15
    30a6:	87 01       	movw	r16, r14
    30a8:	aa 24       	eor	r10, r10
    30aa:	bb 24       	eor	r11, r11
    30ac:	65 01       	movw	r12, r10
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	e0 e0       	ldi	r30, 0x00	; 0
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	c1 01       	movw	r24, r2
    30bc:	81 70       	andi	r24, 0x01	; 1
    30be:	90 70       	andi	r25, 0x00	; 0
    30c0:	89 2b       	or	r24, r25
    30c2:	e9 f0       	breq	.+58     	; 0x30fe <__mulsf3+0xf4>
    30c4:	e6 0c       	add	r14, r6
    30c6:	f7 1c       	adc	r15, r7
    30c8:	08 1d       	adc	r16, r8
    30ca:	19 1d       	adc	r17, r9
    30cc:	9a 01       	movw	r18, r20
    30ce:	ab 01       	movw	r20, r22
    30d0:	2a 0d       	add	r18, r10
    30d2:	3b 1d       	adc	r19, r11
    30d4:	4c 1d       	adc	r20, r12
    30d6:	5d 1d       	adc	r21, r13
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e0       	ldi	r26, 0x00	; 0
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e6 14       	cp	r14, r6
    30e2:	f7 04       	cpc	r15, r7
    30e4:	08 05       	cpc	r16, r8
    30e6:	19 05       	cpc	r17, r9
    30e8:	20 f4       	brcc	.+8      	; 0x30f2 <__mulsf3+0xe8>
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e0       	ldi	r26, 0x00	; 0
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	ba 01       	movw	r22, r20
    30f4:	a9 01       	movw	r20, r18
    30f6:	48 0f       	add	r20, r24
    30f8:	59 1f       	adc	r21, r25
    30fa:	6a 1f       	adc	r22, r26
    30fc:	7b 1f       	adc	r23, r27
    30fe:	aa 0c       	add	r10, r10
    3100:	bb 1c       	adc	r11, r11
    3102:	cc 1c       	adc	r12, r12
    3104:	dd 1c       	adc	r13, r13
    3106:	97 fe       	sbrs	r9, 7
    3108:	08 c0       	rjmp	.+16     	; 0x311a <__mulsf3+0x110>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a0 e0       	ldi	r26, 0x00	; 0
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	a8 2a       	or	r10, r24
    3114:	b9 2a       	or	r11, r25
    3116:	ca 2a       	or	r12, r26
    3118:	db 2a       	or	r13, r27
    311a:	31 96       	adiw	r30, 0x01	; 1
    311c:	e0 32       	cpi	r30, 0x20	; 32
    311e:	f1 05       	cpc	r31, r1
    3120:	49 f0       	breq	.+18     	; 0x3134 <__mulsf3+0x12a>
    3122:	66 0c       	add	r6, r6
    3124:	77 1c       	adc	r7, r7
    3126:	88 1c       	adc	r8, r8
    3128:	99 1c       	adc	r9, r9
    312a:	56 94       	lsr	r5
    312c:	47 94       	ror	r4
    312e:	37 94       	ror	r3
    3130:	27 94       	ror	r2
    3132:	c3 cf       	rjmp	.-122    	; 0x30ba <__mulsf3+0xb0>
    3134:	fa 85       	ldd	r31, Y+10	; 0x0a
    3136:	ea 89       	ldd	r30, Y+18	; 0x12
    3138:	2b 89       	ldd	r18, Y+19	; 0x13
    313a:	3c 89       	ldd	r19, Y+20	; 0x14
    313c:	8b 85       	ldd	r24, Y+11	; 0x0b
    313e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3140:	28 0f       	add	r18, r24
    3142:	39 1f       	adc	r19, r25
    3144:	2e 5f       	subi	r18, 0xFE	; 254
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	17 c0       	rjmp	.+46     	; 0x3178 <__mulsf3+0x16e>
    314a:	ca 01       	movw	r24, r20
    314c:	81 70       	andi	r24, 0x01	; 1
    314e:	90 70       	andi	r25, 0x00	; 0
    3150:	89 2b       	or	r24, r25
    3152:	61 f0       	breq	.+24     	; 0x316c <__mulsf3+0x162>
    3154:	16 95       	lsr	r17
    3156:	07 95       	ror	r16
    3158:	f7 94       	ror	r15
    315a:	e7 94       	ror	r14
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e0       	ldi	r26, 0x00	; 0
    3162:	b0 e8       	ldi	r27, 0x80	; 128
    3164:	e8 2a       	or	r14, r24
    3166:	f9 2a       	or	r15, r25
    3168:	0a 2b       	or	r16, r26
    316a:	1b 2b       	or	r17, r27
    316c:	76 95       	lsr	r23
    316e:	67 95       	ror	r22
    3170:	57 95       	ror	r21
    3172:	47 95       	ror	r20
    3174:	2f 5f       	subi	r18, 0xFF	; 255
    3176:	3f 4f       	sbci	r19, 0xFF	; 255
    3178:	77 fd       	sbrc	r23, 7
    317a:	e7 cf       	rjmp	.-50     	; 0x314a <__mulsf3+0x140>
    317c:	0c c0       	rjmp	.+24     	; 0x3196 <__mulsf3+0x18c>
    317e:	44 0f       	add	r20, r20
    3180:	55 1f       	adc	r21, r21
    3182:	66 1f       	adc	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	17 fd       	sbrc	r17, 7
    3188:	41 60       	ori	r20, 0x01	; 1
    318a:	ee 0c       	add	r14, r14
    318c:	ff 1c       	adc	r15, r15
    318e:	00 1f       	adc	r16, r16
    3190:	11 1f       	adc	r17, r17
    3192:	21 50       	subi	r18, 0x01	; 1
    3194:	30 40       	sbci	r19, 0x00	; 0
    3196:	40 30       	cpi	r20, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	59 07       	cpc	r21, r25
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	69 07       	cpc	r22, r25
    31a0:	90 e4       	ldi	r25, 0x40	; 64
    31a2:	79 07       	cpc	r23, r25
    31a4:	60 f3       	brcs	.-40     	; 0x317e <__mulsf3+0x174>
    31a6:	2b 8f       	std	Y+27, r18	; 0x1b
    31a8:	3c 8f       	std	Y+28, r19	; 0x1c
    31aa:	db 01       	movw	r26, r22
    31ac:	ca 01       	movw	r24, r20
    31ae:	8f 77       	andi	r24, 0x7F	; 127
    31b0:	90 70       	andi	r25, 0x00	; 0
    31b2:	a0 70       	andi	r26, 0x00	; 0
    31b4:	b0 70       	andi	r27, 0x00	; 0
    31b6:	80 34       	cpi	r24, 0x40	; 64
    31b8:	91 05       	cpc	r25, r1
    31ba:	a1 05       	cpc	r26, r1
    31bc:	b1 05       	cpc	r27, r1
    31be:	61 f4       	brne	.+24     	; 0x31d8 <__mulsf3+0x1ce>
    31c0:	47 fd       	sbrc	r20, 7
    31c2:	0a c0       	rjmp	.+20     	; 0x31d8 <__mulsf3+0x1ce>
    31c4:	e1 14       	cp	r14, r1
    31c6:	f1 04       	cpc	r15, r1
    31c8:	01 05       	cpc	r16, r1
    31ca:	11 05       	cpc	r17, r1
    31cc:	29 f0       	breq	.+10     	; 0x31d8 <__mulsf3+0x1ce>
    31ce:	40 5c       	subi	r20, 0xC0	; 192
    31d0:	5f 4f       	sbci	r21, 0xFF	; 255
    31d2:	6f 4f       	sbci	r22, 0xFF	; 255
    31d4:	7f 4f       	sbci	r23, 0xFF	; 255
    31d6:	40 78       	andi	r20, 0x80	; 128
    31d8:	1a 8e       	std	Y+26, r1	; 0x1a
    31da:	fe 17       	cp	r31, r30
    31dc:	11 f0       	breq	.+4      	; 0x31e2 <__mulsf3+0x1d8>
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	8a 8f       	std	Y+26, r24	; 0x1a
    31e2:	4d 8f       	std	Y+29, r20	; 0x1d
    31e4:	5e 8f       	std	Y+30, r21	; 0x1e
    31e6:	6f 8f       	std	Y+31, r22	; 0x1f
    31e8:	78 a3       	std	Y+32, r23	; 0x20
    31ea:	83 e0       	ldi	r24, 0x03	; 3
    31ec:	89 8f       	std	Y+25, r24	; 0x19
    31ee:	ce 01       	movw	r24, r28
    31f0:	49 96       	adiw	r24, 0x19	; 25
    31f2:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__pack_f>
    31f6:	a0 96       	adiw	r28, 0x20	; 32
    31f8:	e2 e1       	ldi	r30, 0x12	; 18
    31fa:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

000031fe <__gesf2>:
    31fe:	a8 e1       	ldi	r26, 0x18	; 24
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e5 e0       	ldi	r30, 0x05	; 5
    3204:	f9 e1       	ldi	r31, 0x19	; 25
    3206:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
    320a:	69 83       	std	Y+1, r22	; 0x01
    320c:	7a 83       	std	Y+2, r23	; 0x02
    320e:	8b 83       	std	Y+3, r24	; 0x03
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	2d 83       	std	Y+5, r18	; 0x05
    3214:	3e 83       	std	Y+6, r19	; 0x06
    3216:	4f 83       	std	Y+7, r20	; 0x07
    3218:	58 87       	std	Y+8, r21	; 0x08
    321a:	89 e0       	ldi	r24, 0x09	; 9
    321c:	e8 2e       	mov	r14, r24
    321e:	f1 2c       	mov	r15, r1
    3220:	ec 0e       	add	r14, r28
    3222:	fd 1e       	adc	r15, r29
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	b7 01       	movw	r22, r14
    322a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    322e:	8e 01       	movw	r16, r28
    3230:	0f 5e       	subi	r16, 0xEF	; 239
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	ce 01       	movw	r24, r28
    3236:	05 96       	adiw	r24, 0x05	; 5
    3238:	b8 01       	movw	r22, r16
    323a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    323e:	89 85       	ldd	r24, Y+9	; 0x09
    3240:	82 30       	cpi	r24, 0x02	; 2
    3242:	40 f0       	brcs	.+16     	; 0x3254 <__gesf2+0x56>
    3244:	89 89       	ldd	r24, Y+17	; 0x11
    3246:	82 30       	cpi	r24, 0x02	; 2
    3248:	28 f0       	brcs	.+10     	; 0x3254 <__gesf2+0x56>
    324a:	c7 01       	movw	r24, r14
    324c:	b8 01       	movw	r22, r16
    324e:	0e 94 98 1b 	call	0x3730	; 0x3730 <__fpcmp_parts_f>
    3252:	01 c0       	rjmp	.+2      	; 0x3256 <__gesf2+0x58>
    3254:	8f ef       	ldi	r24, 0xFF	; 255
    3256:	68 96       	adiw	r28, 0x18	; 24
    3258:	e6 e0       	ldi	r30, 0x06	; 6
    325a:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

0000325e <__fixsfsi>:
    325e:	ac e0       	ldi	r26, 0x0C	; 12
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e5 e3       	ldi	r30, 0x35	; 53
    3264:	f9 e1       	ldi	r31, 0x19	; 25
    3266:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__prologue_saves__+0x20>
    326a:	69 83       	std	Y+1, r22	; 0x01
    326c:	7a 83       	std	Y+2, r23	; 0x02
    326e:	8b 83       	std	Y+3, r24	; 0x03
    3270:	9c 83       	std	Y+4, r25	; 0x04
    3272:	ce 01       	movw	r24, r28
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	be 01       	movw	r22, r28
    3278:	6b 5f       	subi	r22, 0xFB	; 251
    327a:	7f 4f       	sbci	r23, 0xFF	; 255
    327c:	0e 94 20 1b 	call	0x3640	; 0x3640 <__unpack_f>
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	61 f1       	breq	.+88     	; 0x32de <__fixsfsi+0x80>
    3286:	82 30       	cpi	r24, 0x02	; 2
    3288:	50 f1       	brcs	.+84     	; 0x32de <__fixsfsi+0x80>
    328a:	84 30       	cpi	r24, 0x04	; 4
    328c:	21 f4       	brne	.+8      	; 0x3296 <__fixsfsi+0x38>
    328e:	8e 81       	ldd	r24, Y+6	; 0x06
    3290:	88 23       	and	r24, r24
    3292:	51 f1       	breq	.+84     	; 0x32e8 <__fixsfsi+0x8a>
    3294:	2e c0       	rjmp	.+92     	; 0x32f2 <__fixsfsi+0x94>
    3296:	2f 81       	ldd	r18, Y+7	; 0x07
    3298:	38 85       	ldd	r19, Y+8	; 0x08
    329a:	37 fd       	sbrc	r19, 7
    329c:	20 c0       	rjmp	.+64     	; 0x32de <__fixsfsi+0x80>
    329e:	6e 81       	ldd	r22, Y+6	; 0x06
    32a0:	2f 31       	cpi	r18, 0x1F	; 31
    32a2:	31 05       	cpc	r19, r1
    32a4:	1c f0       	brlt	.+6      	; 0x32ac <__fixsfsi+0x4e>
    32a6:	66 23       	and	r22, r22
    32a8:	f9 f0       	breq	.+62     	; 0x32e8 <__fixsfsi+0x8a>
    32aa:	23 c0       	rjmp	.+70     	; 0x32f2 <__fixsfsi+0x94>
    32ac:	8e e1       	ldi	r24, 0x1E	; 30
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	82 1b       	sub	r24, r18
    32b2:	93 0b       	sbc	r25, r19
    32b4:	29 85       	ldd	r18, Y+9	; 0x09
    32b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    32b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    32ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    32bc:	04 c0       	rjmp	.+8      	; 0x32c6 <__fixsfsi+0x68>
    32be:	56 95       	lsr	r21
    32c0:	47 95       	ror	r20
    32c2:	37 95       	ror	r19
    32c4:	27 95       	ror	r18
    32c6:	8a 95       	dec	r24
    32c8:	d2 f7       	brpl	.-12     	; 0x32be <__fixsfsi+0x60>
    32ca:	66 23       	and	r22, r22
    32cc:	b1 f0       	breq	.+44     	; 0x32fa <__fixsfsi+0x9c>
    32ce:	50 95       	com	r21
    32d0:	40 95       	com	r20
    32d2:	30 95       	com	r19
    32d4:	21 95       	neg	r18
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	4f 4f       	sbci	r20, 0xFF	; 255
    32da:	5f 4f       	sbci	r21, 0xFF	; 255
    32dc:	0e c0       	rjmp	.+28     	; 0x32fa <__fixsfsi+0x9c>
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	09 c0       	rjmp	.+18     	; 0x32fa <__fixsfsi+0x9c>
    32e8:	2f ef       	ldi	r18, 0xFF	; 255
    32ea:	3f ef       	ldi	r19, 0xFF	; 255
    32ec:	4f ef       	ldi	r20, 0xFF	; 255
    32ee:	5f e7       	ldi	r21, 0x7F	; 127
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <__fixsfsi+0x9c>
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	50 e8       	ldi	r21, 0x80	; 128
    32fa:	b9 01       	movw	r22, r18
    32fc:	ca 01       	movw	r24, r20
    32fe:	2c 96       	adiw	r28, 0x0c	; 12
    3300:	e2 e0       	ldi	r30, 0x02	; 2
    3302:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__epilogue_restores__+0x20>

00003306 <__floatunsisf>:
    3306:	a8 e0       	ldi	r26, 0x08	; 8
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	e9 e8       	ldi	r30, 0x89	; 137
    330c:	f9 e1       	ldi	r31, 0x19	; 25
    330e:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__prologue_saves__+0x10>
    3312:	7b 01       	movw	r14, r22
    3314:	8c 01       	movw	r16, r24
    3316:	61 15       	cp	r22, r1
    3318:	71 05       	cpc	r23, r1
    331a:	81 05       	cpc	r24, r1
    331c:	91 05       	cpc	r25, r1
    331e:	19 f4       	brne	.+6      	; 0x3326 <__floatunsisf+0x20>
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	60 c0       	rjmp	.+192    	; 0x33e6 <__floatunsisf+0xe0>
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	89 83       	std	Y+1, r24	; 0x01
    332a:	8e e1       	ldi	r24, 0x1E	; 30
    332c:	c8 2e       	mov	r12, r24
    332e:	d1 2c       	mov	r13, r1
    3330:	dc 82       	std	Y+4, r13	; 0x04
    3332:	cb 82       	std	Y+3, r12	; 0x03
    3334:	ed 82       	std	Y+5, r14	; 0x05
    3336:	fe 82       	std	Y+6, r15	; 0x06
    3338:	0f 83       	std	Y+7, r16	; 0x07
    333a:	18 87       	std	Y+8, r17	; 0x08
    333c:	c8 01       	movw	r24, r16
    333e:	b7 01       	movw	r22, r14
    3340:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__clzsi2>
    3344:	fc 01       	movw	r30, r24
    3346:	31 97       	sbiw	r30, 0x01	; 1
    3348:	f7 ff       	sbrs	r31, 7
    334a:	3b c0       	rjmp	.+118    	; 0x33c2 <__floatunsisf+0xbc>
    334c:	22 27       	eor	r18, r18
    334e:	33 27       	eor	r19, r19
    3350:	2e 1b       	sub	r18, r30
    3352:	3f 0b       	sbc	r19, r31
    3354:	57 01       	movw	r10, r14
    3356:	68 01       	movw	r12, r16
    3358:	02 2e       	mov	r0, r18
    335a:	04 c0       	rjmp	.+8      	; 0x3364 <__floatunsisf+0x5e>
    335c:	d6 94       	lsr	r13
    335e:	c7 94       	ror	r12
    3360:	b7 94       	ror	r11
    3362:	a7 94       	ror	r10
    3364:	0a 94       	dec	r0
    3366:	d2 f7       	brpl	.-12     	; 0x335c <__floatunsisf+0x56>
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	70 e0       	ldi	r23, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	a0 e0       	ldi	r26, 0x00	; 0
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	04 c0       	rjmp	.+8      	; 0x3382 <__floatunsisf+0x7c>
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	aa 1f       	adc	r26, r26
    3380:	bb 1f       	adc	r27, r27
    3382:	2a 95       	dec	r18
    3384:	d2 f7       	brpl	.-12     	; 0x337a <__floatunsisf+0x74>
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	a1 09       	sbc	r26, r1
    338a:	b1 09       	sbc	r27, r1
    338c:	8e 21       	and	r24, r14
    338e:	9f 21       	and	r25, r15
    3390:	a0 23       	and	r26, r16
    3392:	b1 23       	and	r27, r17
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	a1 05       	cpc	r26, r1
    3398:	b1 05       	cpc	r27, r1
    339a:	21 f0       	breq	.+8      	; 0x33a4 <__floatunsisf+0x9e>
    339c:	41 e0       	ldi	r20, 0x01	; 1
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	4a 29       	or	r20, r10
    33a6:	5b 29       	or	r21, r11
    33a8:	6c 29       	or	r22, r12
    33aa:	7d 29       	or	r23, r13
    33ac:	4d 83       	std	Y+5, r20	; 0x05
    33ae:	5e 83       	std	Y+6, r21	; 0x06
    33b0:	6f 83       	std	Y+7, r22	; 0x07
    33b2:	78 87       	std	Y+8, r23	; 0x08
    33b4:	8e e1       	ldi	r24, 0x1E	; 30
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	8e 1b       	sub	r24, r30
    33ba:	9f 0b       	sbc	r25, r31
    33bc:	9c 83       	std	Y+4, r25	; 0x04
    33be:	8b 83       	std	Y+3, r24	; 0x03
    33c0:	12 c0       	rjmp	.+36     	; 0x33e6 <__floatunsisf+0xe0>
    33c2:	30 97       	sbiw	r30, 0x00	; 0
    33c4:	81 f0       	breq	.+32     	; 0x33e6 <__floatunsisf+0xe0>
    33c6:	0e 2e       	mov	r0, r30
    33c8:	04 c0       	rjmp	.+8      	; 0x33d2 <__floatunsisf+0xcc>
    33ca:	ee 0c       	add	r14, r14
    33cc:	ff 1c       	adc	r15, r15
    33ce:	00 1f       	adc	r16, r16
    33d0:	11 1f       	adc	r17, r17
    33d2:	0a 94       	dec	r0
    33d4:	d2 f7       	brpl	.-12     	; 0x33ca <__floatunsisf+0xc4>
    33d6:	ed 82       	std	Y+5, r14	; 0x05
    33d8:	fe 82       	std	Y+6, r15	; 0x06
    33da:	0f 83       	std	Y+7, r16	; 0x07
    33dc:	18 87       	std	Y+8, r17	; 0x08
    33de:	ce 1a       	sub	r12, r30
    33e0:	df 0a       	sbc	r13, r31
    33e2:	dc 82       	std	Y+4, r13	; 0x04
    33e4:	cb 82       	std	Y+3, r12	; 0x03
    33e6:	1a 82       	std	Y+2, r1	; 0x02
    33e8:	ce 01       	movw	r24, r28
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__pack_f>
    33f0:	28 96       	adiw	r28, 0x08	; 8
    33f2:	ea e0       	ldi	r30, 0x0A	; 10
    33f4:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__epilogue_restores__+0x10>

000033f8 <__clzsi2>:
    33f8:	ef 92       	push	r14
    33fa:	ff 92       	push	r15
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
    3400:	7b 01       	movw	r14, r22
    3402:	8c 01       	movw	r16, r24
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	e8 16       	cp	r14, r24
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	f8 06       	cpc	r15, r24
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	08 07       	cpc	r16, r24
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	18 07       	cpc	r17, r24
    3414:	88 f4       	brcc	.+34     	; 0x3438 <__clzsi2+0x40>
    3416:	8f ef       	ldi	r24, 0xFF	; 255
    3418:	e8 16       	cp	r14, r24
    341a:	f1 04       	cpc	r15, r1
    341c:	01 05       	cpc	r16, r1
    341e:	11 05       	cpc	r17, r1
    3420:	31 f0       	breq	.+12     	; 0x342e <__clzsi2+0x36>
    3422:	28 f0       	brcs	.+10     	; 0x342e <__clzsi2+0x36>
    3424:	88 e0       	ldi	r24, 0x08	; 8
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	a0 e0       	ldi	r26, 0x00	; 0
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	17 c0       	rjmp	.+46     	; 0x345c <__clzsi2+0x64>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	a0 e0       	ldi	r26, 0x00	; 0
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	12 c0       	rjmp	.+36     	; 0x345c <__clzsi2+0x64>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	e8 16       	cp	r14, r24
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	f8 06       	cpc	r15, r24
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	08 07       	cpc	r16, r24
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	18 07       	cpc	r17, r24
    3448:	28 f0       	brcs	.+10     	; 0x3454 <__clzsi2+0x5c>
    344a:	88 e1       	ldi	r24, 0x18	; 24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	04 c0       	rjmp	.+8      	; 0x345c <__clzsi2+0x64>
    3454:	80 e1       	ldi	r24, 0x10	; 16
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	20 e2       	ldi	r18, 0x20	; 32
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	50 e0       	ldi	r21, 0x00	; 0
    3464:	28 1b       	sub	r18, r24
    3466:	39 0b       	sbc	r19, r25
    3468:	4a 0b       	sbc	r20, r26
    346a:	5b 0b       	sbc	r21, r27
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <__clzsi2+0x7e>
    346e:	16 95       	lsr	r17
    3470:	07 95       	ror	r16
    3472:	f7 94       	ror	r15
    3474:	e7 94       	ror	r14
    3476:	8a 95       	dec	r24
    3478:	d2 f7       	brpl	.-12     	; 0x346e <__clzsi2+0x76>
    347a:	f7 01       	movw	r30, r14
    347c:	e9 57       	subi	r30, 0x79	; 121
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 81       	ld	r24, Z
    3482:	28 1b       	sub	r18, r24
    3484:	31 09       	sbc	r19, r1
    3486:	41 09       	sbc	r20, r1
    3488:	51 09       	sbc	r21, r1
    348a:	c9 01       	movw	r24, r18
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	08 95       	ret

00003496 <__pack_f>:
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	fc 01       	movw	r30, r24
    34a2:	e4 80       	ldd	r14, Z+4	; 0x04
    34a4:	f5 80       	ldd	r15, Z+5	; 0x05
    34a6:	06 81       	ldd	r16, Z+6	; 0x06
    34a8:	17 81       	ldd	r17, Z+7	; 0x07
    34aa:	d1 80       	ldd	r13, Z+1	; 0x01
    34ac:	80 81       	ld	r24, Z
    34ae:	82 30       	cpi	r24, 0x02	; 2
    34b0:	48 f4       	brcc	.+18     	; 0x34c4 <__pack_f+0x2e>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	a0 e1       	ldi	r26, 0x10	; 16
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	e8 2a       	or	r14, r24
    34bc:	f9 2a       	or	r15, r25
    34be:	0a 2b       	or	r16, r26
    34c0:	1b 2b       	or	r17, r27
    34c2:	a5 c0       	rjmp	.+330    	; 0x360e <__pack_f+0x178>
    34c4:	84 30       	cpi	r24, 0x04	; 4
    34c6:	09 f4       	brne	.+2      	; 0x34ca <__pack_f+0x34>
    34c8:	9f c0       	rjmp	.+318    	; 0x3608 <__pack_f+0x172>
    34ca:	82 30       	cpi	r24, 0x02	; 2
    34cc:	21 f4       	brne	.+8      	; 0x34d6 <__pack_f+0x40>
    34ce:	ee 24       	eor	r14, r14
    34d0:	ff 24       	eor	r15, r15
    34d2:	87 01       	movw	r16, r14
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <__pack_f+0x4a>
    34d6:	e1 14       	cp	r14, r1
    34d8:	f1 04       	cpc	r15, r1
    34da:	01 05       	cpc	r16, r1
    34dc:	11 05       	cpc	r17, r1
    34de:	19 f4       	brne	.+6      	; 0x34e6 <__pack_f+0x50>
    34e0:	e0 e0       	ldi	r30, 0x00	; 0
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	96 c0       	rjmp	.+300    	; 0x3612 <__pack_f+0x17c>
    34e6:	62 81       	ldd	r22, Z+2	; 0x02
    34e8:	73 81       	ldd	r23, Z+3	; 0x03
    34ea:	9f ef       	ldi	r25, 0xFF	; 255
    34ec:	62 38       	cpi	r22, 0x82	; 130
    34ee:	79 07       	cpc	r23, r25
    34f0:	0c f0       	brlt	.+2      	; 0x34f4 <__pack_f+0x5e>
    34f2:	5b c0       	rjmp	.+182    	; 0x35aa <__pack_f+0x114>
    34f4:	22 e8       	ldi	r18, 0x82	; 130
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	26 1b       	sub	r18, r22
    34fa:	37 0b       	sbc	r19, r23
    34fc:	2a 31       	cpi	r18, 0x1A	; 26
    34fe:	31 05       	cpc	r19, r1
    3500:	2c f0       	brlt	.+10     	; 0x350c <__pack_f+0x76>
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	2a c0       	rjmp	.+84     	; 0x3560 <__pack_f+0xca>
    350c:	b8 01       	movw	r22, r16
    350e:	a7 01       	movw	r20, r14
    3510:	02 2e       	mov	r0, r18
    3512:	04 c0       	rjmp	.+8      	; 0x351c <__pack_f+0x86>
    3514:	76 95       	lsr	r23
    3516:	67 95       	ror	r22
    3518:	57 95       	ror	r21
    351a:	47 95       	ror	r20
    351c:	0a 94       	dec	r0
    351e:	d2 f7       	brpl	.-12     	; 0x3514 <__pack_f+0x7e>
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	a0 e0       	ldi	r26, 0x00	; 0
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	04 c0       	rjmp	.+8      	; 0x3532 <__pack_f+0x9c>
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	aa 1f       	adc	r26, r26
    3530:	bb 1f       	adc	r27, r27
    3532:	2a 95       	dec	r18
    3534:	d2 f7       	brpl	.-12     	; 0x352a <__pack_f+0x94>
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	a1 09       	sbc	r26, r1
    353a:	b1 09       	sbc	r27, r1
    353c:	8e 21       	and	r24, r14
    353e:	9f 21       	and	r25, r15
    3540:	a0 23       	and	r26, r16
    3542:	b1 23       	and	r27, r17
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	a1 05       	cpc	r26, r1
    3548:	b1 05       	cpc	r27, r1
    354a:	21 f0       	breq	.+8      	; 0x3554 <__pack_f+0xbe>
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	a0 e0       	ldi	r26, 0x00	; 0
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	9a 01       	movw	r18, r20
    3556:	ab 01       	movw	r20, r22
    3558:	28 2b       	or	r18, r24
    355a:	39 2b       	or	r19, r25
    355c:	4a 2b       	or	r20, r26
    355e:	5b 2b       	or	r21, r27
    3560:	da 01       	movw	r26, r20
    3562:	c9 01       	movw	r24, r18
    3564:	8f 77       	andi	r24, 0x7F	; 127
    3566:	90 70       	andi	r25, 0x00	; 0
    3568:	a0 70       	andi	r26, 0x00	; 0
    356a:	b0 70       	andi	r27, 0x00	; 0
    356c:	80 34       	cpi	r24, 0x40	; 64
    356e:	91 05       	cpc	r25, r1
    3570:	a1 05       	cpc	r26, r1
    3572:	b1 05       	cpc	r27, r1
    3574:	39 f4       	brne	.+14     	; 0x3584 <__pack_f+0xee>
    3576:	27 ff       	sbrs	r18, 7
    3578:	09 c0       	rjmp	.+18     	; 0x358c <__pack_f+0xf6>
    357a:	20 5c       	subi	r18, 0xC0	; 192
    357c:	3f 4f       	sbci	r19, 0xFF	; 255
    357e:	4f 4f       	sbci	r20, 0xFF	; 255
    3580:	5f 4f       	sbci	r21, 0xFF	; 255
    3582:	04 c0       	rjmp	.+8      	; 0x358c <__pack_f+0xf6>
    3584:	21 5c       	subi	r18, 0xC1	; 193
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	4f 4f       	sbci	r20, 0xFF	; 255
    358a:	5f 4f       	sbci	r21, 0xFF	; 255
    358c:	e0 e0       	ldi	r30, 0x00	; 0
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	20 30       	cpi	r18, 0x00	; 0
    3592:	a0 e0       	ldi	r26, 0x00	; 0
    3594:	3a 07       	cpc	r19, r26
    3596:	a0 e0       	ldi	r26, 0x00	; 0
    3598:	4a 07       	cpc	r20, r26
    359a:	a0 e4       	ldi	r26, 0x40	; 64
    359c:	5a 07       	cpc	r21, r26
    359e:	10 f0       	brcs	.+4      	; 0x35a4 <__pack_f+0x10e>
    35a0:	e1 e0       	ldi	r30, 0x01	; 1
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	79 01       	movw	r14, r18
    35a6:	8a 01       	movw	r16, r20
    35a8:	27 c0       	rjmp	.+78     	; 0x35f8 <__pack_f+0x162>
    35aa:	60 38       	cpi	r22, 0x80	; 128
    35ac:	71 05       	cpc	r23, r1
    35ae:	64 f5       	brge	.+88     	; 0x3608 <__pack_f+0x172>
    35b0:	fb 01       	movw	r30, r22
    35b2:	e1 58       	subi	r30, 0x81	; 129
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	d8 01       	movw	r26, r16
    35b8:	c7 01       	movw	r24, r14
    35ba:	8f 77       	andi	r24, 0x7F	; 127
    35bc:	90 70       	andi	r25, 0x00	; 0
    35be:	a0 70       	andi	r26, 0x00	; 0
    35c0:	b0 70       	andi	r27, 0x00	; 0
    35c2:	80 34       	cpi	r24, 0x40	; 64
    35c4:	91 05       	cpc	r25, r1
    35c6:	a1 05       	cpc	r26, r1
    35c8:	b1 05       	cpc	r27, r1
    35ca:	39 f4       	brne	.+14     	; 0x35da <__pack_f+0x144>
    35cc:	e7 fe       	sbrs	r14, 7
    35ce:	0d c0       	rjmp	.+26     	; 0x35ea <__pack_f+0x154>
    35d0:	80 e4       	ldi	r24, 0x40	; 64
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	a0 e0       	ldi	r26, 0x00	; 0
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	04 c0       	rjmp	.+8      	; 0x35e2 <__pack_f+0x14c>
    35da:	8f e3       	ldi	r24, 0x3F	; 63
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	a0 e0       	ldi	r26, 0x00	; 0
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	e8 0e       	add	r14, r24
    35e4:	f9 1e       	adc	r15, r25
    35e6:	0a 1f       	adc	r16, r26
    35e8:	1b 1f       	adc	r17, r27
    35ea:	17 ff       	sbrs	r17, 7
    35ec:	05 c0       	rjmp	.+10     	; 0x35f8 <__pack_f+0x162>
    35ee:	16 95       	lsr	r17
    35f0:	07 95       	ror	r16
    35f2:	f7 94       	ror	r15
    35f4:	e7 94       	ror	r14
    35f6:	31 96       	adiw	r30, 0x01	; 1
    35f8:	87 e0       	ldi	r24, 0x07	; 7
    35fa:	16 95       	lsr	r17
    35fc:	07 95       	ror	r16
    35fe:	f7 94       	ror	r15
    3600:	e7 94       	ror	r14
    3602:	8a 95       	dec	r24
    3604:	d1 f7       	brne	.-12     	; 0x35fa <__pack_f+0x164>
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <__pack_f+0x17c>
    3608:	ee 24       	eor	r14, r14
    360a:	ff 24       	eor	r15, r15
    360c:	87 01       	movw	r16, r14
    360e:	ef ef       	ldi	r30, 0xFF	; 255
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	6e 2f       	mov	r22, r30
    3614:	67 95       	ror	r22
    3616:	66 27       	eor	r22, r22
    3618:	67 95       	ror	r22
    361a:	90 2f       	mov	r25, r16
    361c:	9f 77       	andi	r25, 0x7F	; 127
    361e:	d7 94       	ror	r13
    3620:	dd 24       	eor	r13, r13
    3622:	d7 94       	ror	r13
    3624:	8e 2f       	mov	r24, r30
    3626:	86 95       	lsr	r24
    3628:	49 2f       	mov	r20, r25
    362a:	46 2b       	or	r20, r22
    362c:	58 2f       	mov	r21, r24
    362e:	5d 29       	or	r21, r13
    3630:	b7 01       	movw	r22, r14
    3632:	ca 01       	movw	r24, r20
    3634:	1f 91       	pop	r17
    3636:	0f 91       	pop	r16
    3638:	ff 90       	pop	r15
    363a:	ef 90       	pop	r14
    363c:	df 90       	pop	r13
    363e:	08 95       	ret

00003640 <__unpack_f>:
    3640:	fc 01       	movw	r30, r24
    3642:	db 01       	movw	r26, r22
    3644:	40 81       	ld	r20, Z
    3646:	51 81       	ldd	r21, Z+1	; 0x01
    3648:	22 81       	ldd	r18, Z+2	; 0x02
    364a:	62 2f       	mov	r22, r18
    364c:	6f 77       	andi	r22, 0x7F	; 127
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	22 1f       	adc	r18, r18
    3652:	22 27       	eor	r18, r18
    3654:	22 1f       	adc	r18, r18
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	89 2f       	mov	r24, r25
    365a:	88 0f       	add	r24, r24
    365c:	82 2b       	or	r24, r18
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	99 1f       	adc	r25, r25
    3664:	99 27       	eor	r25, r25
    3666:	99 1f       	adc	r25, r25
    3668:	11 96       	adiw	r26, 0x01	; 1
    366a:	9c 93       	st	X, r25
    366c:	11 97       	sbiw	r26, 0x01	; 1
    366e:	21 15       	cp	r18, r1
    3670:	31 05       	cpc	r19, r1
    3672:	a9 f5       	brne	.+106    	; 0x36de <__unpack_f+0x9e>
    3674:	41 15       	cp	r20, r1
    3676:	51 05       	cpc	r21, r1
    3678:	61 05       	cpc	r22, r1
    367a:	71 05       	cpc	r23, r1
    367c:	11 f4       	brne	.+4      	; 0x3682 <__unpack_f+0x42>
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	37 c0       	rjmp	.+110    	; 0x36f0 <__unpack_f+0xb0>
    3682:	82 e8       	ldi	r24, 0x82	; 130
    3684:	9f ef       	ldi	r25, 0xFF	; 255
    3686:	13 96       	adiw	r26, 0x03	; 3
    3688:	9c 93       	st	X, r25
    368a:	8e 93       	st	-X, r24
    368c:	12 97       	sbiw	r26, 0x02	; 2
    368e:	9a 01       	movw	r18, r20
    3690:	ab 01       	movw	r20, r22
    3692:	67 e0       	ldi	r22, 0x07	; 7
    3694:	22 0f       	add	r18, r18
    3696:	33 1f       	adc	r19, r19
    3698:	44 1f       	adc	r20, r20
    369a:	55 1f       	adc	r21, r21
    369c:	6a 95       	dec	r22
    369e:	d1 f7       	brne	.-12     	; 0x3694 <__unpack_f+0x54>
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	8c 93       	st	X, r24
    36a4:	0d c0       	rjmp	.+26     	; 0x36c0 <__unpack_f+0x80>
    36a6:	22 0f       	add	r18, r18
    36a8:	33 1f       	adc	r19, r19
    36aa:	44 1f       	adc	r20, r20
    36ac:	55 1f       	adc	r21, r21
    36ae:	12 96       	adiw	r26, 0x02	; 2
    36b0:	8d 91       	ld	r24, X+
    36b2:	9c 91       	ld	r25, X
    36b4:	13 97       	sbiw	r26, 0x03	; 3
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	13 96       	adiw	r26, 0x03	; 3
    36ba:	9c 93       	st	X, r25
    36bc:	8e 93       	st	-X, r24
    36be:	12 97       	sbiw	r26, 0x02	; 2
    36c0:	20 30       	cpi	r18, 0x00	; 0
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	38 07       	cpc	r19, r24
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	48 07       	cpc	r20, r24
    36ca:	80 e4       	ldi	r24, 0x40	; 64
    36cc:	58 07       	cpc	r21, r24
    36ce:	58 f3       	brcs	.-42     	; 0x36a6 <__unpack_f+0x66>
    36d0:	14 96       	adiw	r26, 0x04	; 4
    36d2:	2d 93       	st	X+, r18
    36d4:	3d 93       	st	X+, r19
    36d6:	4d 93       	st	X+, r20
    36d8:	5c 93       	st	X, r21
    36da:	17 97       	sbiw	r26, 0x07	; 7
    36dc:	08 95       	ret
    36de:	2f 3f       	cpi	r18, 0xFF	; 255
    36e0:	31 05       	cpc	r19, r1
    36e2:	79 f4       	brne	.+30     	; 0x3702 <__unpack_f+0xc2>
    36e4:	41 15       	cp	r20, r1
    36e6:	51 05       	cpc	r21, r1
    36e8:	61 05       	cpc	r22, r1
    36ea:	71 05       	cpc	r23, r1
    36ec:	19 f4       	brne	.+6      	; 0x36f4 <__unpack_f+0xb4>
    36ee:	84 e0       	ldi	r24, 0x04	; 4
    36f0:	8c 93       	st	X, r24
    36f2:	08 95       	ret
    36f4:	64 ff       	sbrs	r22, 4
    36f6:	03 c0       	rjmp	.+6      	; 0x36fe <__unpack_f+0xbe>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	8c 93       	st	X, r24
    36fc:	12 c0       	rjmp	.+36     	; 0x3722 <__unpack_f+0xe2>
    36fe:	1c 92       	st	X, r1
    3700:	10 c0       	rjmp	.+32     	; 0x3722 <__unpack_f+0xe2>
    3702:	2f 57       	subi	r18, 0x7F	; 127
    3704:	30 40       	sbci	r19, 0x00	; 0
    3706:	13 96       	adiw	r26, 0x03	; 3
    3708:	3c 93       	st	X, r19
    370a:	2e 93       	st	-X, r18
    370c:	12 97       	sbiw	r26, 0x02	; 2
    370e:	83 e0       	ldi	r24, 0x03	; 3
    3710:	8c 93       	st	X, r24
    3712:	87 e0       	ldi	r24, 0x07	; 7
    3714:	44 0f       	add	r20, r20
    3716:	55 1f       	adc	r21, r21
    3718:	66 1f       	adc	r22, r22
    371a:	77 1f       	adc	r23, r23
    371c:	8a 95       	dec	r24
    371e:	d1 f7       	brne	.-12     	; 0x3714 <__unpack_f+0xd4>
    3720:	70 64       	ori	r23, 0x40	; 64
    3722:	14 96       	adiw	r26, 0x04	; 4
    3724:	4d 93       	st	X+, r20
    3726:	5d 93       	st	X+, r21
    3728:	6d 93       	st	X+, r22
    372a:	7c 93       	st	X, r23
    372c:	17 97       	sbiw	r26, 0x07	; 7
    372e:	08 95       	ret

00003730 <__fpcmp_parts_f>:
    3730:	1f 93       	push	r17
    3732:	dc 01       	movw	r26, r24
    3734:	fb 01       	movw	r30, r22
    3736:	9c 91       	ld	r25, X
    3738:	92 30       	cpi	r25, 0x02	; 2
    373a:	08 f4       	brcc	.+2      	; 0x373e <__fpcmp_parts_f+0xe>
    373c:	47 c0       	rjmp	.+142    	; 0x37cc <__fpcmp_parts_f+0x9c>
    373e:	80 81       	ld	r24, Z
    3740:	82 30       	cpi	r24, 0x02	; 2
    3742:	08 f4       	brcc	.+2      	; 0x3746 <__fpcmp_parts_f+0x16>
    3744:	43 c0       	rjmp	.+134    	; 0x37cc <__fpcmp_parts_f+0x9c>
    3746:	94 30       	cpi	r25, 0x04	; 4
    3748:	51 f4       	brne	.+20     	; 0x375e <__fpcmp_parts_f+0x2e>
    374a:	11 96       	adiw	r26, 0x01	; 1
    374c:	1c 91       	ld	r17, X
    374e:	84 30       	cpi	r24, 0x04	; 4
    3750:	99 f5       	brne	.+102    	; 0x37b8 <__fpcmp_parts_f+0x88>
    3752:	81 81       	ldd	r24, Z+1	; 0x01
    3754:	68 2f       	mov	r22, r24
    3756:	70 e0       	ldi	r23, 0x00	; 0
    3758:	61 1b       	sub	r22, r17
    375a:	71 09       	sbc	r23, r1
    375c:	3f c0       	rjmp	.+126    	; 0x37dc <__fpcmp_parts_f+0xac>
    375e:	84 30       	cpi	r24, 0x04	; 4
    3760:	21 f0       	breq	.+8      	; 0x376a <__fpcmp_parts_f+0x3a>
    3762:	92 30       	cpi	r25, 0x02	; 2
    3764:	31 f4       	brne	.+12     	; 0x3772 <__fpcmp_parts_f+0x42>
    3766:	82 30       	cpi	r24, 0x02	; 2
    3768:	b9 f1       	breq	.+110    	; 0x37d8 <__fpcmp_parts_f+0xa8>
    376a:	81 81       	ldd	r24, Z+1	; 0x01
    376c:	88 23       	and	r24, r24
    376e:	89 f1       	breq	.+98     	; 0x37d2 <__fpcmp_parts_f+0xa2>
    3770:	2d c0       	rjmp	.+90     	; 0x37cc <__fpcmp_parts_f+0x9c>
    3772:	11 96       	adiw	r26, 0x01	; 1
    3774:	1c 91       	ld	r17, X
    3776:	11 97       	sbiw	r26, 0x01	; 1
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	f1 f0       	breq	.+60     	; 0x37b8 <__fpcmp_parts_f+0x88>
    377c:	81 81       	ldd	r24, Z+1	; 0x01
    377e:	18 17       	cp	r17, r24
    3780:	d9 f4       	brne	.+54     	; 0x37b8 <__fpcmp_parts_f+0x88>
    3782:	12 96       	adiw	r26, 0x02	; 2
    3784:	2d 91       	ld	r18, X+
    3786:	3c 91       	ld	r19, X
    3788:	13 97       	sbiw	r26, 0x03	; 3
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	82 17       	cp	r24, r18
    3790:	93 07       	cpc	r25, r19
    3792:	94 f0       	brlt	.+36     	; 0x37b8 <__fpcmp_parts_f+0x88>
    3794:	28 17       	cp	r18, r24
    3796:	39 07       	cpc	r19, r25
    3798:	bc f0       	brlt	.+46     	; 0x37c8 <__fpcmp_parts_f+0x98>
    379a:	14 96       	adiw	r26, 0x04	; 4
    379c:	8d 91       	ld	r24, X+
    379e:	9d 91       	ld	r25, X+
    37a0:	0d 90       	ld	r0, X+
    37a2:	bc 91       	ld	r27, X
    37a4:	a0 2d       	mov	r26, r0
    37a6:	24 81       	ldd	r18, Z+4	; 0x04
    37a8:	35 81       	ldd	r19, Z+5	; 0x05
    37aa:	46 81       	ldd	r20, Z+6	; 0x06
    37ac:	57 81       	ldd	r21, Z+7	; 0x07
    37ae:	28 17       	cp	r18, r24
    37b0:	39 07       	cpc	r19, r25
    37b2:	4a 07       	cpc	r20, r26
    37b4:	5b 07       	cpc	r21, r27
    37b6:	18 f4       	brcc	.+6      	; 0x37be <__fpcmp_parts_f+0x8e>
    37b8:	11 23       	and	r17, r17
    37ba:	41 f0       	breq	.+16     	; 0x37cc <__fpcmp_parts_f+0x9c>
    37bc:	0a c0       	rjmp	.+20     	; 0x37d2 <__fpcmp_parts_f+0xa2>
    37be:	82 17       	cp	r24, r18
    37c0:	93 07       	cpc	r25, r19
    37c2:	a4 07       	cpc	r26, r20
    37c4:	b5 07       	cpc	r27, r21
    37c6:	40 f4       	brcc	.+16     	; 0x37d8 <__fpcmp_parts_f+0xa8>
    37c8:	11 23       	and	r17, r17
    37ca:	19 f0       	breq	.+6      	; 0x37d2 <__fpcmp_parts_f+0xa2>
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	05 c0       	rjmp	.+10     	; 0x37dc <__fpcmp_parts_f+0xac>
    37d2:	6f ef       	ldi	r22, 0xFF	; 255
    37d4:	7f ef       	ldi	r23, 0xFF	; 255
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <__fpcmp_parts_f+0xac>
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	cb 01       	movw	r24, r22
    37de:	1f 91       	pop	r17
    37e0:	08 95       	ret

000037e2 <__mulsi3>:
    37e2:	62 9f       	mul	r22, r18
    37e4:	d0 01       	movw	r26, r0
    37e6:	73 9f       	mul	r23, r19
    37e8:	f0 01       	movw	r30, r0
    37ea:	82 9f       	mul	r24, r18
    37ec:	e0 0d       	add	r30, r0
    37ee:	f1 1d       	adc	r31, r1
    37f0:	64 9f       	mul	r22, r20
    37f2:	e0 0d       	add	r30, r0
    37f4:	f1 1d       	adc	r31, r1
    37f6:	92 9f       	mul	r25, r18
    37f8:	f0 0d       	add	r31, r0
    37fa:	83 9f       	mul	r24, r19
    37fc:	f0 0d       	add	r31, r0
    37fe:	74 9f       	mul	r23, r20
    3800:	f0 0d       	add	r31, r0
    3802:	65 9f       	mul	r22, r21
    3804:	f0 0d       	add	r31, r0
    3806:	99 27       	eor	r25, r25
    3808:	72 9f       	mul	r23, r18
    380a:	b0 0d       	add	r27, r0
    380c:	e1 1d       	adc	r30, r1
    380e:	f9 1f       	adc	r31, r25
    3810:	63 9f       	mul	r22, r19
    3812:	b0 0d       	add	r27, r0
    3814:	e1 1d       	adc	r30, r1
    3816:	f9 1f       	adc	r31, r25
    3818:	bd 01       	movw	r22, r26
    381a:	cf 01       	movw	r24, r30
    381c:	11 24       	eor	r1, r1
    381e:	08 95       	ret

00003820 <__udivmodhi4>:
    3820:	aa 1b       	sub	r26, r26
    3822:	bb 1b       	sub	r27, r27
    3824:	51 e1       	ldi	r21, 0x11	; 17
    3826:	07 c0       	rjmp	.+14     	; 0x3836 <__udivmodhi4_ep>

00003828 <__udivmodhi4_loop>:
    3828:	aa 1f       	adc	r26, r26
    382a:	bb 1f       	adc	r27, r27
    382c:	a6 17       	cp	r26, r22
    382e:	b7 07       	cpc	r27, r23
    3830:	10 f0       	brcs	.+4      	; 0x3836 <__udivmodhi4_ep>
    3832:	a6 1b       	sub	r26, r22
    3834:	b7 0b       	sbc	r27, r23

00003836 <__udivmodhi4_ep>:
    3836:	88 1f       	adc	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	5a 95       	dec	r21
    383c:	a9 f7       	brne	.-22     	; 0x3828 <__udivmodhi4_loop>
    383e:	80 95       	com	r24
    3840:	90 95       	com	r25
    3842:	bc 01       	movw	r22, r24
    3844:	cd 01       	movw	r24, r26
    3846:	08 95       	ret

00003848 <__udivmodsi4>:
    3848:	a1 e2       	ldi	r26, 0x21	; 33
    384a:	1a 2e       	mov	r1, r26
    384c:	aa 1b       	sub	r26, r26
    384e:	bb 1b       	sub	r27, r27
    3850:	fd 01       	movw	r30, r26
    3852:	0d c0       	rjmp	.+26     	; 0x386e <__udivmodsi4_ep>

00003854 <__udivmodsi4_loop>:
    3854:	aa 1f       	adc	r26, r26
    3856:	bb 1f       	adc	r27, r27
    3858:	ee 1f       	adc	r30, r30
    385a:	ff 1f       	adc	r31, r31
    385c:	a2 17       	cp	r26, r18
    385e:	b3 07       	cpc	r27, r19
    3860:	e4 07       	cpc	r30, r20
    3862:	f5 07       	cpc	r31, r21
    3864:	20 f0       	brcs	.+8      	; 0x386e <__udivmodsi4_ep>
    3866:	a2 1b       	sub	r26, r18
    3868:	b3 0b       	sbc	r27, r19
    386a:	e4 0b       	sbc	r30, r20
    386c:	f5 0b       	sbc	r31, r21

0000386e <__udivmodsi4_ep>:
    386e:	66 1f       	adc	r22, r22
    3870:	77 1f       	adc	r23, r23
    3872:	88 1f       	adc	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	1a 94       	dec	r1
    3878:	69 f7       	brne	.-38     	; 0x3854 <__udivmodsi4_loop>
    387a:	60 95       	com	r22
    387c:	70 95       	com	r23
    387e:	80 95       	com	r24
    3880:	90 95       	com	r25
    3882:	9b 01       	movw	r18, r22
    3884:	ac 01       	movw	r20, r24
    3886:	bd 01       	movw	r22, r26
    3888:	cf 01       	movw	r24, r30
    388a:	08 95       	ret

0000388c <__prologue_saves__>:
    388c:	2f 92       	push	r2
    388e:	3f 92       	push	r3
    3890:	4f 92       	push	r4
    3892:	5f 92       	push	r5
    3894:	6f 92       	push	r6
    3896:	7f 92       	push	r7
    3898:	8f 92       	push	r8
    389a:	9f 92       	push	r9
    389c:	af 92       	push	r10
    389e:	bf 92       	push	r11
    38a0:	cf 92       	push	r12
    38a2:	df 92       	push	r13
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	ca 1b       	sub	r28, r26
    38b6:	db 0b       	sbc	r29, r27
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	09 94       	ijmp

000038c4 <__epilogue_restores__>:
    38c4:	2a 88       	ldd	r2, Y+18	; 0x12
    38c6:	39 88       	ldd	r3, Y+17	; 0x11
    38c8:	48 88       	ldd	r4, Y+16	; 0x10
    38ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    38cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    38d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d6:	b9 84       	ldd	r11, Y+9	; 0x09
    38d8:	c8 84       	ldd	r12, Y+8	; 0x08
    38da:	df 80       	ldd	r13, Y+7	; 0x07
    38dc:	ee 80       	ldd	r14, Y+6	; 0x06
    38de:	fd 80       	ldd	r15, Y+5	; 0x05
    38e0:	0c 81       	ldd	r16, Y+4	; 0x04
    38e2:	1b 81       	ldd	r17, Y+3	; 0x03
    38e4:	aa 81       	ldd	r26, Y+2	; 0x02
    38e6:	b9 81       	ldd	r27, Y+1	; 0x01
    38e8:	ce 0f       	add	r28, r30
    38ea:	d1 1d       	adc	r29, r1
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	ed 01       	movw	r28, r26
    38f8:	08 95       	ret

000038fa <_exit>:
    38fa:	f8 94       	cli

000038fc <__stop_program>:
    38fc:	ff cf       	rjmp	.-2      	; 0x38fc <__stop_program>
