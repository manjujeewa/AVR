
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000025d4  00002668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b5  00800086  00800086  0000268e  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  0000268e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007dd  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002280  00000000  00000000  00002f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000918  00000000  00000000  000051eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cc0  00000000  00000000  00005b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  000077c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000099b  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001547  00000000  00000000  0000852f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00009a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__ctors_end>
       4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
       8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
       c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      10:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      14:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      18:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      1c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      20:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      24:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      28:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      2c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      30:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      34:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      38:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      3c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      40:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      44:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      48:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      4c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      50:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>

00000054 <__c.1598>:
      54:	0a 0d 46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e     ..FAT32 not foun
      64:	64 21 00                                            d!.

00000067 <__c.1596>:
      67:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
      77:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000081 <__c.1593>:
      81:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
      91:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
      a1:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000000ac <__c.1590>:
      ac:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
      bc:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000000c9 <__c.1586>:
      c9:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
      d9:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
      e9:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000000f4 <__c.1583>:
      f4:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     104:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000111 <__c.1581>:
     111:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     121:	63 74 65 64 2e 2e 00                                cted...

00000128 <__c.1576>:
     128:	0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     138:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     148:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     158:	2a 2a 2a 2a 2a 2a 0a 0d 00                          ******...

00000161 <__c.1574>:
     161:	0a 0d 20 20 20 20 20 20 20 20 20 57 65 61 74 68     ..         Weath
     171:	65 72 20 53 74 61 74 69 6f 6e 20 44 61 74 61 20     er Station Data 
     181:	53 74 6f 72 61 67 65 20 54 65 73 74 69 6e 67 20     Storage Testing 
     191:	00                                                  .

00000192 <__c.1572>:
     192:	0a 0d 0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ....************
     1a2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1b2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1c2:	2a 2a 2a 2a 2a 2a 2a 2a 00                          ********.

000001cb <__c.1667>:
     1cb:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     1db:	65 64 2e 2e 00                                      ed...

000001e0 <__c.1665>:
     1e0:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     1f0:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

000001fa <__c.1642>:
     1fa:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

0000020a <__c.1640>:
     20a:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     21a:	65 64 2e 2e 00                                      ed...

0000021f <__c.1638>:
     21f:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     22f:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000239 <__c.1635>:
     239:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     249:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     259:	73 29 3a 00                                         s):.

0000025d <__c.1534>:
     25d:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

00000265 <__c.1531>:
     265:	53 61 74 75 72 64 61 79 00                          Saturday.

0000026e <__c.1528>:
     26e:	46 72 69 64 61 79 00                                Friday.

00000275 <__c.1525>:
     275:	54 68 75 72 73 64 61 79 00                          Thursday.

0000027e <__c.1522>:
     27e:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

00000288 <__c.1519>:
     288:	54 75 65 73 64 61 79 00                             Tuesday.

00000290 <__c.1516>:
     290:	4d 6f 6e 64 61 79 00                                Monday.

00000297 <__c.1512>:
     297:	53 75 6e 64 61 79 00                                Sunday.

0000029e <__c.1509>:
     29e:	20 20 20 20 44 61 79 3a 20 00                           Day: .

000002a8 <__c.1502>:
     2a8:	44 61 74 65 3a 00                                   Date:.

000002ae <__c.1494>:
     2ae:	54 69 6d 65 3a 00                                   Time:.

000002b4 <__c.1789>:
     2b4:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     2c4:	20 63 6c 75 73 74 65 72 00                           cluster.

000002cd <__c.1787>:
     2cd:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     2dd:	68 61 69 6e 00                                      hain.

000002e2 <__c.1775>:
     2e2:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     2f2:	21 00                                               !.

000002f4 <__c.1767>:
     2f4:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     304:	21 00                                               !.

00000306 <__c.1712>:
     306:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     316:	2e 2e 00                                            ...

00000319 <__c.1683>:
     319:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     329:	20 63 6c 75 73 74 65 72 00                           cluster.

00000332 <__c.1633>:
     332:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     342:	20 63 6c 75 73 74 65 72 00                           cluster.

0000034b <__c.1625>:
     34b:	52 4f 4f 54 00                                      ROOT.

00000350 <__c.1623>:
     350:	44 49 52 00                                         DIR.

00000354 <__c.1621>:
     354:	20 20 20 00                                            .

00000358 <__c.1619>:
     358:	46 49 4c 45 00                                      FILE.

0000035d <__c.1617>:
     35d:	20 20 20 00                                            .

00000361 <__c.1611>:
     361:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

0000036f <__c.1609>:
     36f:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

0000037a <__c.1604>:
     37a:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     38a:	69 73 74 21 00 00                                   ist!..

00000390 <__ctors_end>:
     390:	11 24       	eor	r1, r1
     392:	1f be       	out	0x3f, r1	; 63
     394:	cf e5       	ldi	r28, 0x5F	; 95
     396:	d8 e0       	ldi	r29, 0x08	; 8
     398:	de bf       	out	0x3e, r29	; 62
     39a:	cd bf       	out	0x3d, r28	; 61

0000039c <__do_copy_data>:
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	a0 e6       	ldi	r26, 0x60	; 96
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	e4 ed       	ldi	r30, 0xD4	; 212
     3a4:	f5 e2       	ldi	r31, 0x25	; 37
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <.do_copy_data_start>

000003a8 <.do_copy_data_loop>:
     3a8:	05 90       	lpm	r0, Z+
     3aa:	0d 92       	st	X+, r0

000003ac <.do_copy_data_start>:
     3ac:	a6 38       	cpi	r26, 0x86	; 134
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <.do_copy_data_loop>

000003b2 <__do_clear_bss>:
     3b2:	13 e0       	ldi	r17, 0x03	; 3
     3b4:	a6 e8       	ldi	r26, 0x86	; 134
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <.do_clear_bss_start>

000003ba <.do_clear_bss_loop>:
     3ba:	1d 92       	st	X+, r1

000003bc <.do_clear_bss_start>:
     3bc:	ab 33       	cpi	r26, 0x3B	; 59
     3be:	b1 07       	cpc	r27, r17
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <.do_clear_bss_loop>
     3c2:	0e 94 84 02 	call	0x508	; 0x508 <main>
     3c6:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <_exit>

000003ca <__bad_interrupt>:
     3ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ce <readData>:
		
	

}

void readData(void){
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
		
		unsigned char option, error, i, j, data, channel;
		
		
		error = RTC_getDate();
     3d2:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTC_getDate>
			if(error) blinkRedLED();
     3d6:	88 23       	and	r24, r24
     3d8:	11 f0       	breq	.+4      	; 0x3de <readData+0x10>
     3da:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <blinkRedLED>
		
		error = RTC_getTime();
     3de:	0e 94 31 06 	call	0xc62	; 0xc62 <RTC_getTime>
			if(error) blinkRedLED();
     3e2:	88 23       	and	r24, r24
     3e4:	11 f0       	breq	.+4      	; 0x3ea <readData+0x1c>
     3e6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <blinkRedLED>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
		
		for (i=0; i<sizeof(dataString);i++){
			dataString[i] = 0x00;
     3ee:	fc 01       	movw	r30, r24
     3f0:	eb 53       	subi	r30, 0x3B	; 59
     3f2:	fd 4f       	sbci	r31, 0xFD	; 253
     3f4:	10 82       	st	Z, r1
     3f6:	01 96       	adiw	r24, 0x01	; 1
			if(error) blinkRedLED();
		
		error = RTC_getTime();
			if(error) blinkRedLED();
		
		for (i=0; i<sizeof(dataString);i++){
     3f8:	84 36       	cpi	r24, 0x64	; 100
     3fa:	91 05       	cpc	r25, r1
     3fc:	c1 f7       	brne	.-16     	; 0x3ee <readData+0x20>
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
			dataString[i] = 0x00;
		}
		
		for(i=0; i<10; i++){
			dataString[i] = date[i];
     402:	f9 01       	movw	r30, r18
     404:	e5 5d       	subi	r30, 0xD5	; 213
     406:	fc 4f       	sbci	r31, 0xFC	; 252
     408:	80 81       	ld	r24, Z
     40a:	f9 01       	movw	r30, r18
     40c:	eb 53       	subi	r30, 0x3B	; 59
     40e:	fd 4f       	sbci	r31, 0xFD	; 253
     410:	80 83       	st	Z, r24
     412:	2f 5f       	subi	r18, 0xFF	; 255
     414:	3f 4f       	sbci	r19, 0xFF	; 255
		
		for (i=0; i<sizeof(dataString);i++){
			dataString[i] = 0x00;
		}
		
		for(i=0; i<10; i++){
     416:	2a 30       	cpi	r18, 0x0A	; 10
     418:	31 05       	cpc	r19, r1
     41a:	99 f7       	brne	.-26     	; 0x402 <readData+0x34>
			dataString[i] = date[i];
		};
		
		dataString[i++] = ',';
     41c:	8c e2       	ldi	r24, 0x2C	; 44
     41e:	80 93 cf 02 	sts	0x02CF, r24
     422:	2b e0       	ldi	r18, 0x0B	; 11
     424:	30 e0       	ldi	r19, 0x00	; 0

		for(j=0;j<8; j++)  dataString[i++] = time[j];
     426:	f9 01       	movw	r30, r18
     428:	e3 55       	subi	r30, 0x53	; 83
     42a:	fd 4f       	sbci	r31, 0xFD	; 253
     42c:	80 81       	ld	r24, Z
     42e:	f9 01       	movw	r30, r18
     430:	eb 53       	subi	r30, 0x3B	; 59
     432:	fd 4f       	sbci	r31, 0xFD	; 253
     434:	80 83       	st	Z, r24
     436:	2f 5f       	subi	r18, 0xFF	; 255
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	23 31       	cpi	r18, 0x13	; 19
     43c:	31 05       	cpc	r19, r1
     43e:	99 f7       	brne	.-26     	; 0x426 <readData+0x58>
		dataString[i++] = ',';
     440:	8c e2       	ldi	r24, 0x2C	; 44
     442:	80 93 d8 02 	sts	0x02D8, r24
     446:	14 e1       	ldi	r17, 0x14	; 20
		
		
		while(1){
			data = receiveByte();
     448:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     44c:	08 2f       	mov	r16, r24
			if(data == 0x0a) {
     44e:	8a 30       	cpi	r24, 0x0A	; 10
     450:	79 f4       	brne	.+30     	; 0x470 <readData+0xa2>
				dataString[i++] = '\r';
     452:	e1 2f       	mov	r30, r17
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	eb 53       	subi	r30, 0x3B	; 59
     458:	fd 4f       	sbci	r31, 0xFD	; 253
     45a:	8d e0       	ldi	r24, 0x0D	; 13
     45c:	80 83       	st	Z, r24
				dataString[i] = '\n';
     45e:	1f 5f       	subi	r17, 0xFF	; 255
     460:	e1 2f       	mov	r30, r17
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	eb 53       	subi	r30, 0x3B	; 59
     466:	fd 4f       	sbci	r31, 0xFD	; 253
     468:	00 83       	st	Z, r16
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
			transmitByte(data);
			dataString[i++] = data;
			
		}
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret
				
				break;
				
			}  //'ENTER' key pressed
			
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
     470:	80 52       	subi	r24, 0x20	; 32
     472:	8f 35       	cpi	r24, 0x5F	; 95
     474:	48 f7       	brcc	.-46     	; 0x448 <readData+0x7a>
			transmitByte(data);
     476:	80 2f       	mov	r24, r16
     478:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
			dataString[i++] = data;
     47c:	e1 2f       	mov	r30, r17
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	eb 53       	subi	r30, 0x3B	; 59
     482:	fd 4f       	sbci	r31, 0xFD	; 253
     484:	00 83       	st	Z, r16
     486:	1f 5f       	subi	r17, 0xFF	; 255
     488:	df cf       	rjmp	.-66     	; 0x448 <readData+0x7a>

0000048a <recordData>:
		         // delay just to stop Hyperterminal screen cluttering up    
   }
}


int recordData (void){
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	2d 97       	sbiw	r28, 0x0d	; 13
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61

	unsigned char option, error, i, j, data, channel;
	unsigned char fileName[13];
	
	error = RTC_getDate();
     49e:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTC_getDate>
		if(error) blinkRedLED();
     4a2:	88 23       	and	r24, r24
     4a4:	11 f0       	breq	.+4      	; 0x4aa <recordData+0x20>
     4a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <blinkRedLED>
     4aa:	de 01       	movw	r26, r28
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
	
	j=0;
	
	for(i=0; i<8; i++){
     4b0:	9e 01       	movw	r18, r28
     4b2:	27 5f       	subi	r18, 0xF7	; 247
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
		fileName[i] = date[j++];
     4b6:	e9 2f       	mov	r30, r25
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e5 5d       	subi	r30, 0xD5	; 213
     4bc:	fc 4f       	sbci	r31, 0xFC	; 252
     4be:	80 81       	ld	r24, Z
     4c0:	8c 93       	st	X, r24
     4c2:	9f 5f       	subi	r25, 0xFF	; 255
		if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
     4c4:	92 30       	cpi	r25, 0x02	; 2
     4c6:	11 f0       	breq	.+4      	; 0x4cc <recordData+0x42>
     4c8:	95 30       	cpi	r25, 0x05	; 5
     4ca:	09 f4       	brne	.+2      	; 0x4ce <recordData+0x44>
     4cc:	9f 5f       	subi	r25, 0xFF	; 255
     4ce:	11 96       	adiw	r26, 0x01	; 1
	error = RTC_getDate();
		if(error) blinkRedLED();
	
	j=0;
	
	for(i=0; i<8; i++){
     4d0:	a2 17       	cp	r26, r18
     4d2:	b3 07       	cpc	r27, r19
     4d4:	81 f7       	brne	.-32     	; 0x4b6 <recordData+0x2c>
		fileName[i] = date[j++];
		if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
	}
	
	fileName[8] = '.';
     4d6:	8e e2       	ldi	r24, 0x2E	; 46
     4d8:	89 87       	std	Y+9, r24	; 0x09
	fileName[9] = 'C';
     4da:	83 e4       	ldi	r24, 0x43	; 67
     4dc:	8a 87       	std	Y+10, r24	; 0x0a
	fileName[10] = 'S';
     4de:	83 e5       	ldi	r24, 0x53	; 83
     4e0:	8b 87       	std	Y+11, r24	; 0x0b
	fileName[11] = 'V';
     4e2:	86 e5       	ldi	r24, 0x56	; 86
     4e4:	8c 87       	std	Y+12, r24	; 0x0c
	
	
	error = writeFile(fileName);
     4e6:	ce 01       	movw	r24, r28
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <writeFile>
		if(error) blinkRedLED();
     4ee:	88 23       	and	r24, r24
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <recordData+0x6c>
     4f2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <blinkRedLED>
	
		
		
	

}
     4f6:	2d 96       	adiw	r28, 0x0d	; 13
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	cf 91       	pop	r28
     504:	df 91       	pop	r29
     506:	08 95       	ret

00000508 <main>:
#include "SYSTEM_functions.h"
#include "FAT32.h"
int recordData (void);
void readData(void);

int main(void){
     508:	1f 93       	push	r17
     50a:	80 e1       	ldi	r24, 0x10	; 16
     50c:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     50e:	20 e9       	ldi	r18, 0x90	; 144
     510:	31 e0       	ldi	r19, 0x01	; 1
     512:	f9 01       	movw	r30, r18
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <main+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     518:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     51a:	d9 f7       	brne	.-10     	; 0x512 <main+0xa>
	_delay_ms(1000);
	unsigned char error, i;
	port_init();
     51c:	0e 94 ef 06 	call	0xdde	; 0xdde <port_init>
   USART_Init(BAUD_PRESCALE);  // Initialise USART
     520:	87 e6       	ldi	r24, 0x67	; 103
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 f7 02 	call	0x5ee	; 0x5ee <USART_Init>
   twi_init();
     528:	0e 94 8e 06 	call	0xd1c	; 0xd1c <twi_init>
   spi_init();
     52c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <spi_init>
   
   
   for(;;){    // Repeat indefinitely
   
   transmitString_F (PSTR("\n\r\n\r****************************************************"));
     530:	82 e9       	ldi	r24, 0x92	; 146
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  transmitString_F (PSTR("\n\r         Weather Station Data Storage Testing "));
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  transmitString_F (PSTR("\n\r****************************************************\n\r"));
     540:	88 e2       	ldi	r24, 0x28	; 40
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
     548:	88 e8       	ldi	r24, 0x88	; 136
     54a:	93 e1       	ldi	r25, 0x13	; 19
     54c:	20 e9       	ldi	r18, 0x90	; 144
     54e:	31 e0       	ldi	r19, 0x01	; 1
     550:	f9 01       	movw	r30, r18
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	d9 f7       	brne	.-10     	; 0x550 <main+0x48>
  
  _delay_ms(500);
             
  cardType = 0;
     55a:	10 92 29 03 	sts	0x0329, r1
     55e:	10 e0       	ldi	r17, 0x00	; 0
	
  for (i=0; i<10; i++){
  	error = SD_init();
     560:	0e 94 3b 08 	call	0x1076	; 0x1076 <SD_init>
  	if(!error) break;
     564:	88 23       	and	r24, r24
     566:	81 f0       	breq	.+32     	; 0x588 <main+0x80>
  
  _delay_ms(500);
             
  cardType = 0;
	
  for (i=0; i<10; i++){
     568:	1f 5f       	subi	r17, 0xFF	; 255
     56a:	1a 30       	cpi	r17, 0x0A	; 10
     56c:	c9 f7       	brne	.-14     	; 0x560 <main+0x58>
  	if(!error) break;
  }
  

  if(error){
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	19 f4       	brne	.+6      	; 0x578 <main+0x70>
     572:	81 e1       	ldi	r24, 0x11	; 17
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	04 c0       	rjmp	.+8      	; 0x580 <main+0x78>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	21 f4       	brne	.+8      	; 0x584 <main+0x7c>
     57c:	84 ef       	ldi	r24, 0xF4	; 244
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  
  	blinkRedLED();
     584:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <blinkRedLED>
  }

switch (cardType)
     588:	80 91 29 03 	lds	r24, 0x0329
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	39 f0       	breq	.+14     	; 0x59e <main+0x96>
     590:	83 30       	cpi	r24, 0x03	; 3
     592:	41 f0       	breq	.+16     	; 0x5a4 <main+0x9c>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	49 f4       	brne	.+18     	; 0x5aa <main+0xa2>
  {
  	case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
     598:	89 ec       	ldi	r24, 0xC9	; 201
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <main+0xa6>
  		   break;
  	case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
     59e:	8c ea       	ldi	r24, 0xAC	; 172
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <main+0xa6>
  		   break;
  	case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
     5a4:	81 e8       	ldi	r24, 0x81	; 129
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <main+0xa6>
  		   break;
  	default:transmitString_F(PSTR("Unknown SD Card Detected!"));
     5aa:	87 e6       	ldi	r24, 0x67	; 103
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  		   break; 
  }
  
  error = getBootSectorData (); //read boot sector and keep necessary data in global variables
     5b2:	0e 94 47 0b 	call	0x168e	; 0x168e <getBootSectorData>
  if(error) 
     5b6:	88 23       	and	r24, r24
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <main+0xbe>
  {
   	transmitString_F (PSTR("\n\rFAT32 not found!"));  //FAT32 incompatible drive
     5ba:	84 e5       	ldi	r24, 0x54	; 84
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
   	blinkRedLED();
     5c2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <blinkRedLED>
  }
  
	
	TX_NEWLINE;
     5c6:	8d e0       	ldi	r24, 0x0D	; 13
     5c8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  	findFiles(GET_LIST,0);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <findFiles>
	
	readData();
     5dc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <readData>
	transmitString("got it");
     5e0:	80 e6       	ldi	r24, 0x60	; 96
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 11 03 	call	0x622	; 0x622 <transmitString>
	recordData ();
     5e8:	0e 94 45 02 	call	0x48a	; 0x48a <recordData>
     5ec:	ff cf       	rjmp	.-2      	; 0x5ec <main+0xe4>

000005ee <USART_Init>:
#include <avr/pgmspace.h>

#include "UART_routines.h"
void USART_Init(int baud){
   	// Set baud rate
   	UBRRL = baud;// Load lower 8-bits into the low byte of the UBRR register
     5ee:	89 b9       	out	0x09, r24	; 9
   	UBRRH = (baud >> 8); 
     5f0:	89 2f       	mov	r24, r25
     5f2:	99 0f       	add	r25, r25
     5f4:	99 0b       	sbc	r25, r25
     5f6:	80 bd       	out	0x20, r24	; 32
	/* Load upper 8-bits into the high byte of the UBRR register Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR datasheet*/ 
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
     5f8:	88 e9       	ldi	r24, 0x98	; 152
     5fa:	8a b9       	out	0x0a, r24	; 10
}
     5fc:	08 95       	ret

000005fe <transmitByte>:


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     5fe:	5d 9b       	sbis	0x0b, 5	; 11
     600:	fe cf       	rjmp	.-4      	; 0x5fe <transmitByte>
	UDR = data; // Transmit data
     602:	8c b9       	out	0x0c, r24	; 12
}
     604:	08 95       	ret

00000606 <receiveByte>:

unsigned char receiveByte(){
	while((UCSRA &(1<<RXC)) == 0);
     606:	5f 9b       	sbis	0x0b, 7	; 11
     608:	fe cf       	rjmp	.-4      	; 0x606 <receiveByte>
	return UDR;
     60a:	8c b1       	in	r24, 0x0c	; 12
}
     60c:	08 95       	ret

0000060e <transmitString_F>:

void transmitString_F(char* string){
     60e:	fc 01       	movw	r30, r24
     610:	04 c0       	rjmp	.+8      	; 0x61a <transmitString_F+0xc>
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     612:	5d 9b       	sbis	0x0b, 5	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <transmitString_F+0x4>
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}

void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
     616:	31 96       	adiw	r30, 0x01	; 1
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
	UDR = data; // Transmit data
     618:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}

void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
     61a:	84 91       	lpm	r24, Z+
     61c:	88 23       	and	r24, r24
     61e:	c9 f7       	brne	.-14     	; 0x612 <transmitString_F+0x4>
}
     620:	08 95       	ret

00000622 <transmitString>:

void transmitString(unsigned char* string){
     622:	fc 01       	movw	r30, r24
     624:	04 c0       	rjmp	.+8      	; 0x62e <transmitString+0xc>
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     626:	5d 9b       	sbis	0x0b, 5	; 11
     628:	fe cf       	rjmp	.-4      	; 0x626 <transmitString+0x4>
void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
}

void transmitString(unsigned char* string){
	while (*string) transmitByte(*string++);
     62a:	31 96       	adiw	r30, 0x01	; 1
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
	UDR = data; // Transmit data
     62c:	8c b9       	out	0x0c, r24	; 12
void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
}

void transmitString(unsigned char* string){
	while (*string) transmitByte(*string++);
     62e:	80 81       	ld	r24, Z
     630:	88 23       	and	r24, r24
     632:	c9 f7       	brne	.-14     	; 0x626 <transmitString+0x4>
}
     634:	08 95       	ret

00000636 <transmitHex>:

void transmitHex( unsigned char dataType, unsigned long data ){
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	2b 97       	sbiw	r28, 0x0b	; 11
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	11 f4       	brne	.+4      	; 0x652 <transmitHex+0x1c>
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	05 c0       	rjmp	.+10     	; 0x65c <transmitHex+0x26>
	if (dataType == LONG) count = 8;
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	11 f4       	brne	.+4      	; 0x65a <transmitHex+0x24>
     656:	98 e0       	ldi	r25, 0x08	; 8
     658:	01 c0       	rjmp	.+2      	; 0x65c <transmitHex+0x26>
     65a:	92 e0       	ldi	r25, 0x02	; 2
	while (*string) transmitByte(*string++);
}

void transmitHex( unsigned char dataType, unsigned long data ){
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";
     65c:	de 01       	movw	r26, r28
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	e7 e6       	ldi	r30, 0x67	; 103
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	8b e0       	ldi	r24, 0x0B	; 11
     666:	01 90       	ld	r0, Z+
     668:	0d 92       	st	X+, r0
     66a:	81 50       	subi	r24, 0x01	; 1
     66c:	e1 f7       	brne	.-8      	; 0x666 <transmitHex+0x30>
     66e:	9e 01       	movw	r18, r28
     670:	2e 5f       	subi	r18, 0xFE	; 254
     672:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--){
		  temp = data % 16;
     674:	84 2f       	mov	r24, r20
     676:	8f 70       	andi	r24, 0x0F	; 15
     678:	e9 2f       	mov	r30, r25
     67a:	f0 e0       	ldi	r31, 0x00	; 0
		  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
     67c:	8a 30       	cpi	r24, 0x0A	; 10
     67e:	20 f4       	brcc	.+8      	; 0x688 <transmitHex+0x52>
     680:	e2 0f       	add	r30, r18
     682:	f3 1f       	adc	r31, r19
     684:	80 5d       	subi	r24, 0xD0	; 208
     686:	03 c0       	rjmp	.+6      	; 0x68e <transmitHex+0x58>
		  else dataString [i+1] = (temp - 10) + 0x41;
     688:	e2 0f       	add	r30, r18
     68a:	f3 1f       	adc	r31, r19
     68c:	89 5c       	subi	r24, 0xC9	; 201
     68e:	80 83       	st	Z, r24

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--){
     690:	91 50       	subi	r25, 0x01	; 1
     692:	41 f0       	breq	.+16     	; 0x6a4 <transmitHex+0x6e>
		  temp = data % 16;
		  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
		  else dataString [i+1] = (temp - 10) + 0x41;
		  data = data/16;
     694:	e4 e0       	ldi	r30, 0x04	; 4
     696:	76 95       	lsr	r23
     698:	67 95       	ror	r22
     69a:	57 95       	ror	r21
     69c:	47 95       	ror	r20
     69e:	ea 95       	dec	r30
     6a0:	d1 f7       	brne	.-12     	; 0x696 <transmitHex+0x60>
     6a2:	e8 cf       	rjmp	.-48     	; 0x674 <transmitHex+0x3e>
	}
	transmitString (dataString);
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	0e 94 11 03 	call	0x622	; 0x622 <transmitString>
}
     6ac:	2b 96       	adiw	r28, 0x0b	; 11
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	cf 91       	pop	r28
     6ba:	df 91       	pop	r29
     6bc:	08 95       	ret

000006be <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
     6be:	80 91 be 02 	lds	r24, 0x02BE
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	87 70       	andi	r24, 0x07	; 7
     6c6:	90 70       	andi	r25, 0x00	; 0
     6c8:	64 e0       	ldi	r22, 0x04	; 4
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	6a 95       	dec	r22
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <RTC_updateRegisters+0xc>
     6d2:	20 91 bf 02 	lds	r18, 0x02BF
     6d6:	2f 70       	andi	r18, 0x0F	; 15
     6d8:	28 2b       	or	r18, r24
     6da:	20 93 86 00 	sts	0x0086, r18
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
     6de:	80 91 bb 02 	lds	r24, 0x02BB
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	87 70       	andi	r24, 0x07	; 7
     6e6:	90 70       	andi	r25, 0x00	; 0
     6e8:	54 e0       	ldi	r21, 0x04	; 4
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	5a 95       	dec	r21
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <RTC_updateRegisters+0x2c>
     6f2:	20 91 bc 02 	lds	r18, 0x02BC
     6f6:	2f 70       	andi	r18, 0x0F	; 15
     6f8:	28 2b       	or	r18, r24
     6fa:	20 93 87 00 	sts	0x0087, r18
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
     6fe:	80 91 b8 02 	lds	r24, 0x02B8
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	83 70       	andi	r24, 0x03	; 3
     706:	90 70       	andi	r25, 0x00	; 0
     708:	44 e0       	ldi	r20, 0x04	; 4
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	4a 95       	dec	r20
     710:	e1 f7       	brne	.-8      	; 0x70a <RTC_updateRegisters+0x4c>
     712:	20 91 b9 02 	lds	r18, 0x02B9
     716:	2f 70       	andi	r18, 0x0F	; 15
     718:	28 2b       	or	r18, r24
     71a:	20 93 88 00 	sts	0x0088, r18
  DAY = date[10];
     71e:	80 91 35 03 	lds	r24, 0x0335
     722:	80 93 89 00 	sts	0x0089, r24
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
     726:	80 91 2b 03 	lds	r24, 0x032B
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	83 70       	andi	r24, 0x03	; 3
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	34 e0       	ldi	r19, 0x04	; 4
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	3a 95       	dec	r19
     738:	e1 f7       	brne	.-8      	; 0x732 <RTC_updateRegisters+0x74>
     73a:	20 91 2c 03 	lds	r18, 0x032C
     73e:	2f 70       	andi	r18, 0x0F	; 15
     740:	28 2b       	or	r18, r24
     742:	20 93 8a 00 	sts	0x008A, r18
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
     746:	80 91 2e 03 	lds	r24, 0x032E
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	81 70       	andi	r24, 0x01	; 1
     74e:	90 70       	andi	r25, 0x00	; 0
     750:	24 e0       	ldi	r18, 0x04	; 4
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	2a 95       	dec	r18
     758:	e1 f7       	brne	.-8      	; 0x752 <RTC_updateRegisters+0x94>
     75a:	20 91 2f 03 	lds	r18, 0x032F
     75e:	2f 70       	andi	r18, 0x0F	; 15
     760:	28 2b       	or	r18, r24
     762:	20 93 8b 00 	sts	0x008B, r18
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
     766:	90 91 33 03 	lds	r25, 0x0333
     76a:	92 95       	swap	r25
     76c:	90 7f       	andi	r25, 0xF0	; 240
     76e:	80 91 34 03 	lds	r24, 0x0334
     772:	8f 70       	andi	r24, 0x0F	; 15
     774:	98 2b       	or	r25, r24
     776:	90 93 8c 00 	sts	0x008C, r25
}  
     77a:	08 95       	ret

0000077c <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
     77c:	8e e9       	ldi	r24, 0x9E	; 158
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  
  switch(DAY)
     784:	80 91 89 00 	lds	r24, 0x0089
     788:	83 30       	cpi	r24, 0x03	; 3
     78a:	b9 f0       	breq	.+46     	; 0x7ba <RTC_displayDay+0x3e>
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	28 f4       	brcc	.+10     	; 0x79a <RTC_displayDay+0x1e>
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	69 f0       	breq	.+26     	; 0x7ae <RTC_displayDay+0x32>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	70 f4       	brcc	.+28     	; 0x7b4 <RTC_displayDay+0x38>
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <RTC_displayDay+0x2c>
     79a:	85 30       	cpi	r24, 0x05	; 5
     79c:	a1 f0       	breq	.+40     	; 0x7c6 <RTC_displayDay+0x4a>
     79e:	85 30       	cpi	r24, 0x05	; 5
     7a0:	78 f0       	brcs	.+30     	; 0x7c0 <RTC_displayDay+0x44>
     7a2:	86 30       	cpi	r24, 0x06	; 6
     7a4:	b1 f4       	brne	.+44     	; 0x7d2 <RTC_displayDay+0x56>
     7a6:	12 c0       	rjmp	.+36     	; 0x7cc <RTC_displayDay+0x50>
  {
   case 0:transmitString_F(PSTR("Sunday"));
     7a8:	87 e9       	ldi	r24, 0x97	; 151
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	14 c0       	rjmp	.+40     	; 0x7d6 <RTC_displayDay+0x5a>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
     7ae:	80 e9       	ldi	r24, 0x90	; 144
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <RTC_displayDay+0x5a>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
     7b4:	88 e8       	ldi	r24, 0x88	; 136
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e c0       	rjmp	.+28     	; 0x7d6 <RTC_displayDay+0x5a>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
     7ba:	8e e7       	ldi	r24, 0x7E	; 126
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <RTC_displayDay+0x5a>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
     7c0:	85 e7       	ldi	r24, 0x75	; 117
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <RTC_displayDay+0x5a>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
     7c6:	8e e6       	ldi	r24, 0x6E	; 110
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <RTC_displayDay+0x5a>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
     7cc:	85 e6       	ldi	r24, 0x65	; 101
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <RTC_displayDay+0x5a>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
     7d2:	8d e5       	ldi	r24, 0x5D	; 93
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
     7da:	08 95       	ret

000007dc <RTC_writeDate>:
//******************************************************************   
unsigned char RTC_writeDate(void)
{
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
     7dc:	0e 94 93 06 	call	0xd26	; 0xd26 <i2c_start>
   if(errorStatus == 1)
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	11 f1       	breq	.+68     	; 0x828 <RTC_writeDate+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     7e4:	80 ed       	ldi	r24, 0xD0	; 208
     7e6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <i2c_sendAddress>
   
   if(errorStatus == 1)
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	e9 f0       	breq	.+58     	; 0x828 <RTC_writeDate+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   if(errorStatus == 1)
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	c1 f0       	breq	.+48     	; 0x828 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     7f8:	80 91 89 00 	lds	r24, 0x0089
     7fc:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	91 f0       	breq	.+36     	; 0x828 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     804:	80 91 8a 00 	lds	r24, 0x008A
     808:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	61 f0       	breq	.+24     	; 0x828 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     810:	80 91 8b 00 	lds	r24, 0x008B
     814:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	31 f0       	breq	.+12     	; 0x828 <RTC_writeDate+0x4c>
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     81c:	80 91 8c 00 	lds	r24, 0x008C
     820:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	21 f4       	brne	.+8      	; 0x830 <RTC_writeDate+0x54>
   	  {
       		//transmitString_F(PSTR("RTC write date failed.."));
			i2c_stop();
     828:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	08 95       	ret
	   		return(1);
   	  }
    }
	
	i2c_stop();
     830:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     834:	80 e0       	ldi	r24, 0x00	; 0
	return(0);
}
     836:	08 95       	ret

00000838 <RTC_updateDate>:
  
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(char *data){
     838:	fc 01       	movw	r30, r24

	unsigned char status;
	   
	date[0] = data[0];
     83a:	80 81       	ld	r24, Z
     83c:	80 93 2b 03 	sts	0x032B, r24
	date[1] = data[1];
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	80 93 2c 03 	sts	0x032C, r24
	date[2] = data[2];
     846:	82 81       	ldd	r24, Z+2	; 0x02
     848:	80 93 2d 03 	sts	0x032D, r24
	date[3] = data[3]; 
     84c:	83 81       	ldd	r24, Z+3	; 0x03
     84e:	80 93 2e 03 	sts	0x032E, r24
	date[4] = data[4]; 
     852:	84 81       	ldd	r24, Z+4	; 0x04
     854:	80 93 2f 03 	sts	0x032F, r24
	date[5] = data[5];
     858:	85 81       	ldd	r24, Z+5	; 0x05
     85a:	80 93 30 03 	sts	0x0330, r24
	date[6] = data[6]; 	   	 
     85e:	86 81       	ldd	r24, Z+6	; 0x06
     860:	80 93 31 03 	sts	0x0331, r24
	date[7] = data[7];
     864:	87 81       	ldd	r24, Z+7	; 0x07
     866:	80 93 32 03 	sts	0x0332, r24
	date[8] = data[8];
     86a:	80 85       	ldd	r24, Z+8	; 0x08
     86c:	80 93 33 03 	sts	0x0333, r24
	date[9] = data[9]; 
     870:	81 85       	ldd	r24, Z+9	; 0x09
     872:	80 93 34 03 	sts	0x0334, r24
	date[10] = data[10] & 0x0f;
     876:	82 85       	ldd	r24, Z+10	; 0x0a
     878:	8f 70       	andi	r24, 0x0F	; 15
     87a:	80 93 35 03 	sts	0x0335, r24
		 	  
	RTC_updateRegisters(); 
     87e:	0e 94 5f 03 	call	0x6be	; 0x6be <RTC_updateRegisters>
	data = RTC_writeDate();
     882:	0e 94 ee 03 	call	0x7dc	; 0x7dc <RTC_writeDate>

  TX_NEWLINE;
     886:	8d e0       	ldi	r24, 0x0D	; 13
     888:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  TX_NEWLINE;
     892:	8d e0       	ldi	r24, 0x0D	; 13
     894:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  
  if(status == 0){   
  
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
     89e:	80 ee       	ldi	r24, 0xE0	; 224
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  DATE_ERROR:

  TX_NEWLINE;
  transmitString_F(PSTR("Invalid Entry..")); 
  return 1;
}  
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	08 95       	ret

000008aa <RTC_writeTime>:
//******************************************************************   
unsigned char RTC_writeTime(void)
{
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
     8aa:	0e 94 93 06 	call	0xd26	; 0xd26 <i2c_start>
   if(errorStatus == 1)
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	e1 f0       	breq	.+56     	; 0x8ea <RTC_writeTime+0x40>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     8b2:	80 ed       	ldi	r24, 0xD0	; 208
     8b4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <i2c_sendAddress>
   
   if(errorStatus == 1)
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	b9 f0       	breq	.+46     	; 0x8ea <RTC_writeTime+0x40>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   if(errorStatus == 1)
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	91 f0       	breq	.+36     	; 0x8ea <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     8c6:	80 91 86 00 	lds	r24, 0x0086
     8ca:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	61 f0       	breq	.+24     	; 0x8ea <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     8d2:	80 91 87 00 	lds	r24, 0x0087
     8d6:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	31 f0       	breq	.+12     	; 0x8ea <RTC_writeTime+0x40>
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     8de:	80 91 88 00 	lds	r24, 0x0088
     8e2:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   	  if(errorStatus == 1)
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <RTC_writeTime+0x48>
   	  {
       		//transmitString_F(PSTR("RTC write time failed.."));
			i2c_stop();
     8ea:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	08 95       	ret
	   		return(1);
   	  }
    }
	
	i2c_stop();
     8f2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
	return(0);
}
     8f8:	08 95       	ret

000008fa <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
     8fa:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
     8fc:	8d e0       	ldi	r24, 0x0D	; 13
     8fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     902:	8a e0       	ldi	r24, 0x0A	; 10
     904:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
     908:	89 e3       	ldi	r24, 0x39	; 57
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
     910:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     914:	18 2f       	mov	r17, r24
	transmitByte(data);
     916:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	if(data < 0x30 || data > 0x32)
     91a:	81 2f       	mov	r24, r17
     91c:	80 53       	subi	r24, 0x30	; 48
     91e:	83 30       	cpi	r24, 0x03	; 3
     920:	08 f0       	brcs	.+2      	; 0x924 <RTC_updateTime+0x2a>
     922:	6e c0       	rjmp	.+220    	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[0]= data;
     924:	10 93 b8 02 	sts	0x02B8, r17
	 
	data = receiveByte();
     928:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     92c:	18 2f       	mov	r17, r24
	transmitByte(data);
     92e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	if(data < 0x30 || data > 0x39)
     932:	81 2f       	mov	r24, r17
     934:	80 53       	subi	r24, 0x30	; 48
     936:	8a 30       	cpi	r24, 0x0A	; 10
     938:	08 f0       	brcs	.+2      	; 0x93c <RTC_updateTime+0x42>
     93a:	62 c0       	rjmp	.+196    	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	 
	time[1]= data;
     93c:	10 93 b9 02 	sts	0x02B9, r17
	
	transmitByte(':');
     940:	8a e3       	ldi	r24, 0x3A	; 58
     942:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
     946:	80 91 b8 02 	lds	r24, 0x02B8
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	83 70       	andi	r24, 0x03	; 3
     94e:	90 70       	andi	r25, 0x00	; 0
     950:	9c 01       	movw	r18, r24
     952:	e3 e0       	ldi	r30, 0x03	; 3
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	ea 95       	dec	r30
     95a:	e1 f7       	brne	.-8      	; 0x954 <RTC_updateTime+0x5a>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	28 0f       	add	r18, r24
     962:	39 1f       	adc	r19, r25
     964:	80 91 b9 02 	lds	r24, 0x02B9
     968:	8f 70       	andi	r24, 0x0F	; 15
     96a:	28 0f       	add	r18, r24
     96c:	31 1d       	adc	r19, r1
     96e:	28 31       	cpi	r18, 0x18	; 24
     970:	31 05       	cpc	r19, r1
     972:	0c f0       	brlt	.+2      	; 0x976 <RTC_updateTime+0x7c>
     974:	45 c0       	rjmp	.+138    	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
     976:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     97a:	18 2f       	mov	r17, r24
	 transmitByte(data);
     97c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	if(data < 0x30 || data > 0x35)
     980:	81 2f       	mov	r24, r17
     982:	80 53       	subi	r24, 0x30	; 48
     984:	86 30       	cpi	r24, 0x06	; 6
     986:	e0 f5       	brcc	.+120    	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[3]= data; 
     988:	10 93 bb 02 	sts	0x02BB, r17
	
	data = receiveByte();
     98c:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     990:	18 2f       	mov	r17, r24
	transmitByte(data);
     992:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	if(data < 0x30 || data > 0x39)
     996:	81 2f       	mov	r24, r17
     998:	80 53       	subi	r24, 0x30	; 48
     99a:	8a 30       	cpi	r24, 0x0A	; 10
     99c:	88 f5       	brcc	.+98     	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[4]= data; 
     99e:	10 93 bc 02 	sts	0x02BC, r17
	
	transmitByte(':');
     9a2:	8a e3       	ldi	r24, 0x3A	; 58
     9a4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
     9a8:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     9ac:	18 2f       	mov	r17, r24
	 transmitByte(data);
     9ae:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	if(data < 0x30 || data > 0x35)
     9b2:	81 2f       	mov	r24, r17
     9b4:	80 53       	subi	r24, 0x30	; 48
     9b6:	86 30       	cpi	r24, 0x06	; 6
     9b8:	18 f5       	brcc	.+70     	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[6]= data; 
     9ba:	10 93 be 02 	sts	0x02BE, r17
	
	data = receiveByte();
     9be:	0e 94 03 03 	call	0x606	; 0x606 <receiveByte>
     9c2:	18 2f       	mov	r17, r24
	transmitByte(data);
     9c4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	if(data < 0x30 || data > 0x39)
     9c8:	81 2f       	mov	r24, r17
     9ca:	80 53       	subi	r24, 0x30	; 48
     9cc:	8a 30       	cpi	r24, 0x0A	; 10
     9ce:	c0 f4       	brcc	.+48     	; 0xa00 <RTC_updateTime+0x106>
	   goto TIME_ERROR;
	   
	time[7]= data; 
     9d0:	10 93 bf 02 	sts	0x02BF, r17
	
	 	  
  RTC_updateRegisters(); 
     9d4:	0e 94 5f 03 	call	0x6be	; 0x6be <RTC_updateRegisters>
  data = RTC_writeTime();
     9d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <RTC_writeTime>
     9dc:	18 2f       	mov	r17, r24

  TX_NEWLINE;
     9de:	8d e0       	ldi	r24, 0x0D	; 13
     9e0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  if(data == 0)
     9ea:	11 23       	and	r17, r17
     9ec:	31 f4       	brne	.+12     	; 0x9fa <RTC_updateTime+0x100>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
     9ee:	8f e1       	ldi	r24, 0x1F	; 31
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e c0       	rjmp	.+28     	; 0xa16 <RTC_updateTime+0x11c>
	 return 0;
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <RTC_updateTime+0x116>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
     a00:	8d e0       	ldi	r24, 0x0D	; 13
     a02:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     a06:	8a e0       	ldi	r24, 0x0A	; 10
     a08:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
     a0c:	8a ef       	ldi	r24, 0xFA	; 250
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
     a14:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}  
     a16:	1f 91       	pop	r17
     a18:	08 95       	ret

00000a1a <RTC_setStartAddress>:
//***************************************************************************
unsigned char RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
     a1a:	0e 94 93 06 	call	0xd26	; 0xd26 <i2c_start>
   if(errorStatus == 1)
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	51 f0       	breq	.+20     	; 0xa36 <RTC_setStartAddress+0x1c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     a22:	80 ed       	ldi	r24, 0xD0	; 208
     a24:	0e 94 ad 06 	call	0xd5a	; 0xd5a <i2c_sendAddress>
   
   if(errorStatus == 1)
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	29 f0       	breq	.+10     	; 0xa36 <RTC_setStartAddress+0x1c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   if(errorStatus == 1)
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	21 f4       	brne	.+8      	; 0xa3e <RTC_setStartAddress+0x24>
   {
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
     a36:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	08 95       	ret
	 return 1;
   } 

   i2c_stop();
     a3e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     a42:	80 e0       	ldi	r24, 0x00	; 0
   return 0;
}
     a44:	08 95       	ret

00000a46 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     a4c:	0e 94 93 06 	call	0xd26	; 0xd26 <i2c_start>
   if(errorStatus == 1)
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	f9 f0       	breq	.+62     	; 0xa92 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     a54:	80 ed       	ldi	r24, 0xD0	; 208
     a56:	0e 94 ad 06 	call	0xd5a	; 0xd5a <i2c_sendAddress>
   
   if(errorStatus == 1)
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	d1 f0       	breq	.+52     	; 0xa92 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_sendData>
   if(errorStatus == 1)
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	a9 f0       	breq	.+42     	; 0xa92 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
     a68:	0e 94 a0 06 	call	0xd40	; 0xd40 <i2c_repeatStart>
   if(errorStatus == 1)
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	89 f0       	breq	.+34     	; 0xa92 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
     a70:	81 ed       	ldi	r24, 0xD1	; 209
     a72:	0e 94 ad 06 	call	0xd5a	; 0xd5a <i2c_sendAddress>
   
   if(errorStatus == 1)
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	61 f0       	breq	.+24     	; 0xa92 <RTC_read+0x4c>
   {
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
     a7a:	c6 e8       	ldi	r28, 0x86	; 134
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
     a80:	16 30       	cpi	r17, 0x06	; 6
     a82:	19 f4       	brne	.+6      	; 0xa8a <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
     a84:	0e 94 df 06 	call	0xdbe	; 0xdbe <i2c_receiveData_NACK>
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
     a8a:	0e 94 d2 06 	call	0xda4	; 0xda4 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
     a8e:	8e 37       	cpi	r24, 0x7E	; 126
     a90:	21 f4       	brne	.+8      	; 0xa9a <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
     a92:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <RTC_read+0x62>
	   		return 1;
   	  }
	  
	  rtc_register[i] = data;
     a9a:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
     a9c:	1f 5f       	subi	r17, 0xFF	; 255
     a9e:	17 30       	cpi	r17, 0x07	; 7
     aa0:	79 f7       	brne	.-34     	; 0xa80 <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
     aa2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <i2c_stop>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}	  
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	08 95       	ret

00000ab0 <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
     ab0:	0e 94 23 05 	call	0xa46	; 0xa46 <RTC_read>
   if(error) return 1;
     ab4:	88 23       	and	r24, r24
     ab6:	11 f0       	breq	.+4      	; 0xabc <getDateTime_FAT+0xc>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 95       	ret

   yr = (YEAR & 0xf0) >> 4;
     abc:	40 91 8c 00 	lds	r20, 0x008C
   yr = (yr * 10)+(YEAR & 0x0f);
     ac0:	84 2f       	mov	r24, r20
     ac2:	82 95       	swap	r24
     ac4:	8f 70       	andi	r24, 0x0F	; 15
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	63 e0       	ldi	r22, 0x03	; 3
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	6a 95       	dec	r22
     ad2:	e1 f7       	brne	.-8      	; 0xacc <getDateTime_FAT+0x1c>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	e8 0f       	add	r30, r24
     ada:	f9 1f       	adc	r31, r25
   yr = yr+2000;
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	4f 70       	andi	r20, 0x0F	; 15
     ae0:	50 70       	andi	r21, 0x00	; 0
     ae2:	4c 5e       	subi	r20, 0xEC	; 236
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
     ae6:	60 91 8b 00 	lds	r22, 0x008B
   mth = (mth * 10)+(MONTH & 0x0f);
     aea:	86 2f       	mov	r24, r22
     aec:	82 95       	swap	r24
     aee:	8f 70       	andi	r24, 0x0F	; 15
     af0:	aa e0       	ldi	r26, 0x0A	; 10
     af2:	8a 9f       	mul	r24, r26
     af4:	80 2d       	mov	r24, r0
     af6:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
     af8:	70 91 8a 00 	lds	r23, 0x008A
   dt = (dt * 10)+(DATE & 0x0f);
     afc:	27 2f       	mov	r18, r23
     afe:	22 95       	swap	r18
     b00:	2f 70       	andi	r18, 0x0F	; 15
     b02:	2a 9f       	mul	r18, r26
     b04:	20 2d       	mov	r18, r0
     b06:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
     b08:	6f 70       	andi	r22, 0x0F	; 15
     b0a:	86 0f       	add	r24, r22
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	4e 0f       	add	r20, r30
     b10:	5f 1f       	adc	r21, r31
     b12:	34 e0       	ldi	r19, 0x04	; 4
     b14:	44 0f       	add	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	3a 95       	dec	r19
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <getDateTime_FAT+0x64>
     b1c:	84 2b       	or	r24, r20
     b1e:	95 2b       	or	r25, r21
     b20:	b5 e0       	ldi	r27, 0x05	; 5
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	ba 95       	dec	r27
     b28:	e1 f7       	brne	.-8      	; 0xb22 <getDateTime_FAT+0x72>
     b2a:	7f 70       	andi	r23, 0x0F	; 15
     b2c:	27 0f       	add	r18, r23
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	82 2b       	or	r24, r18
     b32:	93 2b       	or	r25, r19
     b34:	90 93 92 00 	sts	0x0092, r25
     b38:	80 93 91 00 	sts	0x0091, r24


   hr = (HOURS & 0xf0) >> 4;
     b3c:	70 91 88 00 	lds	r23, 0x0088
   hr = (hr * 10)+(HOURS & 0x0f);
     b40:	87 2f       	mov	r24, r23
     b42:	82 95       	swap	r24
     b44:	8f 70       	andi	r24, 0x0F	; 15
     b46:	8a 9f       	mul	r24, r26
     b48:	80 2d       	mov	r24, r0
     b4a:	11 24       	eor	r1, r1

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
     b4c:	e0 91 87 00 	lds	r30, 0x0087
   min = (min * 10)+(MINUTES & 0x0f);
     b50:	4e 2f       	mov	r20, r30
     b52:	42 95       	swap	r20
     b54:	4f 70       	andi	r20, 0x0F	; 15
     b56:	4a 9f       	mul	r20, r26
     b58:	40 2d       	mov	r20, r0
     b5a:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
     b5c:	60 91 86 00 	lds	r22, 0x0086
   sec = (sec * 10)+(SECONDS & 0x0f);
     b60:	26 2f       	mov	r18, r22
     b62:	22 95       	swap	r18
     b64:	2f 70       	andi	r18, 0x0F	; 15
     b66:	2a 9f       	mul	r18, r26
     b68:	20 2d       	mov	r18, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	6f 70       	andi	r22, 0x0F	; 15
     b6e:	26 0f       	add	r18, r22
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
     b70:	7f 70       	andi	r23, 0x0F	; 15
     b72:	87 0f       	add	r24, r23
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a6 e0       	ldi	r26, 0x06	; 6
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	aa 95       	dec	r26
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <getDateTime_FAT+0xc8>
     b80:	ef 70       	andi	r30, 0x0F	; 15
     b82:	4e 0f       	add	r20, r30
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	84 2b       	or	r24, r20
     b88:	95 2b       	or	r25, r21
     b8a:	f5 e0       	ldi	r31, 0x05	; 5
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	fa 95       	dec	r31
     b92:	e1 f7       	brne	.-8      	; 0xb8c <getDateTime_FAT+0xdc>
     b94:	26 95       	lsr	r18
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	82 2b       	or	r24, r18
     b9a:	93 2b       	or	r25, r19
     b9c:	90 93 a6 00 	sts	0x00A6, r25
     ba0:	80 93 a5 00 	sts	0x00A5, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0

   
   return 0;
}
     ba6:	08 95       	ret

00000ba8 <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
     ba8:	0e 94 23 05 	call	0xa46	; 0xa46 <RTC_read>
  if(error) return 1;
     bac:	88 23       	and	r24, r24
     bae:	11 f0       	breq	.+4      	; 0xbb4 <RTC_getDate+0xc>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	08 95       	ret

  date[10] = 0x00;  //NULL
     bb4:	10 92 35 03 	sts	0x0335, r1
  date[9] = (YEAR & 0x0f) | 0x30;
     bb8:	90 91 8c 00 	lds	r25, 0x008C
     bbc:	89 2f       	mov	r24, r25
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	80 63       	ori	r24, 0x30	; 48
     bc2:	80 93 34 03 	sts	0x0334, r24
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
     bc6:	92 95       	swap	r25
     bc8:	9f 70       	andi	r25, 0x0F	; 15
     bca:	90 63       	ori	r25, 0x30	; 48
     bcc:	90 93 33 03 	sts	0x0333, r25
  date[7] = '0';
     bd0:	80 e3       	ldi	r24, 0x30	; 48
     bd2:	80 93 32 03 	sts	0x0332, r24
  date[6] = '2';
     bd6:	82 e3       	ldi	r24, 0x32	; 50
     bd8:	80 93 31 03 	sts	0x0331, r24
  date[5] = '/';
     bdc:	3f e2       	ldi	r19, 0x2F	; 47
     bde:	30 93 30 03 	sts	0x0330, r19
  date[4] = (MONTH & 0x0f) | 0x30;
     be2:	80 91 8b 00 	lds	r24, 0x008B
     be6:	28 2f       	mov	r18, r24
     be8:	2f 70       	andi	r18, 0x0F	; 15
     bea:	20 63       	ori	r18, 0x30	; 48
     bec:	20 93 2f 03 	sts	0x032F, r18
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	80 71       	andi	r24, 0x10	; 16
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	e4 e0       	ldi	r30, 0x04	; 4
     bf8:	95 95       	asr	r25
     bfa:	87 95       	ror	r24
     bfc:	ea 95       	dec	r30
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <RTC_getDate+0x50>
     c00:	80 63       	ori	r24, 0x30	; 48
     c02:	80 93 2e 03 	sts	0x032E, r24
  date[2] = '/';
     c06:	30 93 2d 03 	sts	0x032D, r19
  date[1] = (DATE & 0x0f) | 0x30;
     c0a:	80 91 8a 00 	lds	r24, 0x008A
     c0e:	28 2f       	mov	r18, r24
     c10:	2f 70       	andi	r18, 0x0F	; 15
     c12:	20 63       	ori	r18, 0x30	; 48
     c14:	20 93 2c 03 	sts	0x032C, r18
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 73       	andi	r24, 0x30	; 48
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	74 e0       	ldi	r23, 0x04	; 4
     c20:	95 95       	asr	r25
     c22:	87 95       	ror	r24
     c24:	7a 95       	dec	r23
     c26:	e1 f7       	brne	.-8      	; 0xc20 <RTC_getDate+0x78>
     c28:	80 63       	ori	r24, 0x30	; 48
     c2a:	80 93 2b 03 	sts	0x032B, r24
     c2e:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}  
     c30:	08 95       	ret

00000c32 <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
     c32:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTC_getDate>
  if(error) return 1;
     c36:	88 23       	and	r24, r24
     c38:	11 f0       	breq	.+4      	; 0xc3e <RTC_displayDate+0xc>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	08 95       	ret
  
  TX_NEWLINE;
     c3e:	8d e0       	ldi	r24, 0x0D	; 13
     c40:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  transmitString_F(PSTR("Date:")); 
     c4a:	88 ea       	ldi	r24, 0xA8	; 168
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  transmitString(date);  
     c52:	8b e2       	ldi	r24, 0x2B	; 43
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 11 03 	call	0x622	; 0x622 <transmitString>
  RTC_displayDay();  
     c5a:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_displayDay>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
  
  return 0; 
}
     c60:	08 95       	ret

00000c62 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
     c62:	0e 94 23 05 	call	0xa46	; 0xa46 <RTC_read>
   if(error) return 1;
     c66:	88 23       	and	r24, r24
     c68:	11 f0       	breq	.+4      	; 0xc6e <RTC_getTime+0xc>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret

   RTC_read();
     c6e:	0e 94 23 05 	call	0xa46	; 0xa46 <RTC_read>
   time[8] = 0x00;	  //NULL
     c72:	10 92 c0 02 	sts	0x02C0, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
     c76:	80 91 86 00 	lds	r24, 0x0086
     c7a:	28 2f       	mov	r18, r24
     c7c:	2f 70       	andi	r18, 0x0F	; 15
     c7e:	20 63       	ori	r18, 0x30	; 48
     c80:	20 93 bf 02 	sts	0x02BF, r18
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	80 77       	andi	r24, 0x70	; 112
     c88:	90 70       	andi	r25, 0x00	; 0
     c8a:	b4 e0       	ldi	r27, 0x04	; 4
     c8c:	95 95       	asr	r25
     c8e:	87 95       	ror	r24
     c90:	ba 95       	dec	r27
     c92:	e1 f7       	brne	.-8      	; 0xc8c <RTC_getTime+0x2a>
     c94:	80 63       	ori	r24, 0x30	; 48
     c96:	80 93 be 02 	sts	0x02BE, r24
   time[5] = ':';
     c9a:	3a e3       	ldi	r19, 0x3A	; 58
     c9c:	30 93 bd 02 	sts	0x02BD, r19
   
   time[4] = (MINUTES & 0x0f) | 0x30;
     ca0:	80 91 87 00 	lds	r24, 0x0087
     ca4:	28 2f       	mov	r18, r24
     ca6:	2f 70       	andi	r18, 0x0F	; 15
     ca8:	20 63       	ori	r18, 0x30	; 48
     caa:	20 93 bc 02 	sts	0x02BC, r18
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	80 77       	andi	r24, 0x70	; 112
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	a4 e0       	ldi	r26, 0x04	; 4
     cb6:	95 95       	asr	r25
     cb8:	87 95       	ror	r24
     cba:	aa 95       	dec	r26
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <RTC_getTime+0x54>
     cbe:	80 63       	ori	r24, 0x30	; 48
     cc0:	80 93 bb 02 	sts	0x02BB, r24
   time[2] = ':'; 
     cc4:	30 93 ba 02 	sts	0x02BA, r19
   
   time[1] = (HOURS & 0x0f) | 0x30;	
     cc8:	80 91 88 00 	lds	r24, 0x0088
     ccc:	28 2f       	mov	r18, r24
     cce:	2f 70       	andi	r18, 0x0F	; 15
     cd0:	20 63       	ori	r18, 0x30	; 48
     cd2:	20 93 b9 02 	sts	0x02B9, r18
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	80 73       	andi	r24, 0x30	; 48
     cda:	90 70       	andi	r25, 0x00	; 0
     cdc:	f4 e0       	ldi	r31, 0x04	; 4
     cde:	95 95       	asr	r25
     ce0:	87 95       	ror	r24
     ce2:	fa 95       	dec	r31
     ce4:	e1 f7       	brne	.-8      	; 0xcde <RTC_getTime+0x7c>
     ce6:	80 63       	ori	r24, 0x30	; 48
     ce8:	80 93 b8 02 	sts	0x02B8, r24
     cec:	80 e0       	ldi	r24, 0x00	; 0

   return 0;
}
     cee:	08 95       	ret

00000cf0 <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
     cf0:	0e 94 31 06 	call	0xc62	; 0xc62 <RTC_getTime>
  if(error) return 1;
     cf4:	88 23       	and	r24, r24
     cf6:	11 f0       	breq	.+4      	; 0xcfc <RTC_displayTime+0xc>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret
  
  TX_NEWLINE;
     cfc:	8d e0       	ldi	r24, 0x0D	; 13
     cfe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
     d02:	8a e0       	ldi	r24, 0x0A	; 10
     d04:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
  transmitString_F(PSTR("Time:"));
     d08:	8e ea       	ldi	r24, 0xAE	; 174
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
  transmitString(time);
     d10:	88 eb       	ldi	r24, 0xB8	; 184
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 11 03 	call	0x622	; 0x622 <transmitString>
     d18:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     d1a:	08 95       	ret

00000d1c <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz @16MHz)
//************************************************
void twi_init(void)
{
 TWCR= 0x00; //disable twi
     d1c:	16 be       	out	0x36, r1	; 54
 TWBR= 0x12; //set bit rate
     d1e:	82 e1       	ldi	r24, 0x12	; 18
     d20:	80 b9       	out	0x00, r24	; 0
 TWSR= 0x00; //set prescale
     d22:	11 b8       	out	0x01, r1	; 1
 //TWCR= 0x44; //enable twi
}
     d24:	08 95       	ret

00000d26 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
     d26:	84 ea       	ldi	r24, 0xA4	; 164
     d28:	86 bf       	out	0x36, r24	; 54
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     d2a:	06 b6       	in	r0, 0x36	; 54
     d2c:	07 fe       	sbrs	r0, 7
     d2e:	fd cf       	rjmp	.-6      	; 0xd2a <i2c_start+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
     d30:	81 b1       	in	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	88 7f       	andi	r24, 0xF8	; 248
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	09 f0       	breq	.+2      	; 0xd3c <i2c_start+0x16>
     d3a:	91 e0       	ldi	r25, 0x01	; 1
 	   return(0);
	else
	   return(1);
}
     d3c:	89 2f       	mov	r24, r25
     d3e:	08 95       	ret

00000d40 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
     d40:	84 ea       	ldi	r24, 0xA4	; 164
     d42:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     d44:	06 b6       	in	r0, 0x36	; 54
     d46:	07 fe       	sbrs	r0, 7
     d48:	fd cf       	rjmp	.-6      	; 0xd44 <i2c_repeatStart+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
     d4a:	81 b1       	in	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 7f       	andi	r24, 0xF8	; 248
     d50:	80 31       	cpi	r24, 0x10	; 16
     d52:	09 f0       	breq	.+2      	; 0xd56 <i2c_repeatStart+0x16>
     d54:	91 e0       	ldi	r25, 0x01	; 1
 	   return(0);
	else
	   return(1);
}
     d56:	89 2f       	mov	r24, r25
     d58:	08 95       	ret

00000d5a <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
     d5a:	80 fd       	sbrc	r24, 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <i2c_sendAddress+0x8>
     d5e:	28 e1       	ldi	r18, 0x18	; 24
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <i2c_sendAddress+0xa>
     d62:	20 e4       	ldi	r18, 0x40	; 64
     STATUS = MT_SLA_ACK;
   else
     STATUS = MR_SLA_ACK; 
   
   TWDR = address; 
     d64:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     d66:	84 e8       	ldi	r24, 0x84	; 132
     d68:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
     d6a:	06 b6       	in	r0, 0x36	; 54
     d6c:	07 fe       	sbrs	r0, 7
     d6e:	fd cf       	rjmp	.-6      	; 0xd6a <i2c_sendAddress+0x10>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
     d70:	81 b1       	in	r24, 0x01	; 1
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	88 7f       	andi	r24, 0xF8	; 248
     d78:	90 70       	andi	r25, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	82 17       	cp	r24, r18
     d7e:	93 07       	cpc	r25, r19
     d80:	09 f0       	breq	.+2      	; 0xd84 <i2c_sendAddress+0x2a>
     d82:	41 e0       	ldi	r20, 0x01	; 1
   	  return(0);
   else 
      return(1);
}
     d84:	84 2f       	mov	r24, r20
     d86:	08 95       	ret

00000d88 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
     d88:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     d8a:	84 e8       	ldi	r24, 0x84	; 132
     d8c:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
     d8e:	06 b6       	in	r0, 0x36	; 54
     d90:	07 fe       	sbrs	r0, 7
     d92:	fd cf       	rjmp	.-6      	; 0xd8e <i2c_sendData+0x6>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
     d94:	81 b1       	in	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 7f       	andi	r24, 0xF8	; 248
     d9a:	88 32       	cpi	r24, 0x28	; 40
     d9c:	09 f0       	breq	.+2      	; 0xda0 <i2c_sendData+0x18>
     d9e:	91 e0       	ldi	r25, 0x01	; 1
   	  return(1);
   else
      return(0);
}
     da0:	89 2f       	mov	r24, r25
     da2:	08 95       	ret

00000da4 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     da4:	84 ec       	ldi	r24, 0xC4	; 196
     da6:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
     da8:	06 b6       	in	r0, 0x36	; 54
     daa:	07 fe       	sbrs	r0, 7
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <i2c_receiveData_ACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
     dae:	81 b1       	in	r24, 0x01	; 1
     db0:	88 7f       	andi	r24, 0xF8	; 248
     db2:	80 35       	cpi	r24, 0x50	; 80
     db4:	11 f0       	breq	.+4      	; 0xdba <i2c_receiveData_ACK+0x16>
     db6:	8e e7       	ldi	r24, 0x7E	; 126
     db8:	08 95       	ret
   	  return(ERROR_CODE);
  
  data = TWDR;
     dba:	83 b1       	in	r24, 0x03	; 3
  return(data);
}
     dbc:	08 95       	ret

00000dbe <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
     dbe:	84 e8       	ldi	r24, 0x84	; 132
     dc0:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
     dc2:	06 b6       	in	r0, 0x36	; 54
     dc4:	07 fe       	sbrs	r0, 7
     dc6:	fd cf       	rjmp	.-6      	; 0xdc2 <i2c_receiveData_NACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
     dc8:	81 b1       	in	r24, 0x01	; 1
     dca:	88 7f       	andi	r24, 0xF8	; 248
     dcc:	88 35       	cpi	r24, 0x58	; 88
     dce:	11 f0       	breq	.+4      	; 0xdd4 <i2c_receiveData_NACK+0x16>
     dd0:	8e e7       	ldi	r24, 0x7E	; 126
     dd2:	08 95       	ret
   	  return(ERROR_CODE);
  
  data = TWDR;
     dd4:	83 b1       	in	r24, 0x03	; 3
  return(data);
}
     dd6:	08 95       	ret

00000dd8 <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
     dd8:	84 e9       	ldi	r24, 0x94	; 148
     dda:	86 bf       	out	0x36, r24	; 54
}  
     ddc:	08 95       	ret

00000dde <port_init>:
#include <util/delay.h>
#include "SYSTEM_functions.h"

void port_init(void)
{
  PORTA = 0x00;
     dde:	1b ba       	out	0x1b, r1	; 27
  DDRA  = 0x00;
     de0:	1a ba       	out	0x1a, r1	; 26
  PORTB = 0x00; //pull-up on for pushbutton
     de2:	18 ba       	out	0x18, r1	; 24
  DDRB  = 0xBF; //MISO line i/p, rest o/p
     de4:	8f eb       	ldi	r24, 0xBF	; 191
     de6:	87 bb       	out	0x17, r24	; 23
  PORTC = 0x80; //pull-up for push-button
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	85 bb       	out	0x15, r24	; 21
  DDRC  = 0x20; //PC7- i/p (pushbutton), PC6, PC5 - o/p (two LEDs)
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	84 bb       	out	0x14, r24	; 20
  DDRD  = 1  << PORTD2;
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	81 bb       	out	0x11, r24	; 17
  PORTD = 0  << PORTD2;
     df4:	12 ba       	out	0x12, r1	; 18
  
}
     df6:	08 95       	ret

00000df8 <blinkRedLED>:

void blinkRedLED(void)
{
	DDRD  = 1  << PORTD2;
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0  << PORTD2;
     dfc:	12 ba       	out	0x12, r1	; 18
  while(1)  //blink red LED continuously, if error
  {
    PORTD ^= 1  << PORTD2;
     dfe:	44 e0       	ldi	r20, 0x04	; 4
     e00:	20 e9       	ldi	r18, 0x90	; 144
     e02:	31 e0       	ldi	r19, 0x01	; 1
     e04:	82 b3       	in	r24, 0x12	; 18
     e06:	84 27       	eor	r24, r20
     e08:	82 bb       	out	0x12, r24	; 18
     e0a:	88 e8       	ldi	r24, 0x88	; 136
     e0c:	93 e1       	ldi	r25, 0x13	; 19
     e0e:	f9 01       	movw	r30, r18
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <blinkRedLED+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e16:	d9 f7       	brne	.-10     	; 0xe0e <blinkRedLED+0x16>
     e18:	f5 cf       	rjmp	.-22     	; 0xe04 <blinkRedLED+0xc>

00000e1a <numberToChar>:
}
 
char* numberToChar(int val){


}
     e1a:	08 95       	ret

00000e1c <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
     e1c:	82 e5       	ldi	r24, 0x52	; 82
     e1e:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
     e20:	1e b8       	out	0x0e, r1	; 14
}
     e22:	08 95       	ret

00000e24 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
     e24:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
     e26:	77 9b       	sbis	0x0e, 7	; 14
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <SPI_transmit+0x2>
data = SPDR;
     e2a:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
     e2c:	08 95       	ret

00000e2e <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
     e32:	77 9b       	sbis	0x0e, 7	; 14
     e34:	fe cf       	rjmp	.-4      	; 0xe32 <SPI_receive+0x4>
data = SPDR;
     e36:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
     e38:	08 95       	ret

00000e3a <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	d8 2e       	mov	r13, r24
     e46:	7a 01       	movw	r14, r20
     e48:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
     e4a:	80 91 b1 02 	lds	r24, 0x02B1
     e4e:	88 23       	and	r24, r24
     e50:	b9 f4       	brne	.+46     	; 0xe80 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
     e52:	8d 2d       	mov	r24, r13
     e54:	81 51       	subi	r24, 0x11	; 17
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	60 f0       	brcs	.+24     	; 0xe72 <SD_sendCommand+0x38>
     e5a:	88 e1       	ldi	r24, 0x18	; 24
     e5c:	d8 16       	cp	r13, r24
     e5e:	49 f0       	breq	.+18     	; 0xe72 <SD_sendCommand+0x38>
     e60:	89 e1       	ldi	r24, 0x19	; 25
     e62:	d8 16       	cp	r13, r24
     e64:	31 f0       	breq	.+12     	; 0xe72 <SD_sendCommand+0x38>
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	d8 16       	cp	r13, r24
     e6a:	19 f0       	breq	.+6      	; 0xe72 <SD_sendCommand+0x38>
     e6c:	81 e2       	ldi	r24, 0x21	; 33
     e6e:	d8 16       	cp	r13, r24
     e70:	39 f4       	brne	.+14     	; 0xe80 <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
     e72:	39 e0       	ldi	r19, 0x09	; 9
     e74:	ee 0c       	add	r14, r14
     e76:	ff 1c       	adc	r15, r15
     e78:	00 1f       	adc	r16, r16
     e7a:	11 1f       	adc	r17, r17
     e7c:	3a 95       	dec	r19
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
     e80:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
     e82:	8d 2d       	mov	r24, r13
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SPI_transmit(arg>>24);
     e8a:	81 2f       	mov	r24, r17
     e8c:	99 27       	eor	r25, r25
     e8e:	aa 27       	eor	r26, r26
     e90:	bb 27       	eor	r27, r27
     e92:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SPI_transmit(arg>>16);
     e96:	c8 01       	movw	r24, r16
     e98:	aa 27       	eor	r26, r26
     e9a:	bb 27       	eor	r27, r27
     e9c:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SPI_transmit(arg>>8);
     ea0:	bb 27       	eor	r27, r27
     ea2:	a1 2f       	mov	r26, r17
     ea4:	90 2f       	mov	r25, r16
     ea6:	8f 2d       	mov	r24, r15
     ea8:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SPI_transmit(arg);
     eac:	8e 2d       	mov	r24, r14
     eae:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	d8 16       	cp	r13, r24
     eb6:	11 f4       	brne	.+4      	; 0xebc <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
     eb8:	87 e8       	ldi	r24, 0x87	; 135
     eba:	01 c0       	rjmp	.+2      	; 0xebe <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
     ebc:	85 e9       	ldi	r24, 0x95	; 149
     ebe:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
     ec6:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
     ec8:	d1 f0       	breq	.+52     	; 0xefe <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
     eca:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
     ece:	08 2f       	mov	r16, r24
     ed0:	8f 3f       	cpi	r24, 0xFF	; 255
     ed2:	c9 f3       	breq	.-14     	; 0xec6 <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
     ed4:	88 23       	and	r24, r24
     ed6:	99 f4       	brne	.+38     	; 0xefe <SD_sendCommand+0xc4>
     ed8:	8a e3       	ldi	r24, 0x3A	; 58
     eda:	d8 16       	cp	r13, r24
     edc:	81 f4       	brne	.+32     	; 0xefe <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
     ede:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
     ee2:	86 ff       	sbrs	r24, 6
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <SD_sendCommand+0xb4>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 b1 02 	sts	0x02B1, r24
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
     eee:	10 92 b1 02 	sts	0x02B1, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
     ef2:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
     ef6:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
  SPI_receive(); 
     efa:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
}

SPI_receive(); //extra 8 CLK
     efe:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
SD_CS_DEASSERT;
     f02:	c4 9a       	sbi	0x18, 4	; 24

return response; //return state
}
     f04:	80 2f       	mov	r24, r16
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	08 95       	ret

00000f12 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	7b 01       	movw	r14, r22
     f24:	8c 01       	movw	r16, r24
     f26:	59 01       	movw	r10, r18
     f28:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	b8 01       	movw	r22, r16
     f2e:	a7 01       	movw	r20, r14
     f30:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
     f34:	88 23       	and	r24, r24
     f36:	b9 f4       	brne	.+46     	; 0xf66 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
     f38:	08 94       	sec
     f3a:	e1 08       	sbc	r14, r1
     f3c:	f1 08       	sbc	r15, r1
     f3e:	01 09       	sbc	r16, r1
     f40:	11 09       	sbc	r17, r1
     f42:	ea 0c       	add	r14, r10
     f44:	fb 1c       	adc	r15, r11
     f46:	0c 1d       	adc	r16, r12
     f48:	1d 1d       	adc	r17, r13
     f4a:	81 e2       	ldi	r24, 0x21	; 33
     f4c:	b8 01       	movw	r22, r16
     f4e:	a7 01       	movw	r20, r14
     f50:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
if(response != 0x00)
     f54:	88 23       	and	r24, r24
     f56:	39 f4       	brne	.+14     	; 0xf66 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
     f58:	86 e2       	ldi	r24, 0x26	; 38
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	08 95       	ret

00000f78 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ab 01       	movw	r20, r22
     f7e:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
     f80:	88 e1       	ldi	r24, 0x18	; 24
     f82:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
     f86:	88 23       	and	r24, r24
     f88:	11 f0       	breq	.+4      	; 0xf8e <SD_writeSingleBlock+0x16>
     f8a:	98 2f       	mov	r25, r24
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
     f8e:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
     f90:	8e ef       	ldi	r24, 0xFE	; 254
     f92:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
     f96:	c0 e0       	ldi	r28, 0x00	; 0
     f98:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
     f9a:	fe 01       	movw	r30, r28
     f9c:	e5 55       	subi	r30, 0x55	; 85
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
     fa6:	21 96       	adiw	r28, 0x01	; 1
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	c0 30       	cpi	r28, 0x00	; 0
     fac:	d8 07       	cpc	r29, r24
     fae:	a9 f7       	brne	.-22     	; 0xf9a <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SPI_transmit(0xff);
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>

response = SPI_receive();
     fbc:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
     fc0:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
     fc2:	8f 71       	andi	r24, 0x1F	; 31
     fc4:	85 30       	cpi	r24, 0x05	; 5
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
     fc8:	c4 9a       	sbi	0x18, 4	; 24
     fca:	20 c0       	rjmp	.+64     	; 0x100c <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	cf 3f       	cpi	r28, 0xFF	; 255
     fd0:	d8 07       	cpc	r29, r24
     fd2:	91 f0       	breq	.+36     	; 0xff8 <SD_writeSingleBlock+0x80>
     fd4:	21 96       	adiw	r28, 0x01	; 1
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <SD_writeSingleBlock+0x64>
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
     fdc:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
     fe0:	88 23       	and	r24, r24
     fe2:	a1 f3       	breq	.-24     	; 0xfcc <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
     fe4:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
     fec:	c4 98       	cbi	0x18, 4	; 24
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	cf 3f       	cpi	r28, 0xFF	; 255
     ff4:	d8 07       	cpc	r29, r24
     ff6:	19 f4       	brne	.+6      	; 0xffe <SD_writeSingleBlock+0x86>
     ff8:	c4 9a       	sbi	0x18, 4	; 24
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	07 c0       	rjmp	.+14     	; 0x100c <SD_writeSingleBlock+0x94>
     ffe:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    1000:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
    1004:	88 23       	and	r24, r24
    1006:	a1 f3       	breq	.-24     	; 0xff0 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    1008:	c4 9a       	sbi	0x18, 4	; 24
    100a:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
    100c:	89 2f       	mov	r24, r25
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	ab 01       	movw	r20, r22
    101c:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    101e:	81 e1       	ldi	r24, 0x11	; 17
    1020:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
    1024:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    1026:	88 23       	and	r24, r24
    1028:	09 f5       	brne	.+66     	; 0x106c <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    102a:	c4 98       	cbi	0x18, 4	; 24
    102c:	c0 e0       	ldi	r28, 0x00	; 0
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	05 c0       	rjmp	.+10     	; 0x103c <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    1032:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    1034:	19 f4       	brne	.+6      	; 0x103c <SD_readSingleBlock+0x28>
    1036:	c4 9a       	sbi	0x18, 4	; 24
    1038:	11 e0       	ldi	r17, 0x01	; 1
    103a:	18 c0       	rjmp	.+48     	; 0x106c <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    103c:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
    1040:	8e 3f       	cpi	r24, 0xFE	; 254
    1042:	b9 f7       	brne	.-18     	; 0x1032 <SD_readSingleBlock+0x1e>
    1044:	c0 e0       	ldi	r28, 0x00	; 0
    1046:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    1048:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
    104c:	fe 01       	movw	r30, r28
    104e:	e5 55       	subi	r30, 0x55	; 85
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    1054:	21 96       	adiw	r28, 0x01	; 1
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	c0 30       	cpi	r28, 0x00	; 0
    105a:	d8 07       	cpc	r29, r24
    105c:	a9 f7       	brne	.-22     	; 0x1048 <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    105e:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
SPI_receive();
    1062:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    1066:	0e 94 17 07 	call	0xe2e	; 0xe2e <SPI_receive>
SD_CS_DEASSERT;
    106a:	c4 9a       	sbi	0x18, 4	; 24

return 0;
}
    106c:	81 2f       	mov	r24, r17
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	08 95       	ret

00001076 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    1084:	1f 5f       	subi	r17, 0xFF	; 255
    1086:	1a 30       	cpi	r17, 0x0A	; 10
    1088:	d1 f7       	brne	.-12     	; 0x107e <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    108a:	c4 98       	cbi	0x18, 4	; 24
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
   retry++;
    109e:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
    10a0:	c1 32       	cpi	r28, 0x21	; 33
    10a2:	d1 05       	cpc	r29, r1
    10a4:	11 f4       	brne	.+4      	; 0x10aa <SD_init+0x34>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	68 c0       	rjmp	.+208    	; 0x117a <SD_init+0x104>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	89 f7       	brne	.-30     	; 0x1090 <SD_init+0x1a>

SD_CS_DEASSERT;
    10ae:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit (0xff);
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
SPI_transmit (0xff);
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	0e 94 12 07 	call	0xe24	; 0xe24 <SPI_transmit>
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
    10be:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    10c0:	88 e0       	ldi	r24, 0x08	; 8
    10c2:	4a ea       	ldi	r20, 0xAA	; 170
    10c4:	51 e0       	ldi	r21, 0x01	; 1
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
retry++;
    10ce:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    10d0:	cf 3f       	cpi	r28, 0xFF	; 255
    10d2:	d1 05       	cpc	r29, r1
    10d4:	59 f4       	brne	.+22     	; 0x10ec <SD_init+0x76>
   {
	  TX_NEWLINE;
    10d6:	8d e0       	ldi	r24, 0x0D	; 13
    10d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    10dc:	8a e0       	ldi	r24, 0x0A	; 10
    10de:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 29 03 	sts	0x0329, r24
    10e8:	11 e0       	ldi	r17, 0x01	; 1
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <SD_init+0x7c>
	  break;
   } //time out

}while(response != 0x01);
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	41 f7       	brne	.-48     	; 0x10c0 <SD_init+0x4a>
    10f0:	12 e0       	ldi	r17, 0x02	; 2
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    10f6:	87 e3       	ldi	r24, 0x37	; 55
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    1104:	89 e2       	ldi	r24, 0x29	; 41
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e4       	ldi	r23, 0x40	; 64
    110e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>

retry++;
    1112:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    1114:	cf 3f       	cpi	r28, 0xFF	; 255
    1116:	d1 05       	cpc	r29, r1
    1118:	41 f4       	brne	.+16     	; 0x112a <SD_init+0xb4>
   {
      TX_NEWLINE;
    111a:	8d e0       	ldi	r24, 0x0D	; 13
    111c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1120:	8a e0       	ldi	r24, 0x0A	; 10
    1122:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	28 c0       	rjmp	.+80     	; 0x117a <SD_init+0x104>
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    112a:	88 23       	and	r24, r24
    112c:	21 f7       	brne	.-56     	; 0x10f6 <SD_init+0x80>


retry = 0;
SDHC_flag = 0;
    112e:	10 92 b1 02 	sts	0x02B1, r1

if (SD_version == 2)
    1132:	12 30       	cpi	r17, 0x02	; 2
    1134:	11 f5       	brne	.+68     	; 0x117a <SD_init+0x104>
    1136:	c0 e0       	ldi	r28, 0x00	; 0
    1138:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    113a:	8a e3       	ldi	r24, 0x3A	; 58
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	0e 94 1d 07 	call	0xe3a	; 0xe3a <SD_sendCommand>
	 retry++;
    1148:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
    114a:	cf 3f       	cpi	r28, 0xFF	; 255
    114c:	d1 05       	cpc	r29, r1
    114e:	49 f4       	brne	.+18     	; 0x1162 <SD_init+0xec>
     {
       TX_NEWLINE;
    1150:	8d e0       	ldi	r24, 0x0D	; 13
    1152:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1156:	8a e0       	ldi	r24, 0x0A	; 10
    1158:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
	   cardType = 0;
    115c:	10 92 29 03 	sts	0x0329, r1
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <SD_init+0xf0>
	   break;
     } //time out

   }while(response != 0x00);
    1162:	88 23       	and	r24, r24
    1164:	51 f7       	brne	.-44     	; 0x113a <SD_init+0xc4>

   if(SDHC_flag == 1) cardType = 2;
    1166:	80 91 b1 02 	lds	r24, 0x02B1
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	11 f4       	brne	.+4      	; 0x1172 <SD_init+0xfc>
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <SD_init+0xfe>
   else cardType = 3;
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	80 93 29 03 	sts	0x0329, r24
    1178:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	08 95       	ret

00001182 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    118a:	20 91 ab 02 	lds	r18, 0x02AB
    118e:	30 91 ac 02 	lds	r19, 0x02AC
    1192:	e0 90 93 00 	lds	r14, 0x0093
    1196:	f0 90 94 00 	lds	r15, 0x0094
    119a:	00 91 95 00 	lds	r16, 0x0095
    119e:	10 91 96 00 	lds	r17, 0x0096
    11a2:	62 50       	subi	r22, 0x02	; 2
    11a4:	70 40       	sbci	r23, 0x00	; 0
    11a6:	80 40       	sbci	r24, 0x00	; 0
    11a8:	90 40       	sbci	r25, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	2e 0d       	add	r18, r14
    11b8:	3f 1d       	adc	r19, r15
    11ba:	40 1f       	adc	r20, r16
    11bc:	51 1f       	adc	r21, r17
}
    11be:	b9 01       	movw	r22, r18
    11c0:	ca 01       	movw	r24, r20
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	08 95       	ret

000011cc <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
    11cc:	8f 92       	push	r8
    11ce:	9f 92       	push	r9
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	64 97       	sbiw	r28, 0x14	; 20
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	98 2e       	mov	r9, r24
    11f4:	6a 01       	movw	r12, r20
    11f6:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
    11f8:	de 01       	movw	r26, r28
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	e2 e7       	ldi	r30, 0x72	; 114
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	84 e1       	ldi	r24, 0x14	; 20
    1202:	01 90       	ld	r0, Z+
    1204:	0d 92       	st	X+, r0
    1206:	81 50       	subi	r24, 0x01	; 1
    1208:	e1 f7       	brne	.-8      	; 0x1202 <displayMemory+0x36>
    120a:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
    120c:	8c e2       	ldi	r24, 0x2C	; 44
    120e:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
    1210:	05 30       	cpi	r16, 0x05	; 5
    1212:	11 f0       	breq	.+4      	; 0x1218 <displayMemory+0x4c>
    1214:	09 30       	cpi	r16, 0x09	; 9
    1216:	29 f4       	brne	.+10     	; 0x1222 <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
    1218:	fe 01       	movw	r30, r28
    121a:	e0 0f       	add	r30, r16
    121c:	f1 1d       	adc	r31, r1
    121e:	80 82       	st	Z, r8
	   i--;
    1220:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    1222:	5e 01       	movw	r10, r28
    1224:	a0 0e       	add	r10, r16
    1226:	b1 1c       	adc	r11, r1
    1228:	c7 01       	movw	r24, r14
    122a:	b6 01       	movw	r22, r12
    122c:	2a e0       	ldi	r18, 0x0A	; 10
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    1238:	60 63       	ori	r22, 0x30	; 48
    123a:	f5 01       	movw	r30, r10
    123c:	60 83       	st	Z, r22
    memory /= 10;
    123e:	c7 01       	movw	r24, r14
    1240:	b6 01       	movw	r22, r12
    1242:	2a e0       	ldi	r18, 0x0A	; 10
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    124e:	c9 01       	movw	r24, r18
    1250:	da 01       	movw	r26, r20
    1252:	6c 01       	movw	r12, r24
    1254:	7d 01       	movw	r14, r26
	if(memory == 0) break;
    1256:	c1 14       	cp	r12, r1
    1258:	d1 04       	cpc	r13, r1
    125a:	e1 04       	cpc	r14, r1
    125c:	f1 04       	cpc	r15, r1
    125e:	11 f0       	breq	.+4      	; 0x1264 <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1260:	01 50       	subi	r16, 0x01	; 1
    1262:	b1 f6       	brne	.-84     	; 0x1210 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    1264:	f1 e0       	ldi	r31, 0x01	; 1
    1266:	9f 16       	cp	r9, r31
    1268:	11 f4       	brne	.+4      	; 0x126e <displayMemory+0xa2>
    126a:	8b e4       	ldi	r24, 0x4B	; 75
    126c:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 11 03 	call	0x622	; 0x622 <transmitString>
}
    1276:	64 96       	adiw	r28, 0x14	; 20
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	9f 90       	pop	r9
    1296:	8f 90       	pop	r8
    1298:	08 95       	ret

0000129a <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    12b2:	60 78       	andi	r22, 0x80	; 128
    12b4:	3b 01       	movw	r6, r22
    12b6:	4c 01       	movw	r8, r24
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	66 0c       	add	r6, r6
    12bc:	77 1c       	adc	r7, r7
    12be:	88 1c       	adc	r8, r8
    12c0:	99 1c       	adc	r9, r9
    12c2:	2a 95       	dec	r18
    12c4:	d1 f7       	brne	.-12     	; 0x12ba <searchNextFreeCluster+0x20>
    12c6:	5b 01       	movw	r10, r22
    12c8:	6c 01       	movw	r12, r24
    12ca:	50 c0       	rjmp	.+160    	; 0x136c <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    12cc:	e0 90 b6 02 	lds	r14, 0x02B6
    12d0:	f0 90 b7 02 	lds	r15, 0x02B7
    12d4:	20 91 9b 00 	lds	r18, 0x009B
    12d8:	30 91 9c 00 	lds	r19, 0x009C
      SD_readSingleBlock(sector);
    12dc:	00 e0       	ldi	r16, 0x00	; 0
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	80 91 ad 02 	lds	r24, 0x02AD
    12e4:	90 91 ae 02 	lds	r25, 0x02AE
    12e8:	a0 91 af 02 	lds	r26, 0x02AF
    12ec:	b0 91 b0 02 	lds	r27, 0x02B0
    12f0:	e8 0e       	add	r14, r24
    12f2:	f9 1e       	adc	r15, r25
    12f4:	0a 1f       	adc	r16, r26
    12f6:	1b 1f       	adc	r17, r27
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	c4 01       	movw	r24, r8
    12fe:	b3 01       	movw	r22, r6
    1300:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    1304:	e2 0e       	add	r14, r18
    1306:	f3 1e       	adc	r15, r19
    1308:	04 1f       	adc	r16, r20
    130a:	15 1f       	adc	r17, r21
    130c:	c8 01       	movw	r24, r16
    130e:	b7 01       	movw	r22, r14
    1310:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
    1314:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    1316:	e6 2f       	mov	r30, r22
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	e5 55       	subi	r30, 0x55	; 85
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	80 81       	ld	r24, Z
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	a2 81       	ldd	r26, Z+2	; 0x02
    132c:	b3 81       	ldd	r27, Z+3	; 0x03
    132e:	bf 70       	andi	r27, 0x0F	; 15
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	a1 05       	cpc	r26, r1
    1334:	b1 05       	cpc	r27, r1
    1336:	39 f4       	brne	.+14     	; 0x1346 <searchNextFreeCluster+0xac>
            return(cluster+i);
    1338:	a6 01       	movw	r20, r12
    133a:	95 01       	movw	r18, r10
    133c:	26 0f       	add	r18, r22
    133e:	31 1d       	adc	r19, r1
    1340:	41 1d       	adc	r20, r1
    1342:	51 1d       	adc	r21, r1
    1344:	25 c0       	rjmp	.+74     	; 0x1390 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    1346:	6f 5f       	subi	r22, 0xFF	; 255
    1348:	60 38       	cpi	r22, 0x80	; 128
    134a:	29 f7       	brne	.-54     	; 0x1316 <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 e0       	ldi	r26, 0x00	; 0
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	a8 0e       	add	r10, r24
    1356:	b9 1e       	adc	r11, r25
    1358:	ca 1e       	adc	r12, r26
    135a:	db 1e       	adc	r13, r27
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	a0 e0       	ldi	r26, 0x00	; 0
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	68 0e       	add	r6, r24
    1366:	79 1e       	adc	r7, r25
    1368:	8a 1e       	adc	r8, r26
    136a:	9b 1e       	adc	r9, r27
    136c:	80 91 9d 00 	lds	r24, 0x009D
    1370:	90 91 9e 00 	lds	r25, 0x009E
    1374:	a0 91 9f 00 	lds	r26, 0x009F
    1378:	b0 91 a0 00 	lds	r27, 0x00A0
    137c:	a8 16       	cp	r10, r24
    137e:	b9 06       	cpc	r11, r25
    1380:	ca 06       	cpc	r12, r26
    1382:	db 06       	cpc	r13, r27
    1384:	08 f4       	brcc	.+2      	; 0x1388 <searchNextFreeCluster+0xee>
    1386:	a2 cf       	rjmp	.-188    	; 0x12cc <searchNextFreeCluster+0x32>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    1390:	b9 01       	movw	r22, r18
    1392:	ca 01       	movw	r24, r20
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	9f 90       	pop	r9
    13a6:	8f 90       	pop	r8
    13a8:	7f 90       	pop	r7
    13aa:	6f 90       	pop	r6
    13ac:	08 95       	ret

000013ae <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	2b 97       	sbiw	r28, 0x0b	; 11
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	8c 01       	movw	r16, r24
    13c8:	58 2f       	mov	r21, r24
    13ca:	a1 2f       	mov	r26, r17
    13cc:	fc 01       	movw	r30, r24
    13ce:	40 e0       	ldi	r20, 0x00	; 0
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
    13d0:	80 81       	ld	r24, Z
    13d2:	8e 32       	cpi	r24, 0x2E	; 46
    13d4:	19 f4       	brne	.+6      	; 0x13dc <convertFileName+0x2e>

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    13d6:	49 30       	cpi	r20, 0x09	; 9
    13d8:	30 f0       	brcs	.+12     	; 0x13e6 <convertFileName+0x38>
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    13dc:	4f 5f       	subi	r20, 0xFF	; 255
    13de:	31 96       	adiw	r30, 0x01	; 1
    13e0:	4c 30       	cpi	r20, 0x0C	; 12
    13e2:	b1 f7       	brne	.-20     	; 0x13d0 <convertFileName+0x22>
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <convertFileName+0x4a>
    13e6:	be 01       	movw	r22, r28
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	85 2f       	mov	r24, r21
    13ee:	9a 2f       	mov	r25, r26
    13f0:	9c 01       	movw	r18, r24
    13f2:	f9 01       	movw	r30, r18
    13f4:	db 01       	movw	r26, r22
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <convertFileName+0x5a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    13f8:	86 e0       	ldi	r24, 0x06	; 6
    13fa:	93 e0       	ldi	r25, 0x03	; 3
    13fc:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	52 c0       	rjmp	.+164    	; 0x14a8 <convertFileName+0xfa>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    1404:	81 91       	ld	r24, Z+
    1406:	8d 93       	st	X+, r24
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
    1408:	8e 2f       	mov	r24, r30
    140a:	85 1b       	sub	r24, r21
    140c:	84 17       	cp	r24, r20
    140e:	d0 f3       	brcs	.-12     	; 0x1404 <convertFileName+0x56>
    1410:	84 2f       	mov	r24, r20
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    1412:	9e 01       	movw	r18, r28
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <convertFileName+0x78>
    141c:	f9 01       	movw	r30, r18
    141e:	e8 0f       	add	r30, r24
    1420:	f1 1d       	adc	r31, r1
    1422:	90 83       	st	Z, r25
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	c9 f7       	brne	.-14     	; 0x141c <convertFileName+0x6e>
  fileNameFAT[k] = ' ';

j++;
    142a:	24 2f       	mov	r18, r20
    142c:	2f 5f       	subi	r18, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    142e:	ae 01       	movw	r20, r28
    1430:	4f 5f       	subi	r20, 0xFF	; 255
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	30 e2       	ldi	r19, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    1436:	f8 01       	movw	r30, r16
    1438:	e2 0f       	add	r30, r18
    143a:	f1 1d       	adc	r31, r1
    143c:	90 81       	ld	r25, Z
    143e:	99 23       	and	r25, r25
    1440:	59 f0       	breq	.+22     	; 0x1458 <convertFileName+0xaa>
    fileNameFAT[k] = fileName[j++];
    1442:	fa 01       	movw	r30, r20
    1444:	e8 0f       	add	r30, r24
    1446:	f1 1d       	adc	r31, r1
    1448:	90 83       	st	Z, r25
    144a:	2f 5f       	subi	r18, 0xFF	; 255
    144c:	07 c0       	rjmp	.+14     	; 0x145c <convertFileName+0xae>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    144e:	fa 01       	movw	r30, r20
    1450:	e8 0f       	add	r30, r24
    1452:	f1 1d       	adc	r31, r1
    1454:	30 83       	st	Z, r19
    1456:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    1458:	8b 30       	cpi	r24, 0x0B	; 11
    145a:	c8 f3       	brcs	.-14     	; 0x144e <convertFileName+0xa0>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	8b 30       	cpi	r24, 0x0B	; 11
    1460:	50 f3       	brcs	.-44     	; 0x1436 <convertFileName+0x88>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    1462:	9e 01       	movw	r18, r28
    1464:	24 5f       	subi	r18, 0xF4	; 244
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    1468:	fb 01       	movw	r30, r22
    146a:	90 81       	ld	r25, Z
    146c:	89 2f       	mov	r24, r25
    146e:	81 56       	subi	r24, 0x61	; 97
    1470:	8a 31       	cpi	r24, 0x1A	; 26
    1472:	10 f4       	brcc	.+4      	; 0x1478 <convertFileName+0xca>
    fileNameFAT[j] -= 0x20;
    1474:	90 52       	subi	r25, 0x20	; 32
    1476:	90 83       	st	Z, r25
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    147c:	62 17       	cp	r22, r18
    147e:	73 07       	cpc	r23, r19
    1480:	99 f7       	brne	.-26     	; 0x1468 <convertFileName+0xba>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    1486:	ae 01       	movw	r20, r28
    1488:	4f 5f       	subi	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	f8 01       	movw	r30, r16
    148e:	e2 0f       	add	r30, r18
    1490:	f3 1f       	adc	r31, r19
    1492:	da 01       	movw	r26, r20
    1494:	a2 0f       	add	r26, r18
    1496:	b3 1f       	adc	r27, r19
    1498:	8c 91       	ld	r24, X
    149a:	80 83       	st	Z, r24
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	3f 4f       	sbci	r19, 0xFF	; 255

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    14a0:	2b 30       	cpi	r18, 0x0B	; 11
    14a2:	31 05       	cpc	r19, r1
    14a4:	99 f7       	brne	.-26     	; 0x148c <convertFileName+0xde>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
  fileName[j] = fileNameFAT[j];

return 0;
}
    14a8:	2b 96       	adiw	r28, 0x0b	; 11
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	d8 2e       	mov	r13, r24
    14cc:	c6 2e       	mov	r12, r22
    14ce:	79 01       	movw	r14, r18
    14d0:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
    14d2:	60 91 ad 02 	lds	r22, 0x02AD
    14d6:	70 91 ae 02 	lds	r23, 0x02AE
    14da:	80 91 af 02 	lds	r24, 0x02AF
    14de:	90 91 b0 02 	lds	r25, 0x02B0
    14e2:	6f 5f       	subi	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	8f 4f       	sbci	r24, 0xFF	; 255
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    14ee:	80 91 ab 00 	lds	r24, 0x00AB
    14f2:	90 91 ac 00 	lds	r25, 0x00AC
    14f6:	a0 91 ad 00 	lds	r26, 0x00AD
    14fa:	b0 91 ae 00 	lds	r27, 0x00AE
    14fe:	82 55       	subi	r24, 0x52	; 82
    1500:	92 45       	sbci	r25, 0x52	; 82
    1502:	a1 46       	sbci	r26, 0x61	; 97
    1504:	b1 44       	sbci	r27, 0x41	; 65
    1506:	09 f0       	breq	.+2      	; 0x150a <getSetFreeCluster+0x4c>
    1508:	54 c0       	rjmp	.+168    	; 0x15b2 <getSetFreeCluster+0xf4>
    150a:	80 91 8f 02 	lds	r24, 0x028F
    150e:	90 91 90 02 	lds	r25, 0x0290
    1512:	a0 91 91 02 	lds	r26, 0x0291
    1516:	b0 91 92 02 	lds	r27, 0x0292
    151a:	82 57       	subi	r24, 0x72	; 114
    151c:	92 47       	sbci	r25, 0x72	; 114
    151e:	a1 44       	sbci	r26, 0x41	; 65
    1520:	b1 46       	sbci	r27, 0x61	; 97
    1522:	09 f0       	breq	.+2      	; 0x1526 <getSetFreeCluster+0x68>
    1524:	46 c0       	rjmp	.+140    	; 0x15b2 <getSetFreeCluster+0xf4>
    1526:	80 91 a7 02 	lds	r24, 0x02A7
    152a:	90 91 a8 02 	lds	r25, 0x02A8
    152e:	a0 91 a9 02 	lds	r26, 0x02A9
    1532:	b0 91 aa 02 	lds	r27, 0x02AA
    1536:	80 50       	subi	r24, 0x00	; 0
    1538:	90 40       	sbci	r25, 0x00	; 0
    153a:	a5 45       	sbci	r26, 0x55	; 85
    153c:	ba 4a       	sbci	r27, 0xAA	; 170
    153e:	c9 f5       	brne	.+114    	; 0x15b2 <getSetFreeCluster+0xf4>
  return 0xffffffff;

 if(get_set == GET)
    1540:	cc 20       	and	r12, r12
    1542:	a9 f4       	brne	.+42     	; 0x156e <getSetFreeCluster+0xb0>
 {
   if(totOrNext == TOTAL_FREE)
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	d8 16       	cp	r13, r24
    1548:	49 f4       	brne	.+18     	; 0x155c <getSetFreeCluster+0x9e>
      return(FS->freeClusterCount);
    154a:	20 91 93 02 	lds	r18, 0x0293
    154e:	30 91 94 02 	lds	r19, 0x0294
    1552:	40 91 95 02 	lds	r20, 0x0295
    1556:	50 91 96 02 	lds	r21, 0x0296
    155a:	2f c0       	rjmp	.+94     	; 0x15ba <getSetFreeCluster+0xfc>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    155c:	20 91 97 02 	lds	r18, 0x0297
    1560:	30 91 98 02 	lds	r19, 0x0298
    1564:	40 91 99 02 	lds	r20, 0x0299
    1568:	50 91 9a 02 	lds	r21, 0x029A
    156c:	26 c0       	rjmp	.+76     	; 0x15ba <getSetFreeCluster+0xfc>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    156e:	21 e0       	ldi	r18, 0x01	; 1
    1570:	d2 16       	cp	r13, r18
    1572:	49 f4       	brne	.+18     	; 0x1586 <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
    1574:	e0 92 93 02 	sts	0x0293, r14
    1578:	f0 92 94 02 	sts	0x0294, r15
    157c:	00 93 95 02 	sts	0x0295, r16
    1580:	10 93 96 02 	sts	0x0296, r17
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    1586:	e0 92 97 02 	sts	0x0297, r14
    158a:	f0 92 98 02 	sts	0x0298, r15
    158e:	00 93 99 02 	sts	0x0299, r16
    1592:	10 93 9a 02 	sts	0x029A, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    1596:	60 91 ad 02 	lds	r22, 0x02AD
    159a:	70 91 ae 02 	lds	r23, 0x02AE
    159e:	80 91 af 02 	lds	r24, 0x02AF
    15a2:	90 91 b0 02 	lds	r25, 0x02B0
    15a6:	6f 5f       	subi	r22, 0xFF	; 255
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>
 }
 return 0xffffffff;
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f ef       	ldi	r20, 0xFF	; 255
    15b8:	5f ef       	ldi	r21, 0xFF	; 255
}
    15ba:	b9 01       	movw	r22, r18
    15bc:	ca 01       	movw	r24, r20
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	08 95       	ret

000015cc <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	d8 2e       	mov	r13, r24
    15d8:	db 01       	movw	r26, r22
    15da:	ca 01       	movw	r24, r20
    15dc:	e9 e0       	ldi	r30, 0x09	; 9
    15de:	b6 95       	lsr	r27
    15e0:	a7 95       	ror	r26
    15e2:	97 95       	ror	r25
    15e4:	87 95       	ror	r24
    15e6:	ea 95       	dec	r30
    15e8:	d1 f7       	brne	.-12     	; 0x15de <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    15ea:	51 70       	andi	r21, 0x01	; 1
    15ec:	60 70       	andi	r22, 0x00	; 0
    15ee:	70 70       	andi	r23, 0x00	; 0
    15f0:	41 15       	cp	r20, r1
    15f2:	51 05       	cpc	r21, r1
    15f4:	61 05       	cpc	r22, r1
    15f6:	71 05       	cpc	r23, r1
    15f8:	19 f4       	brne	.+6      	; 0x1600 <freeMemoryUpdate+0x34>
    15fa:	ac 01       	movw	r20, r24
    15fc:	bd 01       	movw	r22, r26
    15fe:	06 c0       	rjmp	.+12     	; 0x160c <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    1600:	ac 01       	movw	r20, r24
    1602:	bd 01       	movw	r22, r26
    1604:	4f 5f       	subi	r20, 0xFF	; 255
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	6f 4f       	sbci	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	db 01       	movw	r26, r22
    160e:	ca 01       	movw	r24, r20
    1610:	33 e0       	ldi	r19, 0x03	; 3
    1612:	b6 95       	lsr	r27
    1614:	a7 95       	ror	r26
    1616:	97 95       	ror	r25
    1618:	87 95       	ror	r24
    161a:	3a 95       	dec	r19
    161c:	d1 f7       	brne	.-12     	; 0x1612 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    161e:	47 70       	andi	r20, 0x07	; 7
    1620:	50 70       	andi	r21, 0x00	; 0
    1622:	60 70       	andi	r22, 0x00	; 0
    1624:	70 70       	andi	r23, 0x00	; 0
    1626:	41 15       	cp	r20, r1
    1628:	51 05       	cpc	r21, r1
    162a:	61 05       	cpc	r22, r1
    162c:	71 05       	cpc	r23, r1
    162e:	19 f4       	brne	.+6      	; 0x1636 <freeMemoryUpdate+0x6a>
    1630:	7c 01       	movw	r14, r24
    1632:	8d 01       	movw	r16, r26
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    1636:	7c 01       	movw	r14, r24
    1638:	8d 01       	movw	r16, r26
    163a:	08 94       	sec
    163c:	e1 1c       	adc	r14, r1
    163e:	f1 1c       	adc	r15, r1
    1640:	01 1d       	adc	r16, r1
    1642:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    1644:	80 91 36 03 	lds	r24, 0x0336
    1648:	88 23       	and	r24, r24
    164a:	d9 f0       	breq	.+54     	; 0x1682 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>
	if(flag == ADD)
    165c:	dd 20       	and	r13, r13
    165e:	39 f4       	brne	.+14     	; 0x166e <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	2e 0d       	add	r18, r14
    1666:	3f 1d       	adc	r19, r15
    1668:	40 1f       	adc	r20, r16
    166a:	51 1f       	adc	r21, r17
    166c:	06 c0       	rjmp	.+12     	; 0x167a <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	2e 19       	sub	r18, r14
    1674:	3f 09       	sbc	r19, r15
    1676:	40 0b       	sbc	r20, r16
    1678:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>
  }
}
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	08 95       	ret

0000168e <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    16a6:	10 92 ad 02 	sts	0x02AD, r1
    16aa:	10 92 ae 02 	sts	0x02AE, r1
    16ae:	10 92 af 02 	sts	0x02AF, r1
    16b2:	10 92 b0 02 	sts	0x02B0, r1

SD_readSingleBlock(0);
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    16c2:	80 91 ab 00 	lds	r24, 0x00AB
    16c6:	89 3e       	cpi	r24, 0xE9	; 233
    16c8:	19 f1       	breq	.+70     	; 0x1710 <getBootSectorData+0x82>
    16ca:	8b 3e       	cpi	r24, 0xEB	; 235
    16cc:	09 f1       	breq	.+66     	; 0x1710 <getBootSectorData+0x82>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    16ce:	80 91 a9 02 	lds	r24, 0x02A9
    16d2:	90 91 aa 02 	lds	r25, 0x02AA
    16d6:	85 55       	subi	r24, 0x55	; 85
    16d8:	9a 4a       	sbci	r25, 0xAA	; 170
    16da:	09 f0       	breq	.+2      	; 0x16de <getBootSectorData+0x50>
    16dc:	b0 c0       	rjmp	.+352    	; 0x183e <getBootSectorData+0x1b0>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    16de:	60 91 71 02 	lds	r22, 0x0271
    16e2:	70 91 72 02 	lds	r23, 0x0272
    16e6:	80 91 73 02 	lds	r24, 0x0273
    16ea:	90 91 74 02 	lds	r25, 0x0274
    16ee:	60 93 ad 02 	sts	0x02AD, r22
    16f2:	70 93 ae 02 	sts	0x02AE, r23
    16f6:	80 93 af 02 	sts	0x02AF, r24
    16fa:	90 93 b0 02 	sts	0x02B0, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
    16fe:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    1702:	80 91 ab 00 	lds	r24, 0x00AB
    1706:	89 3e       	cpi	r24, 0xE9	; 233
    1708:	19 f0       	breq	.+6      	; 0x1710 <getBootSectorData+0x82>
    170a:	8b 3e       	cpi	r24, 0xEB	; 235
    170c:	09 f0       	breq	.+2      	; 0x1710 <getBootSectorData+0x82>
    170e:	97 c0       	rjmp	.+302    	; 0x183e <getBootSectorData+0x1b0>
}

bytesPerSector = bpb->bytesPerSector;
    1710:	80 91 b6 00 	lds	r24, 0x00B6
    1714:	90 91 b7 00 	lds	r25, 0x00B7
    1718:	90 93 9c 00 	sts	0x009C, r25
    171c:	80 93 9b 00 	sts	0x009B, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    1720:	80 91 b8 00 	lds	r24, 0x00B8
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	90 93 ac 02 	sts	0x02AC, r25
    172a:	80 93 ab 02 	sts	0x02AB, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    172e:	a0 90 b9 00 	lds	r10, 0x00B9
    1732:	b0 90 ba 00 	lds	r11, 0x00BA
    1736:	b0 92 b7 02 	sts	0x02B7, r11
    173a:	a0 92 b6 02 	sts	0x02B6, r10
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    173e:	80 91 d7 00 	lds	r24, 0x00D7
    1742:	90 91 d8 00 	lds	r25, 0x00D8
    1746:	a0 91 d9 00 	lds	r26, 0x00D9
    174a:	b0 91 da 00 	lds	r27, 0x00DA
    174e:	80 93 a1 00 	sts	0x00A1, r24
    1752:	90 93 a2 00 	sts	0x00A2, r25
    1756:	a0 93 a3 00 	sts	0x00A3, r26
    175a:	b0 93 a4 00 	sts	0x00A4, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    175e:	e0 90 b6 02 	lds	r14, 0x02B6
    1762:	f0 90 b7 02 	lds	r15, 0x02B7
    1766:	60 91 bb 00 	lds	r22, 0x00BB
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	20 91 cf 00 	lds	r18, 0x00CF
    1774:	30 91 d0 00 	lds	r19, 0x00D0
    1778:	40 91 d1 00 	lds	r20, 0x00D1
    177c:	50 91 d2 00 	lds	r21, 0x00D2
    1780:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    1784:	3b 01       	movw	r6, r22
    1786:	4c 01       	movw	r8, r24
    1788:	00 e0       	ldi	r16, 0x00	; 0
    178a:	10 e0       	ldi	r17, 0x00	; 0
    178c:	80 91 c7 00 	lds	r24, 0x00C7
    1790:	90 91 c8 00 	lds	r25, 0x00C8
    1794:	a0 91 c9 00 	lds	r26, 0x00C9
    1798:	b0 91 ca 00 	lds	r27, 0x00CA
    179c:	e8 0e       	add	r14, r24
    179e:	f9 1e       	adc	r15, r25
    17a0:	0a 1f       	adc	r16, r26
    17a2:	1b 1f       	adc	r17, r27
    17a4:	e6 0c       	add	r14, r6
    17a6:	f7 1c       	adc	r15, r7
    17a8:	08 1d       	adc	r16, r8
    17aa:	19 1d       	adc	r17, r9
    17ac:	e0 92 93 00 	sts	0x0093, r14
    17b0:	f0 92 94 00 	sts	0x0094, r15
    17b4:	00 93 95 00 	sts	0x0095, r16
    17b8:	10 93 96 00 	sts	0x0096, r17

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    17bc:	20 91 ab 02 	lds	r18, 0x02AB
    17c0:	30 91 ac 02 	lds	r19, 0x02AC
    17c4:	cc 24       	eor	r12, r12
    17c6:	dd 24       	eor	r13, r13
    17c8:	60 91 cb 00 	lds	r22, 0x00CB
    17cc:	70 91 cc 00 	lds	r23, 0x00CC
    17d0:	80 91 cd 00 	lds	r24, 0x00CD
    17d4:	90 91 ce 00 	lds	r25, 0x00CE
    17d8:	6a 19       	sub	r22, r10
    17da:	7b 09       	sbc	r23, r11
    17dc:	8c 09       	sbc	r24, r12
    17de:	9d 09       	sbc	r25, r13
    17e0:	66 19       	sub	r22, r6
    17e2:	77 09       	sbc	r23, r7
    17e4:	88 09       	sbc	r24, r8
    17e6:	99 09       	sbc	r25, r9
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    17f0:	c9 01       	movw	r24, r18
    17f2:	da 01       	movw	r26, r20
    17f4:	80 93 9d 00 	sts	0x009D, r24
    17f8:	90 93 9e 00 	sts	0x009E, r25
    17fc:	a0 93 9f 00 	sts	0x009F, r26
    1800:	b0 93 a0 00 	sts	0x00A0, r27
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>
    1814:	20 91 9d 00 	lds	r18, 0x009D
    1818:	30 91 9e 00 	lds	r19, 0x009E
    181c:	40 91 9f 00 	lds	r20, 0x009F
    1820:	50 91 a0 00 	lds	r21, 0x00A0
    1824:	26 17       	cp	r18, r22
    1826:	37 07       	cpc	r19, r23
    1828:	48 07       	cpc	r20, r24
    182a:	59 07       	cpc	r21, r25
    182c:	18 f4       	brcc	.+6      	; 0x1834 <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
    182e:	10 92 36 03 	sts	0x0336, r1
    1832:	03 c0       	rjmp	.+6      	; 0x183a <getBootSectorData+0x1ac>
else
	 freeClusterCountUpdated = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	80 93 36 03 	sts	0x0336, r24
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <getBootSectorData+0x1b2>
    183e:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	bf 90       	pop	r11
    184e:	af 90       	pop	r10
    1850:	9f 90       	pop	r9
    1852:	8f 90       	pop	r8
    1854:	7f 90       	pop	r7
    1856:	6f 90       	pop	r6
    1858:	08 95       	ret

0000185a <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    185a:	4f 92       	push	r4
    185c:	5f 92       	push	r5
    185e:	6f 92       	push	r6
    1860:	7f 92       	push	r7
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	5b 01       	movw	r10, r22
    187c:	6c 01       	movw	r12, r24
    187e:	84 2e       	mov	r8, r20
    1880:	28 01       	movw	r4, r16
    1882:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1884:	80 91 b6 02 	lds	r24, 0x02B6
    1888:	90 91 b7 02 	lds	r25, 0x02B7
    188c:	f2 e0       	ldi	r31, 0x02	; 2
    188e:	aa 0c       	add	r10, r10
    1890:	bb 1c       	adc	r11, r11
    1892:	cc 1c       	adc	r12, r12
    1894:	dd 1c       	adc	r13, r13
    1896:	fa 95       	dec	r31
    1898:	d1 f7       	brne	.-12     	; 0x188e <getSetNextCluster+0x34>
    189a:	20 91 9b 00 	lds	r18, 0x009B
    189e:	30 91 9c 00 	lds	r19, 0x009C
    18a2:	7c 01       	movw	r14, r24
    18a4:	00 e0       	ldi	r16, 0x00	; 0
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	80 91 ad 02 	lds	r24, 0x02AD
    18ac:	90 91 ae 02 	lds	r25, 0x02AE
    18b0:	a0 91 af 02 	lds	r26, 0x02AF
    18b4:	b0 91 b0 02 	lds	r27, 0x02B0
    18b8:	e8 0e       	add	r14, r24
    18ba:	f9 1e       	adc	r15, r25
    18bc:	0a 1f       	adc	r16, r26
    18be:	1b 1f       	adc	r17, r27
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	c6 01       	movw	r24, r12
    18c6:	b5 01       	movw	r22, r10
    18c8:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    18cc:	e2 0e       	add	r14, r18
    18ce:	f3 1e       	adc	r15, r19
    18d0:	04 1f       	adc	r16, r20
    18d2:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    18d4:	c0 91 9b 00 	lds	r28, 0x009B
    18d8:	d0 91 9c 00 	lds	r29, 0x009C
    18dc:	99 24       	eor	r9, r9

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    18de:	c8 01       	movw	r24, r16
    18e0:	b7 01       	movw	r22, r14
    18e2:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
    18e6:	88 23       	and	r24, r24
    18e8:	21 f0       	breq	.+8      	; 0x18f2 <getSetNextCluster+0x98>
    18ea:	93 94       	inc	r9

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
    18ec:	8a e0       	ldi	r24, 0x0A	; 10
    18ee:	98 16       	cp	r9, r24
    18f0:	b1 f7       	brne	.-20     	; 0x18de <getSetNextCluster+0x84>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    18f2:	9e 01       	movw	r18, r28
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    1900:	fb 01       	movw	r30, r22
    1902:	e5 55       	subi	r30, 0x55	; 85
    1904:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
    1906:	88 20       	and	r8, r8
    1908:	31 f4       	brne	.+12     	; 0x1916 <getSetNextCluster+0xbc>
  return ((*FATEntryValue) & 0x0fffffff);
    190a:	20 81       	ld	r18, Z
    190c:	31 81       	ldd	r19, Z+1	; 0x01
    190e:	42 81       	ldd	r20, Z+2	; 0x02
    1910:	53 81       	ldd	r21, Z+3	; 0x03
    1912:	5f 70       	andi	r21, 0x0F	; 15
    1914:	0c c0       	rjmp	.+24     	; 0x192e <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    1916:	40 82       	st	Z, r4
    1918:	51 82       	std	Z+1, r5	; 0x01
    191a:	62 82       	std	Z+2, r6	; 0x02
    191c:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
    191e:	c8 01       	movw	r24, r16
    1920:	b7 01       	movw	r22, r14
    1922:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0

return (0);
}
    192e:	b9 01       	movw	r22, r18
    1930:	ca 01       	movw	r24, r20
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	9f 90       	pop	r9
    1948:	8f 90       	pop	r8
    194a:	7f 90       	pop	r7
    194c:	6f 90       	pop	r6
    194e:	5f 90       	pop	r5
    1950:	4f 90       	pop	r4
    1952:	08 95       	ret

00001954 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1954:	2f 92       	push	r2
    1956:	3f 92       	push	r3
    1958:	4f 92       	push	r4
    195a:	5f 92       	push	r5
    195c:	6f 92       	push	r6
    195e:	7f 92       	push	r7
    1960:	8f 92       	push	r8
    1962:	9f 92       	push	r9
    1964:	af 92       	push	r10
    1966:	bf 92       	push	r11
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	2a 97       	sbiw	r28, 0x0a	; 10
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	7f 83       	std	Y+7, r23	; 0x07
    198c:	6e 83       	std	Y+6, r22	; 0x06
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    198e:	a0 90 a1 00 	lds	r10, 0x00A1
    1992:	b0 90 a2 00 	lds	r11, 0x00A2
    1996:	c0 90 a3 00 	lds	r12, 0x00A3
    199a:	d0 90 a4 00 	lds	r13, 0x00A4
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    199e:	81 50       	subi	r24, 0x01	; 1
    19a0:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    19a2:	20 91 ab 02 	lds	r18, 0x02AB
    19a6:	30 91 ac 02 	lds	r19, 0x02AC
    19aa:	e0 90 93 00 	lds	r14, 0x0093
    19ae:	f0 90 94 00 	lds	r15, 0x0094
    19b2:	00 91 95 00 	lds	r16, 0x0095
    19b6:	10 91 96 00 	lds	r17, 0x0096
    19ba:	c6 01       	movw	r24, r12
    19bc:	b5 01       	movw	r22, r10
    19be:	62 50       	subi	r22, 0x02	; 2
    19c0:	70 40       	sbci	r23, 0x00	; 0
    19c2:	80 40       	sbci	r24, 0x00	; 0
    19c4:	90 40       	sbci	r25, 0x00	; 0
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    19ce:	1b 01       	movw	r2, r22
    19d0:	2c 01       	movw	r4, r24
    19d2:	2e 0c       	add	r2, r14
    19d4:	3f 1c       	adc	r3, r15
    19d6:	40 1e       	adc	r4, r16
    19d8:	51 1e       	adc	r5, r17
    19da:	66 24       	eor	r6, r6
    19dc:	77 24       	eor	r7, r7
    19de:	43 01       	movw	r8, r6
    19e0:	5f c1       	rjmp	.+702    	; 0x1ca0 <findFiles+0x34c>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    19e2:	d4 01       	movw	r26, r8
    19e4:	c3 01       	movw	r24, r6
    19e6:	82 0d       	add	r24, r2
    19e8:	93 1d       	adc	r25, r3
    19ea:	a4 1d       	adc	r26, r4
    19ec:	b5 1d       	adc	r27, r5
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	ab 83       	std	Y+3, r26	; 0x03
    19f4:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	e4 2e       	mov	r14, r20
    1a02:	f1 2c       	mov	r15, r1
    1a04:	3d c1       	rjmp	.+634    	; 0x1c80 <findFiles+0x32c>
	

     for(i=0; i<bytesPerSector; i+=32)
    1a06:	8a 01       	movw	r16, r20
    1a08:	05 55       	subi	r16, 0x55	; 85
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	e5 55       	subi	r30, 0x55	; 85
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	b0 97       	sbiw	r30, 0x20	; 32
    1a14:	80 81       	ld	r24, Z
    1a16:	b0 96       	adiw	r30, 0x20	; 32
    1a18:	88 23       	and	r24, r24
    1a1a:	39 f4       	brne	.+14     	; 0x1a2a <findFiles+0xd6>
		{
		  if(flag == DELETE)
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	92 30       	cpi	r25, 0x02	; 2
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <findFiles+0xd0>
    1a22:	68 c1       	rjmp	.+720    	; 0x1cf4 <findFiles+0x3a0>
		      transmitString_F(PSTR("File does not exist!"));
    1a24:	8a e7       	ldi	r24, 0x7A	; 122
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	63 c1       	rjmp	.+710    	; 0x1cf0 <findFiles+0x39c>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1a2a:	85 3e       	cpi	r24, 0xE5	; 229
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <findFiles+0xdc>
    1a2e:	24 c1       	rjmp	.+584    	; 0x1c78 <findFiles+0x324>
    1a30:	75 97       	sbiw	r30, 0x15	; 21
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 30       	cpi	r24, 0x0F	; 15
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <findFiles+0xe6>
    1a38:	1f c1       	rjmp	.+574    	; 0x1c78 <findFiles+0x324>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1a3a:	a8 85       	ldd	r26, Y+8	; 0x08
    1a3c:	a2 30       	cpi	r26, 0x02	; 2
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <findFiles+0xee>
    1a40:	d2 c0       	rjmp	.+420    	; 0x1be6 <findFiles+0x292>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1a46:	c8 01       	movw	r24, r16
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	ae 81       	ldd	r26, Y+6	; 0x06
    1a4e:	bf 81       	ldd	r27, Y+7	; 0x07
    1a50:	a2 0f       	add	r26, r18
    1a52:	b3 1f       	adc	r27, r19
    1a54:	fc 01       	movw	r30, r24
    1a56:	90 81       	ld	r25, Z
    1a58:	8c 91       	ld	r24, X
    1a5a:	98 17       	cp	r25, r24
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <findFiles+0x10c>
    1a5e:	0c c1       	rjmp	.+536    	; 0x1c78 <findFiles+0x324>
    1a60:	82 2f       	mov	r24, r18
    1a62:	8f 5f       	subi	r24, 0xFF	; 255
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1a68:	2b 30       	cpi	r18, 0x0B	; 11
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	61 f7       	brne	.-40     	; 0x1a46 <findFiles+0xf2>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1a6e:	8b 30       	cpi	r24, 0x0B	; 11
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <findFiles+0x120>
    1a72:	02 c1       	rjmp	.+516    	; 0x1c78 <findFiles+0x324>
			{
			  if(flag == GET_FILE)
    1a74:	fd 81       	ldd	r31, Y+5	; 0x05
    1a76:	f1 30       	cpi	r31, 0x01	; 1
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <findFiles+0x128>
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <findFiles+0x1a6>
              {
			    appendFileSector = firstSector + sector;
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	ab 81       	ldd	r26, Y+3	; 0x03
    1a82:	bc 81       	ldd	r27, Y+4	; 0x04
    1a84:	80 93 37 03 	sts	0x0337, r24
    1a88:	90 93 38 03 	sts	0x0338, r25
    1a8c:	a0 93 39 03 	sts	0x0339, r26
    1a90:	b0 93 3a 03 	sts	0x033A, r27
				appendFileLocation = i;
    1a94:	ca 01       	movw	r24, r20
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	80 93 8d 00 	sts	0x008D, r24
    1a9e:	90 93 8e 00 	sts	0x008E, r25
    1aa2:	a0 93 8f 00 	sts	0x008F, r26
    1aa6:	b0 93 90 00 	sts	0x0090, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1aaa:	d8 01       	movw	r26, r16
    1aac:	54 96       	adiw	r26, 0x14	; 20
    1aae:	8d 91       	ld	r24, X+
    1ab0:	9c 91       	ld	r25, X
    1ab2:	55 97       	sbiw	r26, 0x15	; 21
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	dc 01       	movw	r26, r24
    1aba:	99 27       	eor	r25, r25
    1abc:	88 27       	eor	r24, r24
    1abe:	f8 01       	movw	r30, r16
    1ac0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ac2:	33 8d       	ldd	r19, Z+27	; 0x1b
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	82 2b       	or	r24, r18
    1aca:	93 2b       	or	r25, r19
    1acc:	a4 2b       	or	r26, r20
    1ace:	b5 2b       	or	r27, r21
    1ad0:	80 93 c1 02 	sts	0x02C1, r24
    1ad4:	90 93 c2 02 	sts	0x02C2, r25
    1ad8:	a0 93 c3 02 	sts	0x02C3, r26
    1adc:	b0 93 c4 02 	sts	0x02C4, r27
				fileSize = dir->fileSize;
    1ae0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ae2:	95 8d       	ldd	r25, Z+29	; 0x1d
    1ae4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1ae6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1ae8:	80 93 97 00 	sts	0x0097, r24
    1aec:	90 93 98 00 	sts	0x0098, r25
    1af0:	a0 93 99 00 	sts	0x0099, r26
    1af4:	b0 93 9a 00 	sts	0x009A, r27
    1af8:	ff c0       	rjmp	.+510    	; 0x1cf8 <findFiles+0x3a4>
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    1afa:	8d e0       	ldi	r24, 0x0D	; 13
    1afc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1b00:	8a e0       	ldi	r24, 0x0A	; 10
    1b02:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    1b06:	8f e6       	ldi	r24, 0x6F	; 111
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
				 TX_NEWLINE;
    1b0e:	8d e0       	ldi	r24, 0x0D	; 13
    1b10:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1b14:	8a e0       	ldi	r24, 0x0A	; 10
    1b16:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
				 TX_NEWLINE;
    1b1a:	8d e0       	ldi	r24, 0x0D	; 13
    1b1c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1b20:	8a e0       	ldi	r24, 0x0A	; 10
    1b22:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1b26:	d8 01       	movw	r26, r16
    1b28:	54 96       	adiw	r26, 0x14	; 20
    1b2a:	8d 91       	ld	r24, X+
    1b2c:	9c 91       	ld	r25, X
    1b2e:	55 97       	sbiw	r26, 0x15	; 21
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	5c 01       	movw	r10, r24
    1b36:	99 24       	eor	r9, r9
    1b38:	88 24       	eor	r8, r8
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b3e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b40:	a0 e0       	ldi	r26, 0x00	; 0
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	88 2a       	or	r8, r24
    1b46:	99 2a       	or	r9, r25
    1b48:	aa 2a       	or	r10, r26
    1b4a:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1b4c:	85 ee       	ldi	r24, 0xE5	; 229
    1b4e:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1b50:	69 81       	ldd	r22, Y+1	; 0x01
    1b52:	7a 81       	ldd	r23, Y+2	; 0x02
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1b5c:	d8 01       	movw	r26, r16
    1b5e:	5c 96       	adiw	r26, 0x1c	; 28
    1b60:	4d 91       	ld	r20, X+
    1b62:	5d 91       	ld	r21, X+
    1b64:	6d 91       	ld	r22, X+
    1b66:	7c 91       	ld	r23, X
    1b68:	5f 97       	sbiw	r26, 0x1f	; 31
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>
				 if(firstCluster < cluster)
    1b80:	86 16       	cp	r8, r22
    1b82:	97 06       	cpc	r9, r23
    1b84:	a8 06       	cpc	r10, r24
    1b86:	b9 06       	cpc	r11, r25
    1b88:	30 f4       	brcc	.+12     	; 0x1b96 <findFiles+0x242>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	a5 01       	movw	r20, r10
    1b90:	94 01       	movw	r18, r8
    1b92:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1b96:	c5 01       	movw	r24, r10
    1b98:	b4 01       	movw	r22, r8
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	00 e0       	ldi	r16, 0x00	; 0
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    1ba8:	f6 2e       	mov	r15, r22
    1baa:	e7 2e       	mov	r14, r23
    1bac:	d8 2e       	mov	r13, r24
    1bae:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	b4 01       	movw	r22, r8
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    1bc2:	8f 2d       	mov	r24, r15
    1bc4:	9e 2d       	mov	r25, r14
    1bc6:	ad 2d       	mov	r26, r13
    1bc8:	bc 2d       	mov	r27, r12
    1bca:	4c 01       	movw	r8, r24
    1bcc:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
    1bce:	b7 ef       	ldi	r27, 0xF7	; 247
    1bd0:	8b 16       	cp	r8, r27
    1bd2:	bf ef       	ldi	r27, 0xFF	; 255
    1bd4:	9b 06       	cpc	r9, r27
    1bd6:	bf ef       	ldi	r27, 0xFF	; 255
    1bd8:	ab 06       	cpc	r10, r27
    1bda:	bf e0       	ldi	r27, 0x0F	; 15
    1bdc:	bb 06       	cpc	r11, r27
    1bde:	d8 f2       	brcs	.-74     	; 0x1b96 <findFiles+0x242>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    1be0:	81 e6       	ldi	r24, 0x61	; 97
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	85 c0       	rjmp	.+266    	; 0x1cf0 <findFiles+0x39c>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1be6:	8d e0       	ldi	r24, 0x0D	; 13
    1be8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1bf2:	1a 86       	std	Y+10, r1	; 0x0a
    1bf4:	19 86       	std	Y+9, r1	; 0x09
    1bf6:	0b c0       	rjmp	.+22     	; 0x1c0e <findFiles+0x2ba>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    1bf8:	e9 85       	ldd	r30, Y+9	; 0x09
    1bfa:	e7 30       	cpi	r30, 0x07	; 7
    1bfc:	19 f4       	brne	.+6      	; 0x1c04 <findFiles+0x2b0>
    1bfe:	80 e2       	ldi	r24, 0x20	; 32
    1c00:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	9a 87       	std	Y+10, r25	; 0x0a
    1c0c:	89 87       	std	Y+9, r24	; 0x09
			   transmitByte (dir->name[j]);
    1c0e:	e9 85       	ldd	r30, Y+9	; 0x09
    1c10:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c12:	e0 0f       	add	r30, r16
    1c14:	f1 1f       	adc	r31, r17
    1c16:	80 81       	ld	r24, Z
    1c18:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1c1c:	a9 85       	ldd	r26, Y+9	; 0x09
    1c1e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c20:	1a 97       	sbiw	r26, 0x0a	; 10
    1c22:	51 f7       	brne	.-44     	; 0x1bf8 <findFiles+0x2a4>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    1c24:	8d e5       	ldi	r24, 0x5D	; 93
    1c26:	93 e0       	ldi	r25, 0x03	; 3
    1c28:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1c2c:	87 01       	movw	r16, r14
    1c2e:	05 55       	subi	r16, 0x55	; 85
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	05 51       	subi	r16, 0x15	; 21
    1c34:	10 40       	sbci	r17, 0x00	; 0
    1c36:	f8 01       	movw	r30, r16
    1c38:	80 81       	ld	r24, Z
    1c3a:	0b 5e       	subi	r16, 0xEB	; 235
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	80 31       	cpi	r24, 0x10	; 16
    1c40:	b9 f0       	breq	.+46     	; 0x1c70 <findFiles+0x31c>
    1c42:	88 30       	cpi	r24, 0x08	; 8
    1c44:	19 f4       	brne	.+6      	; 0x1c4c <findFiles+0x2f8>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1c46:	8b e4       	ldi	r24, 0x4B	; 75
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <findFiles+0x320>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     transmitString_F (PSTR("FILE" ));
    1c4c:	88 e5       	ldi	r24, 0x58	; 88
    1c4e:	93 e0       	ldi	r25, 0x03	; 3
    1c50:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
		         transmitString_F (PSTR("   "));
    1c54:	84 e5       	ldi	r24, 0x54	; 84
    1c56:	93 e0       	ldi	r25, 0x03	; 3
    1c58:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	34 97       	sbiw	r30, 0x04	; 4
    1c60:	40 81       	ld	r20, Z
    1c62:	51 81       	ldd	r21, Z+1	; 0x01
    1c64:	62 81       	ldd	r22, Z+2	; 0x02
    1c66:	73 81       	ldd	r23, Z+3	; 0x03
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <displayMemory>
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <findFiles+0x324>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1c70:	80 e5       	ldi	r24, 0x50	; 80
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
    1c78:	80 e2       	ldi	r24, 0x20	; 32
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	e8 0e       	add	r14, r24
    1c7e:	f9 1e       	adc	r15, r25
    1c80:	a7 01       	movw	r20, r14
    1c82:	40 52       	subi	r20, 0x20	; 32
    1c84:	50 40       	sbci	r21, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1c86:	80 91 9b 00 	lds	r24, 0x009B
    1c8a:	90 91 9c 00 	lds	r25, 0x009C
    1c8e:	48 17       	cp	r20, r24
    1c90:	59 07       	cpc	r21, r25
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <findFiles+0x342>
    1c94:	b8 ce       	rjmp	.-656    	; 0x1a06 <findFiles+0xb2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1c96:	08 94       	sec
    1c98:	61 1c       	adc	r6, r1
    1c9a:	71 1c       	adc	r7, r1
    1c9c:	81 1c       	adc	r8, r1
    1c9e:	91 1c       	adc	r9, r1
    1ca0:	80 91 ab 02 	lds	r24, 0x02AB
    1ca4:	90 91 ac 02 	lds	r25, 0x02AC
    1ca8:	a0 e0       	ldi	r26, 0x00	; 0
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	68 16       	cp	r6, r24
    1cae:	79 06       	cpc	r7, r25
    1cb0:	8a 06       	cpc	r8, r26
    1cb2:	9b 06       	cpc	r9, r27
    1cb4:	08 f4       	brcc	.+2      	; 0x1cb8 <findFiles+0x364>
    1cb6:	95 ce       	rjmp	.-726    	; 0x19e2 <findFiles+0x8e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1cb8:	c6 01       	movw	r24, r12
    1cba:	b5 01       	movw	r22, r10
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	10 e0       	ldi	r17, 0x00	; 0
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    1cca:	5b 01       	movw	r10, r22
    1ccc:	6c 01       	movw	r12, r24

   if(cluster > 0x0ffffff6)
    1cce:	97 ef       	ldi	r25, 0xF7	; 247
    1cd0:	a9 16       	cp	r10, r25
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	b9 06       	cpc	r11, r25
    1cd6:	9f ef       	ldi	r25, 0xFF	; 255
    1cd8:	c9 06       	cpc	r12, r25
    1cda:	9f e0       	ldi	r25, 0x0F	; 15
    1cdc:	d9 06       	cpc	r13, r25
    1cde:	50 f4       	brcc	.+20     	; 0x1cf4 <findFiles+0x3a0>
   	 return 0;
   if(cluster == 0) 
    1ce0:	a1 14       	cp	r10, r1
    1ce2:	b1 04       	cpc	r11, r1
    1ce4:	c1 04       	cpc	r12, r1
    1ce6:	d1 04       	cpc	r13, r1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <findFiles+0x398>
    1cea:	5b ce       	rjmp	.-842    	; 0x19a2 <findFiles+0x4e>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    1cec:	82 e3       	ldi	r24, 0x32	; 50
    1cee:	93 e0       	ldi	r25, 0x03	; 3
    1cf0:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
    1cf4:	00 e0       	ldi	r16, 0x00	; 0
    1cf6:	10 e0       	ldi	r17, 0x00	; 0
 }
return 0;
}
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	2a 96       	adiw	r28, 0x0a	; 10
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	bf 90       	pop	r11
    1d18:	af 90       	pop	r10
    1d1a:	9f 90       	pop	r9
    1d1c:	8f 90       	pop	r8
    1d1e:	7f 90       	pop	r7
    1d20:	6f 90       	pop	r6
    1d22:	5f 90       	pop	r5
    1d24:	4f 90       	pop	r4
    1d26:	3f 90       	pop	r3
    1d28:	2f 90       	pop	r2
    1d2a:	08 95       	ret

00001d2c <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1d32:	0e 94 d7 09 	call	0x13ae	; 0x13ae <convertFileName>
  if(error) return;
    1d36:	88 23       	and	r24, r24
    1d38:	21 f4       	brne	.+8      	; 0x1d42 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	be 01       	movw	r22, r28
    1d3e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <findFiles>
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    1d48:	2f 92       	push	r2
    1d4a:	3f 92       	push	r3
    1d4c:	4f 92       	push	r4
    1d4e:	5f 92       	push	r5
    1d50:	6f 92       	push	r6
    1d52:	7f 92       	push	r7
    1d54:	8f 92       	push	r8
    1d56:	9f 92       	push	r9
    1d58:	af 92       	push	r10
    1d5a:	bf 92       	push	r11
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <readFile+0x26>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <readFile+0x28>
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	e8 2e       	mov	r14, r24
    1d76:	8b 01       	movw	r16, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1d78:	cb 01       	movw	r24, r22
    1d7a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <convertFileName>
if(error) return 2;
    1d7e:	88 23       	and	r24, r24
    1d80:	11 f0       	breq	.+4      	; 0x1d86 <readFile+0x3e>
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	a0 c0       	rjmp	.+320    	; 0x1ec6 <readFile+0x17e>

dir = findFiles (GET_FILE, fileName); //get the file location
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	b8 01       	movw	r22, r16
    1d8a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <findFiles>
    1d8e:	9c 01       	movw	r18, r24
if(dir == 0) 
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	31 f4       	brne	.+12     	; 0x1da0 <readFile+0x58>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	ee 20       	and	r14, r14
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <readFile+0x54>
    1d9a:	95 c0       	rjmp	.+298    	; 0x1ec6 <readFile+0x17e>
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	93 c0       	rjmp	.+294    	; 0x1ec6 <readFile+0x17e>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	e8 16       	cp	r14, r24
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <readFile+0x60>
    1da6:	8f c0       	rjmp	.+286    	; 0x1ec6 <readFile+0x17e>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1da8:	d9 01       	movw	r26, r18
    1daa:	54 96       	adiw	r26, 0x14	; 20
    1dac:	8d 91       	ld	r24, X+
    1dae:	9c 91       	ld	r25, X
    1db0:	55 97       	sbiw	r26, 0x15	; 21
    1db2:	a0 e0       	ldi	r26, 0x00	; 0
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	4c 01       	movw	r8, r24
    1db8:	77 24       	eor	r7, r7
    1dba:	66 24       	eor	r6, r6
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dc0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1dc2:	a0 e0       	ldi	r26, 0x00	; 0
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	68 2a       	or	r6, r24
    1dc8:	79 2a       	or	r7, r25
    1dca:	8a 2a       	or	r8, r26
    1dcc:	9b 2a       	or	r9, r27

fileSize = dir->fileSize;
    1dce:	d9 01       	movw	r26, r18
    1dd0:	5c 96       	adiw	r26, 0x1c	; 28
    1dd2:	8d 91       	ld	r24, X+
    1dd4:	9d 91       	ld	r25, X+
    1dd6:	0d 90       	ld	r0, X+
    1dd8:	bc 91       	ld	r27, X
    1dda:	a0 2d       	mov	r26, r0
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	ab 83       	std	Y+3, r26	; 0x03
    1de2:	bc 83       	std	Y+4, r27	; 0x04

TX_NEWLINE;
    1de4:	8d e0       	ldi	r24, 0x0D	; 13
    1de6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
TX_NEWLINE;
    1df0:	8d e0       	ldi	r24, 0x0D	; 13
    1df2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1df6:	8a e0       	ldi	r24, 0x0A	; 10
    1df8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    1dfc:	22 24       	eor	r2, r2
    1dfe:	33 24       	eor	r3, r3
    1e00:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1e02:	20 91 ab 02 	lds	r18, 0x02AB
    1e06:	30 91 ac 02 	lds	r19, 0x02AC
    1e0a:	e0 90 93 00 	lds	r14, 0x0093
    1e0e:	f0 90 94 00 	lds	r15, 0x0094
    1e12:	00 91 95 00 	lds	r16, 0x0095
    1e16:	10 91 96 00 	lds	r17, 0x0096
    1e1a:	c4 01       	movw	r24, r8
    1e1c:	b3 01       	movw	r22, r6
    1e1e:	62 50       	subi	r22, 0x02	; 2
    1e20:	70 40       	sbci	r23, 0x00	; 0
    1e22:	80 40       	sbci	r24, 0x00	; 0
    1e24:	90 40       	sbci	r25, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    1e2e:	5b 01       	movw	r10, r22
    1e30:	6c 01       	movw	r12, r24
    1e32:	ae 0c       	add	r10, r14
    1e34:	bf 1c       	adc	r11, r15
    1e36:	c0 1e       	adc	r12, r16
    1e38:	d1 1e       	adc	r13, r17
    1e3a:	ee 24       	eor	r14, r14
    1e3c:	25 c0       	rjmp	.+74     	; 0x1e88 <readFile+0x140>
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    1e3e:	c6 01       	movw	r24, r12
    1e40:	b5 01       	movw	r22, r10
    1e42:	6e 0d       	add	r22, r14
    1e44:	71 1d       	adc	r23, r1
    1e46:	81 1d       	adc	r24, r1
    1e48:	91 1d       	adc	r25, r1
    1e4a:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
    1e4e:	00 e0       	ldi	r16, 0x00	; 0
    1e50:	10 e0       	ldi	r17, 0x00	; 0
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    1e52:	f8 01       	movw	r30, r16
    1e54:	e5 55       	subi	r30, 0x55	; 85
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	ab 81       	ldd	r26, Y+3	; 0x03
    1e64:	bc 81       	ldd	r27, Y+4	; 0x04
    1e66:	28 16       	cp	r2, r24
    1e68:	39 06       	cpc	r3, r25
    1e6a:	4a 06       	cpc	r4, r26
    1e6c:	5b 06       	cpc	r5, r27
    1e6e:	50 f5       	brcc	.+84     	; 0x1ec4 <readFile+0x17c>
    1e70:	08 94       	sec
    1e72:	21 1c       	adc	r2, r1
    1e74:	31 1c       	adc	r3, r1
    1e76:	41 1c       	adc	r4, r1
    1e78:	51 1c       	adc	r5, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    1e7a:	0f 5f       	subi	r16, 0xFF	; 255
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	00 30       	cpi	r16, 0x00	; 0
    1e82:	19 07       	cpc	r17, r25
    1e84:	31 f7       	brne	.-52     	; 0x1e52 <readFile+0x10a>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1e86:	e3 94       	inc	r14
    1e88:	20 91 ab 02 	lds	r18, 0x02AB
    1e8c:	30 91 ac 02 	lds	r19, 0x02AC
    1e90:	8e 2d       	mov	r24, r14
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	82 17       	cp	r24, r18
    1e96:	93 07       	cpc	r25, r19
    1e98:	90 f2       	brcs	.-92     	; 0x1e3e <readFile+0xf6>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1e9a:	c4 01       	movw	r24, r8
    1e9c:	b3 01       	movw	r22, r6
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	00 e0       	ldi	r16, 0x00	; 0
    1ea2:	10 e0       	ldi	r17, 0x00	; 0
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    1eac:	3b 01       	movw	r6, r22
    1eae:	4c 01       	movw	r8, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1eb0:	61 15       	cp	r22, r1
    1eb2:	71 05       	cpc	r23, r1
    1eb4:	81 05       	cpc	r24, r1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <readFile+0x174>
    1eba:	a3 cf       	rjmp	.-186    	; 0x1e02 <readFile+0xba>
    1ebc:	89 e1       	ldi	r24, 0x19	; 25
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
}
return 0;
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	df 90       	pop	r13
    1edc:	cf 90       	pop	r12
    1ede:	bf 90       	pop	r11
    1ee0:	af 90       	pop	r10
    1ee2:	9f 90       	pop	r9
    1ee4:	8f 90       	pop	r8
    1ee6:	7f 90       	pop	r7
    1ee8:	6f 90       	pop	r6
    1eea:	5f 90       	pop	r5
    1eec:	4f 90       	pop	r4
    1eee:	3f 90       	pop	r3
    1ef0:	2f 90       	pop	r2
    1ef2:	08 95       	ret

00001ef4 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    1ef4:	2f 92       	push	r2
    1ef6:	3f 92       	push	r3
    1ef8:	4f 92       	push	r4
    1efa:	5f 92       	push	r5
    1efc:	6f 92       	push	r6
    1efe:	7f 92       	push	r7
    1f00:	8f 92       	push	r8
    1f02:	9f 92       	push	r9
    1f04:	af 92       	push	r10
    1f06:	bf 92       	push	r11
    1f08:	cf 92       	push	r12
    1f0a:	df 92       	push	r13
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	27 97       	sbiw	r28, 0x07	; 7
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	9d 83       	std	Y+5, r25	; 0x05
    1f2a:	8c 83       	std	Y+4, r24	; 0x04
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	6c 81       	ldd	r22, Y+4	; 0x04
    1f30:	7d 81       	ldd	r23, Y+5	; 0x05
    1f32:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <readFile>

if(j == 1) 
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <writeFile+0x48>
    1f3a:	56 c0       	rjmp	.+172    	; 0x1fe8 <writeFile+0xf4>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    1f3c:	60 90 c1 02 	lds	r6, 0x02C1
    1f40:	70 90 c2 02 	lds	r7, 0x02C2
    1f44:	80 90 c3 02 	lds	r8, 0x02C3
    1f48:	90 90 c4 02 	lds	r9, 0x02C4
    1f4c:	aa 24       	eor	r10, r10
    1f4e:	bb 24       	eor	r11, r11
    1f50:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    1f52:	c4 01       	movw	r24, r8
    1f54:	b3 01       	movw	r22, r6
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	10 e0       	ldi	r17, 0x00	; 0
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    if(nextCluster == EOF) break;
    1f64:	6f 3f       	cpi	r22, 0xFF	; 255
    1f66:	2f ef       	ldi	r18, 0xFF	; 255
    1f68:	72 07       	cpc	r23, r18
    1f6a:	2f ef       	ldi	r18, 0xFF	; 255
    1f6c:	82 07       	cpc	r24, r18
    1f6e:	2f e0       	ldi	r18, 0x0F	; 15
    1f70:	92 07       	cpc	r25, r18
    1f72:	41 f0       	breq	.+16     	; 0x1f84 <writeFile+0x90>
	cluster = nextCluster;
	clusterCount++;
    1f74:	08 94       	sec
    1f76:	a1 1c       	adc	r10, r1
    1f78:	b1 1c       	adc	r11, r1
    1f7a:	c1 1c       	adc	r12, r1
    1f7c:	d1 1c       	adc	r13, r1
    1f7e:	3b 01       	movw	r6, r22
    1f80:	4c 01       	movw	r8, r24
    1f82:	e7 cf       	rjmp	.-50     	; 0x1f52 <writeFile+0x5e>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1f84:	20 91 ab 02 	lds	r18, 0x02AB
    1f88:	30 91 ac 02 	lds	r19, 0x02AC
    1f8c:	60 91 9b 00 	lds	r22, 0x009B
    1f90:	70 91 9c 00 	lds	r23, 0x009C
    1f94:	e0 90 9b 00 	lds	r14, 0x009B
    1f98:	f0 90 9c 00 	lds	r15, 0x009C
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    1fa8:	a6 01       	movw	r20, r12
    1faa:	95 01       	movw	r18, r10
    1fac:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	60 91 97 00 	lds	r22, 0x0097
    1fb8:	70 91 98 00 	lds	r23, 0x0098
    1fbc:	80 91 99 00 	lds	r24, 0x0099
    1fc0:	90 91 9a 00 	lds	r25, 0x009A
    1fc4:	62 1b       	sub	r22, r18
    1fc6:	73 0b       	sbc	r23, r19
    1fc8:	84 0b       	sbc	r24, r20
    1fca:	95 0b       	sbc	r25, r21
    1fcc:	00 e0       	ldi	r16, 0x00	; 0
    1fce:	10 e0       	ldi	r17, 0x00	; 0
    1fd0:	a8 01       	movw	r20, r16
    1fd2:	97 01       	movw	r18, r14
    1fd4:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    1fd8:	a2 2e       	mov	r10, r18
    1fda:	1a 82       	std	Y+2, r1	; 0x02
    1fdc:	19 82       	std	Y+1, r1	; 0x01
    1fde:	21 e0       	ldi	r18, 0x01	; 1
    1fe0:	2b 83       	std	Y+3, r18	; 0x03
    1fe2:	1f 82       	std	Y+7, r1	; 0x07
    1fe4:	1e 82       	std	Y+6, r1	; 0x06
    1fe6:	4f c0       	rjmp	.+158    	; 0x2086 <writeFile+0x192>
  start = 1;
}
else if(j == 2) 
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	09 f4       	brne	.+2      	; 0x1fee <writeFile+0xfa>
    1fec:	96 c2       	rjmp	.+1324   	; 0x251a <writeFile+0x626>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>
    1ffe:	9b 01       	movw	r18, r22
    2000:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    2002:	80 91 9d 00 	lds	r24, 0x009D
    2006:	90 91 9e 00 	lds	r25, 0x009E
    200a:	a0 91 9f 00 	lds	r26, 0x009F
    200e:	b0 91 a0 00 	lds	r27, 0x00A0
    2012:	82 17       	cp	r24, r18
    2014:	93 07       	cpc	r25, r19
    2016:	a4 07       	cpc	r26, r20
    2018:	b5 07       	cpc	r27, r21
    201a:	40 f4       	brcc	.+16     	; 0x202c <writeFile+0x138>
     cluster = rootCluster;
    201c:	20 91 a1 00 	lds	r18, 0x00A1
    2020:	30 91 a2 00 	lds	r19, 0x00A2
    2024:	40 91 a3 00 	lds	r20, 0x00A3
    2028:	50 91 a4 00 	lds	r21, 0x00A4

  cluster = searchNextFreeCluster(cluster);
    202c:	ca 01       	movw	r24, r20
    202e:	b9 01       	movw	r22, r18
    2030:	0e 94 4d 09 	call	0x129a	; 0x129a <searchNextFreeCluster>
    2034:	3b 01       	movw	r6, r22
    2036:	4c 01       	movw	r8, r24
   if(cluster == 0)
    2038:	61 15       	cp	r22, r1
    203a:	71 05       	cpc	r23, r1
    203c:	81 05       	cpc	r24, r1
    203e:	91 05       	cpc	r25, r1
    2040:	49 f4       	brne	.+18     	; 0x2054 <writeFile+0x160>
   {
      TX_NEWLINE;
    2042:	8d e0       	ldi	r24, 0x0D	; 13
    2044:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    2048:	8a e0       	ldi	r24, 0x0A	; 10
    204a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    204e:	84 ef       	ldi	r24, 0xF4	; 244
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	61 c2       	rjmp	.+1218   	; 0x2516 <writeFile+0x622>
	  return 1;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0f ef       	ldi	r16, 0xFF	; 255
    2058:	1f ef       	ldi	r17, 0xFF	; 255
    205a:	2f ef       	ldi	r18, 0xFF	; 255
    205c:	3f e0       	ldi	r19, 0x0F	; 15
    205e:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    2062:	c4 01       	movw	r24, r8
    2064:	aa 27       	eor	r26, r26
    2066:	bb 27       	eor	r27, r27
    2068:	9f 83       	std	Y+7, r25	; 0x07
    206a:	8e 83       	std	Y+6, r24	; 0x06
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    206c:	7a 82       	std	Y+2, r7	; 0x02
    206e:	69 82       	std	Y+1, r6	; 0x01
  fileSize = 0;
    2070:	10 92 97 00 	sts	0x0097, r1
    2074:	10 92 98 00 	sts	0x0098, r1
    2078:	10 92 99 00 	sts	0x0099, r1
    207c:	10 92 9a 00 	sts	0x009A, r1
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	1b 82       	std	Y+3, r1	; 0x03
    2084:	aa 24       	eor	r10, r10
    2086:	bb 24       	eor	r11, r11
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    2088:	2a 2c       	mov	r2, r10
    208a:	33 24       	eor	r3, r3
    208c:	44 24       	eor	r4, r4
    208e:	55 24       	eor	r5, r5
    2090:	c4 01       	movw	r24, r8
    2092:	b3 01       	movw	r22, r6
    2094:	62 50       	subi	r22, 0x02	; 2
    2096:	70 40       	sbci	r23, 0x00	; 0
    2098:	80 40       	sbci	r24, 0x00	; 0
    209a:	90 40       	sbci	r25, 0x00	; 0

k=0;

while(1)
{
   if(start)
    209c:	22 23       	and	r18, r18
    209e:	e1 f1       	breq	.+120    	; 0x2118 <writeFile+0x224>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    20a0:	20 91 ab 02 	lds	r18, 0x02AB
    20a4:	30 91 ac 02 	lds	r19, 0x02AC
    20a8:	e0 90 93 00 	lds	r14, 0x0093
    20ac:	f0 90 94 00 	lds	r15, 0x0094
    20b0:	00 91 95 00 	lds	r16, 0x0095
    20b4:	10 91 96 00 	lds	r17, 0x0096
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    20b8:	e2 0c       	add	r14, r2
    20ba:	f3 1c       	adc	r15, r3
    20bc:	04 1d       	adc	r16, r4
    20be:	15 1d       	adc	r17, r5
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    20c8:	e6 0e       	add	r14, r22
    20ca:	f7 1e       	adc	r15, r23
    20cc:	08 1f       	adc	r16, r24
    20ce:	19 1f       	adc	r17, r25
    20d0:	e0 92 a7 00 	sts	0x00A7, r14
    20d4:	f0 92 a8 00 	sts	0x00A8, r15
    20d8:	00 93 a9 00 	sts	0x00A9, r16
    20dc:	10 93 aa 00 	sts	0x00AA, r17
	  SD_readSingleBlock (startBlock);
    20e0:	60 91 a7 00 	lds	r22, 0x00A7
    20e4:	70 91 a8 00 	lds	r23, 0x00A8
    20e8:	80 91 a9 00 	lds	r24, 0x00A9
    20ec:	90 91 aa 00 	lds	r25, 0x00AA
    20f0:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    20f4:	20 91 9b 00 	lds	r18, 0x009B
    20f8:	30 91 9c 00 	lds	r19, 0x009C
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	60 91 97 00 	lds	r22, 0x0097
    2104:	70 91 98 00 	lds	r23, 0x0098
    2108:	80 91 99 00 	lds	r24, 0x0099
    210c:	90 91 9a 00 	lds	r25, 0x009A
    2110:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodsi4>
    2114:	0a 2d       	mov	r16, r10
    2116:	1f c0       	rjmp	.+62     	; 0x2156 <writeFile+0x262>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2118:	20 91 ab 02 	lds	r18, 0x02AB
    211c:	30 91 ac 02 	lds	r19, 0x02AC
    2120:	e0 90 93 00 	lds	r14, 0x0093
    2124:	f0 90 94 00 	lds	r15, 0x0094
    2128:	00 91 95 00 	lds	r16, 0x0095
    212c:	10 91 96 00 	lds	r17, 0x0096
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    2138:	e6 0e       	add	r14, r22
    213a:	f7 1e       	adc	r15, r23
    213c:	08 1f       	adc	r16, r24
    213e:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    2140:	e0 92 a7 00 	sts	0x00A7, r14
    2144:	f0 92 a8 00 	sts	0x00A8, r15
    2148:	00 93 a9 00 	sts	0x00A9, r16
    214c:	10 93 aa 00 	sts	0x00AA, r17
    2150:	00 e0       	ldi	r16, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
   
   
   do
   {

	 data = dataString[k++];
    2156:	eb 2d       	mov	r30, r11
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	eb 53       	subi	r30, 0x3B	; 59
    215c:	fd 4f       	sbci	r31, 0xFD	; 253
    215e:	10 81       	ld	r17, Z
    2160:	b3 94       	inc	r11
	 //transmitByte(data);
     buffer[i++] = data;
    2162:	fb 01       	movw	r30, r22
    2164:	e5 55       	subi	r30, 0x55	; 85
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	10 83       	st	Z, r17
    216a:	6f 5f       	subi	r22, 0xFF	; 255
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
	 fileSize++;
    216e:	80 91 97 00 	lds	r24, 0x0097
    2172:	90 91 98 00 	lds	r25, 0x0098
    2176:	a0 91 99 00 	lds	r26, 0x0099
    217a:	b0 91 9a 00 	lds	r27, 0x009A
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	a1 1d       	adc	r26, r1
    2182:	b1 1d       	adc	r27, r1
    2184:	80 93 97 00 	sts	0x0097, r24
    2188:	90 93 98 00 	sts	0x0098, r25
    218c:	a0 93 99 00 	sts	0x0099, r26
    2190:	b0 93 9a 00 	sts	0x009A, r27
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	60 30       	cpi	r22, 0x00	; 0
    2198:	78 07       	cpc	r23, r24
    219a:	48 f1       	brcs	.+82     	; 0x21ee <writeFile+0x2fa>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    219c:	60 91 a7 00 	lds	r22, 0x00A7
    21a0:	70 91 a8 00 	lds	r23, 0x00A8
    21a4:	80 91 a9 00 	lds	r24, 0x00A9
    21a8:	90 91 aa 00 	lds	r25, 0x00AA
    21ac:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>
       j++;
    21b0:	0f 5f       	subi	r16, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    21b2:	20 91 ab 02 	lds	r18, 0x02AB
    21b6:	30 91 ac 02 	lds	r19, 0x02AC
    21ba:	80 2f       	mov	r24, r16
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	82 17       	cp	r24, r18
    21c0:	93 07       	cpc	r25, r19
    21c2:	e1 f0       	breq	.+56     	; 0x21fc <writeFile+0x308>
	   startBlock++; 
    21c4:	80 91 a7 00 	lds	r24, 0x00A7
    21c8:	90 91 a8 00 	lds	r25, 0x00A8
    21cc:	a0 91 a9 00 	lds	r26, 0x00A9
    21d0:	b0 91 aa 00 	lds	r27, 0x00AA
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	a1 1d       	adc	r26, r1
    21d8:	b1 1d       	adc	r27, r1
    21da:	80 93 a7 00 	sts	0x00A7, r24
    21de:	90 93 a8 00 	sts	0x00A8, r25
    21e2:	a0 93 a9 00 	sts	0x00A9, r26
    21e6:	b0 93 aa 00 	sts	0x00AA, r27
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	70 e0       	ldi	r23, 0x00	; 0
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
    21ee:	1a 30       	cpi	r17, 0x0A	; 10
    21f0:	71 f0       	breq	.+28     	; 0x220e <writeFile+0x31a>
    21f2:	93 e6       	ldi	r25, 0x63	; 99
    21f4:	9b 15       	cp	r25, r11
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <writeFile+0x306>
    21f8:	ae cf       	rjmp	.-164    	; 0x2156 <writeFile+0x262>
    21fa:	09 c0       	rjmp	.+18     	; 0x220e <writeFile+0x31a>
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    21fc:	1a 30       	cpi	r17, 0x0A	; 10
    21fe:	19 f4       	brne	.+6      	; 0x2206 <writeFile+0x312>
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	04 c0       	rjmp	.+8      	; 0x220e <writeFile+0x31a>
    2206:	a3 e6       	ldi	r26, 0x63	; 99
    2208:	ab 15       	cp	r26, r11
    220a:	00 f5       	brcc	.+64     	; 0x224c <writeFile+0x358>
    220c:	f9 cf       	rjmp	.-14     	; 0x2200 <writeFile+0x30c>
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    220e:	fb 01       	movw	r30, r22
    2210:	e5 55       	subi	r30, 0x55	; 85
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	10 82       	st	Z, r1
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    2216:	6f 5f       	subi	r22, 0xFF	; 255
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	b2 e0       	ldi	r27, 0x02	; 2
    221c:	60 30       	cpi	r22, 0x00	; 0
    221e:	7b 07       	cpc	r23, r27
    2220:	b0 f3       	brcs	.-20     	; 0x220e <writeFile+0x31a>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    2222:	60 91 a7 00 	lds	r22, 0x00A7
    2226:	70 91 a8 00 	lds	r23, 0x00A8
    222a:	80 91 a9 00 	lds	r24, 0x00A9
    222e:	90 91 aa 00 	lds	r25, 0x00AA
    2232:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	a4 01       	movw	r20, r8
    223c:	93 01       	movw	r18, r6
    223e:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    2242:	0e 94 58 05 	call	0xab0	; 0xab0 <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    2246:	88 23       	and	r24, r24
    2248:	49 f5       	brne	.+82     	; 0x229c <writeFile+0x3a8>
    224a:	30 c0       	rjmp	.+96     	; 0x22ac <writeFile+0x3b8>
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    224c:	c4 01       	movw	r24, r8
    224e:	b3 01       	movw	r22, r6
    2250:	0e 94 4d 09 	call	0x129a	; 0x129a <searchNextFreeCluster>
    2254:	6b 01       	movw	r12, r22
    2256:	7c 01       	movw	r14, r24

   if(cluster == 0)
    2258:	61 15       	cp	r22, r1
    225a:	71 05       	cpc	r23, r1
    225c:	81 05       	cpc	r24, r1
    225e:	91 05       	cpc	r25, r1
    2260:	49 f4       	brne	.+18     	; 0x2274 <writeFile+0x380>
   {
      TX_NEWLINE;
    2262:	8d e0       	ldi	r24, 0x0D	; 13
    2264:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
    2268:	8a e0       	ldi	r24, 0x0A	; 10
    226a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    226e:	82 ee       	ldi	r24, 0xE2	; 226
    2270:	92 e0       	ldi	r25, 0x02	; 2
    2272:	51 c1       	rjmp	.+674    	; 0x2516 <writeFile+0x622>
	  return 1;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    2274:	c4 01       	movw	r24, r8
    2276:	b3 01       	movw	r22, r6
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	97 01       	movw	r18, r14
    227c:	86 01       	movw	r16, r12
    227e:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2282:	c7 01       	movw	r24, r14
    2284:	b6 01       	movw	r22, r12
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0f ef       	ldi	r16, 0xFF	; 255
    228a:	1f ef       	ldi	r17, 0xFF	; 255
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	3f e0       	ldi	r19, 0x0F	; 15
    2290:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	36 01       	movw	r6, r12
    2298:	47 01       	movw	r8, r14
    229a:	fa ce       	rjmp	.-524    	; 0x2090 <writeFile+0x19c>
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
    229c:	10 92 92 00 	sts	0x0092, r1
    22a0:	10 92 91 00 	sts	0x0091, r1
    22a4:	10 92 a6 00 	sts	0x00A6, r1
    22a8:	10 92 a5 00 	sts	0x00A5, r1

if(appendFile)  //executes this loop if file is to be appended
    22ac:	eb 81       	ldd	r30, Y+3	; 0x03
    22ae:	ee 23       	and	r30, r30
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <writeFile+0x3c0>
    22b2:	44 c0       	rjmp	.+136    	; 0x233c <writeFile+0x448>
{
  SD_readSingleBlock (appendFileSector);    
    22b4:	60 91 37 03 	lds	r22, 0x0337
    22b8:	70 91 38 03 	lds	r23, 0x0338
    22bc:	80 91 39 03 	lds	r24, 0x0339
    22c0:	90 91 3a 03 	lds	r25, 0x033A
    22c4:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    22c8:	e0 91 8d 00 	lds	r30, 0x008D
    22cc:	f0 91 8e 00 	lds	r31, 0x008E
    22d0:	e5 55       	subi	r30, 0x55	; 85
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255

  dir->lastAccessDate = 0;   //date of last access ignored
    22d4:	13 8a       	std	Z+19, r1	; 0x13
    22d6:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    22d8:	80 91 a5 00 	lds	r24, 0x00A5
    22dc:	90 91 a6 00 	lds	r25, 0x00A6
    22e0:	97 8b       	std	Z+23, r25	; 0x17
    22e2:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    22e4:	80 91 91 00 	lds	r24, 0x0091
    22e8:	90 91 92 00 	lds	r25, 0x0092
    22ec:	91 8f       	std	Z+25, r25	; 0x19
    22ee:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    22f0:	20 91 97 00 	lds	r18, 0x0097
    22f4:	30 91 98 00 	lds	r19, 0x0098
    22f8:	40 91 99 00 	lds	r20, 0x0099
    22fc:	50 91 9a 00 	lds	r21, 0x009A
    2300:	84 8d       	ldd	r24, Z+28	; 0x1c
    2302:	95 8d       	ldd	r25, Z+29	; 0x1d
    2304:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2306:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2308:	79 01       	movw	r14, r18
    230a:	8a 01       	movw	r16, r20
    230c:	e8 1a       	sub	r14, r24
    230e:	f9 0a       	sbc	r15, r25
    2310:	0a 0b       	sbc	r16, r26
    2312:	1b 0b       	sbc	r17, r27
  dir->fileSize = fileSize;
    2314:	24 8f       	std	Z+28, r18	; 0x1c
    2316:	35 8f       	std	Z+29, r19	; 0x1d
    2318:	46 8f       	std	Z+30, r20	; 0x1e
    231a:	57 8f       	std	Z+31, r21	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    231c:	60 91 37 03 	lds	r22, 0x0337
    2320:	70 91 38 03 	lds	r23, 0x0338
    2324:	80 91 39 03 	lds	r24, 0x0339
    2328:	90 91 3a 03 	lds	r25, 0x033A
    232c:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	b8 01       	movw	r22, r16
    2334:	a7 01       	movw	r20, r14
    2336:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <freeMemoryUpdate>
    233a:	36 c0       	rjmp	.+108    	; 0x23a8 <writeFile+0x4b4>
  return 0;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    233c:	80 90 a1 00 	lds	r8, 0x00A1
    2340:	90 90 a2 00 	lds	r9, 0x00A2
    2344:	a0 90 a3 00 	lds	r10, 0x00A3
    2348:	b0 90 a4 00 	lds	r11, 0x00A4
    234c:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    234e:	20 91 ab 02 	lds	r18, 0x02AB
    2352:	30 91 ac 02 	lds	r19, 0x02AC
    2356:	e0 90 93 00 	lds	r14, 0x0093
    235a:	f0 90 94 00 	lds	r15, 0x0094
    235e:	00 91 95 00 	lds	r16, 0x0095
    2362:	10 91 96 00 	lds	r17, 0x0096
    2366:	c5 01       	movw	r24, r10
    2368:	b4 01       	movw	r22, r8
    236a:	62 50       	subi	r22, 0x02	; 2
    236c:	70 40       	sbci	r23, 0x00	; 0
    236e:	80 40       	sbci	r24, 0x00	; 0
    2370:	90 40       	sbci	r25, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	0e 94 a7 12 	call	0x254e	; 0x254e <__mulsi3>
    237a:	2b 01       	movw	r4, r22
    237c:	3c 01       	movw	r6, r24
    237e:	4e 0c       	add	r4, r14
    2380:	5f 1c       	adc	r5, r15
    2382:	60 1e       	adc	r6, r16
    2384:	71 1e       	adc	r7, r17
    2386:	33 24       	eor	r3, r3
    2388:	7d c0       	rjmp	.+250    	; 0x2484 <writeFile+0x590>
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    238a:	73 01       	movw	r14, r6
    238c:	62 01       	movw	r12, r4
    238e:	c3 0c       	add	r12, r3
    2390:	d1 1c       	adc	r13, r1
    2392:	e1 1c       	adc	r14, r1
    2394:	f1 1c       	adc	r15, r1
    2396:	c7 01       	movw	r24, r14
    2398:	b6 01       	movw	r22, r12
    239a:	0e 94 0a 08 	call	0x1014	; 0x1014 <SD_readSingleBlock>
    239e:	00 e2       	ldi	r16, 0x20	; 32
    23a0:	10 e0       	ldi	r17, 0x00	; 0
    23a2:	65 c0       	rjmp	.+202    	; 0x246e <writeFile+0x57a>

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    23a4:	22 20       	and	r2, r2
    23a6:	11 f0       	breq	.+4      	; 0x23ac <writeFile+0x4b8>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	b8 c0       	rjmp	.+368    	; 0x251c <writeFile+0x628>
    23ac:	af 01       	movw	r20, r30
    23ae:	45 55       	subi	r20, 0x55	; 85
    23b0:	5f 4f       	sbci	r21, 0xFF	; 255
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    23b2:	f8 01       	movw	r30, r16
    23b4:	e5 57       	subi	r30, 0x75	; 117
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	e0 81       	ld	r30, Z
    23ba:	ee 23       	and	r30, r30
    23bc:	19 f0       	breq	.+6      	; 0x23c4 <writeFile+0x4d0>
    23be:	e5 3e       	cpi	r30, 0xE5	; 229
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <writeFile+0x4d0>
    23c2:	53 c0       	rjmp	.+166    	; 0x246a <writeFile+0x576>
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    23c8:	ba 01       	movw	r22, r20
    23ca:	62 0f       	add	r22, r18
    23cc:	73 1f       	adc	r23, r19
    23ce:	ac 81       	ldd	r26, Y+4	; 0x04
    23d0:	bd 81       	ldd	r27, Y+5	; 0x05
    23d2:	a2 0f       	add	r26, r18
    23d4:	b3 1f       	adc	r27, r19
    23d6:	8c 91       	ld	r24, X
    23d8:	db 01       	movw	r26, r22
    23da:	8c 93       	st	X, r24
    23dc:	2f 5f       	subi	r18, 0xFF	; 255
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    23e0:	2b 30       	cpi	r18, 0x0B	; 11
    23e2:	31 05       	cpc	r19, r1
    23e4:	89 f7       	brne	.-30     	; 0x23c8 <writeFile+0x4d4>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    23e6:	f8 01       	movw	r30, r16
    23e8:	e5 55       	subi	r30, 0x55	; 85
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	75 97       	sbiw	r30, 0x15	; 21
    23ee:	b0 e2       	ldi	r27, 0x20	; 32
    23f0:	b1 93       	st	Z+, r27
		  dir->NTreserved = 0;			//always set to 0
    23f2:	11 92       	st	Z+, r1
		  dir->timeTenth = 0;			//always set to 0
    23f4:	11 92       	st	Z+, r1
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    23f6:	20 91 a5 00 	lds	r18, 0x00A5
    23fa:	30 91 a6 00 	lds	r19, 0x00A6
    23fe:	21 93       	st	Z+, r18
    2400:	31 93       	st	Z+, r19
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    2402:	80 91 91 00 	lds	r24, 0x0091
    2406:	90 91 92 00 	lds	r25, 0x0092
    240a:	81 93       	st	Z+, r24
    240c:	91 93       	st	Z+, r25
		  dir->lastAccessDate = 0;   	//date of last access ignored
    240e:	11 82       	std	Z+1, r1	; 0x01
    2410:	10 82       	st	Z, r1
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    2412:	34 96       	adiw	r30, 0x04	; 4
    2414:	21 93       	st	Z+, r18
    2416:	31 93       	st	Z+, r19
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
		  dir->firstClusterHI = firstClusterHigh;
    241c:	34 97       	sbiw	r30, 0x04	; 4
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	9f 81       	ldd	r25, Y+7	; 0x07
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
		  dir->firstClusterLO = firstClusterLow;
    2426:	36 96       	adiw	r30, 0x06	; 6
    2428:	a9 81       	ldd	r26, Y+1	; 0x01
    242a:	ba 81       	ldd	r27, Y+2	; 0x02
    242c:	a1 93       	st	Z+, r26
    242e:	b1 93       	st	Z+, r27
		  dir->fileSize = fileSize;
    2430:	80 91 97 00 	lds	r24, 0x0097
    2434:	90 91 98 00 	lds	r25, 0x0098
    2438:	a0 91 99 00 	lds	r26, 0x0099
    243c:	b0 91 9a 00 	lds	r27, 0x009A
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03

		  SD_writeSingleBlock (firstSector + sector);
    2448:	c7 01       	movw	r24, r14
    244a:	b6 01       	movw	r22, r12
    244c:	0e 94 bc 07 	call	0xf78	; 0xf78 <SD_writeSingleBlock>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    2450:	40 91 97 00 	lds	r20, 0x0097
    2454:	50 91 98 00 	lds	r21, 0x0098
    2458:	60 91 99 00 	lds	r22, 0x0099
    245c:	70 91 9a 00 	lds	r23, 0x009A
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <freeMemoryUpdate>
    2466:	22 24       	eor	r2, r2
    2468:	23 94       	inc	r2
    246a:	00 5e       	subi	r16, 0xE0	; 224
    246c:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    246e:	80 91 9b 00 	lds	r24, 0x009B
    2472:	90 91 9c 00 	lds	r25, 0x009C
    2476:	f8 01       	movw	r30, r16
    2478:	b0 97       	sbiw	r30, 0x20	; 32
    247a:	e8 17       	cp	r30, r24
    247c:	f9 07       	cpc	r31, r25
    247e:	08 f4       	brcc	.+2      	; 0x2482 <writeFile+0x58e>
    2480:	91 cf       	rjmp	.-222    	; 0x23a4 <writeFile+0x4b0>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    2482:	33 94       	inc	r3
    2484:	20 91 ab 02 	lds	r18, 0x02AB
    2488:	30 91 ac 02 	lds	r19, 0x02AC
    248c:	83 2d       	mov	r24, r3
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	82 17       	cp	r24, r18
    2492:	93 07       	cpc	r25, r19
    2494:	08 f4       	brcc	.+2      	; 0x2498 <writeFile+0x5a4>
    2496:	79 cf       	rjmp	.-270    	; 0x238a <writeFile+0x496>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    2498:	c5 01       	movw	r24, r10
    249a:	b4 01       	movw	r22, r8
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	00 e0       	ldi	r16, 0x00	; 0
    24a0:	10 e0       	ldi	r17, 0x00	; 0
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    24aa:	6b 01       	movw	r12, r22
    24ac:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    24ae:	67 3f       	cpi	r22, 0xF7	; 247
    24b0:	bf ef       	ldi	r27, 0xFF	; 255
    24b2:	7b 07       	cpc	r23, r27
    24b4:	bf ef       	ldi	r27, 0xFF	; 255
    24b6:	8b 07       	cpc	r24, r27
    24b8:	bf e0       	ldi	r27, 0x0F	; 15
    24ba:	9b 07       	cpc	r25, r27
    24bc:	10 f1       	brcs	.+68     	; 0x2502 <writeFile+0x60e>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    24be:	6f 3f       	cpi	r22, 0xFF	; 255
    24c0:	ef ef       	ldi	r30, 0xFF	; 255
    24c2:	7e 07       	cpc	r23, r30
    24c4:	ef ef       	ldi	r30, 0xFF	; 255
    24c6:	8e 07       	cpc	r24, r30
    24c8:	ef e0       	ldi	r30, 0x0F	; 15
    24ca:	9e 07       	cpc	r25, r30
    24cc:	b9 f4       	brne	.+46     	; 0x24fc <writeFile+0x608>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    24ce:	c5 01       	movw	r24, r10
    24d0:	b4 01       	movw	r22, r8
    24d2:	0e 94 4d 09 	call	0x129a	; 0x129a <searchNextFreeCluster>
    24d6:	6b 01       	movw	r12, r22
    24d8:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    24da:	c5 01       	movw	r24, r10
    24dc:	b4 01       	movw	r22, r8
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	97 01       	movw	r18, r14
    24e2:	86 01       	movw	r16, r12
    24e4:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    24e8:	c7 01       	movw	r24, r14
    24ea:	b6 01       	movw	r22, r12
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0f ef       	ldi	r16, 0xFF	; 255
    24f0:	1f ef       	ldi	r17, 0xFF	; 255
    24f2:	2f ef       	ldi	r18, 0xFF	; 255
    24f4:	3f e0       	ldi	r19, 0x0F	; 15
    24f6:	0e 94 2d 0c 	call	0x185a	; 0x185a <getSetNextCluster>
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <writeFile+0x60e>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    24fc:	8d ec       	ldi	r24, 0xCD	; 205
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	0a c0       	rjmp	.+20     	; 0x2516 <writeFile+0x622>
	    return 1;
    2502:	46 01       	movw	r8, r12
    2504:	57 01       	movw	r10, r14
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
    2506:	c1 14       	cp	r12, r1
    2508:	d1 04       	cpc	r13, r1
    250a:	e1 04       	cpc	r14, r1
    250c:	f1 04       	cpc	r15, r1
    250e:	09 f0       	breq	.+2      	; 0x2512 <writeFile+0x61e>
    2510:	1e cf       	rjmp	.-452    	; 0x234e <writeFile+0x45a>
    2512:	84 eb       	ldi	r24, 0xB4	; 180
    2514:	92 e0       	ldi	r25, 0x02	; 2
    2516:	0e 94 07 03 	call	0x60e	; 0x60e <transmitString_F>
    251a:	81 e0       	ldi	r24, 0x01	; 1
   
   prevCluster = cluster;
 }
 
 return 0;
}
    251c:	27 96       	adiw	r28, 0x07	; 7
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	bf 90       	pop	r11
    253a:	af 90       	pop	r10
    253c:	9f 90       	pop	r9
    253e:	8f 90       	pop	r8
    2540:	7f 90       	pop	r7
    2542:	6f 90       	pop	r6
    2544:	5f 90       	pop	r5
    2546:	4f 90       	pop	r4
    2548:	3f 90       	pop	r3
    254a:	2f 90       	pop	r2
    254c:	08 95       	ret

0000254e <__mulsi3>:
    254e:	62 9f       	mul	r22, r18
    2550:	d0 01       	movw	r26, r0
    2552:	73 9f       	mul	r23, r19
    2554:	f0 01       	movw	r30, r0
    2556:	82 9f       	mul	r24, r18
    2558:	e0 0d       	add	r30, r0
    255a:	f1 1d       	adc	r31, r1
    255c:	64 9f       	mul	r22, r20
    255e:	e0 0d       	add	r30, r0
    2560:	f1 1d       	adc	r31, r1
    2562:	92 9f       	mul	r25, r18
    2564:	f0 0d       	add	r31, r0
    2566:	83 9f       	mul	r24, r19
    2568:	f0 0d       	add	r31, r0
    256a:	74 9f       	mul	r23, r20
    256c:	f0 0d       	add	r31, r0
    256e:	65 9f       	mul	r22, r21
    2570:	f0 0d       	add	r31, r0
    2572:	99 27       	eor	r25, r25
    2574:	72 9f       	mul	r23, r18
    2576:	b0 0d       	add	r27, r0
    2578:	e1 1d       	adc	r30, r1
    257a:	f9 1f       	adc	r31, r25
    257c:	63 9f       	mul	r22, r19
    257e:	b0 0d       	add	r27, r0
    2580:	e1 1d       	adc	r30, r1
    2582:	f9 1f       	adc	r31, r25
    2584:	bd 01       	movw	r22, r26
    2586:	cf 01       	movw	r24, r30
    2588:	11 24       	eor	r1, r1
    258a:	08 95       	ret

0000258c <__udivmodsi4>:
    258c:	a1 e2       	ldi	r26, 0x21	; 33
    258e:	1a 2e       	mov	r1, r26
    2590:	aa 1b       	sub	r26, r26
    2592:	bb 1b       	sub	r27, r27
    2594:	fd 01       	movw	r30, r26
    2596:	0d c0       	rjmp	.+26     	; 0x25b2 <__udivmodsi4_ep>

00002598 <__udivmodsi4_loop>:
    2598:	aa 1f       	adc	r26, r26
    259a:	bb 1f       	adc	r27, r27
    259c:	ee 1f       	adc	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	a2 17       	cp	r26, r18
    25a2:	b3 07       	cpc	r27, r19
    25a4:	e4 07       	cpc	r30, r20
    25a6:	f5 07       	cpc	r31, r21
    25a8:	20 f0       	brcs	.+8      	; 0x25b2 <__udivmodsi4_ep>
    25aa:	a2 1b       	sub	r26, r18
    25ac:	b3 0b       	sbc	r27, r19
    25ae:	e4 0b       	sbc	r30, r20
    25b0:	f5 0b       	sbc	r31, r21

000025b2 <__udivmodsi4_ep>:
    25b2:	66 1f       	adc	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	88 1f       	adc	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	1a 94       	dec	r1
    25bc:	69 f7       	brne	.-38     	; 0x2598 <__udivmodsi4_loop>
    25be:	60 95       	com	r22
    25c0:	70 95       	com	r23
    25c2:	80 95       	com	r24
    25c4:	90 95       	com	r25
    25c6:	9b 01       	movw	r18, r22
    25c8:	ac 01       	movw	r20, r24
    25ca:	bd 01       	movw	r22, r26
    25cc:	cf 01       	movw	r24, r30
    25ce:	08 95       	ret

000025d0 <_exit>:
    25d0:	f8 94       	cli

000025d2 <__stop_program>:
    25d2:	ff cf       	rjmp	.-2      	; 0x25d2 <__stop_program>
