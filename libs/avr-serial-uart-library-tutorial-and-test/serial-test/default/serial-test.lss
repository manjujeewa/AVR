
serial-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000045  00800060  00800060  0000023c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000095  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000036b  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000187  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000195  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000211  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000003d  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	28 c0       	rjmp	.+80     	; 0x68 <__vector_11>
  18:	50 c0       	rjmp	.+160    	; 0xba <__vector_12>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 3a       	cpi	r26, 0xA5	; 165
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include "uart.h"

#define UART_BAUD_RATE      9600

int main(void){
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  48:	83 e3       	ldi	r24, 0x33	; 51
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	5b d0       	rcall	.+182    	; 0x104 <uart_init>
	sei();
  4e:	78 94       	sei
	int c;
	while(1){
        c = uart_getc();
  50:	6d d0       	rcall	.+218    	; 0x12c <uart_getc>
        if (		!(c & UART_NO_DATA)
  52:	90 fd       	sbrc	r25, 0
  54:	fd cf       	rjmp	.-6      	; 0x50 <main+0x8>
			&&	!(c & UART_FRAME_ERROR)
  56:	93 fd       	sbrc	r25, 3
  58:	fb cf       	rjmp	.-10     	; 0x50 <main+0x8>
			&&	!(c & UART_OVERRUN_ERROR)
  5a:	92 fd       	sbrc	r25, 2
  5c:	f9 cf       	rjmp	.-14     	; 0x50 <main+0x8>
			&&	!(c & UART_BUFFER_OVERFLOW)
  5e:	91 fd       	sbrc	r25, 1
  60:	f7 cf       	rjmp	.-18     	; 0x50 <main+0x8>
		   )
		uart_putc( (unsigned char) c+1);
  62:	8f 5f       	subi	r24, 0xFF	; 255
  64:	7e d0       	rcall	.+252    	; 0x162 <uart_putc>
  66:	f4 cf       	rjmp	.-24     	; 0x50 <main+0x8>

00000068 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	2f 93       	push	r18
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	ef 93       	push	r30
  7a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  7c:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  7e:	9c b1       	in	r25, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  80:	e0 91 82 00 	lds	r30, 0x0082
  84:	ef 5f       	subi	r30, 0xFF	; 255
  86:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  88:	20 91 83 00 	lds	r18, 0x0083
  8c:	e2 17       	cp	r30, r18
  8e:	41 f0       	breq	.+16     	; 0xa0 <__vector_11+0x38>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  90:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  92:	e0 93 82 00 	sts	0x0082, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	ec 57       	subi	r30, 0x7C	; 124
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	90 83       	st	Z, r25
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  a0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
  a2:	80 93 a4 00 	sts	0x00A4, r24
}
  a6:	ff 91       	pop	r31
  a8:	ef 91       	pop	r30
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  cc:	90 91 60 00 	lds	r25, 0x0060
  d0:	80 91 61 00 	lds	r24, 0x0061
  d4:	98 17       	cp	r25, r24
  d6:	61 f0       	breq	.+24     	; 0xf0 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  d8:	e0 91 61 00 	lds	r30, 0x0061
  dc:	ef 5f       	subi	r30, 0xFF	; 255
  de:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
  e0:	e0 93 61 00 	sts	0x0061, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 59       	subi	r30, 0x9E	; 158
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	8c b9       	out	0x0c, r24	; 12
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
  f0:	55 98       	cbi	0x0a, 5	; 10
    }
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 104:	10 92 60 00 	sts	0x0060, r1
    UART_TxTail = 0;
 108:	10 92 61 00 	sts	0x0061, r1
    UART_RxHead = 0;
 10c:	10 92 82 00 	sts	0x0082, r1
    UART_RxTail = 0;
 110:	10 92 83 00 	sts	0x0083, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 114:	97 ff       	sbrs	r25, 7
 116:	03 c0       	rjmp	.+6      	; 0x11e <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 11c:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 11e:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 120:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 122:	88 e9       	ldi	r24, 0x98	; 152
 124:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 126:	86 e8       	ldi	r24, 0x86	; 134
 128:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 12a:	08 95       	ret

0000012c <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 12c:	90 91 82 00 	lds	r25, 0x0082
 130:	80 91 83 00 	lds	r24, 0x0083
 134:	98 17       	cp	r25, r24
 136:	89 f0       	breq	.+34     	; 0x15a <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 138:	e0 91 83 00 	lds	r30, 0x0083
 13c:	ef 5f       	subi	r30, 0xFF	; 255
 13e:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 140:	e0 93 83 00 	sts	0x0083, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ec 57       	subi	r30, 0x7C	; 124
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
 14c:	90 91 a4 00 	lds	r25, 0x00A4
 150:	39 2f       	mov	r19, r25
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	28 0f       	add	r18, r24
 156:	31 1d       	adc	r19, r1
 158:	02 c0       	rjmp	.+4      	; 0x15e <uart_getc+0x32>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 15e:	c9 01       	movw	r24, r18
 160:	08 95       	ret

00000162 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 162:	90 91 60 00 	lds	r25, 0x0060
 166:	9f 5f       	subi	r25, 0xFF	; 255
 168:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 16a:	20 91 61 00 	lds	r18, 0x0061
 16e:	92 17       	cp	r25, r18
 170:	e1 f3       	breq	.-8      	; 0x16a <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 172:	e9 2f       	mov	r30, r25
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ee 59       	subi	r30, 0x9E	; 158
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 17c:	90 93 60 00 	sts	0x0060, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 180:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 182:	08 95       	ret

00000184 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	e8 2e       	mov	r14, r24
 18e:	e7 01       	movw	r28, r14
 190:	7e 01       	movw	r14, r28
 192:	f9 2e       	mov	r15, r25
 194:	e7 01       	movw	r28, r14
    while (*s) 
 196:	01 c0       	rjmp	.+2      	; 0x19a <uart_puts+0x16>
      uart_putc(*s++);
 198:	e4 df       	rcall	.-56     	; 0x162 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 19a:	89 91       	ld	r24, Y+
 19c:	88 23       	and	r24, r24
 19e:	e1 f7       	brne	.-8      	; 0x198 <uart_puts+0x14>
      uart_putc(*s++);

}/* uart_puts */
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret

000001aa <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <uart_puts_p+0xa>
      uart_putc(c);
 1b2:	d7 df       	rcall	.-82     	; 0x162 <uart_putc>
 1b4:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	84 91       	lpm	r24, Z+
 1ba:	88 23       	and	r24, r24
 1bc:	d1 f7       	brne	.-12     	; 0x1b2 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
