
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800064  00800064  00000422  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003a  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000fa  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ce  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013c  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000007f  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a4 e6       	ldi	r26, 0x64	; 100
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 36       	cpi	r26, 0x6D	; 109
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e8       	ldi	r30, 0x8A	; 138
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
  86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  8a:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
	}
	
	return 0;
}

ISR(TIMER1_COMPA_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25

	static uint8_t overflows;
	
	uint8_t tmp = 0; // tmp variable to save pin status
	
	OCR1A += OCR1A_val;
  a0:	8a b5       	in	r24, 0x2a	; 42
  a2:	9b b5       	in	r25, 0x2b	; 43
  a4:	83 5f       	subi	r24, 0xF3	; 243
  a6:	9c 4f       	sbci	r25, 0xFC	; 252
  a8:	9b bd       	out	0x2b, r25	; 43
  aa:	8a bd       	out	0x2a, r24	; 42
	
		
	if(PWM_setting[0] > overflows) tmp |= (1<<0);	
  ac:	80 91 65 00 	lds	r24, 0x0065
	if(PWM_setting[1] > overflows) tmp |= (1<<1);
  b0:	80 91 66 00 	lds	r24, 0x0066
	if(PWM_setting[2] > overflows) tmp |= (1<<2);
  b4:	80 91 67 00 	lds	r24, 0x0067
	if(PWM_setting[3] > overflows) tmp |= (1<<3);
  b8:	80 91 68 00 	lds	r24, 0x0068
	if(PWM_setting[4] > overflows) tmp |= (1<<4);
  bc:	80 91 69 00 	lds	r24, 0x0069
	if(PWM_setting[5] > overflows) tmp |= (1<<5);
  c0:	80 91 6a 00 	lds	r24, 0x006A
	if(PWM_setting[6] > overflows) tmp |= (1<<6);
  c4:	80 91 6b 00 	lds	r24, 0x006B
	if(PWM_setting[7] > overflows) tmp |= (1<<7);
  c8:	80 91 6c 00 	lds	r24, 0x006C
	// check if the timer overflows have exceeded the needed value
	if(overflows > (PWM_RES-1)){
		overflows = 0;
	}
	else{
		overflows++;
  cc:	80 91 64 00 	lds	r24, 0x0064
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 64 00 	sts	0x0064, r24
	}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <main>:
#define OCR1A_val (F_CPU / (F_PWM * PWM_RES))


volatile uint8_t PWM_setting[8];

int main(void){
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0xa>
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	
	TCCR1B = 1; // CTC mode prescaler 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK = (1<<OCIE1A); // enable timer 1 compare match interrupt
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	89 bf       	out	0x39, r24	; 57
	
	DDRA = 0x00;
  fa:	1a ba       	out	0x1a, r1	; 26
	


	
	sei(); // globally enable interrupts
  fc:	78 94       	sei
  fe:	00 e0       	ldi	r16, 0x00	; 0
			PWM_setting[i] = (F_CPU / (F_PWM * PWM_RES)) / (rand() % 25 + 1); // 50% duty cycle
			
		}
		
		if(PINA & (1<<PA0)){
			DDRA = 1<<PA0;
 100:	ff 24       	eor	r15, r15
 102:	f3 94       	inc	r15
 104:	1d c0       	rjmp	.+58     	; 0x140 <main+0x5c>

	while(1){
		
		
		for(uint8_t i = 0; i < 8; i++){
			PWM_setting[i] = (F_CPU / (F_PWM * PWM_RES)) / (rand() % 25 + 1); // 50% duty cycle
 106:	80 2f       	mov	r24, r16
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	0e 94 42 01 	call	0x284	; 0x284 <rand>
 112:	69 e1       	ldi	r22, 0x19	; 25
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 a8 00 	call	0x150	; 0x150 <__divmodhi4>
 11a:	9c 01       	movw	r18, r24
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	44 27       	eor	r20, r20
 122:	37 fd       	sbrc	r19, 7
 124:	40 95       	com	r20
 126:	54 2f       	mov	r21, r20
 128:	6d e0       	ldi	r22, 0x0D	; 13
 12a:	73 e0       	ldi	r23, 0x03	; 3
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 bb 00 	call	0x176	; 0x176 <__udivmodsi4>
 134:	e9 81       	ldd	r30, Y+1	; 0x01
 136:	fa 81       	ldd	r31, Y+2	; 0x02
 138:	eb 59       	subi	r30, 0x9B	; 155
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	20 83       	st	Z, r18
	

	while(1){
		
		
		for(uint8_t i = 0; i < 8; i++){
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	08 30       	cpi	r16, 0x08	; 8
 142:	08 f3       	brcs	.-62     	; 0x106 <main+0x22>
			PWM_setting[i] = (F_CPU / (F_PWM * PWM_RES)) / (rand() % 25 + 1); // 50% duty cycle
			
		}
		
		if(PINA & (1<<PA0)){
 144:	c8 9b       	sbis	0x19, 0	; 25
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x68>
			DDRA = 1<<PA0;
 148:	fa ba       	out	0x1a, r15	; 26
			PORTA = 1<<PA0;
 14a:	fb ba       	out	0x1b, r15	; 27
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	db cf       	rjmp	.-74     	; 0x106 <main+0x22>

00000150 <__divmodhi4>:
 150:	97 fb       	bst	r25, 7
 152:	09 2e       	mov	r0, r25
 154:	07 26       	eor	r0, r23
 156:	0a d0       	rcall	.+20     	; 0x16c <__divmodhi4_neg1>
 158:	77 fd       	sbrc	r23, 7
 15a:	04 d0       	rcall	.+8      	; 0x164 <__divmodhi4_neg2>
 15c:	2e d0       	rcall	.+92     	; 0x1ba <__udivmodhi4>
 15e:	06 d0       	rcall	.+12     	; 0x16c <__divmodhi4_neg1>
 160:	00 20       	and	r0, r0
 162:	1a f4       	brpl	.+6      	; 0x16a <__divmodhi4_exit>

00000164 <__divmodhi4_neg2>:
 164:	70 95       	com	r23
 166:	61 95       	neg	r22
 168:	7f 4f       	sbci	r23, 0xFF	; 255

0000016a <__divmodhi4_exit>:
 16a:	08 95       	ret

0000016c <__divmodhi4_neg1>:
 16c:	f6 f7       	brtc	.-4      	; 0x16a <__divmodhi4_exit>
 16e:	90 95       	com	r25
 170:	81 95       	neg	r24
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	08 95       	ret

00000176 <__udivmodsi4>:
 176:	a1 e2       	ldi	r26, 0x21	; 33
 178:	1a 2e       	mov	r1, r26
 17a:	aa 1b       	sub	r26, r26
 17c:	bb 1b       	sub	r27, r27
 17e:	fd 01       	movw	r30, r26
 180:	0d c0       	rjmp	.+26     	; 0x19c <__udivmodsi4_ep>

00000182 <__udivmodsi4_loop>:
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	ee 1f       	adc	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	a2 17       	cp	r26, r18
 18c:	b3 07       	cpc	r27, r19
 18e:	e4 07       	cpc	r30, r20
 190:	f5 07       	cpc	r31, r21
 192:	20 f0       	brcs	.+8      	; 0x19c <__udivmodsi4_ep>
 194:	a2 1b       	sub	r26, r18
 196:	b3 0b       	sbc	r27, r19
 198:	e4 0b       	sbc	r30, r20
 19a:	f5 0b       	sbc	r31, r21

0000019c <__udivmodsi4_ep>:
 19c:	66 1f       	adc	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	88 1f       	adc	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	1a 94       	dec	r1
 1a6:	69 f7       	brne	.-38     	; 0x182 <__udivmodsi4_loop>
 1a8:	60 95       	com	r22
 1aa:	70 95       	com	r23
 1ac:	80 95       	com	r24
 1ae:	90 95       	com	r25
 1b0:	9b 01       	movw	r18, r22
 1b2:	ac 01       	movw	r20, r24
 1b4:	bd 01       	movw	r22, r26
 1b6:	cf 01       	movw	r24, r30
 1b8:	08 95       	ret

000001ba <__udivmodhi4>:
 1ba:	aa 1b       	sub	r26, r26
 1bc:	bb 1b       	sub	r27, r27
 1be:	51 e1       	ldi	r21, 0x11	; 17
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <__udivmodhi4_ep>

000001c2 <__udivmodhi4_loop>:
 1c2:	aa 1f       	adc	r26, r26
 1c4:	bb 1f       	adc	r27, r27
 1c6:	a6 17       	cp	r26, r22
 1c8:	b7 07       	cpc	r27, r23
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <__udivmodhi4_ep>
 1cc:	a6 1b       	sub	r26, r22
 1ce:	b7 0b       	sbc	r27, r23

000001d0 <__udivmodhi4_ep>:
 1d0:	88 1f       	adc	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	5a 95       	dec	r21
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <__udivmodhi4_loop>
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	08 95       	ret

000001e2 <do_rand>:
 1e2:	a0 e0       	ldi	r26, 0x00	; 0
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e7 ef       	ldi	r30, 0xF7	; 247
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	0c 94 94 01 	jmp	0x328	; 0x328 <__prologue_saves__+0x10>
 1ee:	ec 01       	movw	r28, r24
 1f0:	a8 80       	ld	r10, Y
 1f2:	b9 80       	ldd	r11, Y+1	; 0x01
 1f4:	ca 80       	ldd	r12, Y+2	; 0x02
 1f6:	db 80       	ldd	r13, Y+3	; 0x03
 1f8:	a1 14       	cp	r10, r1
 1fa:	b1 04       	cpc	r11, r1
 1fc:	c1 04       	cpc	r12, r1
 1fe:	d1 04       	cpc	r13, r1
 200:	41 f4       	brne	.+16     	; 0x212 <do_rand+0x30>
 202:	84 e2       	ldi	r24, 0x24	; 36
 204:	a8 2e       	mov	r10, r24
 206:	89 ed       	ldi	r24, 0xD9	; 217
 208:	b8 2e       	mov	r11, r24
 20a:	8b e5       	ldi	r24, 0x5B	; 91
 20c:	c8 2e       	mov	r12, r24
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	d8 2e       	mov	r13, r24
 212:	c6 01       	movw	r24, r12
 214:	b5 01       	movw	r22, r10
 216:	2d e1       	ldi	r18, 0x1D	; 29
 218:	33 ef       	ldi	r19, 0xF3	; 243
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__divmodsi4>
 222:	27 ea       	ldi	r18, 0xA7	; 167
 224:	31 e4       	ldi	r19, 0x41	; 65
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__mulsi3>
 22e:	7b 01       	movw	r14, r22
 230:	8c 01       	movw	r16, r24
 232:	c6 01       	movw	r24, r12
 234:	b5 01       	movw	r22, r10
 236:	2d e1       	ldi	r18, 0x1D	; 29
 238:	33 ef       	ldi	r19, 0xF3	; 243
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__divmodsi4>
 242:	ca 01       	movw	r24, r20
 244:	b9 01       	movw	r22, r18
 246:	2c ee       	ldi	r18, 0xEC	; 236
 248:	34 ef       	ldi	r19, 0xF4	; 244
 24a:	4f ef       	ldi	r20, 0xFF	; 255
 24c:	5f ef       	ldi	r21, 0xFF	; 255
 24e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__mulsi3>
 252:	6e 0d       	add	r22, r14
 254:	7f 1d       	adc	r23, r15
 256:	80 1f       	adc	r24, r16
 258:	91 1f       	adc	r25, r17
 25a:	97 ff       	sbrs	r25, 7
 25c:	04 c0       	rjmp	.+8      	; 0x266 <do_rand+0x84>
 25e:	61 50       	subi	r22, 0x01	; 1
 260:	70 40       	sbci	r23, 0x00	; 0
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 48       	sbci	r25, 0x80	; 128
 266:	68 83       	st	Y, r22
 268:	79 83       	std	Y+1, r23	; 0x01
 26a:	8a 83       	std	Y+2, r24	; 0x02
 26c:	9b 83       	std	Y+3, r25	; 0x03
 26e:	9b 01       	movw	r18, r22
 270:	3f 77       	andi	r19, 0x7F	; 127
 272:	c9 01       	movw	r24, r18
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	ea e0       	ldi	r30, 0x0A	; 10
 27a:	0c 94 b0 01 	jmp	0x360	; 0x360 <__epilogue_restores__+0x10>

0000027e <rand_r>:
 27e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <do_rand>
 282:	08 95       	ret

00000284 <rand>:
 284:	80 e6       	ldi	r24, 0x60	; 96
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <do_rand>
 28c:	08 95       	ret

0000028e <srand>:
 28e:	a0 e0       	ldi	r26, 0x00	; 0
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	80 93 60 00 	sts	0x0060, r24
 296:	90 93 61 00 	sts	0x0061, r25
 29a:	a0 93 62 00 	sts	0x0062, r26
 29e:	b0 93 63 00 	sts	0x0063, r27
 2a2:	08 95       	ret

000002a4 <__mulsi3>:
 2a4:	62 9f       	mul	r22, r18
 2a6:	d0 01       	movw	r26, r0
 2a8:	73 9f       	mul	r23, r19
 2aa:	f0 01       	movw	r30, r0
 2ac:	82 9f       	mul	r24, r18
 2ae:	e0 0d       	add	r30, r0
 2b0:	f1 1d       	adc	r31, r1
 2b2:	64 9f       	mul	r22, r20
 2b4:	e0 0d       	add	r30, r0
 2b6:	f1 1d       	adc	r31, r1
 2b8:	92 9f       	mul	r25, r18
 2ba:	f0 0d       	add	r31, r0
 2bc:	83 9f       	mul	r24, r19
 2be:	f0 0d       	add	r31, r0
 2c0:	74 9f       	mul	r23, r20
 2c2:	f0 0d       	add	r31, r0
 2c4:	65 9f       	mul	r22, r21
 2c6:	f0 0d       	add	r31, r0
 2c8:	99 27       	eor	r25, r25
 2ca:	72 9f       	mul	r23, r18
 2cc:	b0 0d       	add	r27, r0
 2ce:	e1 1d       	adc	r30, r1
 2d0:	f9 1f       	adc	r31, r25
 2d2:	63 9f       	mul	r22, r19
 2d4:	b0 0d       	add	r27, r0
 2d6:	e1 1d       	adc	r30, r1
 2d8:	f9 1f       	adc	r31, r25
 2da:	bd 01       	movw	r22, r26
 2dc:	cf 01       	movw	r24, r30
 2de:	11 24       	eor	r1, r1
 2e0:	08 95       	ret

000002e2 <__divmodsi4>:
 2e2:	97 fb       	bst	r25, 7
 2e4:	09 2e       	mov	r0, r25
 2e6:	05 26       	eor	r0, r21
 2e8:	0e d0       	rcall	.+28     	; 0x306 <__divmodsi4_neg1>
 2ea:	57 fd       	sbrc	r21, 7
 2ec:	04 d0       	rcall	.+8      	; 0x2f6 <__divmodsi4_neg2>
 2ee:	43 df       	rcall	.-378    	; 0x176 <__udivmodsi4>
 2f0:	0a d0       	rcall	.+20     	; 0x306 <__divmodsi4_neg1>
 2f2:	00 1c       	adc	r0, r0
 2f4:	38 f4       	brcc	.+14     	; 0x304 <__divmodsi4_exit>

000002f6 <__divmodsi4_neg2>:
 2f6:	50 95       	com	r21
 2f8:	40 95       	com	r20
 2fa:	30 95       	com	r19
 2fc:	21 95       	neg	r18
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	4f 4f       	sbci	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255

00000304 <__divmodsi4_exit>:
 304:	08 95       	ret

00000306 <__divmodsi4_neg1>:
 306:	f6 f7       	brtc	.-4      	; 0x304 <__divmodsi4_exit>
 308:	90 95       	com	r25
 30a:	80 95       	com	r24
 30c:	70 95       	com	r23
 30e:	61 95       	neg	r22
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	8f 4f       	sbci	r24, 0xFF	; 255
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	08 95       	ret

00000318 <__prologue_saves__>:
 318:	2f 92       	push	r2
 31a:	3f 92       	push	r3
 31c:	4f 92       	push	r4
 31e:	5f 92       	push	r5
 320:	6f 92       	push	r6
 322:	7f 92       	push	r7
 324:	8f 92       	push	r8
 326:	9f 92       	push	r9
 328:	af 92       	push	r10
 32a:	bf 92       	push	r11
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	ca 1b       	sub	r28, r26
 342:	db 0b       	sbc	r29, r27
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	09 94       	ijmp

00000350 <__epilogue_restores__>:
 350:	2a 88       	ldd	r2, Y+18	; 0x12
 352:	39 88       	ldd	r3, Y+17	; 0x11
 354:	48 88       	ldd	r4, Y+16	; 0x10
 356:	5f 84       	ldd	r5, Y+15	; 0x0f
 358:	6e 84       	ldd	r6, Y+14	; 0x0e
 35a:	7d 84       	ldd	r7, Y+13	; 0x0d
 35c:	8c 84       	ldd	r8, Y+12	; 0x0c
 35e:	9b 84       	ldd	r9, Y+11	; 0x0b
 360:	aa 84       	ldd	r10, Y+10	; 0x0a
 362:	b9 84       	ldd	r11, Y+9	; 0x09
 364:	c8 84       	ldd	r12, Y+8	; 0x08
 366:	df 80       	ldd	r13, Y+7	; 0x07
 368:	ee 80       	ldd	r14, Y+6	; 0x06
 36a:	fd 80       	ldd	r15, Y+5	; 0x05
 36c:	0c 81       	ldd	r16, Y+4	; 0x04
 36e:	1b 81       	ldd	r17, Y+3	; 0x03
 370:	aa 81       	ldd	r26, Y+2	; 0x02
 372:	b9 81       	ldd	r27, Y+1	; 0x01
 374:	ce 0f       	add	r28, r30
 376:	d1 1d       	adc	r29, r1
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	ed 01       	movw	r28, r26
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
