
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001200  00001294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  0080006c  0080006c  000012a0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ef  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0b  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000465  00000000  00000000  000021fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b9  00000000  00000000  0000265f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000417  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003862  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 e0       	ldi	r30, 0x00	; 0
      ea:	f2 e1       	ldi	r31, 0x12	; 18
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <.do_copy_data_start>

000000ee <.do_copy_data_loop>:
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0

000000f2 <.do_copy_data_start>:
      f2:	ac 36       	cpi	r26, 0x6C	; 108
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <.do_copy_data_loop>

000000f8 <__do_clear_bss>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	ac e6       	ldi	r26, 0x6C	; 108
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ae 3d       	cpi	r26, 0xDE	; 222
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
     10c:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <i2c_init>:
Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
TWSR = 0; /* no prescaler */
     114:	11 b8       	out	0x01, r1	; 1
TWBR = ((F_CPU/SCL_CLOCK)-16)/2; /* must be > 10 for stable operation */
     116:	88 e4       	ldi	r24, 0x48	; 72
     118:	80 b9       	out	0x00, r24	; 0
}/* i2c_init */
     11a:	08 95       	ret

0000011c <i2c_start>:
/*************************************************************************
Issues a start condition and sends address and transfer direction.
return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     11c:	98 2f       	mov	r25, r24
uint8_t twst;
// send START condition
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     11e:	84 ea       	ldi	r24, 0xA4	; 164
     120:	86 bf       	out	0x36, r24	; 54
// wait until transmission completed
while(!(TWCR & (1<<TWINT)));
     122:	06 b6       	in	r0, 0x36	; 54
     124:	07 fe       	sbrs	r0, 7
     126:	fd cf       	rjmp	.-6      	; 0x122 <i2c_start+0x6>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     128:	81 b1       	in	r24, 0x01	; 1
     12a:	88 7f       	andi	r24, 0xF8	; 248
if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     12c:	88 30       	cpi	r24, 0x08	; 8
     12e:	21 f0       	breq	.+8      	; 0x138 <i2c_start+0x1c>
     130:	80 31       	cpi	r24, 0x10	; 16
     132:	11 f0       	breq	.+4      	; 0x138 <i2c_start+0x1c>
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	08 95       	ret
// send device address
TWDR = address;
     138:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
     13a:	84 e8       	ldi	r24, 0x84	; 132
     13c:	86 bf       	out	0x36, r24	; 54
// wail until transmission completed and ACK/NACK has been received
while(!(TWCR & (1<<TWINT)));
     13e:	06 b6       	in	r0, 0x36	; 54
     140:	07 fe       	sbrs	r0, 7
     142:	fd cf       	rjmp	.-6      	; 0x13e <i2c_start+0x22>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     144:	91 b1       	in	r25, 0x01	; 1
     146:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     148:	98 31       	cpi	r25, 0x18	; 24
     14a:	11 f4       	brne	.+4      	; 0x150 <i2c_start+0x34>
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	08 95       	ret
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 34       	cpi	r25, 0x40	; 64
     154:	09 f0       	breq	.+2      	; 0x158 <i2c_start+0x3c>
     156:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}/* i2c_start */
     158:	08 95       	ret

0000015a <i2c_start_wait>:
{
uint8_t twst;
while ( 1 )
{
// send START condition
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     15a:	44 ea       	ldi	r20, 0xA4	; 164
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
// send device address
TWDR = address;
TWCR = (1<<TWINT) | (1<<TWEN);
     15c:	34 e8       	ldi	r19, 0x84	; 132
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
{
/* device busy, send stop condition to terminate write operation */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     15e:	24 e9       	ldi	r18, 0x94	; 148
{
uint8_t twst;
while ( 1 )
{
// send START condition
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     160:	46 bf       	out	0x36, r20	; 54
// wait until transmission completed
while(!(TWCR & (1<<TWINT)));
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <i2c_start_wait+0x8>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     16c:	98 30       	cpi	r25, 0x08	; 8
     16e:	11 f0       	breq	.+4      	; 0x174 <i2c_start_wait+0x1a>
     170:	90 31       	cpi	r25, 0x10	; 16
     172:	b1 f7       	brne	.-20     	; 0x160 <i2c_start_wait+0x6>
// send device address
TWDR = address;
     174:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
     176:	36 bf       	out	0x36, r19	; 54
// wail until transmission completed
while(!(TWCR & (1<<TWINT)));
     178:	06 b6       	in	r0, 0x36	; 54
     17a:	07 fe       	sbrs	r0, 7
     17c:	fd cf       	rjmp	.-6      	; 0x178 <i2c_start_wait+0x1e>
// check value of TWI Status Register. Mask prescaler bits.
twst = TW_STATUS & 0xF8;
     17e:	91 b1       	in	r25, 0x01	; 1
     180:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
     182:	90 32       	cpi	r25, 0x20	; 32
     184:	11 f0       	breq	.+4      	; 0x18a <i2c_start_wait+0x30>
     186:	98 35       	cpi	r25, 0x58	; 88
     188:	29 f4       	brne	.+10     	; 0x194 <i2c_start_wait+0x3a>
{
/* device busy, send stop condition to terminate write operation */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     18a:	26 bf       	out	0x36, r18	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	04 fc       	sbrc	r0, 4
     190:	fd cf       	rjmp	.-6      	; 0x18c <i2c_start_wait+0x32>
     192:	e6 cf       	rjmp	.-52     	; 0x160 <i2c_start_wait+0x6>
     194:	08 95       	ret

00000196 <i2c_rep_start>:
Return: 0 device accessible
1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
return i2c_start( address );
     196:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
}/* i2c_rep_start */
     19a:	08 95       	ret

0000019c <i2c_stop>:
Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
/* send stop condition */
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     19c:	84 e9       	ldi	r24, 0x94	; 148
     19e:	86 bf       	out	0x36, r24	; 54
// wait until stop condition is executed and bus released
while(TWCR & (1<<TWSTO));
     1a0:	06 b6       	in	r0, 0x36	; 54
     1a2:	04 fc       	sbrc	r0, 4
     1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <i2c_stop+0x4>
}/* i2c_stop */
     1a6:	08 95       	ret

000001a8 <i2c_write>:
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
uint8_t twst;
// send data to the previously addressed device
TWDR = data;
     1a8:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT) | (1<<TWEN);
     1aa:	84 e8       	ldi	r24, 0x84	; 132
     1ac:	86 bf       	out	0x36, r24	; 54
// wait until transmission completed
while(!(TWCR & (1<<TWINT)));
     1ae:	06 b6       	in	r0, 0x36	; 54
     1b0:	07 fe       	sbrs	r0, 7
     1b2:	fd cf       	rjmp	.-6      	; 0x1ae <i2c_write+0x6>
// check value of TWI Status Register. Mask prescaler bits
twst = TW_STATUS & 0xF8;
     1b4:	81 b1       	in	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	88 7f       	andi	r24, 0xF8	; 248
     1ba:	88 32       	cpi	r24, 0x28	; 40
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <i2c_write+0x18>
     1be:	91 e0       	ldi	r25, 0x01	; 1
if( twst != TW_MT_DATA_ACK) return 1;
return 0;
}/* i2c_write */
     1c0:	89 2f       	mov	r24, r25
     1c2:	08 95       	ret

000001c4 <i2c_readAck>:
Read one byte from the I2C device, request more data from device
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     1c4:	84 ec       	ldi	r24, 0xC4	; 196
     1c6:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     1c8:	06 b6       	in	r0, 0x36	; 54
     1ca:	07 fe       	sbrs	r0, 7
     1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <i2c_readAck+0x4>
return TWDR;
     1ce:	83 b1       	in	r24, 0x03	; 3
}/* i2c_readAck */
     1d0:	08 95       	ret

000001d2 <i2c_readNak>:
Read one byte from the I2C device, read is followed by a stop condition
Return: byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
TWCR = (1<<TWINT) | (1<<TWEN);
     1d2:	84 e8       	ldi	r24, 0x84	; 132
     1d4:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
     1d6:	06 b6       	in	r0, 0x36	; 54
     1d8:	07 fe       	sbrs	r0, 7
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <i2c_readNak+0x4>
return TWDR;
     1dc:	83 b1       	in	r24, 0x03	; 3
     1de:	08 95       	ret

000001e0 <main>:

#include "twimaster.c"
#include "UART_routines.h"
#include "bmp085.h"

int main(void) {
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	2a 97       	sbiw	r28, 0x0a	; 10
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
	double d;
	char printbuff[10];
	

	//init interrupt
	sei();
     1fc:	78 94       	sei
	USART_Init(BAUD_PRESCALE);
     1fe:	87 e6       	ldi	r24, 0x67	; 103
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 24 01 	call	0x248	; 0x248 <USART_Init>
	//init bmp085
	bmp085_init();
     206:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <bmp085_init>
	//main loop
	for (;;)
	{
		
		l = bmp085_getpressure();
		ltoa(l, printbuff, 10);		
     20a:	8e 01       	movw	r16, r28
     20c:	0f 5f       	subi	r16, 0xFF	; 255
     20e:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     210:	80 e9       	ldi	r24, 0x90	; 144
     212:	e8 2e       	mov	r14, r24
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	f8 2e       	mov	r15, r24

	//main loop
	for (;;)
	{
		
		l = bmp085_getpressure();
     218:	0e 94 30 05 	call	0xa60	; 0xa60 <bmp085_getpressure>
		ltoa(l, printbuff, 10);		
     21c:	a8 01       	movw	r20, r16
     21e:	2a e0       	ldi	r18, 0x0A	; 10
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	0e 94 ba 08 	call	0x1174	; 0x1174 <ltoa>
		transmitString(printbuff);
     226:	c8 01       	movw	r24, r16
     228:	0e 94 3e 01 	call	0x27c	; 0x27c <transmitString>
		TX_NEWLINE;
     22c:	8d e0       	ldi	r24, 0x0D	; 13
     22e:	0e 94 2c 01 	call	0x258	; 0x258 <transmitByte>
     232:	8a e0       	ldi	r24, 0x0A	; 10
     234:	0e 94 2c 01 	call	0x258	; 0x258 <transmitByte>
     238:	88 e8       	ldi	r24, 0x88	; 136
     23a:	93 e1       	ldi	r25, 0x13	; 19
     23c:	f7 01       	movw	r30, r14
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <main+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     244:	d9 f7       	brne	.-10     	; 0x23c <main+0x5c>
     246:	e8 cf       	rjmp	.-48     	; 0x218 <main+0x38>

00000248 <USART_Init>:
#include <avr/pgmspace.h>

#include "UART_routines.h"
void USART_Init(int baud){
   	// Set baud rate
   	UBRRL = baud;// Load lower 8-bits into the low byte of the UBRR register
     248:	89 b9       	out	0x09, r24	; 9
   	UBRRH = (baud >> 8); 
     24a:	89 2f       	mov	r24, r25
     24c:	99 0f       	add	r25, r25
     24e:	99 0b       	sbc	r25, r25
     250:	80 bd       	out	0x20, r24	; 32
	/* Load upper 8-bits into the high byte of the UBRR register Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR datasheet*/ 
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
     252:	88 e9       	ldi	r24, 0x98	; 152
     254:	8a b9       	out	0x0a, r24	; 10
}
     256:	08 95       	ret

00000258 <transmitByte>:


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     258:	5d 9b       	sbis	0x0b, 5	; 11
     25a:	fe cf       	rjmp	.-4      	; 0x258 <transmitByte>
	UDR = data; // Transmit data
     25c:	8c b9       	out	0x0c, r24	; 12
}
     25e:	08 95       	ret

00000260 <receiveByte>:

unsigned char receiveByte(){
	while((UCSRA &(1<<RXC)) == 0);
     260:	5f 9b       	sbis	0x0b, 7	; 11
     262:	fe cf       	rjmp	.-4      	; 0x260 <receiveByte>
	return UDR;
     264:	8c b1       	in	r24, 0x0c	; 12
}
     266:	08 95       	ret

00000268 <transmitString_F>:

void transmitString_F(char* string){
     268:	fc 01       	movw	r30, r24
     26a:	04 c0       	rjmp	.+8      	; 0x274 <transmitString_F+0xc>
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     26c:	5d 9b       	sbis	0x0b, 5	; 11
     26e:	fe cf       	rjmp	.-4      	; 0x26c <transmitString_F+0x4>
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}

void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
     270:	31 96       	adiw	r30, 0x01	; 1
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
	UDR = data; // Transmit data
     272:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}

void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
     274:	84 91       	lpm	r24, Z+
     276:	88 23       	and	r24, r24
     278:	c9 f7       	brne	.-14     	; 0x26c <transmitString_F+0x4>
}
     27a:	08 95       	ret

0000027c <transmitString>:

void transmitString(unsigned char* string){
     27c:	fc 01       	movw	r30, r24
     27e:	04 c0       	rjmp	.+8      	; 0x288 <transmitString+0xc>
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));	// Enable receiver and transmitter and receive complete interrupt 
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
     280:	5d 9b       	sbis	0x0b, 5	; 11
     282:	fe cf       	rjmp	.-4      	; 0x280 <transmitString+0x4>
void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
}

void transmitString(unsigned char* string){
	while (*string) transmitByte(*string++);
     284:	31 96       	adiw	r30, 0x01	; 1
}


void transmitByte(unsigned char data){
	while((UCSRA &(1<<UDRE)) == 0);  // Wait until last byte has been transmitted
	UDR = data; // Transmit data
     286:	8c b9       	out	0x0c, r24	; 12
void transmitString_F(char* string){
  	while (pgm_read_byte(&(*string))) transmitByte(pgm_read_byte(&(*string++)));
}

void transmitString(unsigned char* string){
	while (*string) transmitByte(*string++);
     288:	80 81       	ld	r24, Z
     28a:	88 23       	and	r24, r24
     28c:	c9 f7       	brne	.-14     	; 0x280 <transmitString+0x4>
}
     28e:	08 95       	ret

00000290 <transmitHex>:

void transmitHex( unsigned char dataType, unsigned long data ){
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2b 97       	sbiw	r28, 0x0b	; 11
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	11 f4       	brne	.+4      	; 0x2ac <transmitHex+0x1c>
     2a8:	94 e0       	ldi	r25, 0x04	; 4
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <transmitHex+0x26>
	if (dataType == LONG) count = 8;
     2ac:	82 30       	cpi	r24, 0x02	; 2
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <transmitHex+0x24>
     2b0:	98 e0       	ldi	r25, 0x08	; 8
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <transmitHex+0x26>
     2b4:	92 e0       	ldi	r25, 0x02	; 2
	while (*string) transmitByte(*string++);
}

void transmitHex( unsigned char dataType, unsigned long data ){
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";
     2b6:	de 01       	movw	r26, r28
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	e0 e6       	ldi	r30, 0x60	; 96
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	8b e0       	ldi	r24, 0x0B	; 11
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <transmitHex+0x30>
     2c8:	9e 01       	movw	r18, r28
     2ca:	2e 5f       	subi	r18, 0xFE	; 254
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--){
		  temp = data % 16;
     2ce:	84 2f       	mov	r24, r20
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	e9 2f       	mov	r30, r25
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
		  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
     2d6:	8a 30       	cpi	r24, 0x0A	; 10
     2d8:	20 f4       	brcc	.+8      	; 0x2e2 <transmitHex+0x52>
     2da:	e2 0f       	add	r30, r18
     2dc:	f3 1f       	adc	r31, r19
     2de:	80 5d       	subi	r24, 0xD0	; 208
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <transmitHex+0x58>
		  else dataString [i+1] = (temp - 10) + 0x41;
     2e2:	e2 0f       	add	r30, r18
     2e4:	f3 1f       	adc	r31, r19
     2e6:	89 5c       	subi	r24, 0xC9	; 201
     2e8:	80 83       	st	Z, r24

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--){
     2ea:	91 50       	subi	r25, 0x01	; 1
     2ec:	41 f0       	breq	.+16     	; 0x2fe <transmitHex+0x6e>
		  temp = data % 16;
		  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
		  else dataString [i+1] = (temp - 10) + 0x41;
		  data = data/16;
     2ee:	e4 e0       	ldi	r30, 0x04	; 4
     2f0:	76 95       	lsr	r23
     2f2:	67 95       	ror	r22
     2f4:	57 95       	ror	r21
     2f6:	47 95       	ror	r20
     2f8:	ea 95       	dec	r30
     2fa:	d1 f7       	brne	.-12     	; 0x2f0 <transmitHex+0x60>
     2fc:	e8 cf       	rjmp	.-48     	; 0x2ce <transmitHex+0x3e>
	}
	transmitString (dataString);
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 3e 01 	call	0x27c	; 0x27c <transmitString>
}
     306:	2b 96       	adiw	r28, 0x0b	; 11
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	ec e6       	ldi	r30, 0x6C	; 108
     31e:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
     320:	84 81       	ldd	r24, Z+4	; 0x04
     322:	95 81       	ldd	r25, Z+5	; 0x05
     324:	a6 81       	ldd	r26, Z+6	; 0x06
     326:	b7 81       	ldd	r27, Z+7	; 0x07
     328:	81 93       	st	Z+, r24
     32a:	91 93       	st	Z+, r25
     32c:	a1 93       	st	Z+, r26
     32e:	b1 93       	st	Z+, r27
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	e0 3c       	cpi	r30, 0xC0	; 192
     334:	f8 07       	cpc	r31, r24
     336:	a1 f7       	brne	.-24     	; 0x320 <bmp085_avaragefilter+0x8>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
     338:	20 93 bc 00 	sts	0x00BC, r18
     33c:	30 93 bd 00 	sts	0x00BD, r19
     340:	40 93 be 00 	sts	0x00BE, r20
     344:	50 93 bf 00 	sts	0x00BF, r21
     348:	ec e6       	ldi	r30, 0x6C	; 108
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	50 e0       	ldi	r21, 0x00	; 0
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
     354:	81 91       	ld	r24, Z+
     356:	91 91       	ld	r25, Z+
     358:	a1 91       	ld	r26, Z+
     35a:	b1 91       	ld	r27, Z+
     35c:	28 0f       	add	r18, r24
     35e:	39 1f       	adc	r19, r25
     360:	4a 1f       	adc	r20, r26
     362:	5b 1f       	adc	r21, r27
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	e0 3c       	cpi	r30, 0xC0	; 192
     368:	f8 07       	cpc	r31, r24
     36a:	a1 f7       	brne	.-24     	; 0x354 <bmp085_avaragefilter+0x3c>
     36c:	ca 01       	movw	r24, r20
     36e:	b9 01       	movw	r22, r18
     370:	25 e1       	ldi	r18, 0x15	; 21
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	0e 94 9f 08 	call	0x113e	; 0x113e <__divmodsi4>
     37c:	ca 01       	movw	r24, r20
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
}
     37e:	b9 01       	movw	r22, r18
     380:	08 95       	ret

00000382 <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	18 2f       	mov	r17, r24
     390:	06 2f       	mov	r16, r22
     392:	f7 2e       	mov	r15, r23
     394:	e4 2e       	mov	r14, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     396:	8e ee       	ldi	r24, 0xEE	; 238
     398:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_start_wait>
	i2c_write(reg);
     39c:	81 2f       	mov	r24, r17
     39e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
     3a2:	8f ee       	ldi	r24, 0xEF	; 239
     3a4:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_rep_start>
     3a8:	20 2f       	mov	r18, r16
     3aa:	3f 2d       	mov	r19, r15
     3ac:	c9 01       	movw	r24, r18
     3ae:	ec 01       	movw	r28, r24
     3b0:	ff 24       	eor	r15, r15
	for(i=0; i<bytes; i++) {
		if(i==bytes-1)
     3b2:	0e 2d       	mov	r16, r14
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	01 50       	subi	r16, 0x01	; 1
     3b8:	10 40       	sbci	r17, 0x00	; 0
     3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <bmp085_readmem+0x54>
     3bc:	8f 2d       	mov	r24, r15
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 17       	cp	r24, r16
     3c2:	91 07       	cpc	r25, r17
     3c4:	19 f4       	brne	.+6      	; 0x3cc <bmp085_readmem+0x4a>
			buff[i] = i2c_readNak();
     3c6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <i2c_readNak>
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <bmp085_readmem+0x4e>
		else
			buff[i] = i2c_readAck();
     3cc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <i2c_readAck>
     3d0:	88 83       	st	Y, r24
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
     3d2:	f3 94       	inc	r15
     3d4:	21 96       	adiw	r28, 0x01	; 1
     3d6:	fe 14       	cp	r15, r14
     3d8:	88 f3       	brcs	.-30     	; 0x3bc <bmp085_readmem+0x3a>
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     3da:	0e 94 ce 00 	call	0x19c	; 0x19c <i2c_stop>
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	08 95       	ret

000003ec <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <bmp085_getcalibration+0xa>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     3fa:	1a 82       	std	Y+2, r1	; 0x02
     3fc:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
     3fe:	8a ea       	ldi	r24, 0xAA	; 170
     400:	8e 01       	movw	r16, r28
     402:	0f 5f       	subi	r16, 0xFF	; 255
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	b8 01       	movw	r22, r16
     408:	42 e0       	ldi	r20, 0x02	; 2
     40a:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
     40e:	99 81       	ldd	r25, Y+1	; 0x01
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	2a 81       	ldd	r18, Y+2	; 0x02
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	82 2b       	or	r24, r18
     418:	93 2b       	or	r25, r19
     41a:	90 93 d5 00 	sts	0x00D5, r25
     41e:	80 93 d4 00 	sts	0x00D4, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
     422:	8c ea       	ldi	r24, 0xAC	; 172
     424:	b8 01       	movw	r22, r16
     426:	42 e0       	ldi	r20, 0x02	; 2
     428:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
     42c:	99 81       	ldd	r25, Y+1	; 0x01
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	82 2b       	or	r24, r18
     436:	93 2b       	or	r25, r19
     438:	90 93 dd 00 	sts	0x00DD, r25
     43c:	80 93 dc 00 	sts	0x00DC, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
     440:	8e ea       	ldi	r24, 0xAE	; 174
     442:	b8 01       	movw	r22, r16
     444:	42 e0       	ldi	r20, 0x02	; 2
     446:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
     44a:	99 81       	ldd	r25, Y+1	; 0x01
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	82 2b       	or	r24, r18
     454:	93 2b       	or	r25, r19
     456:	90 93 c9 00 	sts	0x00C9, r25
     45a:	80 93 c8 00 	sts	0x00C8, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
     45e:	80 eb       	ldi	r24, 0xB0	; 176
     460:	b8 01       	movw	r22, r16
     462:	42 e0       	ldi	r20, 0x02	; 2
     464:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     468:	99 81       	ldd	r25, Y+1	; 0x01
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	2a 81       	ldd	r18, Y+2	; 0x02
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	82 2b       	or	r24, r18
     472:	93 2b       	or	r25, r19
     474:	90 93 c1 00 	sts	0x00C1, r25
     478:	80 93 c0 00 	sts	0x00C0, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
     47c:	82 eb       	ldi	r24, 0xB2	; 178
     47e:	b8 01       	movw	r22, r16
     480:	42 e0       	ldi	r20, 0x02	; 2
     482:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     486:	99 81       	ldd	r25, Y+1	; 0x01
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	2a 81       	ldd	r18, Y+2	; 0x02
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	82 2b       	or	r24, r18
     490:	93 2b       	or	r25, r19
     492:	90 93 d9 00 	sts	0x00D9, r25
     496:	80 93 d8 00 	sts	0x00D8, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
     49a:	84 eb       	ldi	r24, 0xB4	; 180
     49c:	b8 01       	movw	r22, r16
     49e:	42 e0       	ldi	r20, 0x02	; 2
     4a0:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     4a4:	99 81       	ldd	r25, Y+1	; 0x01
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	2a 81       	ldd	r18, Y+2	; 0x02
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	82 2b       	or	r24, r18
     4ae:	93 2b       	or	r25, r19
     4b0:	90 93 d1 00 	sts	0x00D1, r25
     4b4:	80 93 d0 00 	sts	0x00D0, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
     4b8:	86 eb       	ldi	r24, 0xB6	; 182
     4ba:	b8 01       	movw	r22, r16
     4bc:	42 e0       	ldi	r20, 0x02	; 2
     4be:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
     4c2:	99 81       	ldd	r25, Y+1	; 0x01
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	2a 81       	ldd	r18, Y+2	; 0x02
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	82 2b       	or	r24, r18
     4cc:	93 2b       	or	r25, r19
     4ce:	90 93 cf 00 	sts	0x00CF, r25
     4d2:	80 93 ce 00 	sts	0x00CE, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
     4d6:	88 eb       	ldi	r24, 0xB8	; 184
     4d8:	b8 01       	movw	r22, r16
     4da:	42 e0       	ldi	r20, 0x02	; 2
     4dc:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
     4e0:	99 81       	ldd	r25, Y+1	; 0x01
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	2a 81       	ldd	r18, Y+2	; 0x02
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	82 2b       	or	r24, r18
     4ea:	93 2b       	or	r25, r19
     4ec:	90 93 c3 00 	sts	0x00C3, r25
     4f0:	80 93 c2 00 	sts	0x00C2, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
     4f4:	8a eb       	ldi	r24, 0xBA	; 186
     4f6:	b8 01       	movw	r22, r16
     4f8:	42 e0       	ldi	r20, 0x02	; 2
     4fa:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
     4fe:	99 81       	ldd	r25, Y+1	; 0x01
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	2a 81       	ldd	r18, Y+2	; 0x02
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	82 2b       	or	r24, r18
     508:	93 2b       	or	r25, r19
     50a:	90 93 d7 00 	sts	0x00D7, r25
     50e:	80 93 d6 00 	sts	0x00D6, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
     512:	8c eb       	ldi	r24, 0xBC	; 188
     514:	b8 01       	movw	r22, r16
     516:	42 e0       	ldi	r20, 0x02	; 2
     518:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
     51c:	99 81       	ldd	r25, Y+1	; 0x01
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	2a 81       	ldd	r18, Y+2	; 0x02
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	82 2b       	or	r24, r18
     526:	93 2b       	or	r25, r19
     528:	90 93 db 00 	sts	0x00DB, r25
     52c:	80 93 da 00 	sts	0x00DA, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
     530:	8e eb       	ldi	r24, 0xBE	; 190
     532:	b8 01       	movw	r22, r16
     534:	42 e0       	ldi	r20, 0x02	; 2
     536:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
     53a:	99 81       	ldd	r25, Y+1	; 0x01
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	2a 81       	ldd	r18, Y+2	; 0x02
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	82 2b       	or	r24, r18
     544:	93 2b       	or	r25, r19
     546:	90 93 d3 00 	sts	0x00D3, r25
     54a:	80 93 d2 00 	sts	0x00D2, r24
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	08 95       	ret

0000055c <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	18 2f       	mov	r17, r24
     562:	06 2f       	mov	r16, r22
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     564:	8e ee       	ldi	r24, 0xEE	; 238
     566:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_start_wait>
	i2c_write(reg);
     56a:	81 2f       	mov	r24, r17
     56c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_write>
	i2c_write(value);
     570:	80 2f       	mov	r24, r16
     572:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_write>
	i2c_stop();
     576:	0e 94 ce 00 	call	0x19c	; 0x19c <i2c_stop>
}
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <bmp085_getrawtemperature>:
}

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	df 93       	push	r29
     58a:	cf 93       	push	r28
     58c:	00 d0       	rcall	.+0      	; 0x58e <bmp085_getrawtemperature+0xe>
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     592:	1a 82       	std	Y+2, r1	; 0x02
     594:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
     596:	84 ef       	ldi	r24, 0xF4	; 244
     598:	6e e2       	ldi	r22, 0x2E	; 46
     59a:	0e 94 ae 02 	call	0x55c	; 0x55c <bmp085_writemem>
     59e:	80 e2       	ldi	r24, 0x20	; 32
     5a0:	9e e4       	ldi	r25, 0x4E	; 78
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <bmp085_getrawtemperature+0x22>
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
     5a6:	86 ef       	ldi	r24, 0xF6	; 246
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	42 e0       	ldi	r20, 0x02	; 2
     5b0:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
     5b4:	69 81       	ldd	r22, Y+1	; 0x01
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	98 2f       	mov	r25, r24
     5be:	87 2f       	mov	r24, r23
     5c0:	76 2f       	mov	r23, r22
     5c2:	66 27       	eor	r22, r22
     5c4:	2a 81       	ldd	r18, Y+2	; 0x02
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	62 2b       	or	r22, r18
     5ce:	73 2b       	or	r23, r19
     5d0:	84 2b       	or	r24, r20
     5d2:	95 2b       	or	r25, r21
     5d4:	20 91 d0 00 	lds	r18, 0x00D0
     5d8:	30 91 d1 00 	lds	r19, 0x00D1
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	62 1b       	sub	r22, r18
     5e2:	73 0b       	sbc	r23, r19
     5e4:	84 0b       	sbc	r24, r20
     5e6:	95 0b       	sbc	r25, r21
     5e8:	20 91 d8 00 	lds	r18, 0x00D8
     5ec:	30 91 d9 00 	lds	r19, 0x00D9
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     5f8:	7b 01       	movw	r14, r22
     5fa:	8c 01       	movw	r16, r24
     5fc:	3f e0       	ldi	r19, 0x0F	; 15
     5fe:	15 95       	asr	r17
     600:	07 95       	ror	r16
     602:	f7 94       	ror	r15
     604:	e7 94       	ror	r14
     606:	3a 95       	dec	r19
     608:	d1 f7       	brne	.-12     	; 0x5fe <bmp085_getrawtemperature+0x7e>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
	bmp085_rawtemperature = x1 + x2;
     60a:	60 91 da 00 	lds	r22, 0x00DA
     60e:	70 91 db 00 	lds	r23, 0x00DB
     612:	88 27       	eor	r24, r24
     614:	77 fd       	sbrc	r23, 7
     616:	80 95       	com	r24
     618:	98 2f       	mov	r25, r24
     61a:	2b e0       	ldi	r18, 0x0B	; 11
     61c:	66 0f       	add	r22, r22
     61e:	77 1f       	adc	r23, r23
     620:	88 1f       	adc	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	2a 95       	dec	r18
     626:	d1 f7       	brne	.-12     	; 0x61c <bmp085_getrawtemperature+0x9c>
     628:	20 91 d2 00 	lds	r18, 0x00D2
     62c:	30 91 d3 00 	lds	r19, 0x00D3
     630:	44 27       	eor	r20, r20
     632:	37 fd       	sbrc	r19, 7
     634:	40 95       	com	r20
     636:	54 2f       	mov	r21, r20
     638:	2e 0d       	add	r18, r14
     63a:	3f 1d       	adc	r19, r15
     63c:	40 1f       	adc	r20, r16
     63e:	51 1f       	adc	r21, r17
     640:	0e 94 9f 08 	call	0x113e	; 0x113e <__divmodsi4>
     644:	e2 0e       	add	r14, r18
     646:	f3 1e       	adc	r15, r19
     648:	04 1f       	adc	r16, r20
     64a:	15 1f       	adc	r17, r21
     64c:	e0 92 ca 00 	sts	0x00CA, r14
     650:	f0 92 cb 00 	sts	0x00CB, r15
     654:	00 93 cc 00 	sts	0x00CC, r16
     658:	10 93 cd 00 	sts	0x00CD, r17
}
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	08 95       	ret

0000066e <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
     66e:	0e 94 c0 02 	call	0x580	; 0x580 <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
     672:	60 91 ca 00 	lds	r22, 0x00CA
     676:	70 91 cb 00 	lds	r23, 0x00CB
     67a:	80 91 cc 00 	lds	r24, 0x00CC
     67e:	90 91 cd 00 	lds	r25, 0x00CD
     682:	68 5f       	subi	r22, 0xF8	; 248
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	8f 4f       	sbci	r24, 0xFF	; 255
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	54 e0       	ldi	r21, 0x04	; 4
     68c:	95 95       	asr	r25
     68e:	87 95       	ror	r24
     690:	77 95       	ror	r23
     692:	67 95       	ror	r22
     694:	5a 95       	dec	r21
     696:	d1 f7       	brne	.-12     	; 0x68c <bmp085_gettemperature+0x1e>
     698:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatsisf>
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e2       	ldi	r20, 0x20	; 32
     6a2:	51 e4       	ldi	r21, 0x41	; 65
     6a4:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divsf3>
	temperature = temperature /10;
	return temperature;
}
     6a8:	08 95       	ret

000006aa <bmp085_getrawpressure>:
}

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
     6aa:	2f 92       	push	r2
     6ac:	3f 92       	push	r3
     6ae:	4f 92       	push	r4
     6b0:	5f 92       	push	r5
     6b2:	6f 92       	push	r6
     6b4:	7f 92       	push	r7
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	27 97       	sbiw	r28, 0x07	; 7
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
     6de:	fe 01       	movw	r30, r28
     6e0:	31 96       	adiw	r30, 0x01	; 1
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	df 01       	movw	r26, r30
     6e6:	1d 92       	st	X+, r1
     6e8:	8a 95       	dec	r24
     6ea:	e9 f7       	brne	.-6      	; 0x6e6 <bmp085_getrawpressure+0x3c>
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
     6ec:	0e 94 c0 02 	call	0x580	; 0x580 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
     6f0:	84 ef       	ldi	r24, 0xF4	; 244
     6f2:	64 ef       	ldi	r22, 0xF4	; 244
     6f4:	0e 94 ae 02 	call	0x55c	; 0x55c <bmp085_writemem>
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	20 e9       	ldi	r18, 0x90	; 144
     6fe:	31 e0       	ldi	r19, 0x01	; 1
     700:	f9 01       	movw	r30, r18
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <bmp085_getrawpressure+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     706:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     708:	d9 f7       	brne	.-10     	; 0x700 <bmp085_getrawpressure+0x56>
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
     70a:	86 ef       	ldi	r24, 0xF6	; 246
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	43 e0       	ldi	r20, 0x03	; 3
     714:	0e 94 c1 01 	call	0x382	; 0x382 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
     718:	60 90 ca 00 	lds	r6, 0x00CA
     71c:	70 90 cb 00 	lds	r7, 0x00CB
     720:	80 90 cc 00 	lds	r8, 0x00CC
     724:	90 90 cd 00 	lds	r9, 0x00CD
     728:	80 e6       	ldi	r24, 0x60	; 96
     72a:	90 ef       	ldi	r25, 0xF0	; 240
     72c:	af ef       	ldi	r26, 0xFF	; 255
     72e:	bf ef       	ldi	r27, 0xFF	; 255
     730:	68 0e       	add	r6, r24
     732:	79 1e       	adc	r7, r25
     734:	8a 1e       	adc	r8, r26
     736:	9b 1e       	adc	r9, r27
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     738:	c4 01       	movw	r24, r8
     73a:	b3 01       	movw	r22, r6
     73c:	a4 01       	movw	r20, r8
     73e:	93 01       	movw	r18, r6
     740:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     744:	1b 01       	movw	r2, r22
     746:	2c 01       	movw	r4, r24
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     748:	60 91 c8 00 	lds	r22, 0x00C8
     74c:	70 91 c9 00 	lds	r23, 0x00C9
     750:	88 27       	eor	r24, r24
     752:	77 fd       	sbrc	r23, 7
     754:	80 95       	com	r24
     756:	98 2f       	mov	r25, r24
     758:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     75c:	7b 01       	movw	r14, r22
     75e:	8c 01       	movw	r16, r24
     760:	8d e0       	ldi	r24, 0x0D	; 13
     762:	15 95       	asr	r17
     764:	07 95       	ror	r16
     766:	f7 94       	ror	r15
     768:	e7 94       	ror	r14
     76a:	8a 95       	dec	r24
     76c:	d1 f7       	brne	.-12     	; 0x762 <bmp085_getrawpressure+0xb8>
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	e8 0e       	add	r14, r24
     778:	f9 1e       	adc	r15, r25
     77a:	0a 1f       	adc	r16, r26
     77c:	1b 1f       	adc	r17, r27
     77e:	c2 01       	movw	r24, r4
     780:	b1 01       	movw	r22, r2
     782:	bc e0       	ldi	r27, 0x0C	; 12
     784:	95 95       	asr	r25
     786:	87 95       	ror	r24
     788:	77 95       	ror	r23
     78a:	67 95       	ror	r22
     78c:	ba 95       	dec	r27
     78e:	d1 f7       	brne	.-12     	; 0x784 <bmp085_getrawpressure+0xda>
     790:	20 91 ce 00 	lds	r18, 0x00CE
     794:	30 91 cf 00 	lds	r19, 0x00CF
     798:	44 27       	eor	r20, r20
     79a:	37 fd       	sbrc	r19, 7
     79c:	40 95       	com	r20
     79e:	54 2f       	mov	r21, r20
     7a0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     7a4:	bc 01       	movw	r22, r24
     7a6:	99 27       	eor	r25, r25
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	90 95       	com	r25
     7ac:	89 2f       	mov	r24, r25
     7ae:	e6 0e       	add	r14, r22
     7b0:	f7 1e       	adc	r15, r23
     7b2:	08 1f       	adc	r16, r24
     7b4:	19 1f       	adc	r17, r25
     7b6:	f2 e0       	ldi	r31, 0x02	; 2
     7b8:	15 95       	asr	r17
     7ba:	07 95       	ror	r16
     7bc:	f7 94       	ror	r15
     7be:	e7 94       	ror	r14
     7c0:	fa 95       	dec	r31
     7c2:	d1 f7       	brne	.-12     	; 0x7b8 <bmp085_getrawpressure+0x10e>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e8       	ldi	r25, 0x80	; 128
     7c8:	a0 e0       	ldi	r26, 0x00	; 0
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	e8 0e       	add	r14, r24
     7ce:	f9 1e       	adc	r15, r25
     7d0:	0a 1f       	adc	r16, r26
     7d2:	1b 1f       	adc	r17, r27
     7d4:	20 91 c0 00 	lds	r18, 0x00C0
     7d8:	30 91 c1 00 	lds	r19, 0x00C1
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	c8 01       	movw	r24, r16
     7e2:	b7 01       	movw	r22, r14
     7e4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	ef e0       	ldi	r30, 0x0F	; 15
     7ee:	b6 95       	lsr	r27
     7f0:	a7 95       	ror	r26
     7f2:	97 95       	ror	r25
     7f4:	87 95       	ror	r24
     7f6:	ea 95       	dec	r30
     7f8:	d1 f7       	brne	.-12     	; 0x7ee <bmp085_getrawpressure+0x144>
     7fa:	8c 83       	std	Y+4, r24	; 0x04
     7fc:	9d 83       	std	Y+5, r25	; 0x05
     7fe:	ae 83       	std	Y+6, r26	; 0x06
     800:	bf 83       	std	Y+7, r27	; 0x07
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
     802:	a9 80       	ldd	r10, Y+1	; 0x01
     804:	bb 24       	eor	r11, r11
     806:	cc 24       	eor	r12, r12
     808:	dd 24       	eor	r13, r13
     80a:	65 01       	movw	r12, r10
     80c:	bb 24       	eor	r11, r11
     80e:	aa 24       	eor	r10, r10
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 e0       	ldi	r26, 0x00	; 0
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	ba 2f       	mov	r27, r26
     81a:	a9 2f       	mov	r26, r25
     81c:	98 2f       	mov	r25, r24
     81e:	88 27       	eor	r24, r24
     820:	a8 2a       	or	r10, r24
     822:	b9 2a       	or	r11, r25
     824:	ca 2a       	or	r12, r26
     826:	db 2a       	or	r13, r27
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	a8 2a       	or	r10, r24
     832:	b9 2a       	or	r11, r25
     834:	ca 2a       	or	r12, r26
     836:	db 2a       	or	r13, r27
     838:	55 e0       	ldi	r21, 0x05	; 5
     83a:	d5 94       	asr	r13
     83c:	c7 94       	ror	r12
     83e:	b7 94       	ror	r11
     840:	a7 94       	ror	r10
     842:	5a 95       	dec	r21
     844:	d1 f7       	brne	.-12     	; 0x83a <bmp085_getrawpressure+0x190>
     846:	60 91 dc 00 	lds	r22, 0x00DC
     84a:	70 91 dd 00 	lds	r23, 0x00DD
     84e:	88 27       	eor	r24, r24
     850:	77 fd       	sbrc	r23, 7
     852:	80 95       	com	r24
     854:	98 2f       	mov	r25, r24
     856:	a4 01       	movw	r20, r8
     858:	93 01       	movw	r18, r6
     85a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     85e:	7b 01       	movw	r14, r22
     860:	8c 01       	movw	r16, r24
     862:	4b e0       	ldi	r20, 0x0B	; 11
     864:	15 95       	asr	r17
     866:	07 95       	ror	r16
     868:	f7 94       	ror	r15
     86a:	e7 94       	ror	r14
     86c:	4a 95       	dec	r20
     86e:	d1 f7       	brne	.-12     	; 0x864 <__stack+0x5>
     870:	80 91 d4 00 	lds	r24, 0x00D4
     874:	90 91 d5 00 	lds	r25, 0x00D5
     878:	aa 27       	eor	r26, r26
     87a:	97 fd       	sbrc	r25, 7
     87c:	a0 95       	com	r26
     87e:	ba 2f       	mov	r27, r26
     880:	32 e0       	ldi	r19, 0x02	; 2
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	aa 1f       	adc	r26, r26
     888:	bb 1f       	adc	r27, r27
     88a:	3a 95       	dec	r19
     88c:	d1 f7       	brne	.-12     	; 0x882 <__stack+0x23>
     88e:	e8 0e       	add	r14, r24
     890:	f9 1e       	adc	r15, r25
     892:	0a 1f       	adc	r16, r26
     894:	1b 1f       	adc	r17, r27
     896:	20 91 c2 00 	lds	r18, 0x00C2
     89a:	30 91 c3 00 	lds	r19, 0x00C3
     89e:	44 27       	eor	r20, r20
     8a0:	37 fd       	sbrc	r19, 7
     8a2:	40 95       	com	r20
     8a4:	54 2f       	mov	r21, r20
     8a6:	c2 01       	movw	r24, r4
     8a8:	b1 01       	movw	r22, r2
     8aa:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     8ae:	27 e1       	ldi	r18, 0x17	; 23
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	77 95       	ror	r23
     8b6:	67 95       	ror	r22
     8b8:	2a 95       	dec	r18
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	e6 0e       	add	r14, r22
     8be:	f7 1e       	adc	r15, r23
     8c0:	08 1f       	adc	r16, r24
     8c2:	19 1f       	adc	r17, r25
     8c4:	ee 0c       	add	r14, r14
     8c6:	ff 1c       	adc	r15, r15
     8c8:	00 1f       	adc	r16, r16
     8ca:	11 1f       	adc	r17, r17
     8cc:	ae 18       	sub	r10, r14
     8ce:	bf 08       	sbc	r11, r15
     8d0:	c0 0a       	sbc	r12, r16
     8d2:	d1 0a       	sbc	r13, r17
     8d4:	c6 01       	movw	r24, r12
     8d6:	b5 01       	movw	r22, r10
     8d8:	2a e6       	ldi	r18, 0x6A	; 106
     8da:	38 e1       	ldi	r19, 0x18	; 24
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     8e4:	97 fd       	sbrc	r25, 7
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <__stack+0xa7>
     8e8:	66 0f       	add	r22, r22
     8ea:	77 1f       	adc	r23, r23
     8ec:	88 1f       	adc	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	2c 81       	ldd	r18, Y+4	; 0x04
     8f2:	3d 81       	ldd	r19, Y+5	; 0x05
     8f4:	4e 81       	ldd	r20, Y+6	; 0x06
     8f6:	5f 81       	ldd	r21, Y+7	; 0x07
     8f8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__udivmodsi4>
     8fc:	c9 01       	movw	r24, r18
     8fe:	da 01       	movw	r26, r20
     900:	5c 01       	movw	r10, r24
     902:	6d 01       	movw	r12, r26
     904:	0c c0       	rjmp	.+24     	; 0x91e <__stack+0xbf>
     906:	2c 81       	ldd	r18, Y+4	; 0x04
     908:	3d 81       	ldd	r19, Y+5	; 0x05
     90a:	4e 81       	ldd	r20, Y+6	; 0x06
     90c:	5f 81       	ldd	r21, Y+7	; 0x07
     90e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__udivmodsi4>
     912:	59 01       	movw	r10, r18
     914:	6a 01       	movw	r12, r20
     916:	aa 0c       	add	r10, r10
     918:	bb 1c       	adc	r11, r11
     91a:	cc 1c       	adc	r12, r12
     91c:	dd 1c       	adc	r13, r13
	x1 = (p >> 8) * (p >> 8);
     91e:	55 27       	eor	r21, r21
     920:	d7 fc       	sbrc	r13, 7
     922:	5a 95       	dec	r21
     924:	4d 2d       	mov	r20, r13
     926:	3c 2d       	mov	r19, r12
     928:	2b 2d       	mov	r18, r11
	x1 = (x1 * 3038) >> 16;
     92a:	ca 01       	movw	r24, r20
     92c:	b9 01       	movw	r22, r18
     92e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     932:	2e ed       	ldi	r18, 0xDE	; 222
     934:	3b e0       	ldi	r19, 0x0B	; 11
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     93e:	7b 01       	movw	r14, r22
     940:	8c 01       	movw	r16, r24
	x2 = (-7357 * p) >> 16;
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     942:	c6 01       	movw	r24, r12
     944:	b5 01       	movw	r22, r10
     946:	23 e4       	ldi	r18, 0x43	; 67
     948:	33 ee       	ldi	r19, 0xE3	; 227
     94a:	4f ef       	ldi	r20, 0xFF	; 255
     94c:	5f ef       	ldi	r21, 0xFF	; 255
     94e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__mulsi3>
     952:	bc 01       	movw	r22, r24
     954:	99 27       	eor	r25, r25
     956:	77 fd       	sbrc	r23, 7
     958:	90 95       	com	r25
     95a:	89 2f       	mov	r24, r25
     95c:	61 53       	subi	r22, 0x31	; 49
     95e:	71 4f       	sbci	r23, 0xF1	; 241
     960:	8f 4f       	sbci	r24, 0xFF	; 255
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	78 01       	movw	r14, r16
     966:	11 27       	eor	r17, r17
     968:	f7 fc       	sbrc	r15, 7
     96a:	10 95       	com	r17
     96c:	01 2f       	mov	r16, r17
     96e:	6e 0d       	add	r22, r14
     970:	7f 1d       	adc	r23, r15
     972:	80 1f       	adc	r24, r16
     974:	91 1f       	adc	r25, r17
     976:	e4 e0       	ldi	r30, 0x04	; 4
     978:	95 95       	asr	r25
     97a:	87 95       	ror	r24
     97c:	77 95       	ror	r23
     97e:	67 95       	ror	r22
     980:	ea 95       	dec	r30
     982:	d1 f7       	brne	.-12     	; 0x978 <__stack+0x119>
     984:	6a 0d       	add	r22, r10
     986:	7b 1d       	adc	r23, r11
     988:	8c 1d       	adc	r24, r12
     98a:	9d 1d       	adc	r25, r13
     98c:	60 93 c4 00 	sts	0x00C4, r22
     990:	70 93 c5 00 	sts	0x00C5, r23
     994:	80 93 c6 00 	sts	0x00C6, r24
     998:	90 93 c7 00 	sts	0x00C7, r25

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
     99c:	0e 94 8c 01 	call	0x318	; 0x318 <bmp085_avaragefilter>
     9a0:	60 93 c4 00 	sts	0x00C4, r22
     9a4:	70 93 c5 00 	sts	0x00C5, r23
     9a8:	80 93 c6 00 	sts	0x00C6, r24
     9ac:	90 93 c7 00 	sts	0x00C7, r25
	#endif
}
     9b0:	27 96       	adiw	r28, 0x07	; 7
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	5f 90       	pop	r5
     9da:	4f 90       	pop	r4
     9dc:	3f 90       	pop	r3
     9de:	2f 90       	pop	r2
     9e0:	08 95       	ret

000009e2 <bmp085_init>:
}

/*
 * init bmp085
 */
void bmp085_init() {
     9e2:	1f 93       	push	r17
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     9e4:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_init>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9e8:	85 e3       	ldi	r24, 0x35	; 53
     9ea:	8a 95       	dec	r24
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <bmp085_init+0x8>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     9ee:	0e 94 f6 01 	call	0x3ec	; 0x3ec <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     9f2:	0e 94 c0 02 	call	0x580	; 0x580 <bmp085_getrawtemperature>
     9f6:	10 e0       	ldi	r17, 0x00	; 0
	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     9f8:	0e 94 55 03 	call	0x6aa	; 0x6aa <bmp085_getrawpressure>

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     9fc:	1f 5f       	subi	r17, 0xFF	; 255
     9fe:	15 31       	cpi	r17, 0x15	; 21
     a00:	d9 f7       	brne	.-10     	; 0x9f8 <bmp085_init+0x16>
		bmp085_getrawpressure();
	}
	#endif
}
     a02:	1f 91       	pop	r17
     a04:	08 95       	ret

00000a06 <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
     a06:	0e 94 55 03 	call	0x6aa	; 0x6aa <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
     a0a:	60 91 c4 00 	lds	r22, 0x00C4
     a0e:	70 91 c5 00 	lds	r23, 0x00C5
     a12:	80 91 c6 00 	lds	r24, 0x00C6
     a16:	90 91 c7 00 	lds	r25, 0x00C7
     a1a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatsisf>
     a1e:	20 e8       	ldi	r18, 0x80	; 128
     a20:	36 ee       	ldi	r19, 0xE6	; 230
     a22:	45 ec       	ldi	r20, 0xC5	; 197
     a24:	57 e4       	ldi	r21, 0x47	; 71
     a26:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divsf3>
     a2a:	21 e0       	ldi	r18, 0x01	; 1
     a2c:	3e ed       	ldi	r19, 0xDE	; 222
     a2e:	42 e4       	ldi	r20, 0x42	; 66
     a30:	5e e3       	ldi	r21, 0x3E	; 62
     a32:	0e 94 96 06 	call	0xd2c	; 0xd2c <pow>
     a36:	9b 01       	movw	r18, r22
     a38:	ac 01       	movw	r20, r24
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	80 e8       	ldi	r24, 0x80	; 128
     a40:	9f e3       	ldi	r25, 0x3F	; 63
     a42:	0e 94 3b 05 	call	0xa76	; 0xa76 <__subsf3>
     a46:	2b e4       	ldi	r18, 0x4B	; 75
     a48:	3a e3       	ldi	r19, 0x3A	; 58
     a4a:	4d eb       	ldi	r20, 0xBD	; 189
     a4c:	57 e3       	ldi	r21, 0x37	; 55
     a4e:	0e 94 a0 05 	call	0xb40	; 0xb40 <__divsf3>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	0e 94 3c 05 	call	0xa78	; 0xa78 <__addsf3>
}
     a5e:	08 95       	ret

00000a60 <bmp085_getpressure>:

/*
 * get pressure
 */
int32_t bmp085_getpressure() {
	bmp085_getrawpressure();
     a60:	0e 94 55 03 	call	0x6aa	; 0x6aa <bmp085_getrawpressure>
     a64:	60 91 c4 00 	lds	r22, 0x00C4
     a68:	70 91 c5 00 	lds	r23, 0x00C5
	return bmp085_rawpressure + BMP085_UNITPAOFFSET;
}
     a6c:	80 91 c6 00 	lds	r24, 0x00C6
     a70:	90 91 c7 00 	lds	r25, 0x00C7
     a74:	08 95       	ret

00000a76 <__subsf3>:
     a76:	50 58       	subi	r21, 0x80	; 128

00000a78 <__addsf3>:
     a78:	bb 27       	eor	r27, r27
     a7a:	aa 27       	eor	r26, r26
     a7c:	0e d0       	rcall	.+28     	; 0xa9a <__addsf3x>
     a7e:	1c c1       	rjmp	.+568    	; 0xcb8 <__fp_round>
     a80:	0d d1       	rcall	.+538    	; 0xc9c <__fp_pscA>
     a82:	30 f0       	brcs	.+12     	; 0xa90 <__addsf3+0x18>
     a84:	12 d1       	rcall	.+548    	; 0xcaa <__fp_pscB>
     a86:	20 f0       	brcs	.+8      	; 0xa90 <__addsf3+0x18>
     a88:	31 f4       	brne	.+12     	; 0xa96 <__addsf3+0x1e>
     a8a:	9f 3f       	cpi	r25, 0xFF	; 255
     a8c:	11 f4       	brne	.+4      	; 0xa92 <__addsf3+0x1a>
     a8e:	1e f4       	brtc	.+6      	; 0xa96 <__addsf3+0x1e>
     a90:	02 c1       	rjmp	.+516    	; 0xc96 <__fp_nan>
     a92:	0e f4       	brtc	.+2      	; 0xa96 <__addsf3+0x1e>
     a94:	e0 95       	com	r30
     a96:	e7 fb       	bst	r30, 7
     a98:	f8 c0       	rjmp	.+496    	; 0xc8a <__fp_inf>

00000a9a <__addsf3x>:
     a9a:	e9 2f       	mov	r30, r25
     a9c:	1e d1       	rcall	.+572    	; 0xcda <__fp_split3>
     a9e:	80 f3       	brcs	.-32     	; 0xa80 <__addsf3+0x8>
     aa0:	ba 17       	cp	r27, r26
     aa2:	62 07       	cpc	r22, r18
     aa4:	73 07       	cpc	r23, r19
     aa6:	84 07       	cpc	r24, r20
     aa8:	95 07       	cpc	r25, r21
     aaa:	18 f0       	brcs	.+6      	; 0xab2 <__addsf3x+0x18>
     aac:	71 f4       	brne	.+28     	; 0xaca <__addsf3x+0x30>
     aae:	9e f5       	brtc	.+102    	; 0xb16 <__addsf3x+0x7c>
     ab0:	36 c1       	rjmp	.+620    	; 0xd1e <__fp_zero>
     ab2:	0e f4       	brtc	.+2      	; 0xab6 <__addsf3x+0x1c>
     ab4:	e0 95       	com	r30
     ab6:	0b 2e       	mov	r0, r27
     ab8:	ba 2f       	mov	r27, r26
     aba:	a0 2d       	mov	r26, r0
     abc:	0b 01       	movw	r0, r22
     abe:	b9 01       	movw	r22, r18
     ac0:	90 01       	movw	r18, r0
     ac2:	0c 01       	movw	r0, r24
     ac4:	ca 01       	movw	r24, r20
     ac6:	a0 01       	movw	r20, r0
     ac8:	11 24       	eor	r1, r1
     aca:	ff 27       	eor	r31, r31
     acc:	59 1b       	sub	r21, r25
     ace:	99 f0       	breq	.+38     	; 0xaf6 <__addsf3x+0x5c>
     ad0:	59 3f       	cpi	r21, 0xF9	; 249
     ad2:	50 f4       	brcc	.+20     	; 0xae8 <__addsf3x+0x4e>
     ad4:	50 3e       	cpi	r21, 0xE0	; 224
     ad6:	68 f1       	brcs	.+90     	; 0xb32 <__addsf3x+0x98>
     ad8:	1a 16       	cp	r1, r26
     ada:	f0 40       	sbci	r31, 0x00	; 0
     adc:	a2 2f       	mov	r26, r18
     ade:	23 2f       	mov	r18, r19
     ae0:	34 2f       	mov	r19, r20
     ae2:	44 27       	eor	r20, r20
     ae4:	58 5f       	subi	r21, 0xF8	; 248
     ae6:	f3 cf       	rjmp	.-26     	; 0xace <__addsf3x+0x34>
     ae8:	46 95       	lsr	r20
     aea:	37 95       	ror	r19
     aec:	27 95       	ror	r18
     aee:	a7 95       	ror	r26
     af0:	f0 40       	sbci	r31, 0x00	; 0
     af2:	53 95       	inc	r21
     af4:	c9 f7       	brne	.-14     	; 0xae8 <__addsf3x+0x4e>
     af6:	7e f4       	brtc	.+30     	; 0xb16 <__addsf3x+0x7c>
     af8:	1f 16       	cp	r1, r31
     afa:	ba 0b       	sbc	r27, r26
     afc:	62 0b       	sbc	r22, r18
     afe:	73 0b       	sbc	r23, r19
     b00:	84 0b       	sbc	r24, r20
     b02:	ba f0       	brmi	.+46     	; 0xb32 <__addsf3x+0x98>
     b04:	91 50       	subi	r25, 0x01	; 1
     b06:	a1 f0       	breq	.+40     	; 0xb30 <__addsf3x+0x96>
     b08:	ff 0f       	add	r31, r31
     b0a:	bb 1f       	adc	r27, r27
     b0c:	66 1f       	adc	r22, r22
     b0e:	77 1f       	adc	r23, r23
     b10:	88 1f       	adc	r24, r24
     b12:	c2 f7       	brpl	.-16     	; 0xb04 <__addsf3x+0x6a>
     b14:	0e c0       	rjmp	.+28     	; 0xb32 <__addsf3x+0x98>
     b16:	ba 0f       	add	r27, r26
     b18:	62 1f       	adc	r22, r18
     b1a:	73 1f       	adc	r23, r19
     b1c:	84 1f       	adc	r24, r20
     b1e:	48 f4       	brcc	.+18     	; 0xb32 <__addsf3x+0x98>
     b20:	87 95       	ror	r24
     b22:	77 95       	ror	r23
     b24:	67 95       	ror	r22
     b26:	b7 95       	ror	r27
     b28:	f7 95       	ror	r31
     b2a:	9e 3f       	cpi	r25, 0xFE	; 254
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <__addsf3x+0x96>
     b2e:	b3 cf       	rjmp	.-154    	; 0xa96 <__addsf3+0x1e>
     b30:	93 95       	inc	r25
     b32:	88 0f       	add	r24, r24
     b34:	08 f0       	brcs	.+2      	; 0xb38 <__addsf3x+0x9e>
     b36:	99 27       	eor	r25, r25
     b38:	ee 0f       	add	r30, r30
     b3a:	97 95       	ror	r25
     b3c:	87 95       	ror	r24
     b3e:	08 95       	ret

00000b40 <__divsf3>:
     b40:	0c d0       	rcall	.+24     	; 0xb5a <__divsf3x>
     b42:	ba c0       	rjmp	.+372    	; 0xcb8 <__fp_round>
     b44:	b2 d0       	rcall	.+356    	; 0xcaa <__fp_pscB>
     b46:	40 f0       	brcs	.+16     	; 0xb58 <__divsf3+0x18>
     b48:	a9 d0       	rcall	.+338    	; 0xc9c <__fp_pscA>
     b4a:	30 f0       	brcs	.+12     	; 0xb58 <__divsf3+0x18>
     b4c:	21 f4       	brne	.+8      	; 0xb56 <__divsf3+0x16>
     b4e:	5f 3f       	cpi	r21, 0xFF	; 255
     b50:	19 f0       	breq	.+6      	; 0xb58 <__divsf3+0x18>
     b52:	9b c0       	rjmp	.+310    	; 0xc8a <__fp_inf>
     b54:	51 11       	cpse	r21, r1
     b56:	e4 c0       	rjmp	.+456    	; 0xd20 <__fp_szero>
     b58:	9e c0       	rjmp	.+316    	; 0xc96 <__fp_nan>

00000b5a <__divsf3x>:
     b5a:	bf d0       	rcall	.+382    	; 0xcda <__fp_split3>
     b5c:	98 f3       	brcs	.-26     	; 0xb44 <__divsf3+0x4>

00000b5e <__divsf3_pse>:
     b5e:	99 23       	and	r25, r25
     b60:	c9 f3       	breq	.-14     	; 0xb54 <__divsf3+0x14>
     b62:	55 23       	and	r21, r21
     b64:	b1 f3       	breq	.-20     	; 0xb52 <__divsf3+0x12>
     b66:	95 1b       	sub	r25, r21
     b68:	55 0b       	sbc	r21, r21
     b6a:	bb 27       	eor	r27, r27
     b6c:	aa 27       	eor	r26, r26
     b6e:	62 17       	cp	r22, r18
     b70:	73 07       	cpc	r23, r19
     b72:	84 07       	cpc	r24, r20
     b74:	38 f0       	brcs	.+14     	; 0xb84 <__divsf3_pse+0x26>
     b76:	9f 5f       	subi	r25, 0xFF	; 255
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	22 0f       	add	r18, r18
     b7c:	33 1f       	adc	r19, r19
     b7e:	44 1f       	adc	r20, r20
     b80:	aa 1f       	adc	r26, r26
     b82:	a9 f3       	breq	.-22     	; 0xb6e <__divsf3_pse+0x10>
     b84:	33 d0       	rcall	.+102    	; 0xbec <__divsf3_pse+0x8e>
     b86:	0e 2e       	mov	r0, r30
     b88:	3a f0       	brmi	.+14     	; 0xb98 <__divsf3_pse+0x3a>
     b8a:	e0 e8       	ldi	r30, 0x80	; 128
     b8c:	30 d0       	rcall	.+96     	; 0xbee <__divsf3_pse+0x90>
     b8e:	91 50       	subi	r25, 0x01	; 1
     b90:	50 40       	sbci	r21, 0x00	; 0
     b92:	e6 95       	lsr	r30
     b94:	00 1c       	adc	r0, r0
     b96:	ca f7       	brpl	.-14     	; 0xb8a <__divsf3_pse+0x2c>
     b98:	29 d0       	rcall	.+82     	; 0xbec <__divsf3_pse+0x8e>
     b9a:	fe 2f       	mov	r31, r30
     b9c:	27 d0       	rcall	.+78     	; 0xbec <__divsf3_pse+0x8e>
     b9e:	66 0f       	add	r22, r22
     ba0:	77 1f       	adc	r23, r23
     ba2:	88 1f       	adc	r24, r24
     ba4:	bb 1f       	adc	r27, r27
     ba6:	26 17       	cp	r18, r22
     ba8:	37 07       	cpc	r19, r23
     baa:	48 07       	cpc	r20, r24
     bac:	ab 07       	cpc	r26, r27
     bae:	b0 e8       	ldi	r27, 0x80	; 128
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__divsf3_pse+0x56>
     bb2:	bb 0b       	sbc	r27, r27
     bb4:	80 2d       	mov	r24, r0
     bb6:	bf 01       	movw	r22, r30
     bb8:	ff 27       	eor	r31, r31
     bba:	93 58       	subi	r25, 0x83	; 131
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	2a f0       	brmi	.+10     	; 0xbca <__divsf3_pse+0x6c>
     bc0:	9e 3f       	cpi	r25, 0xFE	; 254
     bc2:	51 05       	cpc	r21, r1
     bc4:	68 f0       	brcs	.+26     	; 0xbe0 <__divsf3_pse+0x82>
     bc6:	61 c0       	rjmp	.+194    	; 0xc8a <__fp_inf>
     bc8:	ab c0       	rjmp	.+342    	; 0xd20 <__fp_szero>
     bca:	5f 3f       	cpi	r21, 0xFF	; 255
     bcc:	ec f3       	brlt	.-6      	; 0xbc8 <__divsf3_pse+0x6a>
     bce:	98 3e       	cpi	r25, 0xE8	; 232
     bd0:	dc f3       	brlt	.-10     	; 0xbc8 <__divsf3_pse+0x6a>
     bd2:	86 95       	lsr	r24
     bd4:	77 95       	ror	r23
     bd6:	67 95       	ror	r22
     bd8:	b7 95       	ror	r27
     bda:	f7 95       	ror	r31
     bdc:	9f 5f       	subi	r25, 0xFF	; 255
     bde:	c9 f7       	brne	.-14     	; 0xbd2 <__divsf3_pse+0x74>
     be0:	88 0f       	add	r24, r24
     be2:	91 1d       	adc	r25, r1
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	97 f9       	bld	r25, 7
     bea:	08 95       	ret
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	66 0f       	add	r22, r22
     bf0:	77 1f       	adc	r23, r23
     bf2:	88 1f       	adc	r24, r24
     bf4:	bb 1f       	adc	r27, r27
     bf6:	62 17       	cp	r22, r18
     bf8:	73 07       	cpc	r23, r19
     bfa:	84 07       	cpc	r24, r20
     bfc:	ba 07       	cpc	r27, r26
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <__divsf3_pse+0xaa>
     c00:	62 1b       	sub	r22, r18
     c02:	73 0b       	sbc	r23, r19
     c04:	84 0b       	sbc	r24, r20
     c06:	ba 0b       	sbc	r27, r26
     c08:	ee 1f       	adc	r30, r30
     c0a:	88 f7       	brcc	.-30     	; 0xbee <__divsf3_pse+0x90>
     c0c:	e0 95       	com	r30
     c0e:	08 95       	ret

00000c10 <__floatunsisf>:
     c10:	e8 94       	clt
     c12:	09 c0       	rjmp	.+18     	; 0xc26 <__floatsisf+0x12>

00000c14 <__floatsisf>:
     c14:	97 fb       	bst	r25, 7
     c16:	3e f4       	brtc	.+14     	; 0xc26 <__floatsisf+0x12>
     c18:	90 95       	com	r25
     c1a:	80 95       	com	r24
     c1c:	70 95       	com	r23
     c1e:	61 95       	neg	r22
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	8f 4f       	sbci	r24, 0xFF	; 255
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	99 23       	and	r25, r25
     c28:	a9 f0       	breq	.+42     	; 0xc54 <__floatsisf+0x40>
     c2a:	f9 2f       	mov	r31, r25
     c2c:	96 e9       	ldi	r25, 0x96	; 150
     c2e:	bb 27       	eor	r27, r27
     c30:	93 95       	inc	r25
     c32:	f6 95       	lsr	r31
     c34:	87 95       	ror	r24
     c36:	77 95       	ror	r23
     c38:	67 95       	ror	r22
     c3a:	b7 95       	ror	r27
     c3c:	f1 11       	cpse	r31, r1
     c3e:	f8 cf       	rjmp	.-16     	; 0xc30 <__floatsisf+0x1c>
     c40:	fa f4       	brpl	.+62     	; 0xc80 <__floatsisf+0x6c>
     c42:	bb 0f       	add	r27, r27
     c44:	11 f4       	brne	.+4      	; 0xc4a <__floatsisf+0x36>
     c46:	60 ff       	sbrs	r22, 0
     c48:	1b c0       	rjmp	.+54     	; 0xc80 <__floatsisf+0x6c>
     c4a:	6f 5f       	subi	r22, 0xFF	; 255
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	8f 4f       	sbci	r24, 0xFF	; 255
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	16 c0       	rjmp	.+44     	; 0xc80 <__floatsisf+0x6c>
     c54:	88 23       	and	r24, r24
     c56:	11 f0       	breq	.+4      	; 0xc5c <__floatsisf+0x48>
     c58:	96 e9       	ldi	r25, 0x96	; 150
     c5a:	11 c0       	rjmp	.+34     	; 0xc7e <__floatsisf+0x6a>
     c5c:	77 23       	and	r23, r23
     c5e:	21 f0       	breq	.+8      	; 0xc68 <__floatsisf+0x54>
     c60:	9e e8       	ldi	r25, 0x8E	; 142
     c62:	87 2f       	mov	r24, r23
     c64:	76 2f       	mov	r23, r22
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <__floatsisf+0x5e>
     c68:	66 23       	and	r22, r22
     c6a:	71 f0       	breq	.+28     	; 0xc88 <__floatsisf+0x74>
     c6c:	96 e8       	ldi	r25, 0x86	; 134
     c6e:	86 2f       	mov	r24, r22
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	2a f0       	brmi	.+10     	; 0xc80 <__floatsisf+0x6c>
     c76:	9a 95       	dec	r25
     c78:	66 0f       	add	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	88 1f       	adc	r24, r24
     c7e:	da f7       	brpl	.-10     	; 0xc76 <__floatsisf+0x62>
     c80:	88 0f       	add	r24, r24
     c82:	96 95       	lsr	r25
     c84:	87 95       	ror	r24
     c86:	97 f9       	bld	r25, 7
     c88:	08 95       	ret

00000c8a <__fp_inf>:
     c8a:	97 f9       	bld	r25, 7
     c8c:	9f 67       	ori	r25, 0x7F	; 127
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	08 95       	ret

00000c96 <__fp_nan>:
     c96:	9f ef       	ldi	r25, 0xFF	; 255
     c98:	80 ec       	ldi	r24, 0xC0	; 192
     c9a:	08 95       	ret

00000c9c <__fp_pscA>:
     c9c:	00 24       	eor	r0, r0
     c9e:	0a 94       	dec	r0
     ca0:	16 16       	cp	r1, r22
     ca2:	17 06       	cpc	r1, r23
     ca4:	18 06       	cpc	r1, r24
     ca6:	09 06       	cpc	r0, r25
     ca8:	08 95       	ret

00000caa <__fp_pscB>:
     caa:	00 24       	eor	r0, r0
     cac:	0a 94       	dec	r0
     cae:	12 16       	cp	r1, r18
     cb0:	13 06       	cpc	r1, r19
     cb2:	14 06       	cpc	r1, r20
     cb4:	05 06       	cpc	r0, r21
     cb6:	08 95       	ret

00000cb8 <__fp_round>:
     cb8:	09 2e       	mov	r0, r25
     cba:	03 94       	inc	r0
     cbc:	00 0c       	add	r0, r0
     cbe:	11 f4       	brne	.+4      	; 0xcc4 <__fp_round+0xc>
     cc0:	88 23       	and	r24, r24
     cc2:	52 f0       	brmi	.+20     	; 0xcd8 <__fp_round+0x20>
     cc4:	bb 0f       	add	r27, r27
     cc6:	40 f4       	brcc	.+16     	; 0xcd8 <__fp_round+0x20>
     cc8:	bf 2b       	or	r27, r31
     cca:	11 f4       	brne	.+4      	; 0xcd0 <__fp_round+0x18>
     ccc:	60 ff       	sbrs	r22, 0
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <__fp_round+0x20>
     cd0:	6f 5f       	subi	r22, 0xFF	; 255
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	8f 4f       	sbci	r24, 0xFF	; 255
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	08 95       	ret

00000cda <__fp_split3>:
     cda:	57 fd       	sbrc	r21, 7
     cdc:	90 58       	subi	r25, 0x80	; 128
     cde:	44 0f       	add	r20, r20
     ce0:	55 1f       	adc	r21, r21
     ce2:	59 f0       	breq	.+22     	; 0xcfa <__fp_splitA+0x10>
     ce4:	5f 3f       	cpi	r21, 0xFF	; 255
     ce6:	71 f0       	breq	.+28     	; 0xd04 <__fp_splitA+0x1a>
     ce8:	47 95       	ror	r20

00000cea <__fp_splitA>:
     cea:	88 0f       	add	r24, r24
     cec:	97 fb       	bst	r25, 7
     cee:	99 1f       	adc	r25, r25
     cf0:	61 f0       	breq	.+24     	; 0xd0a <__fp_splitA+0x20>
     cf2:	9f 3f       	cpi	r25, 0xFF	; 255
     cf4:	79 f0       	breq	.+30     	; 0xd14 <__fp_splitA+0x2a>
     cf6:	87 95       	ror	r24
     cf8:	08 95       	ret
     cfa:	12 16       	cp	r1, r18
     cfc:	13 06       	cpc	r1, r19
     cfe:	14 06       	cpc	r1, r20
     d00:	55 1f       	adc	r21, r21
     d02:	f2 cf       	rjmp	.-28     	; 0xce8 <__fp_split3+0xe>
     d04:	46 95       	lsr	r20
     d06:	f1 df       	rcall	.-30     	; 0xcea <__fp_splitA>
     d08:	08 c0       	rjmp	.+16     	; 0xd1a <__fp_splitA+0x30>
     d0a:	16 16       	cp	r1, r22
     d0c:	17 06       	cpc	r1, r23
     d0e:	18 06       	cpc	r1, r24
     d10:	99 1f       	adc	r25, r25
     d12:	f1 cf       	rjmp	.-30     	; 0xcf6 <__fp_splitA+0xc>
     d14:	86 95       	lsr	r24
     d16:	71 05       	cpc	r23, r1
     d18:	61 05       	cpc	r22, r1
     d1a:	08 94       	sec
     d1c:	08 95       	ret

00000d1e <__fp_zero>:
     d1e:	e8 94       	clt

00000d20 <__fp_szero>:
     d20:	bb 27       	eor	r27, r27
     d22:	66 27       	eor	r22, r22
     d24:	77 27       	eor	r23, r23
     d26:	cb 01       	movw	r24, r22
     d28:	97 f9       	bld	r25, 7
     d2a:	08 95       	ret

00000d2c <pow>:
     d2c:	fa 01       	movw	r30, r20
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	30 96       	adiw	r30, 0x00	; 0
     d34:	21 05       	cpc	r18, r1
     d36:	31 05       	cpc	r19, r1
     d38:	99 f1       	breq	.+102    	; 0xda0 <pow+0x74>
     d3a:	61 15       	cp	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	61 f4       	brne	.+24     	; 0xd58 <pow+0x2c>
     d40:	80 38       	cpi	r24, 0x80	; 128
     d42:	bf e3       	ldi	r27, 0x3F	; 63
     d44:	9b 07       	cpc	r25, r27
     d46:	49 f1       	breq	.+82     	; 0xd9a <pow+0x6e>
     d48:	68 94       	set
     d4a:	90 38       	cpi	r25, 0x80	; 128
     d4c:	81 05       	cpc	r24, r1
     d4e:	61 f0       	breq	.+24     	; 0xd68 <pow+0x3c>
     d50:	80 38       	cpi	r24, 0x80	; 128
     d52:	bf ef       	ldi	r27, 0xFF	; 255
     d54:	9b 07       	cpc	r25, r27
     d56:	41 f0       	breq	.+16     	; 0xd68 <pow+0x3c>
     d58:	99 23       	and	r25, r25
     d5a:	42 f5       	brpl	.+80     	; 0xdac <pow+0x80>
     d5c:	ff 3f       	cpi	r31, 0xFF	; 255
     d5e:	e1 05       	cpc	r30, r1
     d60:	31 05       	cpc	r19, r1
     d62:	21 05       	cpc	r18, r1
     d64:	11 f1       	breq	.+68     	; 0xdaa <pow+0x7e>
     d66:	e8 94       	clt
     d68:	08 94       	sec
     d6a:	e7 95       	ror	r30
     d6c:	d9 01       	movw	r26, r18
     d6e:	aa 23       	and	r26, r26
     d70:	29 f4       	brne	.+10     	; 0xd7c <pow+0x50>
     d72:	ab 2f       	mov	r26, r27
     d74:	be 2f       	mov	r27, r30
     d76:	f8 5f       	subi	r31, 0xF8	; 248
     d78:	d0 f3       	brcs	.-12     	; 0xd6e <pow+0x42>
     d7a:	10 c0       	rjmp	.+32     	; 0xd9c <pow+0x70>
     d7c:	ff 5f       	subi	r31, 0xFF	; 255
     d7e:	70 f4       	brcc	.+28     	; 0xd9c <pow+0x70>
     d80:	a6 95       	lsr	r26
     d82:	e0 f7       	brcc	.-8      	; 0xd7c <pow+0x50>
     d84:	f7 39       	cpi	r31, 0x97	; 151
     d86:	50 f0       	brcs	.+20     	; 0xd9c <pow+0x70>
     d88:	19 f0       	breq	.+6      	; 0xd90 <pow+0x64>
     d8a:	ff 3a       	cpi	r31, 0xAF	; 175
     d8c:	38 f4       	brcc	.+14     	; 0xd9c <pow+0x70>
     d8e:	9f 77       	andi	r25, 0x7F	; 127
     d90:	9f 93       	push	r25
     d92:	0c d0       	rcall	.+24     	; 0xdac <pow+0x80>
     d94:	0f 90       	pop	r0
     d96:	07 fc       	sbrc	r0, 7
     d98:	90 58       	subi	r25, 0x80	; 128
     d9a:	08 95       	ret
     d9c:	3e f0       	brts	.+14     	; 0xdac <pow+0x80>
     d9e:	7b cf       	rjmp	.-266    	; 0xc96 <__fp_nan>
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	9f e3       	ldi	r25, 0x3F	; 63
     da8:	08 95       	ret
     daa:	4f e7       	ldi	r20, 0x7F	; 127
     dac:	9f 77       	andi	r25, 0x7F	; 127
     dae:	5f 93       	push	r21
     db0:	4f 93       	push	r20
     db2:	3f 93       	push	r19
     db4:	2f 93       	push	r18
     db6:	9e d0       	rcall	.+316    	; 0xef4 <log>
     db8:	2f 91       	pop	r18
     dba:	3f 91       	pop	r19
     dbc:	4f 91       	pop	r20
     dbe:	5f 91       	pop	r21
     dc0:	0c d1       	rcall	.+536    	; 0xfda <__mulsf3>
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <exp>
     dc4:	19 f4       	brne	.+6      	; 0xdcc <pow+0xa0>
     dc6:	0e f0       	brts	.+2      	; 0xdca <pow+0x9e>
     dc8:	60 cf       	rjmp	.-320    	; 0xc8a <__fp_inf>
     dca:	a9 cf       	rjmp	.-174    	; 0xd1e <__fp_zero>
     dcc:	64 cf       	rjmp	.-312    	; 0xc96 <__fp_nan>

00000dce <exp>:
     dce:	8d df       	rcall	.-230    	; 0xcea <__fp_splitA>
     dd0:	c8 f3       	brcs	.-14     	; 0xdc4 <pow+0x98>
     dd2:	96 38       	cpi	r25, 0x86	; 134
     dd4:	c0 f7       	brcc	.-16     	; 0xdc6 <pow+0x9a>
     dd6:	07 f8       	bld	r0, 7
     dd8:	0f 92       	push	r0
     dda:	e8 94       	clt
     ddc:	2b e3       	ldi	r18, 0x3B	; 59
     dde:	3a ea       	ldi	r19, 0xAA	; 170
     de0:	48 eb       	ldi	r20, 0xB8	; 184
     de2:	5f e7       	ldi	r21, 0x7F	; 127
     de4:	08 d1       	rcall	.+528    	; 0xff6 <__mulsf3_pse>
     de6:	0f 92       	push	r0
     de8:	0f 92       	push	r0
     dea:	0f 92       	push	r0
     dec:	4d b7       	in	r20, 0x3d	; 61
     dee:	5e b7       	in	r21, 0x3e	; 62
     df0:	0f 92       	push	r0
     df2:	c0 d0       	rcall	.+384    	; 0xf74 <modf>
     df4:	e4 e5       	ldi	r30, 0x54	; 84
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	16 d0       	rcall	.+44     	; 0xe26 <__fp_powser>
     dfa:	4f 91       	pop	r20
     dfc:	5f 91       	pop	r21
     dfe:	ef 91       	pop	r30
     e00:	ff 91       	pop	r31
     e02:	e5 95       	asr	r30
     e04:	ee 1f       	adc	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	49 f0       	breq	.+18     	; 0xe1c <exp+0x4e>
     e0a:	fe 57       	subi	r31, 0x7E	; 126
     e0c:	e0 68       	ori	r30, 0x80	; 128
     e0e:	44 27       	eor	r20, r20
     e10:	ee 0f       	add	r30, r30
     e12:	44 1f       	adc	r20, r20
     e14:	fa 95       	dec	r31
     e16:	e1 f7       	brne	.-8      	; 0xe10 <exp+0x42>
     e18:	41 95       	neg	r20
     e1a:	55 0b       	sbc	r21, r21
     e1c:	32 d0       	rcall	.+100    	; 0xe82 <ldexp>
     e1e:	0f 90       	pop	r0
     e20:	07 fe       	sbrs	r0, 7
     e22:	26 c0       	rjmp	.+76     	; 0xe70 <inverse>
     e24:	08 95       	ret

00000e26 <__fp_powser>:
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	1f 93       	push	r17
     e2c:	0f 93       	push	r16
     e2e:	ff 92       	push	r15
     e30:	ef 92       	push	r14
     e32:	df 92       	push	r13
     e34:	7b 01       	movw	r14, r22
     e36:	8c 01       	movw	r16, r24
     e38:	68 94       	set
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <__fp_powser+0x20>
     e3c:	da 2e       	mov	r13, r26
     e3e:	ef 01       	movw	r28, r30
     e40:	d8 d0       	rcall	.+432    	; 0xff2 <__mulsf3x>
     e42:	fe 01       	movw	r30, r28
     e44:	e8 94       	clt
     e46:	a5 91       	lpm	r26, Z+
     e48:	25 91       	lpm	r18, Z+
     e4a:	35 91       	lpm	r19, Z+
     e4c:	45 91       	lpm	r20, Z+
     e4e:	55 91       	lpm	r21, Z+
     e50:	ae f3       	brts	.-22     	; 0xe3c <__fp_powser+0x16>
     e52:	ef 01       	movw	r28, r30
     e54:	22 de       	rcall	.-956    	; 0xa9a <__addsf3x>
     e56:	fe 01       	movw	r30, r28
     e58:	97 01       	movw	r18, r14
     e5a:	a8 01       	movw	r20, r16
     e5c:	da 94       	dec	r13
     e5e:	79 f7       	brne	.-34     	; 0xe3e <__fp_powser+0x18>
     e60:	df 90       	pop	r13
     e62:	ef 90       	pop	r14
     e64:	ff 90       	pop	r15
     e66:	0f 91       	pop	r16
     e68:	1f 91       	pop	r17
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <inverse>:
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e8       	ldi	r24, 0x80	; 128
     e7a:	9f e3       	ldi	r25, 0x3F	; 63
     e7c:	61 ce       	rjmp	.-830    	; 0xb40 <__divsf3>
     e7e:	05 cf       	rjmp	.-502    	; 0xc8a <__fp_inf>
     e80:	0f c1       	rjmp	.+542    	; 0x10a0 <__fp_mpack>

00000e82 <ldexp>:
     e82:	33 df       	rcall	.-410    	; 0xcea <__fp_splitA>
     e84:	e8 f3       	brcs	.-6      	; 0xe80 <inverse+0x10>
     e86:	99 23       	and	r25, r25
     e88:	d9 f3       	breq	.-10     	; 0xe80 <inverse+0x10>
     e8a:	94 0f       	add	r25, r20
     e8c:	51 1d       	adc	r21, r1
     e8e:	bb f3       	brvs	.-18     	; 0xe7e <inverse+0xe>
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	50 40       	sbci	r21, 0x00	; 0
     e94:	94 f0       	brlt	.+36     	; 0xeba <ldexp+0x38>
     e96:	59 f0       	breq	.+22     	; 0xeae <ldexp+0x2c>
     e98:	88 23       	and	r24, r24
     e9a:	32 f0       	brmi	.+12     	; 0xea8 <ldexp+0x26>
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	91 50       	subi	r25, 0x01	; 1
     ea4:	50 40       	sbci	r21, 0x00	; 0
     ea6:	c1 f7       	brne	.-16     	; 0xe98 <ldexp+0x16>
     ea8:	9e 3f       	cpi	r25, 0xFE	; 254
     eaa:	51 05       	cpc	r21, r1
     eac:	44 f7       	brge	.-48     	; 0xe7e <inverse+0xe>
     eae:	88 0f       	add	r24, r24
     eb0:	91 1d       	adc	r25, r1
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	97 f9       	bld	r25, 7
     eb8:	08 95       	ret
     eba:	5f 3f       	cpi	r21, 0xFF	; 255
     ebc:	ac f0       	brlt	.+42     	; 0xee8 <ldexp+0x66>
     ebe:	98 3e       	cpi	r25, 0xE8	; 232
     ec0:	9c f0       	brlt	.+38     	; 0xee8 <ldexp+0x66>
     ec2:	bb 27       	eor	r27, r27
     ec4:	86 95       	lsr	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b7 95       	ror	r27
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <ldexp+0x4e>
     ece:	b1 60       	ori	r27, 0x01	; 1
     ed0:	93 95       	inc	r25
     ed2:	c1 f7       	brne	.-16     	; 0xec4 <ldexp+0x42>
     ed4:	bb 0f       	add	r27, r27
     ed6:	58 f7       	brcc	.-42     	; 0xeae <ldexp+0x2c>
     ed8:	11 f4       	brne	.+4      	; 0xede <ldexp+0x5c>
     eda:	60 ff       	sbrs	r22, 0
     edc:	e8 cf       	rjmp	.-48     	; 0xeae <ldexp+0x2c>
     ede:	6f 5f       	subi	r22, 0xFF	; 255
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	8f 4f       	sbci	r24, 0xFF	; 255
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	e3 cf       	rjmp	.-58     	; 0xeae <ldexp+0x2c>
     ee8:	1b cf       	rjmp	.-458    	; 0xd20 <__fp_szero>
     eea:	0e f0       	brts	.+2      	; 0xeee <ldexp+0x6c>
     eec:	d9 c0       	rjmp	.+434    	; 0x10a0 <__fp_mpack>
     eee:	d3 ce       	rjmp	.-602    	; 0xc96 <__fp_nan>
     ef0:	68 94       	set
     ef2:	cb ce       	rjmp	.-618    	; 0xc8a <__fp_inf>

00000ef4 <log>:
     ef4:	fa de       	rcall	.-524    	; 0xcea <__fp_splitA>
     ef6:	c8 f3       	brcs	.-14     	; 0xeea <ldexp+0x68>
     ef8:	99 23       	and	r25, r25
     efa:	d1 f3       	breq	.-12     	; 0xef0 <ldexp+0x6e>
     efc:	c6 f3       	brts	.-16     	; 0xeee <ldexp+0x6c>
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	1f 93       	push	r17
     f04:	0f 93       	push	r16
     f06:	ff 92       	push	r15
     f08:	c9 2f       	mov	r28, r25
     f0a:	dd 27       	eor	r29, r29
     f0c:	88 23       	and	r24, r24
     f0e:	2a f0       	brmi	.+10     	; 0xf1a <log+0x26>
     f10:	21 97       	sbiw	r28, 0x01	; 1
     f12:	66 0f       	add	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	da f7       	brpl	.-10     	; 0xf10 <log+0x1c>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f eb       	ldi	r21, 0xBF	; 191
     f22:	9f e3       	ldi	r25, 0x3F	; 63
     f24:	88 39       	cpi	r24, 0x98	; 152
     f26:	20 f0       	brcs	.+8      	; 0xf30 <log+0x3c>
     f28:	80 3e       	cpi	r24, 0xE0	; 224
     f2a:	30 f0       	brcs	.+12     	; 0xf38 <log+0x44>
     f2c:	21 96       	adiw	r28, 0x01	; 1
     f2e:	8f 77       	andi	r24, 0x7F	; 127
     f30:	a3 dd       	rcall	.-1210   	; 0xa78 <__addsf3>
     f32:	ec e7       	ldi	r30, 0x7C	; 124
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <log+0x4a>
     f38:	9f dd       	rcall	.-1218   	; 0xa78 <__addsf3>
     f3a:	e9 ea       	ldi	r30, 0xA9	; 169
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	73 df       	rcall	.-282    	; 0xe26 <__fp_powser>
     f40:	8b 01       	movw	r16, r22
     f42:	be 01       	movw	r22, r28
     f44:	ec 01       	movw	r28, r24
     f46:	fb 2e       	mov	r15, r27
     f48:	6f 57       	subi	r22, 0x7F	; 127
     f4a:	71 09       	sbc	r23, r1
     f4c:	75 95       	asr	r23
     f4e:	77 1f       	adc	r23, r23
     f50:	88 0b       	sbc	r24, r24
     f52:	99 0b       	sbc	r25, r25
     f54:	5f de       	rcall	.-834    	; 0xc14 <__floatsisf>
     f56:	28 e1       	ldi	r18, 0x18	; 24
     f58:	32 e7       	ldi	r19, 0x72	; 114
     f5a:	41 e3       	ldi	r20, 0x31	; 49
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	49 d0       	rcall	.+146    	; 0xff2 <__mulsf3x>
     f60:	af 2d       	mov	r26, r15
     f62:	98 01       	movw	r18, r16
     f64:	ae 01       	movw	r20, r28
     f66:	ff 90       	pop	r15
     f68:	0f 91       	pop	r16
     f6a:	1f 91       	pop	r17
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	94 dd       	rcall	.-1240   	; 0xa9a <__addsf3x>
     f72:	a2 ce       	rjmp	.-700    	; 0xcb8 <__fp_round>

00000f74 <modf>:
     f74:	fa 01       	movw	r30, r20
     f76:	dc 01       	movw	r26, r24
     f78:	aa 0f       	add	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	bf 57       	subi	r27, 0x7F	; 127
     f82:	28 f4       	brcc	.+10     	; 0xf8e <modf+0x1a>
     f84:	22 27       	eor	r18, r18
     f86:	33 27       	eor	r19, r19
     f88:	44 27       	eor	r20, r20
     f8a:	50 78       	andi	r21, 0x80	; 128
     f8c:	1f c0       	rjmp	.+62     	; 0xfcc <modf+0x58>
     f8e:	b7 51       	subi	r27, 0x17	; 23
     f90:	88 f4       	brcc	.+34     	; 0xfb4 <modf+0x40>
     f92:	ab 2f       	mov	r26, r27
     f94:	00 24       	eor	r0, r0
     f96:	46 95       	lsr	r20
     f98:	37 95       	ror	r19
     f9a:	27 95       	ror	r18
     f9c:	01 1c       	adc	r0, r1
     f9e:	a3 95       	inc	r26
     fa0:	d2 f3       	brmi	.-12     	; 0xf96 <modf+0x22>
     fa2:	00 20       	and	r0, r0
     fa4:	69 f0       	breq	.+26     	; 0xfc0 <modf+0x4c>
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	44 1f       	adc	r20, r20
     fac:	b3 95       	inc	r27
     fae:	da f3       	brmi	.-10     	; 0xfa6 <modf+0x32>
     fb0:	0d d0       	rcall	.+26     	; 0xfcc <modf+0x58>
     fb2:	61 cd       	rjmp	.-1342   	; 0xa76 <__subsf3>
     fb4:	61 30       	cpi	r22, 0x01	; 1
     fb6:	71 05       	cpc	r23, r1
     fb8:	a0 e8       	ldi	r26, 0x80	; 128
     fba:	8a 07       	cpc	r24, r26
     fbc:	b9 46       	sbci	r27, 0x69	; 105
     fbe:	30 f4       	brcc	.+12     	; 0xfcc <modf+0x58>
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	66 27       	eor	r22, r22
     fc6:	77 27       	eor	r23, r23
     fc8:	88 27       	eor	r24, r24
     fca:	90 78       	andi	r25, 0x80	; 128
     fcc:	30 96       	adiw	r30, 0x00	; 0
     fce:	21 f0       	breq	.+8      	; 0xfd8 <modf+0x64>
     fd0:	20 83       	st	Z, r18
     fd2:	31 83       	std	Z+1, r19	; 0x01
     fd4:	42 83       	std	Z+2, r20	; 0x02
     fd6:	53 83       	std	Z+3, r21	; 0x03
     fd8:	08 95       	ret

00000fda <__mulsf3>:
     fda:	0b d0       	rcall	.+22     	; 0xff2 <__mulsf3x>
     fdc:	6d ce       	rjmp	.-806    	; 0xcb8 <__fp_round>
     fde:	5e de       	rcall	.-836    	; 0xc9c <__fp_pscA>
     fe0:	28 f0       	brcs	.+10     	; 0xfec <__mulsf3+0x12>
     fe2:	63 de       	rcall	.-826    	; 0xcaa <__fp_pscB>
     fe4:	18 f0       	brcs	.+6      	; 0xfec <__mulsf3+0x12>
     fe6:	95 23       	and	r25, r21
     fe8:	09 f0       	breq	.+2      	; 0xfec <__mulsf3+0x12>
     fea:	4f ce       	rjmp	.-866    	; 0xc8a <__fp_inf>
     fec:	54 ce       	rjmp	.-856    	; 0xc96 <__fp_nan>
     fee:	11 24       	eor	r1, r1
     ff0:	97 ce       	rjmp	.-722    	; 0xd20 <__fp_szero>

00000ff2 <__mulsf3x>:
     ff2:	73 de       	rcall	.-794    	; 0xcda <__fp_split3>
     ff4:	a0 f3       	brcs	.-24     	; 0xfde <__mulsf3+0x4>

00000ff6 <__mulsf3_pse>:
     ff6:	95 9f       	mul	r25, r21
     ff8:	d1 f3       	breq	.-12     	; 0xfee <__mulsf3+0x14>
     ffa:	95 0f       	add	r25, r21
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	55 1f       	adc	r21, r21
    1000:	62 9f       	mul	r22, r18
    1002:	f0 01       	movw	r30, r0
    1004:	72 9f       	mul	r23, r18
    1006:	bb 27       	eor	r27, r27
    1008:	f0 0d       	add	r31, r0
    100a:	b1 1d       	adc	r27, r1
    100c:	63 9f       	mul	r22, r19
    100e:	aa 27       	eor	r26, r26
    1010:	f0 0d       	add	r31, r0
    1012:	b1 1d       	adc	r27, r1
    1014:	aa 1f       	adc	r26, r26
    1016:	64 9f       	mul	r22, r20
    1018:	66 27       	eor	r22, r22
    101a:	b0 0d       	add	r27, r0
    101c:	a1 1d       	adc	r26, r1
    101e:	66 1f       	adc	r22, r22
    1020:	82 9f       	mul	r24, r18
    1022:	22 27       	eor	r18, r18
    1024:	b0 0d       	add	r27, r0
    1026:	a1 1d       	adc	r26, r1
    1028:	62 1f       	adc	r22, r18
    102a:	73 9f       	mul	r23, r19
    102c:	b0 0d       	add	r27, r0
    102e:	a1 1d       	adc	r26, r1
    1030:	62 1f       	adc	r22, r18
    1032:	83 9f       	mul	r24, r19
    1034:	a0 0d       	add	r26, r0
    1036:	61 1d       	adc	r22, r1
    1038:	22 1f       	adc	r18, r18
    103a:	74 9f       	mul	r23, r20
    103c:	33 27       	eor	r19, r19
    103e:	a0 0d       	add	r26, r0
    1040:	61 1d       	adc	r22, r1
    1042:	23 1f       	adc	r18, r19
    1044:	84 9f       	mul	r24, r20
    1046:	60 0d       	add	r22, r0
    1048:	21 1d       	adc	r18, r1
    104a:	82 2f       	mov	r24, r18
    104c:	76 2f       	mov	r23, r22
    104e:	6a 2f       	mov	r22, r26
    1050:	11 24       	eor	r1, r1
    1052:	9f 57       	subi	r25, 0x7F	; 127
    1054:	50 40       	sbci	r21, 0x00	; 0
    1056:	8a f0       	brmi	.+34     	; 0x107a <__mulsf3_pse+0x84>
    1058:	e1 f0       	breq	.+56     	; 0x1092 <__mulsf3_pse+0x9c>
    105a:	88 23       	and	r24, r24
    105c:	4a f0       	brmi	.+18     	; 0x1070 <__mulsf3_pse+0x7a>
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	bb 1f       	adc	r27, r27
    1064:	66 1f       	adc	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	91 50       	subi	r25, 0x01	; 1
    106c:	50 40       	sbci	r21, 0x00	; 0
    106e:	a9 f7       	brne	.-22     	; 0x105a <__mulsf3_pse+0x64>
    1070:	9e 3f       	cpi	r25, 0xFE	; 254
    1072:	51 05       	cpc	r21, r1
    1074:	70 f0       	brcs	.+28     	; 0x1092 <__mulsf3_pse+0x9c>
    1076:	09 ce       	rjmp	.-1006   	; 0xc8a <__fp_inf>
    1078:	53 ce       	rjmp	.-858    	; 0xd20 <__fp_szero>
    107a:	5f 3f       	cpi	r21, 0xFF	; 255
    107c:	ec f3       	brlt	.-6      	; 0x1078 <__mulsf3_pse+0x82>
    107e:	98 3e       	cpi	r25, 0xE8	; 232
    1080:	dc f3       	brlt	.-10     	; 0x1078 <__mulsf3_pse+0x82>
    1082:	86 95       	lsr	r24
    1084:	77 95       	ror	r23
    1086:	67 95       	ror	r22
    1088:	b7 95       	ror	r27
    108a:	f7 95       	ror	r31
    108c:	e7 95       	ror	r30
    108e:	9f 5f       	subi	r25, 0xFF	; 255
    1090:	c1 f7       	brne	.-16     	; 0x1082 <__mulsf3_pse+0x8c>
    1092:	fe 2b       	or	r31, r30
    1094:	88 0f       	add	r24, r24
    1096:	91 1d       	adc	r25, r1
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
    109c:	97 f9       	bld	r25, 7
    109e:	08 95       	ret

000010a0 <__fp_mpack>:
    10a0:	9f 3f       	cpi	r25, 0xFF	; 255
    10a2:	31 f0       	breq	.+12     	; 0x10b0 <__fp_mpack_finite+0xc>

000010a4 <__fp_mpack_finite>:
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	20 f4       	brcc	.+8      	; 0x10b0 <__fp_mpack_finite+0xc>
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	88 0f       	add	r24, r24
    10b2:	91 1d       	adc	r25, r1
    10b4:	96 95       	lsr	r25
    10b6:	87 95       	ror	r24
    10b8:	97 f9       	bld	r25, 7
    10ba:	08 95       	ret

000010bc <__mulsi3>:
    10bc:	62 9f       	mul	r22, r18
    10be:	d0 01       	movw	r26, r0
    10c0:	73 9f       	mul	r23, r19
    10c2:	f0 01       	movw	r30, r0
    10c4:	82 9f       	mul	r24, r18
    10c6:	e0 0d       	add	r30, r0
    10c8:	f1 1d       	adc	r31, r1
    10ca:	64 9f       	mul	r22, r20
    10cc:	e0 0d       	add	r30, r0
    10ce:	f1 1d       	adc	r31, r1
    10d0:	92 9f       	mul	r25, r18
    10d2:	f0 0d       	add	r31, r0
    10d4:	83 9f       	mul	r24, r19
    10d6:	f0 0d       	add	r31, r0
    10d8:	74 9f       	mul	r23, r20
    10da:	f0 0d       	add	r31, r0
    10dc:	65 9f       	mul	r22, r21
    10de:	f0 0d       	add	r31, r0
    10e0:	99 27       	eor	r25, r25
    10e2:	72 9f       	mul	r23, r18
    10e4:	b0 0d       	add	r27, r0
    10e6:	e1 1d       	adc	r30, r1
    10e8:	f9 1f       	adc	r31, r25
    10ea:	63 9f       	mul	r22, r19
    10ec:	b0 0d       	add	r27, r0
    10ee:	e1 1d       	adc	r30, r1
    10f0:	f9 1f       	adc	r31, r25
    10f2:	bd 01       	movw	r22, r26
    10f4:	cf 01       	movw	r24, r30
    10f6:	11 24       	eor	r1, r1
    10f8:	08 95       	ret

000010fa <__udivmodsi4>:
    10fa:	a1 e2       	ldi	r26, 0x21	; 33
    10fc:	1a 2e       	mov	r1, r26
    10fe:	aa 1b       	sub	r26, r26
    1100:	bb 1b       	sub	r27, r27
    1102:	fd 01       	movw	r30, r26
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <__udivmodsi4_ep>

00001106 <__udivmodsi4_loop>:
    1106:	aa 1f       	adc	r26, r26
    1108:	bb 1f       	adc	r27, r27
    110a:	ee 1f       	adc	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	a2 17       	cp	r26, r18
    1110:	b3 07       	cpc	r27, r19
    1112:	e4 07       	cpc	r30, r20
    1114:	f5 07       	cpc	r31, r21
    1116:	20 f0       	brcs	.+8      	; 0x1120 <__udivmodsi4_ep>
    1118:	a2 1b       	sub	r26, r18
    111a:	b3 0b       	sbc	r27, r19
    111c:	e4 0b       	sbc	r30, r20
    111e:	f5 0b       	sbc	r31, r21

00001120 <__udivmodsi4_ep>:
    1120:	66 1f       	adc	r22, r22
    1122:	77 1f       	adc	r23, r23
    1124:	88 1f       	adc	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	1a 94       	dec	r1
    112a:	69 f7       	brne	.-38     	; 0x1106 <__udivmodsi4_loop>
    112c:	60 95       	com	r22
    112e:	70 95       	com	r23
    1130:	80 95       	com	r24
    1132:	90 95       	com	r25
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	bd 01       	movw	r22, r26
    113a:	cf 01       	movw	r24, r30
    113c:	08 95       	ret

0000113e <__divmodsi4>:
    113e:	97 fb       	bst	r25, 7
    1140:	09 2e       	mov	r0, r25
    1142:	05 26       	eor	r0, r21
    1144:	0e d0       	rcall	.+28     	; 0x1162 <__divmodsi4_neg1>
    1146:	57 fd       	sbrc	r21, 7
    1148:	04 d0       	rcall	.+8      	; 0x1152 <__divmodsi4_neg2>
    114a:	d7 df       	rcall	.-82     	; 0x10fa <__udivmodsi4>
    114c:	0a d0       	rcall	.+20     	; 0x1162 <__divmodsi4_neg1>
    114e:	00 1c       	adc	r0, r0
    1150:	38 f4       	brcc	.+14     	; 0x1160 <__divmodsi4_exit>

00001152 <__divmodsi4_neg2>:
    1152:	50 95       	com	r21
    1154:	40 95       	com	r20
    1156:	30 95       	com	r19
    1158:	21 95       	neg	r18
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	4f 4f       	sbci	r20, 0xFF	; 255
    115e:	5f 4f       	sbci	r21, 0xFF	; 255

00001160 <__divmodsi4_exit>:
    1160:	08 95       	ret

00001162 <__divmodsi4_neg1>:
    1162:	f6 f7       	brtc	.-4      	; 0x1160 <__divmodsi4_exit>
    1164:	90 95       	com	r25
    1166:	80 95       	com	r24
    1168:	70 95       	com	r23
    116a:	61 95       	neg	r22
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	8f 4f       	sbci	r24, 0xFF	; 255
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	08 95       	ret

00001174 <ltoa>:
    1174:	fa 01       	movw	r30, r20
    1176:	cf 93       	push	r28
    1178:	ff 93       	push	r31
    117a:	ef 93       	push	r30
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	44 f1       	brlt	.+80     	; 0x11d0 <ltoa+0x5c>
    1180:	25 32       	cpi	r18, 0x25	; 37
    1182:	34 f5       	brge	.+76     	; 0x11d0 <ltoa+0x5c>
    1184:	c2 2f       	mov	r28, r18
    1186:	e8 94       	clt
    1188:	ca 30       	cpi	r28, 0x0A	; 10
    118a:	49 f4       	brne	.+18     	; 0x119e <ltoa+0x2a>
    118c:	97 fb       	bst	r25, 7
    118e:	3e f4       	brtc	.+14     	; 0x119e <ltoa+0x2a>
    1190:	90 95       	com	r25
    1192:	80 95       	com	r24
    1194:	70 95       	com	r23
    1196:	61 95       	neg	r22
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	2c 2f       	mov	r18, r28
    11a0:	33 27       	eor	r19, r19
    11a2:	44 27       	eor	r20, r20
    11a4:	55 27       	eor	r21, r21
    11a6:	ff 93       	push	r31
    11a8:	ef 93       	push	r30
    11aa:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__udivmodsi4>
    11ae:	ef 91       	pop	r30
    11b0:	ff 91       	pop	r31
    11b2:	60 5d       	subi	r22, 0xD0	; 208
    11b4:	6a 33       	cpi	r22, 0x3A	; 58
    11b6:	0c f0       	brlt	.+2      	; 0x11ba <ltoa+0x46>
    11b8:	69 5d       	subi	r22, 0xD9	; 217
    11ba:	61 93       	st	Z+, r22
    11bc:	b9 01       	movw	r22, r18
    11be:	ca 01       	movw	r24, r20
    11c0:	60 50       	subi	r22, 0x00	; 0
    11c2:	70 40       	sbci	r23, 0x00	; 0
    11c4:	80 40       	sbci	r24, 0x00	; 0
    11c6:	90 40       	sbci	r25, 0x00	; 0
    11c8:	51 f7       	brne	.-44     	; 0x119e <ltoa+0x2a>
    11ca:	16 f4       	brtc	.+4      	; 0x11d0 <ltoa+0x5c>
    11cc:	cd e2       	ldi	r28, 0x2D	; 45
    11ce:	c1 93       	st	Z+, r28
    11d0:	10 82       	st	Z, r1
    11d2:	8f 91       	pop	r24
    11d4:	9f 91       	pop	r25
    11d6:	cf 91       	pop	r28
    11d8:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <strrev>

000011dc <strrev>:
    11dc:	dc 01       	movw	r26, r24
    11de:	fc 01       	movw	r30, r24
    11e0:	67 2f       	mov	r22, r23
    11e2:	71 91       	ld	r23, Z+
    11e4:	77 23       	and	r23, r23
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <strrev+0x4>
    11e8:	32 97       	sbiw	r30, 0x02	; 2
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <strrev+0x18>
    11ec:	7c 91       	ld	r23, X
    11ee:	6d 93       	st	X+, r22
    11f0:	70 83       	st	Z, r23
    11f2:	62 91       	ld	r22, -Z
    11f4:	ae 17       	cp	r26, r30
    11f6:	bf 07       	cpc	r27, r31
    11f8:	c8 f3       	brcs	.-14     	; 0x11ec <strrev+0x10>
    11fa:	08 95       	ret

000011fc <_exit>:
    11fc:	f8 94       	cli

000011fe <__stop_program>:
    11fe:	ff cf       	rjmp	.-2      	; 0x11fe <__stop_program>
