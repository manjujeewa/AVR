
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000050  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000148  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000de  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000102  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008f  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002b  00000000  00000000  00000577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_init_usart>:
	Initialize the USART with the Baudrate that is passes as an argument
	Enable both the transmitter and receiver of USART
*************************************************************************/
void _init_usart( unsigned int Baudrate )
{
  UBRRH=0x00;
  6c:	10 bc       	out	0x20, r1	; 32
  UBRRL = (unsigned char)Baudrate; // Set the baud rate
  6e:	89 b9       	out	0x09, r24	; 9
  UCSRB = 0x18; // enable transmitter and reciever
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
  UCSRC = 0x86; // set as 8 bit data, no parity bit and 1 stop bit.
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
}
  78:	08 95       	ret

0000007a <usart_receive>:
	Receive the byte that arrives on the receiver
*************************************************************************/
unsigned char usart_receive( void )
{
  unsigned char data;
  while ((UCSRA & 0x80) == 0x00); // Wait for till the data arrives data
  7a:	5f 9b       	sbis	0x0b, 7	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <usart_receive>
  data=UDR;	// Read the data from UDR, as soon as the data arrives
  7e:	8c b1       	in	r24, 0x0c	; 12
  return data;
}
  80:	08 95       	ret

00000082 <usart_transmit>:
/************************************************************************
	Transmit the data that is passed as argument
*************************************************************************/
void usart_transmit( unsigned char data )
{
  while ((UCSRA & 0x20) == 0x00);  // Wait until the transmit buffer is empty
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <usart_transmit>
  UDR = data; // As soon as the buffer is empty, put the data in UDR
  86:	8c b9       	out	0x0c, r24	; 12
}
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
	unsigned char a;
	DDRD=0X0F; 
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	81 bb       	out	0x11, r24	; 17
	Initialize the USART with the Baudrate that is passes as an argument
	Enable both the transmitter and receiver of USART
*************************************************************************/
void _init_usart( unsigned int Baudrate )
{
  UBRRH=0x00;
  8e:	10 bc       	out	0x20, r1	; 32
  UBRRL = (unsigned char)Baudrate; // Set the baud rate
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	89 b9       	out	0x09, r24	; 9
  UCSRB = 0x18; // enable transmitter and reciever
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
  UCSRC = 0x86; // set as 8 bit data, no parity bit and 1 stop bit.
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
	Transmit the data that is passed as argument
*************************************************************************/
void usart_transmit( unsigned char data )
{
  while ((UCSRA & 0x20) == 0x00);  // Wait until the transmit buffer is empty
  UDR = data; // As soon as the buffer is empty, put the data in UDR
  9c:	87 e3       	ldi	r24, 0x37	; 55
/************************************************************************
	Transmit the data that is passed as argument
*************************************************************************/
void usart_transmit( unsigned char data )
{
  while ((UCSRA & 0x20) == 0x00);  // Wait until the transmit buffer is empty
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x14>
  UDR = data; // As soon as the buffer is empty, put the data in UDR
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	fc cf       	rjmp	.-8      	; 0x9e <main+0x14>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
