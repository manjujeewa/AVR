
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003122  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003122  000031b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  00800080  00800080  000031d6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e8  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000047b  00000000  00000000  000039f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000313e  00000000  00000000  00003e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000952  00000000  00000000  00006faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001682  00000000  00000000  000078fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000003fc  00000000  00000000  00008f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a6a  00000000  00000000  0000937c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001df2  00000000  00000000  00009de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 03 	jmp	0x68c	; 0x68c <__ctors_end>
       4:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
       8:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
       c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      10:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      14:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      18:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      1c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      20:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      24:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      28:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      2c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      30:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      34:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      38:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      3c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      40:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      44:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      48:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      4c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      50:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      54:	83 10       	cpse	r8, r3
      56:	86 10       	cpse	r8, r6
      58:	89 10       	cpse	r8, r9
      5a:	8c 10       	cpse	r8, r12
      5c:	8f 10       	cpse	r8, r15
      5e:	92 10       	cpse	r9, r2
      60:	95 10       	cpse	r9, r5

00000062 <__c.2091>:
      62:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
      72:	00                                                  .

00000073 <__c.2080>:
      73:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
      83:	6f 6e 67 2e 2e 00                                   ong...

00000089 <__c.2073>:
      89:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
      99:	20 00                                                .

0000009b <__c.2067>:
      9b:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
      ab:	00                                                  .

000000ac <__c.2062>:
      ac:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

000000ba <__c.2059>:
      ba:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
      ca:	21 00                                               !.

000000cc <__c.2057>:
      cc:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

000000db <__c.2053>:
      db:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
      eb:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000f5 <__c.2049>:
      f5:	45 72 61 73 65 64 21 00                             Erased!.

000000fd <__c.2047>:
      fd:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

0000010c <__c.2044>:
     10c:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     11c:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     12c:	39 29 3a 00                                         9):.

00000130 <__c.2041>:
     130:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     140:	73 61 62 6c 65 64 21 00                             sabled!.

00000148 <__c.2039>:
     148:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     158:	28 30 2d 39 2f 61 2f 62 2f 63 29 3a 20 00           (0-9/a/b/c): .

00000166 <__c.2037>:
     166:	3e 20 62 3a 20 55 70 64 61 74 65 20 44 61 74 65     > b: Update Date
     176:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     186:	20 63 3a 20 55 70 64 61 74 65 20 54 69 6d 65 00      c: Update Time.

00000196 <__c.2035>:
     196:	3e 20 39 3a 20 52 65 61 64 20 53 44 20 4d 65 6d     > 9: Read SD Mem
     1a6:	6f 72 79 20 43 61 70 61 63 69 74 79 20 20 20 20     ory Capacity    
     1b6:	20 61 3a 20 53 68 6f 77 20 44 61 74 65 20 26 20      a: Show Date & 
     1c6:	54 69 6d 65 00                                      Time.

000001cb <__c.2033>:
     1cb:	3e 20 37 3a 20 57 72 69 74 65 20 46 69 6c 65 20     > 7: Write File 
     1db:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     1eb:	20 38 3a 20 44 65 6c 65 74 65 20 46 69 6c 65 00      8: Delete File.

000001fb <__c.2031>:
     1fb:	3e 20 35 3a 20 47 65 74 20 66 69 6c 65 20 6c 69     > 5: Get file li
     20b:	73 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20     st              
     21b:	20 36 3a 20 52 65 61 64 20 46 69 6c 65 00            6: Read File.

00000229 <__c.2029>:
     229:	3e 20 31 3a 20 57 72 69 74 65 20 73 69 6e 67 6c     > 1: Write singl
     239:	65 20 42 6c 6f 63 6b 20 20 20 20 20 20 20 20 20     e Block         
     249:	20 32 3a 20 52 65 61 64 20 73 69 6e 67 6c 65 20      2: Read single 
     259:	42 6c 6f 63 6b 00                                   Block.

0000025f <__c.2027>:
     25f:	3e 20 30 3a 20 45 72 61 73 65 20 42 6c 6f 63 6b     > 0: Erase Block
     26f:	73 20 00                                            s .

00000272 <__c.2025>:
     272:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
     282:	00                                                  .

00000283 <__c.2023>:
     283:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
     293:	00                                                  .

00000294 <__c.2021>:
     294:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     2a4:	44 65 74 65 63 74 65 64 21 00                       Detected!.

000002ae <__c.2018>:
     2ae:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     2be:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     2ce:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000002d9 <__c.2015>:
     2d9:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     2e9:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000002f6 <__c.2011>:
     2f6:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     306:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     316:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000321 <__c.2007>:
     321:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     331:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

0000033e <__c.2005>:
     33e:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     34e:	63 74 65 64 2e 2e 00                                cted...

00000355 <__c.2000>:
     355:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     365:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     375:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     385:	2a 2a 2a 2a 00                                      ****.

0000038a <__c.1998>:
     38a:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     39a:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     3aa:	69 6e 67 2e 2e 20 20 00                             ing..  .

000003b2 <__c.1996>:
     3b2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3c2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3d2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3e2:	2a 2a 2a 2a 00                                      ****.

000003e7 <__c.1911>:
     3e7:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

000003f6 <__c.1904>:
     3f6:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000405 <__c.1798>:
     405:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     415:	20 63 6c 75 73 74 65 72 00                           cluster.

0000041e <__c.1796>:
     41e:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     42e:	68 61 69 6e 00                                      hain.

00000433 <__c.1788>:
     433:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 20 00      File Created! .

00000443 <__c.1783>:
     443:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

00000453 <__c.1780>:
     453:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     463:	21 00                                               !.

00000465 <__c.1771>:
     465:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
     475:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000047f <__c.1769>:
     47f:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     48f:	21 00                                               !.

00000491 <__c.1767>:
     491:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
     4a1:	00                                                  .

000004a2 <__c.1763>:
     4a2:	20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65 78      File already ex
     4b2:	69 73 74 73 2c 20 61 70 70 65 6e 64 69 6e 67 20     ists, appending 
     4c2:	64 61 74 61 2e 2e 00                                data...

000004c9 <__c.1710>:
     4c9:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     4d9:	2e 2e 00                                            ...

000004dc <__c.1681>:
     4dc:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     4ec:	20 63 6c 75 73 74 65 72 00                           cluster.

000004f5 <__c.1631>:
     4f5:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     505:	20 63 6c 75 73 74 65 72 00                           cluster.

0000050e <__c.1623>:
     50e:	52 4f 4f 54 00                                      ROOT.

00000513 <__c.1621>:
     513:	44 49 52 00                                         DIR.

00000517 <__c.1619>:
     517:	20 20 20 00                                            .

0000051b <__c.1617>:
     51b:	46 49 4c 45 00                                      FILE.

00000520 <__c.1615>:
     520:	20 20 20 00                                            .

00000524 <__c.1609>:
     524:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

00000532 <__c.1607>:
     532:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

0000053d <__c.1602>:
     53d:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     54d:	69 73 74 21 00                                      ist!.

00000552 <__c.1824>:
     552:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000562 <__c.1822>:
     562:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     572:	65 64 2e 2e 00                                      ed...

00000577 <__c.1820>:
     577:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     587:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000591 <__c.1818>:
     591:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     5a1:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     5b1:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

000005ba <__c.1815>:
     5ba:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     5ca:	6d 2f 79 79 29 3a 00                                m/yy):.

000005d1 <__c.1809>:
     5d1:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000005e1 <__c.1807>:
     5e1:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     5f1:	65 64 2e 2e 00                                      ed...

000005f6 <__c.1805>:
     5f6:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     606:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000610 <__c.1802>:
     610:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     620:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     630:	73 29 3a 00                                         s):.

00000634 <__c.1777>:
     634:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

0000063c <__c.1774>:
     63c:	53 61 74 75 72 64 61 79 00                          Saturday.

00000645 <__c.1771>:
     645:	46 72 69 64 61 79 00                                Friday.

0000064c <__c.1768>:
     64c:	54 68 75 72 73 64 61 79 00                          Thursday.

00000655 <__c.1765>:
     655:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

0000065f <__c.1762>:
     65f:	54 75 65 73 64 61 79 00                             Tuesday.

00000667 <__c.1759>:
     667:	4d 6f 6e 64 61 79 00                                Monday.

0000066e <__c.1755>:
     66e:	53 75 6e 64 61 79 00                                Sunday.

00000675 <__c.1752>:
     675:	20 20 20 20 44 61 79 3a 20 00                           Day: .

0000067f <__c.1747>:
     67f:	44 61 74 65 3a 00                                   Date:.

00000685 <__c.1741>:
     685:	54 69 6d 65 3a 00 00                                Time:..

0000068c <__ctors_end>:
     68c:	11 24       	eor	r1, r1
     68e:	1f be       	out	0x3f, r1	; 63
     690:	cf e5       	ldi	r28, 0x5F	; 95
     692:	d8 e0       	ldi	r29, 0x08	; 8
     694:	de bf       	out	0x3e, r29	; 62
     696:	cd bf       	out	0x3d, r28	; 61

00000698 <__do_copy_data>:
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	a0 e6       	ldi	r26, 0x60	; 96
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e2 e2       	ldi	r30, 0x22	; 34
     6a0:	f1 e3       	ldi	r31, 0x31	; 49
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <__do_copy_data+0x10>
     6a4:	05 90       	lpm	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	a0 38       	cpi	r26, 0x80	; 128
     6aa:	b1 07       	cpc	r27, r17
     6ac:	d9 f7       	brne	.-10     	; 0x6a4 <__do_copy_data+0xc>

000006ae <__do_clear_bss>:
     6ae:	12 e0       	ldi	r17, 0x02	; 2
     6b0:	a0 e8       	ldi	r26, 0x80	; 128
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <.do_clear_bss_start>

000006b6 <.do_clear_bss_loop>:
     6b6:	1d 92       	st	X+, r1

000006b8 <.do_clear_bss_start>:
     6b8:	a3 3d       	cpi	r26, 0xD3	; 211
     6ba:	b1 07       	cpc	r27, r17
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <.do_clear_bss_loop>
     6be:	0e 94 18 15 	call	0x2a30	; 0x2a30 <main>
     6c2:	0c 94 8f 18 	jmp	0x311e	; 0x311e <_exit>

000006c6 <__bad_interrupt>:
     6c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006ca <port_init>:
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
     6ca:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
     6cc:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
     6ce:	8f ee       	ldi	r24, 0xEF	; 239
     6d0:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
     6d2:	8f eb       	ldi	r24, 0xBF	; 191
     6d4:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
     6d6:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
     6d8:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
     6da:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
     6dc:	8e ef       	ldi	r24, 0xFE	; 254
     6de:	81 bb       	out	0x11, r24	; 17
     6e0:	08 95       	ret

000006e2 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
     6e2:	f8 94       	cli
 port_init();
     6e4:	0e 94 65 03 	call	0x6ca	; 0x6ca <port_init>
 spi_init();
     6e8:	0e 94 9e 14 	call	0x293c	; 0x293c <spi_init>
 twi_init();
     6ec:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <twi_init>
 uart0_init();
     6f0:	0e 94 ad 14 	call	0x295a	; 0x295a <uart0_init>

 MCUCR = 0x00;
     6f4:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
     6f6:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
     6f8:	19 be       	out	0x39, r1	; 57
     6fa:	08 95       	ret

000006fc <getFirstSector>:
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	20 91 a5 02 	lds	r18, 0x02A5
     708:	30 91 a6 02 	lds	r19, 0x02A6
     70c:	e0 90 8d 00 	lds	r14, 0x008D
     710:	f0 90 8e 00 	lds	r15, 0x008E
     714:	00 91 8f 00 	lds	r16, 0x008F
     718:	10 91 90 00 	lds	r17, 0x0090
     71c:	62 50       	subi	r22, 0x02	; 2
     71e:	70 40       	sbci	r23, 0x00	; 0
     720:	80 40       	sbci	r24, 0x00	; 0
     722:	90 40       	sbci	r25, 0x00	; 0
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
     72c:	9b 01       	movw	r18, r22
     72e:	ac 01       	movw	r20, r24
     730:	2e 0d       	add	r18, r14
     732:	3f 1d       	adc	r19, r15
     734:	40 1f       	adc	r20, r16
     736:	51 1f       	adc	r21, r17
     738:	b9 01       	movw	r22, r18
     73a:	ca 01       	movw	r24, r20
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	08 95       	ret

00000746 <displayMemory>:
     746:	8f 92       	push	r8
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	64 97       	sbiw	r28, 0x14	; 20
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	98 2e       	mov	r9, r24
     76e:	6a 01       	movw	r12, r20
     770:	7b 01       	movw	r14, r22
     772:	de 01       	movw	r26, r28
     774:	11 96       	adiw	r26, 0x01	; 1
     776:	e0 e6       	ldi	r30, 0x60	; 96
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	81 50       	subi	r24, 0x01	; 1
     782:	e1 f7       	brne	.-8      	; 0x77c <displayMemory+0x36>
     784:	0c e0       	ldi	r16, 0x0C	; 12
     786:	8c e2       	ldi	r24, 0x2C	; 44
     788:	88 2e       	mov	r8, r24
     78a:	05 30       	cpi	r16, 0x05	; 5
     78c:	11 f0       	breq	.+4      	; 0x792 <displayMemory+0x4c>
     78e:	09 30       	cpi	r16, 0x09	; 9
     790:	29 f4       	brne	.+10     	; 0x79c <displayMemory+0x56>
     792:	fe 01       	movw	r30, r28
     794:	e0 0f       	add	r30, r16
     796:	f1 1d       	adc	r31, r1
     798:	80 82       	st	Z, r8
     79a:	01 50       	subi	r16, 0x01	; 1
     79c:	5e 01       	movw	r10, r28
     79e:	a0 0e       	add	r10, r16
     7a0:	b1 1c       	adc	r11, r1
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	2a e0       	ldi	r18, 0x0A	; 10
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
     7b2:	60 63       	ori	r22, 0x30	; 48
     7b4:	f5 01       	movw	r30, r10
     7b6:	60 83       	st	Z, r22
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	2a e0       	ldi	r18, 0x0A	; 10
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
     7c8:	c9 01       	movw	r24, r18
     7ca:	da 01       	movw	r26, r20
     7cc:	6c 01       	movw	r12, r24
     7ce:	7d 01       	movw	r14, r26
     7d0:	c1 14       	cp	r12, r1
     7d2:	d1 04       	cpc	r13, r1
     7d4:	e1 04       	cpc	r14, r1
     7d6:	f1 04       	cpc	r15, r1
     7d8:	11 f0       	breq	.+4      	; 0x7de <displayMemory+0x98>
     7da:	01 50       	subi	r16, 0x01	; 1
     7dc:	b1 f6       	brne	.-84     	; 0x78a <displayMemory+0x44>
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	9f 16       	cp	r9, r31
     7e2:	11 f4       	brne	.+4      	; 0x7e8 <displayMemory+0xa2>
     7e4:	8b e4       	ldi	r24, 0x4B	; 75
     7e6:	8e 87       	std	Y+14, r24	; 0x0e
     7e8:	ce 01       	movw	r24, r28
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	0e 94 ca 14 	call	0x2994	; 0x2994 <transmitString>
     7f0:	64 96       	adiw	r28, 0x14	; 20
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	bf 90       	pop	r11
     80c:	af 90       	pop	r10
     80e:	9f 90       	pop	r9
     810:	8f 90       	pop	r8
     812:	08 95       	ret

00000814 <convertFileName>:
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	2b 97       	sbiw	r28, 0x0b	; 11
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	8c 01       	movw	r16, r24
     82e:	58 2f       	mov	r21, r24
     830:	a1 2f       	mov	r26, r17
     832:	fc 01       	movw	r30, r24
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8e 32       	cpi	r24, 0x2E	; 46
     83a:	19 f4       	brne	.+6      	; 0x842 <convertFileName+0x2e>
     83c:	49 30       	cpi	r20, 0x09	; 9
     83e:	30 f0       	brcs	.+12     	; 0x84c <convertFileName+0x38>
     840:	0e c0       	rjmp	.+28     	; 0x85e <convertFileName+0x4a>
     842:	4f 5f       	subi	r20, 0xFF	; 255
     844:	31 96       	adiw	r30, 0x01	; 1
     846:	4c 30       	cpi	r20, 0x0C	; 12
     848:	b1 f7       	brne	.-20     	; 0x836 <convertFileName+0x22>
     84a:	09 c0       	rjmp	.+18     	; 0x85e <convertFileName+0x4a>
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	85 2f       	mov	r24, r21
     854:	9a 2f       	mov	r25, r26
     856:	9c 01       	movw	r18, r24
     858:	f9 01       	movw	r30, r18
     85a:	db 01       	movw	r26, r22
     85c:	08 c0       	rjmp	.+16     	; 0x86e <__stack+0xf>
     85e:	89 ec       	ldi	r24, 0xC9	; 201
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	52 c0       	rjmp	.+164    	; 0x90e <__stack+0xaf>
     86a:	81 91       	ld	r24, Z+
     86c:	8d 93       	st	X+, r24
     86e:	8e 2f       	mov	r24, r30
     870:	85 1b       	sub	r24, r21
     872:	84 17       	cp	r24, r20
     874:	d0 f3       	brcs	.-12     	; 0x86a <__stack+0xb>
     876:	84 2f       	mov	r24, r20
     878:	9e 01       	movw	r18, r28
     87a:	2f 5f       	subi	r18, 0xFF	; 255
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	90 e2       	ldi	r25, 0x20	; 32
     880:	05 c0       	rjmp	.+10     	; 0x88c <__stack+0x2d>
     882:	f9 01       	movw	r30, r18
     884:	e8 0f       	add	r30, r24
     886:	f1 1d       	adc	r31, r1
     888:	90 83       	st	Z, r25
     88a:	8f 5f       	subi	r24, 0xFF	; 255
     88c:	88 30       	cpi	r24, 0x08	; 8
     88e:	c9 f7       	brne	.-14     	; 0x882 <__stack+0x23>
     890:	24 2f       	mov	r18, r20
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	ae 01       	movw	r20, r28
     896:	4f 5f       	subi	r20, 0xFF	; 255
     898:	5f 4f       	sbci	r21, 0xFF	; 255
     89a:	30 e2       	ldi	r19, 0x20	; 32
     89c:	f8 01       	movw	r30, r16
     89e:	e2 0f       	add	r30, r18
     8a0:	f1 1d       	adc	r31, r1
     8a2:	90 81       	ld	r25, Z
     8a4:	99 23       	and	r25, r25
     8a6:	59 f0       	breq	.+22     	; 0x8be <__stack+0x5f>
     8a8:	fa 01       	movw	r30, r20
     8aa:	e8 0f       	add	r30, r24
     8ac:	f1 1d       	adc	r31, r1
     8ae:	90 83       	st	Z, r25
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__stack+0x63>
     8b4:	fa 01       	movw	r30, r20
     8b6:	e8 0f       	add	r30, r24
     8b8:	f1 1d       	adc	r31, r1
     8ba:	30 83       	st	Z, r19
     8bc:	8f 5f       	subi	r24, 0xFF	; 255
     8be:	8b 30       	cpi	r24, 0x0B	; 11
     8c0:	c8 f3       	brcs	.-14     	; 0x8b4 <__stack+0x55>
     8c2:	8f 5f       	subi	r24, 0xFF	; 255
     8c4:	8b 30       	cpi	r24, 0x0B	; 11
     8c6:	50 f3       	brcs	.-44     	; 0x89c <__stack+0x3d>
     8c8:	9e 01       	movw	r18, r28
     8ca:	24 5f       	subi	r18, 0xF4	; 244
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	fb 01       	movw	r30, r22
     8d0:	90 81       	ld	r25, Z
     8d2:	89 2f       	mov	r24, r25
     8d4:	81 56       	subi	r24, 0x61	; 97
     8d6:	8a 31       	cpi	r24, 0x1A	; 26
     8d8:	10 f4       	brcc	.+4      	; 0x8de <__stack+0x7f>
     8da:	90 52       	subi	r25, 0x20	; 32
     8dc:	90 83       	st	Z, r25
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	62 17       	cp	r22, r18
     8e4:	73 07       	cpc	r23, r19
     8e6:	99 f7       	brne	.-26     	; 0x8ce <__stack+0x6f>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	ae 01       	movw	r20, r28
     8ee:	4f 5f       	subi	r20, 0xFF	; 255
     8f0:	5f 4f       	sbci	r21, 0xFF	; 255
     8f2:	f8 01       	movw	r30, r16
     8f4:	e2 0f       	add	r30, r18
     8f6:	f3 1f       	adc	r31, r19
     8f8:	da 01       	movw	r26, r20
     8fa:	a2 0f       	add	r26, r18
     8fc:	b3 1f       	adc	r27, r19
     8fe:	8c 91       	ld	r24, X
     900:	80 83       	st	Z, r24
     902:	2f 5f       	subi	r18, 0xFF	; 255
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	2b 30       	cpi	r18, 0x0B	; 11
     908:	31 05       	cpc	r19, r1
     90a:	99 f7       	brne	.-26     	; 0x8f2 <__stack+0x93>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	2b 96       	adiw	r28, 0x0b	; 11
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <searchNextFreeCluster>:
     924:	6f 92       	push	r6
     926:	7f 92       	push	r7
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	60 78       	andi	r22, 0x80	; 128
     93e:	3b 01       	movw	r6, r22
     940:	4c 01       	movw	r8, r24
     942:	22 e0       	ldi	r18, 0x02	; 2
     944:	66 0c       	add	r6, r6
     946:	77 1c       	adc	r7, r7
     948:	88 1c       	adc	r8, r8
     94a:	99 1c       	adc	r9, r9
     94c:	2a 95       	dec	r18
     94e:	d1 f7       	brne	.-12     	; 0x944 <searchNextFreeCluster+0x20>
     950:	5b 01       	movw	r10, r22
     952:	6c 01       	movw	r12, r24
     954:	50 c0       	rjmp	.+160    	; 0x9f6 <searchNextFreeCluster+0xd2>
     956:	e0 90 b0 02 	lds	r14, 0x02B0
     95a:	f0 90 b1 02 	lds	r15, 0x02B1
     95e:	20 91 95 00 	lds	r18, 0x0095
     962:	30 91 96 00 	lds	r19, 0x0096
     966:	00 e0       	ldi	r16, 0x00	; 0
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	80 91 a7 02 	lds	r24, 0x02A7
     96e:	90 91 a8 02 	lds	r25, 0x02A8
     972:	a0 91 a9 02 	lds	r26, 0x02A9
     976:	b0 91 aa 02 	lds	r27, 0x02AA
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	c4 01       	movw	r24, r8
     988:	b3 01       	movw	r22, r6
     98a:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
     98e:	e2 0e       	add	r14, r18
     990:	f3 1e       	adc	r15, r19
     992:	04 1f       	adc	r16, r20
     994:	15 1f       	adc	r17, r21
     996:	c8 01       	movw	r24, r16
     998:	b7 01       	movw	r22, r14
     99a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	e6 2f       	mov	r30, r22
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	eb 55       	subi	r30, 0x5B	; 91
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	80 81       	ld	r24, Z
     9b2:	91 81       	ldd	r25, Z+1	; 0x01
     9b4:	a2 81       	ldd	r26, Z+2	; 0x02
     9b6:	b3 81       	ldd	r27, Z+3	; 0x03
     9b8:	bf 70       	andi	r27, 0x0F	; 15
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	a1 05       	cpc	r26, r1
     9be:	b1 05       	cpc	r27, r1
     9c0:	39 f4       	brne	.+14     	; 0x9d0 <searchNextFreeCluster+0xac>
     9c2:	a6 01       	movw	r20, r12
     9c4:	95 01       	movw	r18, r10
     9c6:	26 0f       	add	r18, r22
     9c8:	31 1d       	adc	r19, r1
     9ca:	41 1d       	adc	r20, r1
     9cc:	51 1d       	adc	r21, r1
     9ce:	25 c0       	rjmp	.+74     	; 0xa1a <searchNextFreeCluster+0xf6>
     9d0:	6f 5f       	subi	r22, 0xFF	; 255
     9d2:	60 38       	cpi	r22, 0x80	; 128
     9d4:	29 f7       	brne	.-54     	; 0x9a0 <searchNextFreeCluster+0x7c>
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	a8 0e       	add	r10, r24
     9e0:	b9 1e       	adc	r11, r25
     9e2:	ca 1e       	adc	r12, r26
     9e4:	db 1e       	adc	r13, r27
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	68 0e       	add	r6, r24
     9f0:	79 1e       	adc	r7, r25
     9f2:	8a 1e       	adc	r8, r26
     9f4:	9b 1e       	adc	r9, r27
     9f6:	80 91 97 00 	lds	r24, 0x0097
     9fa:	90 91 98 00 	lds	r25, 0x0098
     9fe:	a0 91 99 00 	lds	r26, 0x0099
     a02:	b0 91 9a 00 	lds	r27, 0x009A
     a06:	a8 16       	cp	r10, r24
     a08:	b9 06       	cpc	r11, r25
     a0a:	ca 06       	cpc	r12, r26
     a0c:	db 06       	cpc	r13, r27
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <searchNextFreeCluster+0xee>
     a10:	a2 cf       	rjmp	.-188    	; 0x956 <searchNextFreeCluster+0x32>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	b9 01       	movw	r22, r18
     a1c:	ca 01       	movw	r24, r20
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	df 90       	pop	r13
     a28:	cf 90       	pop	r12
     a2a:	bf 90       	pop	r11
     a2c:	af 90       	pop	r10
     a2e:	9f 90       	pop	r9
     a30:	8f 90       	pop	r8
     a32:	7f 90       	pop	r7
     a34:	6f 90       	pop	r6
     a36:	08 95       	ret

00000a38 <getSetFreeCluster>:
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	d8 2e       	mov	r13, r24
     a46:	c6 2e       	mov	r12, r22
     a48:	79 01       	movw	r14, r18
     a4a:	8a 01       	movw	r16, r20
     a4c:	60 91 a7 02 	lds	r22, 0x02A7
     a50:	70 91 a8 02 	lds	r23, 0x02A8
     a54:	80 91 a9 02 	lds	r24, 0x02A9
     a58:	90 91 aa 02 	lds	r25, 0x02AA
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	8f 4f       	sbci	r24, 0xFF	; 255
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
     a68:	80 91 a5 00 	lds	r24, 0x00A5
     a6c:	90 91 a6 00 	lds	r25, 0x00A6
     a70:	a0 91 a7 00 	lds	r26, 0x00A7
     a74:	b0 91 a8 00 	lds	r27, 0x00A8
     a78:	82 55       	subi	r24, 0x52	; 82
     a7a:	92 45       	sbci	r25, 0x52	; 82
     a7c:	a1 46       	sbci	r26, 0x61	; 97
     a7e:	b1 44       	sbci	r27, 0x41	; 65
     a80:	09 f0       	breq	.+2      	; 0xa84 <getSetFreeCluster+0x4c>
     a82:	54 c0       	rjmp	.+168    	; 0xb2c <getSetFreeCluster+0xf4>
     a84:	80 91 89 02 	lds	r24, 0x0289
     a88:	90 91 8a 02 	lds	r25, 0x028A
     a8c:	a0 91 8b 02 	lds	r26, 0x028B
     a90:	b0 91 8c 02 	lds	r27, 0x028C
     a94:	82 57       	subi	r24, 0x72	; 114
     a96:	92 47       	sbci	r25, 0x72	; 114
     a98:	a1 44       	sbci	r26, 0x41	; 65
     a9a:	b1 46       	sbci	r27, 0x61	; 97
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <getSetFreeCluster+0x68>
     a9e:	46 c0       	rjmp	.+140    	; 0xb2c <getSetFreeCluster+0xf4>
     aa0:	80 91 a1 02 	lds	r24, 0x02A1
     aa4:	90 91 a2 02 	lds	r25, 0x02A2
     aa8:	a0 91 a3 02 	lds	r26, 0x02A3
     aac:	b0 91 a4 02 	lds	r27, 0x02A4
     ab0:	80 50       	subi	r24, 0x00	; 0
     ab2:	90 40       	sbci	r25, 0x00	; 0
     ab4:	a5 45       	sbci	r26, 0x55	; 85
     ab6:	ba 4a       	sbci	r27, 0xAA	; 170
     ab8:	c9 f5       	brne	.+114    	; 0xb2c <getSetFreeCluster+0xf4>
     aba:	cc 20       	and	r12, r12
     abc:	a9 f4       	brne	.+42     	; 0xae8 <getSetFreeCluster+0xb0>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	d8 16       	cp	r13, r24
     ac2:	49 f4       	brne	.+18     	; 0xad6 <getSetFreeCluster+0x9e>
     ac4:	20 91 8d 02 	lds	r18, 0x028D
     ac8:	30 91 8e 02 	lds	r19, 0x028E
     acc:	40 91 8f 02 	lds	r20, 0x028F
     ad0:	50 91 90 02 	lds	r21, 0x0290
     ad4:	2f c0       	rjmp	.+94     	; 0xb34 <getSetFreeCluster+0xfc>
     ad6:	20 91 91 02 	lds	r18, 0x0291
     ada:	30 91 92 02 	lds	r19, 0x0292
     ade:	40 91 93 02 	lds	r20, 0x0293
     ae2:	50 91 94 02 	lds	r21, 0x0294
     ae6:	26 c0       	rjmp	.+76     	; 0xb34 <getSetFreeCluster+0xfc>
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	d2 16       	cp	r13, r18
     aec:	49 f4       	brne	.+18     	; 0xb00 <getSetFreeCluster+0xc8>
     aee:	e0 92 8d 02 	sts	0x028D, r14
     af2:	f0 92 8e 02 	sts	0x028E, r15
     af6:	00 93 8f 02 	sts	0x028F, r16
     afa:	10 93 90 02 	sts	0x0290, r17
     afe:	08 c0       	rjmp	.+16     	; 0xb10 <getSetFreeCluster+0xd8>
     b00:	e0 92 91 02 	sts	0x0291, r14
     b04:	f0 92 92 02 	sts	0x0292, r15
     b08:	00 93 93 02 	sts	0x0293, r16
     b0c:	10 93 94 02 	sts	0x0294, r17
     b10:	60 91 a7 02 	lds	r22, 0x02A7
     b14:	70 91 a8 02 	lds	r23, 0x02A8
     b18:	80 91 a9 02 	lds	r24, 0x02A9
     b1c:	90 91 aa 02 	lds	r25, 0x02AA
     b20:	6f 5f       	subi	r22, 0xFF	; 255
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	8f 4f       	sbci	r24, 0xFF	; 255
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	3f ef       	ldi	r19, 0xFF	; 255
     b30:	4f ef       	ldi	r20, 0xFF	; 255
     b32:	5f ef       	ldi	r21, 0xFF	; 255
     b34:	b9 01       	movw	r22, r18
     b36:	ca 01       	movw	r24, r20
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	08 95       	ret

00000b46 <freeMemoryUpdate>:
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	d8 2e       	mov	r13, r24
     b52:	db 01       	movw	r26, r22
     b54:	ca 01       	movw	r24, r20
     b56:	e9 e0       	ldi	r30, 0x09	; 9
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	ea 95       	dec	r30
     b62:	d1 f7       	brne	.-12     	; 0xb58 <freeMemoryUpdate+0x12>
     b64:	51 70       	andi	r21, 0x01	; 1
     b66:	60 70       	andi	r22, 0x00	; 0
     b68:	70 70       	andi	r23, 0x00	; 0
     b6a:	41 15       	cp	r20, r1
     b6c:	51 05       	cpc	r21, r1
     b6e:	61 05       	cpc	r22, r1
     b70:	71 05       	cpc	r23, r1
     b72:	19 f4       	brne	.+6      	; 0xb7a <freeMemoryUpdate+0x34>
     b74:	ac 01       	movw	r20, r24
     b76:	bd 01       	movw	r22, r26
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <freeMemoryUpdate+0x40>
     b7a:	ac 01       	movw	r20, r24
     b7c:	bd 01       	movw	r22, r26
     b7e:	4f 5f       	subi	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	6f 4f       	sbci	r22, 0xFF	; 255
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	db 01       	movw	r26, r22
     b88:	ca 01       	movw	r24, r20
     b8a:	33 e0       	ldi	r19, 0x03	; 3
     b8c:	b6 95       	lsr	r27
     b8e:	a7 95       	ror	r26
     b90:	97 95       	ror	r25
     b92:	87 95       	ror	r24
     b94:	3a 95       	dec	r19
     b96:	d1 f7       	brne	.-12     	; 0xb8c <freeMemoryUpdate+0x46>
     b98:	47 70       	andi	r20, 0x07	; 7
     b9a:	50 70       	andi	r21, 0x00	; 0
     b9c:	60 70       	andi	r22, 0x00	; 0
     b9e:	70 70       	andi	r23, 0x00	; 0
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <freeMemoryUpdate+0x6a>
     baa:	7c 01       	movw	r14, r24
     bac:	8d 01       	movw	r16, r26
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <freeMemoryUpdate+0x78>
     bb0:	7c 01       	movw	r14, r24
     bb2:	8d 01       	movw	r16, r26
     bb4:	08 94       	sec
     bb6:	e1 1c       	adc	r14, r1
     bb8:	f1 1c       	adc	r15, r1
     bba:	01 1d       	adc	r16, r1
     bbc:	11 1d       	adc	r17, r1
     bbe:	80 91 b7 02 	lds	r24, 0x02B7
     bc2:	88 23       	and	r24, r24
     bc4:	d9 f0       	breq	.+54     	; 0xbfc <freeMemoryUpdate+0xb6>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
     bd6:	dd 20       	and	r13, r13
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <freeMemoryUpdate+0xa2>
     bda:	9b 01       	movw	r18, r22
     bdc:	ac 01       	movw	r20, r24
     bde:	2e 0d       	add	r18, r14
     be0:	3f 1d       	adc	r19, r15
     be2:	40 1f       	adc	r20, r16
     be4:	51 1f       	adc	r21, r17
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <freeMemoryUpdate+0xae>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	2e 19       	sub	r18, r14
     bee:	3f 09       	sbc	r19, r15
     bf0:	40 0b       	sbc	r20, r16
     bf2:	51 0b       	sbc	r21, r17
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	08 95       	ret

00000c08 <memoryStatistics>:
     c08:	2f 92       	push	r2
     c0a:	3f 92       	push	r3
     c0c:	4f 92       	push	r4
     c0e:	5f 92       	push	r5
     c10:	6f 92       	push	r6
     c12:	7f 92       	push	r7
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	20 91 97 00 	lds	r18, 0x0097
     c2c:	30 91 98 00 	lds	r19, 0x0098
     c30:	40 91 99 00 	lds	r20, 0x0099
     c34:	50 91 9a 00 	lds	r21, 0x009A
     c38:	60 91 a5 02 	lds	r22, 0x02A5
     c3c:	70 91 a6 02 	lds	r23, 0x02A6
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
     c48:	5b 01       	movw	r10, r22
     c4a:	6c 01       	movw	r12, r24
     c4c:	1a e0       	ldi	r17, 0x0A	; 10
     c4e:	d6 94       	lsr	r13
     c50:	c7 94       	ror	r12
     c52:	b7 94       	ror	r11
     c54:	a7 94       	ror	r10
     c56:	1a 95       	dec	r17
     c58:	d1 f7       	brne	.-12     	; 0xc4e <memoryStatistics+0x46>
     c5a:	e0 90 95 00 	lds	r14, 0x0095
     c5e:	f0 90 96 00 	lds	r15, 0x0096
     c62:	8d e0       	ldi	r24, 0x0D	; 13
     c64:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     c68:	8a e0       	ldi	r24, 0x0A	; 10
     c6a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     c6e:	8d e0       	ldi	r24, 0x0D	; 13
     c70:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     c74:	8a e0       	ldi	r24, 0x0A	; 10
     c76:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     c7a:	86 ef       	ldi	r24, 0xF6	; 246
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	c6 01       	movw	r24, r12
     c88:	b5 01       	movw	r22, r10
     c8a:	a8 01       	movw	r20, r16
     c8c:	97 01       	movw	r18, r14
     c8e:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
     c92:	ab 01       	movw	r20, r22
     c94:	bc 01       	movw	r22, r24
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 a3 03 	call	0x746	; 0x746 <displayMemory>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
     cac:	3b 01       	movw	r6, r22
     cae:	4c 01       	movw	r8, r24
     cb0:	80 91 97 00 	lds	r24, 0x0097
     cb4:	90 91 98 00 	lds	r25, 0x0098
     cb8:	a0 91 99 00 	lds	r26, 0x0099
     cbc:	b0 91 9a 00 	lds	r27, 0x009A
     cc0:	86 15       	cp	r24, r6
     cc2:	97 05       	cpc	r25, r7
     cc4:	a8 05       	cpc	r26, r8
     cc6:	b9 05       	cpc	r27, r9
     cc8:	08 f0       	brcs	.+2      	; 0xccc <memoryStatistics+0xc4>
     cca:	7c c0       	rjmp	.+248    	; 0xdc4 <memoryStatistics+0x1bc>
     ccc:	10 92 b7 02 	sts	0x02B7, r1
     cd0:	a0 90 9b 00 	lds	r10, 0x009B
     cd4:	b0 90 9c 00 	lds	r11, 0x009C
     cd8:	c0 90 9d 00 	lds	r12, 0x009D
     cdc:	d0 90 9e 00 	lds	r13, 0x009E
     ce0:	b2 e0       	ldi	r27, 0x02	; 2
     ce2:	aa 0c       	add	r10, r10
     ce4:	bb 1c       	adc	r11, r11
     ce6:	cc 1c       	adc	r12, r12
     ce8:	dd 1c       	adc	r13, r13
     cea:	ba 95       	dec	r27
     cec:	d1 f7       	brne	.-12     	; 0xce2 <memoryStatistics+0xda>
     cee:	66 24       	eor	r6, r6
     cf0:	77 24       	eor	r7, r7
     cf2:	43 01       	movw	r8, r6
     cf4:	22 24       	eor	r2, r2
     cf6:	33 24       	eor	r3, r3
     cf8:	21 01       	movw	r4, r2
     cfa:	e0 90 b0 02 	lds	r14, 0x02B0
     cfe:	f0 90 b1 02 	lds	r15, 0x02B1
     d02:	20 91 95 00 	lds	r18, 0x0095
     d06:	30 91 96 00 	lds	r19, 0x0096
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	80 91 a7 02 	lds	r24, 0x02A7
     d12:	90 91 a8 02 	lds	r25, 0x02A8
     d16:	a0 91 a9 02 	lds	r26, 0x02A9
     d1a:	b0 91 aa 02 	lds	r27, 0x02AA
     d1e:	e8 0e       	add	r14, r24
     d20:	f9 1e       	adc	r15, r25
     d22:	0a 1f       	adc	r16, r26
     d24:	1b 1f       	adc	r17, r27
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	c6 01       	movw	r24, r12
     d2c:	b5 01       	movw	r22, r10
     d2e:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
     d32:	e2 0e       	add	r14, r18
     d34:	f3 1e       	adc	r15, r19
     d36:	04 1f       	adc	r16, r20
     d38:	15 1f       	adc	r17, r21
     d3a:	c8 01       	movw	r24, r16
     d3c:	b7 01       	movw	r22, r14
     d3e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
     d42:	a2 01       	movw	r20, r4
     d44:	91 01       	movw	r18, r2
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	fb 01       	movw	r30, r22
     d4c:	eb 55       	subi	r30, 0x5B	; 91
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	a2 81       	ldd	r26, Z+2	; 0x02
     d56:	b3 81       	ldd	r27, Z+3	; 0x03
     d58:	bf 70       	andi	r27, 0x0F	; 15
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	a1 05       	cpc	r26, r1
     d5e:	b1 05       	cpc	r27, r1
     d60:	29 f4       	brne	.+10     	; 0xd6c <memoryStatistics+0x164>
     d62:	08 94       	sec
     d64:	61 1c       	adc	r6, r1
     d66:	71 1c       	adc	r7, r1
     d68:	81 1c       	adc	r8, r1
     d6a:	91 1c       	adc	r9, r1
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	4f 4f       	sbci	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	80 91 97 00 	lds	r24, 0x0097
     d78:	90 91 98 00 	lds	r25, 0x0098
     d7c:	a0 91 99 00 	lds	r26, 0x0099
     d80:	b0 91 9a 00 	lds	r27, 0x009A
     d84:	02 96       	adiw	r24, 0x02	; 2
     d86:	a1 1d       	adc	r26, r1
     d88:	b1 1d       	adc	r27, r1
     d8a:	28 17       	cp	r18, r24
     d8c:	39 07       	cpc	r19, r25
     d8e:	4a 07       	cpc	r20, r26
     d90:	5b 07       	cpc	r21, r27
     d92:	c1 f0       	breq	.+48     	; 0xdc4 <memoryStatistics+0x1bc>
     d94:	c9 01       	movw	r24, r18
     d96:	82 19       	sub	r24, r2
     d98:	93 09       	sbc	r25, r3
     d9a:	6c 5f       	subi	r22, 0xFC	; 252
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	02 e0       	ldi	r16, 0x02	; 2
     da0:	60 30       	cpi	r22, 0x00	; 0
     da2:	70 07       	cpc	r23, r16
     da4:	91 f6       	brne	.-92     	; 0xd4a <memoryStatistics+0x142>
     da6:	e1 2c       	mov	r14, r1
     da8:	a2 e0       	ldi	r26, 0x02	; 2
     daa:	fa 2e       	mov	r15, r26
     dac:	01 2d       	mov	r16, r1
     dae:	11 2d       	mov	r17, r1
     db0:	ae 0c       	add	r10, r14
     db2:	bf 1c       	adc	r11, r15
     db4:	c0 1e       	adc	r12, r16
     db6:	d1 1e       	adc	r13, r17
     db8:	80 38       	cpi	r24, 0x80	; 128
     dba:	91 05       	cpc	r25, r1
     dbc:	18 f0       	brcs	.+6      	; 0xdc4 <memoryStatistics+0x1bc>
     dbe:	19 01       	movw	r2, r18
     dc0:	2a 01       	movw	r4, r20
     dc2:	9b cf       	rjmp	.-202    	; 0xcfa <memoryStatistics+0xf2>
     dc4:	80 91 b7 02 	lds	r24, 0x02B7
     dc8:	88 23       	and	r24, r24
     dca:	31 f4       	brne	.+12     	; 0xdd8 <memoryStatistics+0x1d0>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	a4 01       	movw	r20, r8
     dd2:	93 01       	movw	r18, r6
     dd4:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	80 93 b7 02 	sts	0x02B7, r24
     dde:	20 91 a5 02 	lds	r18, 0x02A5
     de2:	30 91 a6 02 	lds	r19, 0x02A6
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	c4 01       	movw	r24, r8
     dec:	b3 01       	movw	r22, r6
     dee:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
     df2:	5b 01       	movw	r10, r22
     df4:	6c 01       	movw	r12, r24
     df6:	fa e0       	ldi	r31, 0x0A	; 10
     df8:	d6 94       	lsr	r13
     dfa:	c7 94       	ror	r12
     dfc:	b7 94       	ror	r11
     dfe:	a7 94       	ror	r10
     e00:	fa 95       	dec	r31
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <memoryStatistics+0x1f0>
     e04:	e0 90 95 00 	lds	r14, 0x0095
     e08:	f0 90 96 00 	lds	r15, 0x0096
     e0c:	8d e0       	ldi	r24, 0x0D	; 13
     e0e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     e12:	8a e0       	ldi	r24, 0x0A	; 10
     e14:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     e18:	87 ee       	ldi	r24, 0xE7	; 231
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
     e20:	00 e0       	ldi	r16, 0x00	; 0
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	c6 01       	movw	r24, r12
     e26:	b5 01       	movw	r22, r10
     e28:	a8 01       	movw	r20, r16
     e2a:	97 01       	movw	r18, r14
     e2c:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
     e30:	ab 01       	movw	r20, r22
     e32:	bc 01       	movw	r22, r24
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 a3 03 	call	0x746	; 0x746 <displayMemory>
     e3a:	8d e0       	ldi	r24, 0x0D	; 13
     e3c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     e40:	8a e0       	ldi	r24, 0x0A	; 10
     e42:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	bf 90       	pop	r11
     e54:	af 90       	pop	r10
     e56:	9f 90       	pop	r9
     e58:	8f 90       	pop	r8
     e5a:	7f 90       	pop	r7
     e5c:	6f 90       	pop	r6
     e5e:	5f 90       	pop	r5
     e60:	4f 90       	pop	r4
     e62:	3f 90       	pop	r3
     e64:	2f 90       	pop	r2
     e66:	08 95       	ret

00000e68 <getBootSectorData>:
     e68:	6f 92       	push	r6
     e6a:	7f 92       	push	r7
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	10 92 a7 02 	sts	0x02A7, r1
     e84:	10 92 a8 02 	sts	0x02A8, r1
     e88:	10 92 a9 02 	sts	0x02A9, r1
     e8c:	10 92 aa 02 	sts	0x02AA, r1
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
     e9c:	80 91 a5 00 	lds	r24, 0x00A5
     ea0:	89 3e       	cpi	r24, 0xE9	; 233
     ea2:	19 f1       	breq	.+70     	; 0xeea <getBootSectorData+0x82>
     ea4:	8b 3e       	cpi	r24, 0xEB	; 235
     ea6:	09 f1       	breq	.+66     	; 0xeea <getBootSectorData+0x82>
     ea8:	80 91 a3 02 	lds	r24, 0x02A3
     eac:	90 91 a4 02 	lds	r25, 0x02A4
     eb0:	85 55       	subi	r24, 0x55	; 85
     eb2:	9a 4a       	sbci	r25, 0xAA	; 170
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <getBootSectorData+0x50>
     eb6:	b0 c0       	rjmp	.+352    	; 0x1018 <getBootSectorData+0x1b0>
     eb8:	60 91 6b 02 	lds	r22, 0x026B
     ebc:	70 91 6c 02 	lds	r23, 0x026C
     ec0:	80 91 6d 02 	lds	r24, 0x026D
     ec4:	90 91 6e 02 	lds	r25, 0x026E
     ec8:	60 93 a7 02 	sts	0x02A7, r22
     ecc:	70 93 a8 02 	sts	0x02A8, r23
     ed0:	80 93 a9 02 	sts	0x02A9, r24
     ed4:	90 93 aa 02 	sts	0x02AA, r25
     ed8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
     edc:	80 91 a5 00 	lds	r24, 0x00A5
     ee0:	89 3e       	cpi	r24, 0xE9	; 233
     ee2:	19 f0       	breq	.+6      	; 0xeea <getBootSectorData+0x82>
     ee4:	8b 3e       	cpi	r24, 0xEB	; 235
     ee6:	09 f0       	breq	.+2      	; 0xeea <getBootSectorData+0x82>
     ee8:	97 c0       	rjmp	.+302    	; 0x1018 <getBootSectorData+0x1b0>
     eea:	80 91 b0 00 	lds	r24, 0x00B0
     eee:	90 91 b1 00 	lds	r25, 0x00B1
     ef2:	90 93 96 00 	sts	0x0096, r25
     ef6:	80 93 95 00 	sts	0x0095, r24
     efa:	80 91 b2 00 	lds	r24, 0x00B2
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	90 93 a6 02 	sts	0x02A6, r25
     f04:	80 93 a5 02 	sts	0x02A5, r24
     f08:	a0 90 b3 00 	lds	r10, 0x00B3
     f0c:	b0 90 b4 00 	lds	r11, 0x00B4
     f10:	b0 92 b1 02 	sts	0x02B1, r11
     f14:	a0 92 b0 02 	sts	0x02B0, r10
     f18:	80 91 d1 00 	lds	r24, 0x00D1
     f1c:	90 91 d2 00 	lds	r25, 0x00D2
     f20:	a0 91 d3 00 	lds	r26, 0x00D3
     f24:	b0 91 d4 00 	lds	r27, 0x00D4
     f28:	80 93 9b 00 	sts	0x009B, r24
     f2c:	90 93 9c 00 	sts	0x009C, r25
     f30:	a0 93 9d 00 	sts	0x009D, r26
     f34:	b0 93 9e 00 	sts	0x009E, r27
     f38:	e0 90 b0 02 	lds	r14, 0x02B0
     f3c:	f0 90 b1 02 	lds	r15, 0x02B1
     f40:	60 91 b5 00 	lds	r22, 0x00B5
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	20 91 c9 00 	lds	r18, 0x00C9
     f4e:	30 91 ca 00 	lds	r19, 0x00CA
     f52:	40 91 cb 00 	lds	r20, 0x00CB
     f56:	50 91 cc 00 	lds	r21, 0x00CC
     f5a:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
     f5e:	3b 01       	movw	r6, r22
     f60:	4c 01       	movw	r8, r24
     f62:	00 e0       	ldi	r16, 0x00	; 0
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	80 91 c1 00 	lds	r24, 0x00C1
     f6a:	90 91 c2 00 	lds	r25, 0x00C2
     f6e:	a0 91 c3 00 	lds	r26, 0x00C3
     f72:	b0 91 c4 00 	lds	r27, 0x00C4
     f76:	e8 0e       	add	r14, r24
     f78:	f9 1e       	adc	r15, r25
     f7a:	0a 1f       	adc	r16, r26
     f7c:	1b 1f       	adc	r17, r27
     f7e:	e6 0c       	add	r14, r6
     f80:	f7 1c       	adc	r15, r7
     f82:	08 1d       	adc	r16, r8
     f84:	19 1d       	adc	r17, r9
     f86:	e0 92 8d 00 	sts	0x008D, r14
     f8a:	f0 92 8e 00 	sts	0x008E, r15
     f8e:	00 93 8f 00 	sts	0x008F, r16
     f92:	10 93 90 00 	sts	0x0090, r17
     f96:	20 91 a5 02 	lds	r18, 0x02A5
     f9a:	30 91 a6 02 	lds	r19, 0x02A6
     f9e:	cc 24       	eor	r12, r12
     fa0:	dd 24       	eor	r13, r13
     fa2:	60 91 c5 00 	lds	r22, 0x00C5
     fa6:	70 91 c6 00 	lds	r23, 0x00C6
     faa:	80 91 c7 00 	lds	r24, 0x00C7
     fae:	90 91 c8 00 	lds	r25, 0x00C8
     fb2:	6a 19       	sub	r22, r10
     fb4:	7b 09       	sbc	r23, r11
     fb6:	8c 09       	sbc	r24, r12
     fb8:	9d 09       	sbc	r25, r13
     fba:	66 19       	sub	r22, r6
     fbc:	77 09       	sbc	r23, r7
     fbe:	88 09       	sbc	r24, r8
     fc0:	99 09       	sbc	r25, r9
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
     fca:	c9 01       	movw	r24, r18
     fcc:	da 01       	movw	r26, r20
     fce:	80 93 97 00 	sts	0x0097, r24
     fd2:	90 93 98 00 	sts	0x0098, r25
     fd6:	a0 93 99 00 	sts	0x0099, r26
     fda:	b0 93 9a 00 	sts	0x009A, r27
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
     fee:	20 91 97 00 	lds	r18, 0x0097
     ff2:	30 91 98 00 	lds	r19, 0x0098
     ff6:	40 91 99 00 	lds	r20, 0x0099
     ffa:	50 91 9a 00 	lds	r21, 0x009A
     ffe:	26 17       	cp	r18, r22
    1000:	37 07       	cpc	r19, r23
    1002:	48 07       	cpc	r20, r24
    1004:	59 07       	cpc	r21, r25
    1006:	18 f4       	brcc	.+6      	; 0x100e <getBootSectorData+0x1a6>
    1008:	10 92 b7 02 	sts	0x02B7, r1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <getBootSectorData+0x1ac>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 b7 02 	sts	0x02B7, r24
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	01 c0       	rjmp	.+2      	; 0x101a <getBootSectorData+0x1b2>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	9f 90       	pop	r9
    102c:	8f 90       	pop	r8
    102e:	7f 90       	pop	r7
    1030:	6f 90       	pop	r6
    1032:	08 95       	ret

00001034 <getSetNextCluster>:
    1034:	4f 92       	push	r4
    1036:	5f 92       	push	r5
    1038:	6f 92       	push	r6
    103a:	7f 92       	push	r7
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	5b 01       	movw	r10, r22
    1056:	6c 01       	movw	r12, r24
    1058:	84 2e       	mov	r8, r20
    105a:	28 01       	movw	r4, r16
    105c:	39 01       	movw	r6, r18
    105e:	80 91 b0 02 	lds	r24, 0x02B0
    1062:	90 91 b1 02 	lds	r25, 0x02B1
    1066:	02 e0       	ldi	r16, 0x02	; 2
    1068:	aa 0c       	add	r10, r10
    106a:	bb 1c       	adc	r11, r11
    106c:	cc 1c       	adc	r12, r12
    106e:	dd 1c       	adc	r13, r13
    1070:	0a 95       	dec	r16
    1072:	d1 f7       	brne	.-12     	; 0x1068 <getSetNextCluster+0x34>
    1074:	20 91 95 00 	lds	r18, 0x0095
    1078:	30 91 96 00 	lds	r19, 0x0096
    107c:	7c 01       	movw	r14, r24
    107e:	00 e0       	ldi	r16, 0x00	; 0
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	80 91 a7 02 	lds	r24, 0x02A7
    1086:	90 91 a8 02 	lds	r25, 0x02A8
    108a:	a0 91 a9 02 	lds	r26, 0x02A9
    108e:	b0 91 aa 02 	lds	r27, 0x02AA
    1092:	e8 0e       	add	r14, r24
    1094:	f9 1e       	adc	r15, r25
    1096:	0a 1f       	adc	r16, r26
    1098:	1b 1f       	adc	r17, r27
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	c6 01       	movw	r24, r12
    10a0:	b5 01       	movw	r22, r10
    10a2:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
    10a6:	e2 0e       	add	r14, r18
    10a8:	f3 1e       	adc	r15, r19
    10aa:	04 1f       	adc	r16, r20
    10ac:	15 1f       	adc	r17, r21
    10ae:	c0 91 95 00 	lds	r28, 0x0095
    10b2:	d0 91 96 00 	lds	r29, 0x0096
    10b6:	99 24       	eor	r9, r9
    10b8:	c8 01       	movw	r24, r16
    10ba:	b7 01       	movw	r22, r14
    10bc:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    10c0:	88 23       	and	r24, r24
    10c2:	21 f0       	breq	.+8      	; 0x10cc <getSetNextCluster+0x98>
    10c4:	93 94       	inc	r9
    10c6:	8a e0       	ldi	r24, 0x0A	; 10
    10c8:	98 16       	cp	r9, r24
    10ca:	b1 f7       	brne	.-20     	; 0x10b8 <getSetNextCluster+0x84>
    10cc:	9e 01       	movw	r18, r28
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	c6 01       	movw	r24, r12
    10d4:	b5 01       	movw	r22, r10
    10d6:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
    10da:	fb 01       	movw	r30, r22
    10dc:	eb 55       	subi	r30, 0x5B	; 91
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	88 20       	and	r8, r8
    10e2:	31 f4       	brne	.+12     	; 0x10f0 <getSetNextCluster+0xbc>
    10e4:	20 81       	ld	r18, Z
    10e6:	31 81       	ldd	r19, Z+1	; 0x01
    10e8:	42 81       	ldd	r20, Z+2	; 0x02
    10ea:	53 81       	ldd	r21, Z+3	; 0x03
    10ec:	5f 70       	andi	r21, 0x0F	; 15
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <getSetNextCluster+0xd4>
    10f0:	40 82       	st	Z, r4
    10f2:	51 82       	std	Z+1, r5	; 0x01
    10f4:	62 82       	std	Z+2, r6	; 0x02
    10f6:	73 82       	std	Z+3, r7	; 0x03
    10f8:	c8 01       	movw	r24, r16
    10fa:	b7 01       	movw	r22, r14
    10fc:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	ca 01       	movw	r24, r20
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	9f 90       	pop	r9
    1122:	8f 90       	pop	r8
    1124:	7f 90       	pop	r7
    1126:	6f 90       	pop	r6
    1128:	5f 90       	pop	r5
    112a:	4f 90       	pop	r4
    112c:	08 95       	ret

0000112e <findFiles>:
    112e:	2f 92       	push	r2
    1130:	3f 92       	push	r3
    1132:	4f 92       	push	r4
    1134:	5f 92       	push	r5
    1136:	6f 92       	push	r6
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	2a 97       	sbiw	r28, 0x0a	; 10
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	7f 83       	std	Y+7, r23	; 0x07
    1166:	6e 83       	std	Y+6, r22	; 0x06
    1168:	a0 90 9b 00 	lds	r10, 0x009B
    116c:	b0 90 9c 00 	lds	r11, 0x009C
    1170:	c0 90 9d 00 	lds	r12, 0x009D
    1174:	d0 90 9e 00 	lds	r13, 0x009E
    1178:	81 50       	subi	r24, 0x01	; 1
    117a:	88 87       	std	Y+8, r24	; 0x08
    117c:	20 91 a5 02 	lds	r18, 0x02A5
    1180:	30 91 a6 02 	lds	r19, 0x02A6
    1184:	e0 90 8d 00 	lds	r14, 0x008D
    1188:	f0 90 8e 00 	lds	r15, 0x008E
    118c:	00 91 8f 00 	lds	r16, 0x008F
    1190:	10 91 90 00 	lds	r17, 0x0090
    1194:	c6 01       	movw	r24, r12
    1196:	b5 01       	movw	r22, r10
    1198:	62 50       	subi	r22, 0x02	; 2
    119a:	70 40       	sbci	r23, 0x00	; 0
    119c:	80 40       	sbci	r24, 0x00	; 0
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    11a8:	1b 01       	movw	r2, r22
    11aa:	2c 01       	movw	r4, r24
    11ac:	2e 0c       	add	r2, r14
    11ae:	3f 1c       	adc	r3, r15
    11b0:	40 1e       	adc	r4, r16
    11b2:	51 1e       	adc	r5, r17
    11b4:	66 24       	eor	r6, r6
    11b6:	77 24       	eor	r7, r7
    11b8:	43 01       	movw	r8, r6
    11ba:	60 c1       	rjmp	.+704    	; 0x147c <findFiles+0x34e>
    11bc:	d4 01       	movw	r26, r8
    11be:	c3 01       	movw	r24, r6
    11c0:	82 0d       	add	r24, r2
    11c2:	93 1d       	adc	r25, r3
    11c4:	a4 1d       	adc	r26, r4
    11c6:	b5 1d       	adc	r27, r5
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	ab 83       	std	Y+3, r26	; 0x03
    11ce:	bc 83       	std	Y+4, r27	; 0x04
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	e4 2e       	mov	r14, r20
    11dc:	f1 2c       	mov	r15, r1
    11de:	3e c1       	rjmp	.+636    	; 0x145c <findFiles+0x32e>
    11e0:	8a 01       	movw	r16, r20
    11e2:	0b 55       	subi	r16, 0x5B	; 91
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	f7 01       	movw	r30, r14
    11e8:	eb 55       	subi	r30, 0x5B	; 91
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	b0 97       	sbiw	r30, 0x20	; 32
    11ee:	80 81       	ld	r24, Z
    11f0:	b0 96       	adiw	r30, 0x20	; 32
    11f2:	88 23       	and	r24, r24
    11f4:	41 f4       	brne	.+16     	; 0x1206 <findFiles+0xd8>
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	91 50       	subi	r25, 0x01	; 1
    11fa:	92 30       	cpi	r25, 0x02	; 2
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <findFiles+0xd2>
    11fe:	68 c1       	rjmp	.+720    	; 0x14d0 <findFiles+0x3a2>
    1200:	8d e3       	ldi	r24, 0x3D	; 61
    1202:	95 e0       	ldi	r25, 0x05	; 5
    1204:	63 c1       	rjmp	.+710    	; 0x14cc <findFiles+0x39e>
    1206:	85 3e       	cpi	r24, 0xE5	; 229
    1208:	09 f4       	brne	.+2      	; 0x120c <findFiles+0xde>
    120a:	24 c1       	rjmp	.+584    	; 0x1454 <findFiles+0x326>
    120c:	75 97       	sbiw	r30, 0x15	; 21
    120e:	80 81       	ld	r24, Z
    1210:	8f 30       	cpi	r24, 0x0F	; 15
    1212:	09 f4       	brne	.+2      	; 0x1216 <findFiles+0xe8>
    1214:	1f c1       	rjmp	.+574    	; 0x1454 <findFiles+0x326>
    1216:	a8 85       	ldd	r26, Y+8	; 0x08
    1218:	a2 30       	cpi	r26, 0x02	; 2
    121a:	08 f0       	brcs	.+2      	; 0x121e <findFiles+0xf0>
    121c:	d2 c0       	rjmp	.+420    	; 0x13c2 <findFiles+0x294>
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	c8 01       	movw	r24, r16
    1224:	82 0f       	add	r24, r18
    1226:	93 1f       	adc	r25, r19
    1228:	ae 81       	ldd	r26, Y+6	; 0x06
    122a:	bf 81       	ldd	r27, Y+7	; 0x07
    122c:	a2 0f       	add	r26, r18
    122e:	b3 1f       	adc	r27, r19
    1230:	fc 01       	movw	r30, r24
    1232:	90 81       	ld	r25, Z
    1234:	8c 91       	ld	r24, X
    1236:	98 17       	cp	r25, r24
    1238:	09 f0       	breq	.+2      	; 0x123c <findFiles+0x10e>
    123a:	0c c1       	rjmp	.+536    	; 0x1454 <findFiles+0x326>
    123c:	82 2f       	mov	r24, r18
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	2b 30       	cpi	r18, 0x0B	; 11
    1246:	31 05       	cpc	r19, r1
    1248:	61 f7       	brne	.-40     	; 0x1222 <findFiles+0xf4>
    124a:	8b 30       	cpi	r24, 0x0B	; 11
    124c:	09 f0       	breq	.+2      	; 0x1250 <findFiles+0x122>
    124e:	02 c1       	rjmp	.+516    	; 0x1454 <findFiles+0x326>
    1250:	fd 81       	ldd	r31, Y+5	; 0x05
    1252:	f1 30       	cpi	r31, 0x01	; 1
    1254:	09 f0       	breq	.+2      	; 0x1258 <findFiles+0x12a>
    1256:	3f c0       	rjmp	.+126    	; 0x12d6 <findFiles+0x1a8>
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	ab 81       	ldd	r26, Y+3	; 0x03
    125e:	bc 81       	ldd	r27, Y+4	; 0x04
    1260:	80 93 b8 02 	sts	0x02B8, r24
    1264:	90 93 b9 02 	sts	0x02B9, r25
    1268:	a0 93 ba 02 	sts	0x02BA, r26
    126c:	b0 93 bb 02 	sts	0x02BB, r27
    1270:	ca 01       	movw	r24, r20
    1272:	a0 e0       	ldi	r26, 0x00	; 0
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	80 93 87 00 	sts	0x0087, r24
    127a:	90 93 88 00 	sts	0x0088, r25
    127e:	a0 93 89 00 	sts	0x0089, r26
    1282:	b0 93 8a 00 	sts	0x008A, r27
    1286:	d8 01       	movw	r26, r16
    1288:	54 96       	adiw	r26, 0x14	; 20
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	55 97       	sbiw	r26, 0x15	; 21
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	dc 01       	movw	r26, r24
    1296:	99 27       	eor	r25, r25
    1298:	88 27       	eor	r24, r24
    129a:	f8 01       	movw	r30, r16
    129c:	22 8d       	ldd	r18, Z+26	; 0x1a
    129e:	33 8d       	ldd	r19, Z+27	; 0x1b
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	82 2b       	or	r24, r18
    12a6:	93 2b       	or	r25, r19
    12a8:	a4 2b       	or	r26, r20
    12aa:	b5 2b       	or	r27, r21
    12ac:	80 93 b2 02 	sts	0x02B2, r24
    12b0:	90 93 b3 02 	sts	0x02B3, r25
    12b4:	a0 93 b4 02 	sts	0x02B4, r26
    12b8:	b0 93 b5 02 	sts	0x02B5, r27
    12bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    12be:	95 8d       	ldd	r25, Z+29	; 0x1d
    12c0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    12c2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    12c4:	80 93 91 00 	sts	0x0091, r24
    12c8:	90 93 92 00 	sts	0x0092, r25
    12cc:	a0 93 93 00 	sts	0x0093, r26
    12d0:	b0 93 94 00 	sts	0x0094, r27
    12d4:	ff c0       	rjmp	.+510    	; 0x14d4 <findFiles+0x3a6>
    12d6:	8d e0       	ldi	r24, 0x0D	; 13
    12d8:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    12dc:	8a e0       	ldi	r24, 0x0A	; 10
    12de:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    12e2:	82 e3       	ldi	r24, 0x32	; 50
    12e4:	95 e0       	ldi	r25, 0x05	; 5
    12e6:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    12ea:	8d e0       	ldi	r24, 0x0D	; 13
    12ec:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    12f0:	8a e0       	ldi	r24, 0x0A	; 10
    12f2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    12f6:	8d e0       	ldi	r24, 0x0D	; 13
    12f8:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1302:	d8 01       	movw	r26, r16
    1304:	54 96       	adiw	r26, 0x14	; 20
    1306:	8d 91       	ld	r24, X+
    1308:	9c 91       	ld	r25, X
    130a:	55 97       	sbiw	r26, 0x15	; 21
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	5c 01       	movw	r10, r24
    1312:	99 24       	eor	r9, r9
    1314:	88 24       	eor	r8, r8
    1316:	f8 01       	movw	r30, r16
    1318:	82 8d       	ldd	r24, Z+26	; 0x1a
    131a:	93 8d       	ldd	r25, Z+27	; 0x1b
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	88 2a       	or	r8, r24
    1322:	99 2a       	or	r9, r25
    1324:	aa 2a       	or	r10, r26
    1326:	bb 2a       	or	r11, r27
    1328:	85 ee       	ldi	r24, 0xE5	; 229
    132a:	80 83       	st	Z, r24
    132c:	69 81       	ldd	r22, Y+1	; 0x01
    132e:	7a 81       	ldd	r23, Y+2	; 0x02
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    1338:	d8 01       	movw	r26, r16
    133a:	5c 96       	adiw	r26, 0x1c	; 28
    133c:	4d 91       	ld	r20, X+
    133e:	5d 91       	ld	r21, X+
    1340:	6d 91       	ld	r22, X+
    1342:	7c 91       	ld	r23, X
    1344:	5f 97       	sbiw	r26, 0x1f	; 31
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	0e 94 a3 05 	call	0xb46	; 0xb46 <freeMemoryUpdate>
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
    135c:	86 16       	cp	r8, r22
    135e:	97 06       	cpc	r9, r23
    1360:	a8 06       	cpc	r10, r24
    1362:	b9 06       	cpc	r11, r25
    1364:	30 f4       	brcc	.+12     	; 0x1372 <findFiles+0x244>
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	a5 01       	movw	r20, r10
    136c:	94 01       	movw	r18, r8
    136e:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
    1372:	c5 01       	movw	r24, r10
    1374:	b4 01       	movw	r22, r8
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1384:	f6 2e       	mov	r15, r22
    1386:	e7 2e       	mov	r14, r23
    1388:	d8 2e       	mov	r13, r24
    138a:	c9 2e       	mov	r12, r25
    138c:	c5 01       	movw	r24, r10
    138e:	b4 01       	movw	r22, r8
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    139e:	8f 2d       	mov	r24, r15
    13a0:	9e 2d       	mov	r25, r14
    13a2:	ad 2d       	mov	r26, r13
    13a4:	bc 2d       	mov	r27, r12
    13a6:	4c 01       	movw	r8, r24
    13a8:	5d 01       	movw	r10, r26
    13aa:	b7 ef       	ldi	r27, 0xF7	; 247
    13ac:	8b 16       	cp	r8, r27
    13ae:	bf ef       	ldi	r27, 0xFF	; 255
    13b0:	9b 06       	cpc	r9, r27
    13b2:	bf ef       	ldi	r27, 0xFF	; 255
    13b4:	ab 06       	cpc	r10, r27
    13b6:	bf e0       	ldi	r27, 0x0F	; 15
    13b8:	bb 06       	cpc	r11, r27
    13ba:	d8 f2       	brcs	.-74     	; 0x1372 <findFiles+0x244>
    13bc:	84 e2       	ldi	r24, 0x24	; 36
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	85 c0       	rjmp	.+266    	; 0x14cc <findFiles+0x39e>
    13c2:	8d e0       	ldi	r24, 0x0D	; 13
    13c4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    13c8:	8a e0       	ldi	r24, 0x0A	; 10
    13ca:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    13ce:	1a 86       	std	Y+10, r1	; 0x0a
    13d0:	19 86       	std	Y+9, r1	; 0x09
    13d2:	0b c0       	rjmp	.+22     	; 0x13ea <findFiles+0x2bc>
    13d4:	e9 85       	ldd	r30, Y+9	; 0x09
    13d6:	e7 30       	cpi	r30, 0x07	; 7
    13d8:	19 f4       	brne	.+6      	; 0x13e0 <findFiles+0x2b2>
    13da:	80 e2       	ldi	r24, 0x20	; 32
    13dc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	9a 87       	std	Y+10, r25	; 0x0a
    13e8:	89 87       	std	Y+9, r24	; 0x09
    13ea:	e9 85       	ldd	r30, Y+9	; 0x09
    13ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    13ee:	e0 0f       	add	r30, r16
    13f0:	f1 1f       	adc	r31, r17
    13f2:	80 81       	ld	r24, Z
    13f4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    13f8:	a9 85       	ldd	r26, Y+9	; 0x09
    13fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    13fc:	1a 97       	sbiw	r26, 0x0a	; 10
    13fe:	51 f7       	brne	.-44     	; 0x13d4 <findFiles+0x2a6>
    1400:	80 e2       	ldi	r24, 0x20	; 32
    1402:	95 e0       	ldi	r25, 0x05	; 5
    1404:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1408:	87 01       	movw	r16, r14
    140a:	0b 55       	subi	r16, 0x5B	; 91
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	05 51       	subi	r16, 0x15	; 21
    1410:	10 40       	sbci	r17, 0x00	; 0
    1412:	f8 01       	movw	r30, r16
    1414:	80 81       	ld	r24, Z
    1416:	0b 5e       	subi	r16, 0xEB	; 235
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
    141a:	80 31       	cpi	r24, 0x10	; 16
    141c:	b9 f0       	breq	.+46     	; 0x144c <findFiles+0x31e>
    141e:	88 30       	cpi	r24, 0x08	; 8
    1420:	19 f4       	brne	.+6      	; 0x1428 <findFiles+0x2fa>
    1422:	8e e0       	ldi	r24, 0x0E	; 14
    1424:	95 e0       	ldi	r25, 0x05	; 5
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <findFiles+0x322>
    1428:	8b e1       	ldi	r24, 0x1B	; 27
    142a:	95 e0       	ldi	r25, 0x05	; 5
    142c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1430:	87 e1       	ldi	r24, 0x17	; 23
    1432:	95 e0       	ldi	r25, 0x05	; 5
    1434:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1438:	f8 01       	movw	r30, r16
    143a:	34 97       	sbiw	r30, 0x04	; 4
    143c:	40 81       	ld	r20, Z
    143e:	51 81       	ldd	r21, Z+1	; 0x01
    1440:	62 81       	ldd	r22, Z+2	; 0x02
    1442:	73 81       	ldd	r23, Z+3	; 0x03
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0e 94 a3 03 	call	0x746	; 0x746 <displayMemory>
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <findFiles+0x326>
    144c:	83 e1       	ldi	r24, 0x13	; 19
    144e:	95 e0       	ldi	r25, 0x05	; 5
    1450:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	e8 0e       	add	r14, r24
    145a:	f9 1e       	adc	r15, r25
    145c:	a7 01       	movw	r20, r14
    145e:	40 52       	subi	r20, 0x20	; 32
    1460:	50 40       	sbci	r21, 0x00	; 0
    1462:	80 91 95 00 	lds	r24, 0x0095
    1466:	90 91 96 00 	lds	r25, 0x0096
    146a:	48 17       	cp	r20, r24
    146c:	59 07       	cpc	r21, r25
    146e:	08 f4       	brcc	.+2      	; 0x1472 <findFiles+0x344>
    1470:	b7 ce       	rjmp	.-658    	; 0x11e0 <findFiles+0xb2>
    1472:	08 94       	sec
    1474:	61 1c       	adc	r6, r1
    1476:	71 1c       	adc	r7, r1
    1478:	81 1c       	adc	r8, r1
    147a:	91 1c       	adc	r9, r1
    147c:	80 91 a5 02 	lds	r24, 0x02A5
    1480:	90 91 a6 02 	lds	r25, 0x02A6
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	68 16       	cp	r6, r24
    148a:	79 06       	cpc	r7, r25
    148c:	8a 06       	cpc	r8, r26
    148e:	9b 06       	cpc	r9, r27
    1490:	08 f4       	brcc	.+2      	; 0x1494 <findFiles+0x366>
    1492:	94 ce       	rjmp	.-728    	; 0x11bc <findFiles+0x8e>
    1494:	c6 01       	movw	r24, r12
    1496:	b5 01       	movw	r22, r10
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	00 e0       	ldi	r16, 0x00	; 0
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    14a6:	5b 01       	movw	r10, r22
    14a8:	6c 01       	movw	r12, r24
    14aa:	97 ef       	ldi	r25, 0xF7	; 247
    14ac:	a9 16       	cp	r10, r25
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	b9 06       	cpc	r11, r25
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	c9 06       	cpc	r12, r25
    14b6:	9f e0       	ldi	r25, 0x0F	; 15
    14b8:	d9 06       	cpc	r13, r25
    14ba:	50 f4       	brcc	.+20     	; 0x14d0 <findFiles+0x3a2>
    14bc:	a1 14       	cp	r10, r1
    14be:	b1 04       	cpc	r11, r1
    14c0:	c1 04       	cpc	r12, r1
    14c2:	d1 04       	cpc	r13, r1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <findFiles+0x39a>
    14c6:	5a ce       	rjmp	.-844    	; 0x117c <findFiles+0x4e>
    14c8:	85 ef       	ldi	r24, 0xF5	; 245
    14ca:	94 e0       	ldi	r25, 0x04	; 4
    14cc:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	10 e0       	ldi	r17, 0x00	; 0
    14d4:	c8 01       	movw	r24, r16
    14d6:	2a 96       	adiw	r28, 0x0a	; 10
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	bf 90       	pop	r11
    14f4:	af 90       	pop	r10
    14f6:	9f 90       	pop	r9
    14f8:	8f 90       	pop	r8
    14fa:	7f 90       	pop	r7
    14fc:	6f 90       	pop	r6
    14fe:	5f 90       	pop	r5
    1500:	4f 90       	pop	r4
    1502:	3f 90       	pop	r3
    1504:	2f 90       	pop	r2
    1506:	08 95       	ret

00001508 <deleteFile>:
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	0e 94 0a 04 	call	0x814	; 0x814 <convertFileName>
    1512:	88 23       	and	r24, r24
    1514:	21 f4       	brne	.+8      	; 0x151e <deleteFile+0x16>
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	be 01       	movw	r22, r28
    151a:	0e 94 97 08 	call	0x112e	; 0x112e <findFiles>
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <readFile>:
    1524:	2f 92       	push	r2
    1526:	3f 92       	push	r3
    1528:	4f 92       	push	r4
    152a:	5f 92       	push	r5
    152c:	6f 92       	push	r6
    152e:	7f 92       	push	r7
    1530:	8f 92       	push	r8
    1532:	9f 92       	push	r9
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <readFile+0x26>
    154a:	00 d0       	rcall	.+0      	; 0x154c <readFile+0x28>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	e8 2e       	mov	r14, r24
    1552:	8b 01       	movw	r16, r22
    1554:	cb 01       	movw	r24, r22
    1556:	0e 94 0a 04 	call	0x814	; 0x814 <convertFileName>
    155a:	88 23       	and	r24, r24
    155c:	11 f0       	breq	.+4      	; 0x1562 <readFile+0x3e>
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	9b c0       	rjmp	.+310    	; 0x1698 <readFile+0x174>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	b8 01       	movw	r22, r16
    1566:	0e 94 97 08 	call	0x112e	; 0x112e <findFiles>
    156a:	9c 01       	movw	r18, r24
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	09 f4       	brne	.+2      	; 0x1572 <readFile+0x4e>
    1570:	92 c0       	rjmp	.+292    	; 0x1696 <readFile+0x172>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	e8 16       	cp	r14, r24
    1576:	09 f4       	brne	.+2      	; 0x157a <readFile+0x56>
    1578:	8f c0       	rjmp	.+286    	; 0x1698 <readFile+0x174>
    157a:	d9 01       	movw	r26, r18
    157c:	54 96       	adiw	r26, 0x14	; 20
    157e:	8d 91       	ld	r24, X+
    1580:	9c 91       	ld	r25, X
    1582:	55 97       	sbiw	r26, 0x15	; 21
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	4c 01       	movw	r8, r24
    158a:	77 24       	eor	r7, r7
    158c:	66 24       	eor	r6, r6
    158e:	f9 01       	movw	r30, r18
    1590:	82 8d       	ldd	r24, Z+26	; 0x1a
    1592:	93 8d       	ldd	r25, Z+27	; 0x1b
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	68 2a       	or	r6, r24
    159a:	79 2a       	or	r7, r25
    159c:	8a 2a       	or	r8, r26
    159e:	9b 2a       	or	r9, r27
    15a0:	d9 01       	movw	r26, r18
    15a2:	5c 96       	adiw	r26, 0x1c	; 28
    15a4:	8d 91       	ld	r24, X+
    15a6:	9d 91       	ld	r25, X+
    15a8:	0d 90       	ld	r0, X+
    15aa:	bc 91       	ld	r27, X
    15ac:	a0 2d       	mov	r26, r0
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	ab 83       	std	Y+3, r26	; 0x03
    15b4:	bc 83       	std	Y+4, r27	; 0x04
    15b6:	8d e0       	ldi	r24, 0x0D	; 13
    15b8:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    15bc:	8a e0       	ldi	r24, 0x0A	; 10
    15be:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    15c2:	8d e0       	ldi	r24, 0x0D	; 13
    15c4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    15c8:	8a e0       	ldi	r24, 0x0A	; 10
    15ca:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    15ce:	22 24       	eor	r2, r2
    15d0:	33 24       	eor	r3, r3
    15d2:	21 01       	movw	r4, r2
    15d4:	20 91 a5 02 	lds	r18, 0x02A5
    15d8:	30 91 a6 02 	lds	r19, 0x02A6
    15dc:	e0 90 8d 00 	lds	r14, 0x008D
    15e0:	f0 90 8e 00 	lds	r15, 0x008E
    15e4:	00 91 8f 00 	lds	r16, 0x008F
    15e8:	10 91 90 00 	lds	r17, 0x0090
    15ec:	c4 01       	movw	r24, r8
    15ee:	b3 01       	movw	r22, r6
    15f0:	62 50       	subi	r22, 0x02	; 2
    15f2:	70 40       	sbci	r23, 0x00	; 0
    15f4:	80 40       	sbci	r24, 0x00	; 0
    15f6:	90 40       	sbci	r25, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    1600:	5b 01       	movw	r10, r22
    1602:	6c 01       	movw	r12, r24
    1604:	ae 0c       	add	r10, r14
    1606:	bf 1c       	adc	r11, r15
    1608:	c0 1e       	adc	r12, r16
    160a:	d1 1e       	adc	r13, r17
    160c:	ee 24       	eor	r14, r14
    160e:	25 c0       	rjmp	.+74     	; 0x165a <readFile+0x136>
    1610:	c6 01       	movw	r24, r12
    1612:	b5 01       	movw	r22, r10
    1614:	6e 0d       	add	r22, r14
    1616:	71 1d       	adc	r23, r1
    1618:	81 1d       	adc	r24, r1
    161a:	91 1d       	adc	r25, r1
    161c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    1620:	00 e0       	ldi	r16, 0x00	; 0
    1622:	10 e0       	ldi	r17, 0x00	; 0
    1624:	f8 01       	movw	r30, r16
    1626:	eb 55       	subi	r30, 0x5B	; 91
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	ab 81       	ldd	r26, Y+3	; 0x03
    1636:	bc 81       	ldd	r27, Y+4	; 0x04
    1638:	28 16       	cp	r2, r24
    163a:	39 06       	cpc	r3, r25
    163c:	4a 06       	cpc	r4, r26
    163e:	5b 06       	cpc	r5, r27
    1640:	50 f5       	brcc	.+84     	; 0x1696 <readFile+0x172>
    1642:	08 94       	sec
    1644:	21 1c       	adc	r2, r1
    1646:	31 1c       	adc	r3, r1
    1648:	41 1c       	adc	r4, r1
    164a:	51 1c       	adc	r5, r1
    164c:	0f 5f       	subi	r16, 0xFF	; 255
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	92 e0       	ldi	r25, 0x02	; 2
    1652:	00 30       	cpi	r16, 0x00	; 0
    1654:	19 07       	cpc	r17, r25
    1656:	31 f7       	brne	.-52     	; 0x1624 <readFile+0x100>
    1658:	e3 94       	inc	r14
    165a:	20 91 a5 02 	lds	r18, 0x02A5
    165e:	30 91 a6 02 	lds	r19, 0x02A6
    1662:	8e 2d       	mov	r24, r14
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	82 17       	cp	r24, r18
    1668:	93 07       	cpc	r25, r19
    166a:	90 f2       	brcs	.-92     	; 0x1610 <readFile+0xec>
    166c:	c4 01       	movw	r24, r8
    166e:	b3 01       	movw	r22, r6
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	00 e0       	ldi	r16, 0x00	; 0
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    167e:	3b 01       	movw	r6, r22
    1680:	4c 01       	movw	r8, r24
    1682:	61 15       	cp	r22, r1
    1684:	71 05       	cpc	r23, r1
    1686:	81 05       	cpc	r24, r1
    1688:	91 05       	cpc	r25, r1
    168a:	09 f0       	breq	.+2      	; 0x168e <readFile+0x16a>
    168c:	a3 cf       	rjmp	.-186    	; 0x15d4 <readFile+0xb0>
    168e:	8c ed       	ldi	r24, 0xDC	; 220
    1690:	94 e0       	ldi	r25, 0x04	; 4
    1692:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	3f 90       	pop	r3
    16c2:	2f 90       	pop	r2
    16c4:	08 95       	ret

000016c6 <writeFile>:
    16c6:	2f 92       	push	r2
    16c8:	3f 92       	push	r3
    16ca:	4f 92       	push	r4
    16cc:	5f 92       	push	r5
    16ce:	6f 92       	push	r6
    16d0:	7f 92       	push	r7
    16d2:	8f 92       	push	r8
    16d4:	9f 92       	push	r9
    16d6:	af 92       	push	r10
    16d8:	bf 92       	push	r11
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	27 97       	sbiw	r28, 0x07	; 7
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	9d 83       	std	Y+5, r25	; 0x05
    16fc:	8c 83       	std	Y+4, r24	; 0x04
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	6c 81       	ldd	r22, Y+4	; 0x04
    1702:	7d 81       	ldd	r23, Y+5	; 0x05
    1704:	0e 94 92 0a 	call	0x1524	; 0x1524 <readFile>
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	09 f0       	breq	.+2      	; 0x170e <writeFile+0x48>
    170c:	5b c0       	rjmp	.+182    	; 0x17c4 <writeFile+0xfe>
    170e:	82 ea       	ldi	r24, 0xA2	; 162
    1710:	94 e0       	ldi	r25, 0x04	; 4
    1712:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1716:	60 90 b2 02 	lds	r6, 0x02B2
    171a:	70 90 b3 02 	lds	r7, 0x02B3
    171e:	80 90 b4 02 	lds	r8, 0x02B4
    1722:	90 90 b5 02 	lds	r9, 0x02B5
    1726:	aa 24       	eor	r10, r10
    1728:	bb 24       	eor	r11, r11
    172a:	65 01       	movw	r12, r10
    172c:	c4 01       	movw	r24, r8
    172e:	b3 01       	movw	r22, r6
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    173e:	6f 3f       	cpi	r22, 0xFF	; 255
    1740:	2f ef       	ldi	r18, 0xFF	; 255
    1742:	72 07       	cpc	r23, r18
    1744:	2f ef       	ldi	r18, 0xFF	; 255
    1746:	82 07       	cpc	r24, r18
    1748:	2f e0       	ldi	r18, 0x0F	; 15
    174a:	92 07       	cpc	r25, r18
    174c:	41 f0       	breq	.+16     	; 0x175e <writeFile+0x98>
    174e:	08 94       	sec
    1750:	a1 1c       	adc	r10, r1
    1752:	b1 1c       	adc	r11, r1
    1754:	c1 1c       	adc	r12, r1
    1756:	d1 1c       	adc	r13, r1
    1758:	3b 01       	movw	r6, r22
    175a:	4c 01       	movw	r8, r24
    175c:	e7 cf       	rjmp	.-50     	; 0x172c <writeFile+0x66>
    175e:	20 91 a5 02 	lds	r18, 0x02A5
    1762:	30 91 a6 02 	lds	r19, 0x02A6
    1766:	60 91 95 00 	lds	r22, 0x0095
    176a:	70 91 96 00 	lds	r23, 0x0096
    176e:	e0 90 95 00 	lds	r14, 0x0095
    1772:	f0 90 96 00 	lds	r15, 0x0096
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    1782:	a6 01       	movw	r20, r12
    1784:	95 01       	movw	r18, r10
    1786:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    178a:	9b 01       	movw	r18, r22
    178c:	ac 01       	movw	r20, r24
    178e:	60 91 91 00 	lds	r22, 0x0091
    1792:	70 91 92 00 	lds	r23, 0x0092
    1796:	80 91 93 00 	lds	r24, 0x0093
    179a:	90 91 94 00 	lds	r25, 0x0094
    179e:	62 1b       	sub	r22, r18
    17a0:	73 0b       	sbc	r23, r19
    17a2:	84 0b       	sbc	r24, r20
    17a4:	95 0b       	sbc	r25, r21
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	a8 01       	movw	r20, r16
    17ac:	97 01       	movw	r18, r14
    17ae:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
    17b2:	b2 2e       	mov	r11, r18
    17b4:	21 e0       	ldi	r18, 0x01	; 1
    17b6:	aa 24       	eor	r10, r10
    17b8:	a3 94       	inc	r10
    17ba:	1a 82       	std	Y+2, r1	; 0x02
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	1f 82       	std	Y+7, r1	; 0x07
    17c0:	1e 82       	std	Y+6, r1	; 0x06
    17c2:	59 c0       	rjmp	.+178    	; 0x1876 <writeFile+0x1b0>
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	09 f4       	brne	.+2      	; 0x17ca <writeFile+0x104>
    17c8:	40 c3       	rjmp	.+1664   	; 0x1e4a <writeFile+0x784>
    17ca:	8d e0       	ldi	r24, 0x0D	; 13
    17cc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    17d0:	8a e0       	ldi	r24, 0x0A	; 10
    17d2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    17d6:	81 e9       	ldi	r24, 0x91	; 145
    17d8:	94 e0       	ldi	r25, 0x04	; 4
    17da:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
    17ee:	9b 01       	movw	r18, r22
    17f0:	ac 01       	movw	r20, r24
    17f2:	80 91 97 00 	lds	r24, 0x0097
    17f6:	90 91 98 00 	lds	r25, 0x0098
    17fa:	a0 91 99 00 	lds	r26, 0x0099
    17fe:	b0 91 9a 00 	lds	r27, 0x009A
    1802:	82 17       	cp	r24, r18
    1804:	93 07       	cpc	r25, r19
    1806:	a4 07       	cpc	r26, r20
    1808:	b5 07       	cpc	r27, r21
    180a:	40 f4       	brcc	.+16     	; 0x181c <writeFile+0x156>
    180c:	20 91 9b 00 	lds	r18, 0x009B
    1810:	30 91 9c 00 	lds	r19, 0x009C
    1814:	40 91 9d 00 	lds	r20, 0x009D
    1818:	50 91 9e 00 	lds	r21, 0x009E
    181c:	ca 01       	movw	r24, r20
    181e:	b9 01       	movw	r22, r18
    1820:	0e 94 92 04 	call	0x924	; 0x924 <searchNextFreeCluster>
    1824:	3b 01       	movw	r6, r22
    1826:	4c 01       	movw	r8, r24
    1828:	61 15       	cp	r22, r1
    182a:	71 05       	cpc	r23, r1
    182c:	81 05       	cpc	r24, r1
    182e:	91 05       	cpc	r25, r1
    1830:	49 f4       	brne	.+18     	; 0x1844 <writeFile+0x17e>
    1832:	8d e0       	ldi	r24, 0x0D	; 13
    1834:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1838:	8a e0       	ldi	r24, 0x0A	; 10
    183a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    183e:	8f e7       	ldi	r24, 0x7F	; 127
    1840:	94 e0       	ldi	r25, 0x04	; 4
    1842:	01 c3       	rjmp	.+1538   	; 0x1e46 <writeFile+0x780>
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0f ef       	ldi	r16, 0xFF	; 255
    1848:	1f ef       	ldi	r17, 0xFF	; 255
    184a:	2f ef       	ldi	r18, 0xFF	; 255
    184c:	3f e0       	ldi	r19, 0x0F	; 15
    184e:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1852:	c4 01       	movw	r24, r8
    1854:	aa 27       	eor	r26, r26
    1856:	bb 27       	eor	r27, r27
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	7f 82       	std	Y+7, r7	; 0x07
    185e:	6e 82       	std	Y+6, r6	; 0x06
    1860:	10 92 91 00 	sts	0x0091, r1
    1864:	10 92 92 00 	sts	0x0092, r1
    1868:	10 92 93 00 	sts	0x0093, r1
    186c:	10 92 94 00 	sts	0x0094, r1
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	aa 24       	eor	r10, r10
    1874:	bb 24       	eor	r11, r11
    1876:	1b 82       	std	Y+3, r1	; 0x03
    1878:	2b 2c       	mov	r2, r11
    187a:	33 24       	eor	r3, r3
    187c:	44 24       	eor	r4, r4
    187e:	55 24       	eor	r5, r5
    1880:	c4 01       	movw	r24, r8
    1882:	b3 01       	movw	r22, r6
    1884:	62 50       	subi	r22, 0x02	; 2
    1886:	70 40       	sbci	r23, 0x00	; 0
    1888:	80 40       	sbci	r24, 0x00	; 0
    188a:	90 40       	sbci	r25, 0x00	; 0
    188c:	22 23       	and	r18, r18
    188e:	e9 f1       	breq	.+122    	; 0x190a <writeFile+0x244>
    1890:	20 91 a5 02 	lds	r18, 0x02A5
    1894:	30 91 a6 02 	lds	r19, 0x02A6
    1898:	e0 90 8d 00 	lds	r14, 0x008D
    189c:	f0 90 8e 00 	lds	r15, 0x008E
    18a0:	00 91 8f 00 	lds	r16, 0x008F
    18a4:	10 91 90 00 	lds	r17, 0x0090
    18a8:	e2 0c       	add	r14, r2
    18aa:	f3 1c       	adc	r15, r3
    18ac:	04 1d       	adc	r16, r4
    18ae:	15 1d       	adc	r17, r5
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    18b8:	e6 0e       	add	r14, r22
    18ba:	f7 1e       	adc	r15, r23
    18bc:	08 1f       	adc	r16, r24
    18be:	19 1f       	adc	r17, r25
    18c0:	e0 92 a1 00 	sts	0x00A1, r14
    18c4:	f0 92 a2 00 	sts	0x00A2, r15
    18c8:	00 93 a3 00 	sts	0x00A3, r16
    18cc:	10 93 a4 00 	sts	0x00A4, r17
    18d0:	60 91 a1 00 	lds	r22, 0x00A1
    18d4:	70 91 a2 00 	lds	r23, 0x00A2
    18d8:	80 91 a3 00 	lds	r24, 0x00A3
    18dc:	90 91 a4 00 	lds	r25, 0x00A4
    18e0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    18e4:	20 91 95 00 	lds	r18, 0x0095
    18e8:	30 91 96 00 	lds	r19, 0x0096
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	60 91 91 00 	lds	r22, 0x0091
    18f4:	70 91 92 00 	lds	r23, 0x0092
    18f8:	80 91 93 00 	lds	r24, 0x0093
    18fc:	90 91 94 00 	lds	r25, 0x0094
    1900:	0e 94 4d 18 	call	0x309a	; 0x309a <__udivmodsi4>
    1904:	8b 01       	movw	r16, r22
    1906:	eb 2c       	mov	r14, r11
    1908:	1f c0       	rjmp	.+62     	; 0x1948 <writeFile+0x282>
    190a:	20 91 a5 02 	lds	r18, 0x02A5
    190e:	30 91 a6 02 	lds	r19, 0x02A6
    1912:	e0 90 8d 00 	lds	r14, 0x008D
    1916:	f0 90 8e 00 	lds	r15, 0x008E
    191a:	00 91 8f 00 	lds	r16, 0x008F
    191e:	10 91 90 00 	lds	r17, 0x0090
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    192a:	e6 0e       	add	r14, r22
    192c:	f7 1e       	adc	r15, r23
    192e:	08 1f       	adc	r16, r24
    1930:	19 1f       	adc	r17, r25
    1932:	e0 92 a1 00 	sts	0x00A1, r14
    1936:	f0 92 a2 00 	sts	0x00A2, r15
    193a:	00 93 a3 00 	sts	0x00A3, r16
    193e:	10 93 a4 00 	sts	0x00A4, r17
    1942:	ee 24       	eor	r14, r14
    1944:	00 e0       	ldi	r16, 0x00	; 0
    1946:	10 e0       	ldi	r17, 0x00	; 0
    1948:	8d e0       	ldi	r24, 0x0D	; 13
    194a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    194e:	8a e0       	ldi	r24, 0x0A	; 10
    1950:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1954:	85 e6       	ldi	r24, 0x65	; 101
    1956:	94 e0       	ldi	r25, 0x04	; 4
    1958:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	e9 f4       	brne	.+58     	; 0x199c <writeFile+0x2d6>
    1962:	8a e0       	ldi	r24, 0x0A	; 10
    1964:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1968:	f8 01       	movw	r30, r16
    196a:	eb 55       	subi	r30, 0x5B	; 91
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	80 83       	st	Z, r24
    1972:	0f 5f       	subi	r16, 0xFF	; 255
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	80 91 91 00 	lds	r24, 0x0091
    197a:	90 91 92 00 	lds	r25, 0x0092
    197e:	a0 91 93 00 	lds	r26, 0x0093
    1982:	b0 91 94 00 	lds	r27, 0x0094
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	a1 1d       	adc	r26, r1
    198a:	b1 1d       	adc	r27, r1
    198c:	80 93 91 00 	sts	0x0091, r24
    1990:	90 93 92 00 	sts	0x0092, r25
    1994:	a0 93 93 00 	sts	0x0093, r26
    1998:	b0 93 94 00 	sts	0x0094, r27
    199c:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    19a0:	f8 2e       	mov	r15, r24
    19a2:	98 e0       	ldi	r25, 0x08	; 8
    19a4:	89 17       	cp	r24, r25
    19a6:	d1 f4       	brne	.+52     	; 0x19dc <writeFile+0x316>
    19a8:	01 15       	cp	r16, r1
    19aa:	11 05       	cpc	r17, r1
    19ac:	b9 f3       	breq	.-18     	; 0x199c <writeFile+0x2d6>
    19ae:	88 e0       	ldi	r24, 0x08	; 8
    19b0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    19ba:	88 e0       	ldi	r24, 0x08	; 8
    19bc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    19c0:	01 50       	subi	r16, 0x01	; 1
    19c2:	10 40       	sbci	r17, 0x00	; 0
    19c4:	80 91 91 00 	lds	r24, 0x0091
    19c8:	90 91 92 00 	lds	r25, 0x0092
    19cc:	a0 91 93 00 	lds	r26, 0x0093
    19d0:	b0 91 94 00 	lds	r27, 0x0094
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	a1 09       	sbc	r26, r1
    19d8:	b1 09       	sbc	r27, r1
    19da:	d8 cf       	rjmp	.-80     	; 0x198c <writeFile+0x2c6>
    19dc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    19e0:	f8 01       	movw	r30, r16
    19e2:	eb 55       	subi	r30, 0x5B	; 91
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	f0 82       	st	Z, r15
    19e8:	0f 5f       	subi	r16, 0xFF	; 255
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	80 91 91 00 	lds	r24, 0x0091
    19f0:	90 91 92 00 	lds	r25, 0x0092
    19f4:	a0 91 93 00 	lds	r26, 0x0093
    19f8:	b0 91 94 00 	lds	r27, 0x0094
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	a1 1d       	adc	r26, r1
    1a00:	b1 1d       	adc	r27, r1
    1a02:	80 93 91 00 	sts	0x0091, r24
    1a06:	90 93 92 00 	sts	0x0092, r25
    1a0a:	a0 93 93 00 	sts	0x0093, r26
    1a0e:	b0 93 94 00 	sts	0x0094, r27
    1a12:	ad e0       	ldi	r26, 0x0D	; 13
    1a14:	fa 16       	cp	r15, r26
    1a16:	21 f5       	brne	.+72     	; 0x1a60 <writeFile+0x39a>
    1a18:	b2 e0       	ldi	r27, 0x02	; 2
    1a1a:	00 30       	cpi	r16, 0x00	; 0
    1a1c:	1b 07       	cpc	r17, r27
    1a1e:	19 f4       	brne	.+6      	; 0x1a26 <writeFile+0x360>
    1a20:	e1 e0       	ldi	r30, 0x01	; 1
    1a22:	eb 83       	std	Y+3, r30	; 0x03
    1a24:	24 c0       	rjmp	.+72     	; 0x1a6e <writeFile+0x3a8>
    1a26:	8a e0       	ldi	r24, 0x0A	; 10
    1a28:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	eb 55       	subi	r30, 0x5B	; 91
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	8a e0       	ldi	r24, 0x0A	; 10
    1a34:	80 83       	st	Z, r24
    1a36:	0f 5f       	subi	r16, 0xFF	; 255
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	80 91 91 00 	lds	r24, 0x0091
    1a3e:	90 91 92 00 	lds	r25, 0x0092
    1a42:	a0 91 93 00 	lds	r26, 0x0093
    1a46:	b0 91 94 00 	lds	r27, 0x0094
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	a1 1d       	adc	r26, r1
    1a4e:	b1 1d       	adc	r27, r1
    1a50:	80 93 91 00 	sts	0x0091, r24
    1a54:	90 93 92 00 	sts	0x0092, r25
    1a58:	a0 93 93 00 	sts	0x0093, r26
    1a5c:	b0 93 94 00 	sts	0x0094, r27
    1a60:	f2 e0       	ldi	r31, 0x02	; 2
    1a62:	00 30       	cpi	r16, 0x00	; 0
    1a64:	1f 07       	cpc	r17, r31
    1a66:	10 f4       	brcc	.+4      	; 0x1a6c <writeFile+0x3a6>
    1a68:	1b 82       	std	Y+3, r1	; 0x03
    1a6a:	2a c0       	rjmp	.+84     	; 0x1ac0 <writeFile+0x3fa>
    1a6c:	1b 82       	std	Y+3, r1	; 0x03
    1a6e:	60 91 a1 00 	lds	r22, 0x00A1
    1a72:	70 91 a2 00 	lds	r23, 0x00A2
    1a76:	80 91 a3 00 	lds	r24, 0x00A3
    1a7a:	90 91 a4 00 	lds	r25, 0x00A4
    1a7e:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    1a82:	e3 94       	inc	r14
    1a84:	20 91 a5 02 	lds	r18, 0x02A5
    1a88:	30 91 a6 02 	lds	r19, 0x02A6
    1a8c:	8e 2d       	mov	r24, r14
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	82 17       	cp	r24, r18
    1a92:	93 07       	cpc	r25, r19
    1a94:	d1 f0       	breq	.+52     	; 0x1aca <writeFile+0x404>
    1a96:	80 91 a1 00 	lds	r24, 0x00A1
    1a9a:	90 91 a2 00 	lds	r25, 0x00A2
    1a9e:	a0 91 a3 00 	lds	r26, 0x00A3
    1aa2:	b0 91 a4 00 	lds	r27, 0x00A4
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	b1 1d       	adc	r27, r1
    1aac:	80 93 a1 00 	sts	0x00A1, r24
    1ab0:	90 93 a2 00 	sts	0x00A2, r25
    1ab4:	a0 93 a3 00 	sts	0x00A3, r26
    1ab8:	b0 93 a4 00 	sts	0x00A4, r27
    1abc:	00 e0       	ldi	r16, 0x00	; 0
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    1ac0:	2e e7       	ldi	r18, 0x7E	; 126
    1ac2:	f2 16       	cp	r15, r18
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <writeFile+0x402>
    1ac6:	4a cf       	rjmp	.-364    	; 0x195c <writeFile+0x296>
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <writeFile+0x40e>
    1aca:	8e e7       	ldi	r24, 0x7E	; 126
    1acc:	f8 16       	cp	r15, r24
    1ace:	c1 f5       	brne	.+112    	; 0x1b40 <writeFile+0x47a>
    1ad0:	00 e0       	ldi	r16, 0x00	; 0
    1ad2:	10 e0       	ldi	r17, 0x00	; 0
    1ad4:	80 91 91 00 	lds	r24, 0x0091
    1ad8:	90 91 92 00 	lds	r25, 0x0092
    1adc:	a0 91 93 00 	lds	r26, 0x0093
    1ae0:	b0 91 94 00 	lds	r27, 0x0094
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	a1 09       	sbc	r26, r1
    1ae8:	b1 09       	sbc	r27, r1
    1aea:	80 93 91 00 	sts	0x0091, r24
    1aee:	90 93 92 00 	sts	0x0092, r25
    1af2:	a0 93 93 00 	sts	0x0093, r26
    1af6:	b0 93 94 00 	sts	0x0094, r27
    1afa:	b8 01       	movw	r22, r16
    1afc:	61 50       	subi	r22, 0x01	; 1
    1afe:	70 40       	sbci	r23, 0x00	; 0
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <writeFile+0x448>
    1b02:	fb 01       	movw	r30, r22
    1b04:	eb 55       	subi	r30, 0x5B	; 91
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	10 82       	st	Z, r1
    1b0a:	6f 5f       	subi	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	60 30       	cpi	r22, 0x00	; 0
    1b12:	79 07       	cpc	r23, r25
    1b14:	b0 f3       	brcs	.-20     	; 0x1b02 <writeFile+0x43c>
    1b16:	60 91 a1 00 	lds	r22, 0x00A1
    1b1a:	70 91 a2 00 	lds	r23, 0x00A2
    1b1e:	80 91 a3 00 	lds	r24, 0x00A3
    1b22:	90 91 a4 00 	lds	r25, 0x00A4
    1b26:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	a4 01       	movw	r20, r8
    1b30:	93 01       	movw	r18, r6
    1b32:	0e 94 1c 05 	call	0xa38	; 0xa38 <getSetFreeCluster>
    1b36:	0e 94 93 12 	call	0x2526	; 0x2526 <getDateTime_FAT>
    1b3a:	88 23       	and	r24, r24
    1b3c:	49 f5       	brne	.+82     	; 0x1b90 <writeFile+0x4ca>
    1b3e:	30 c0       	rjmp	.+96     	; 0x1ba0 <writeFile+0x4da>
    1b40:	c4 01       	movw	r24, r8
    1b42:	b3 01       	movw	r22, r6
    1b44:	0e 94 92 04 	call	0x924	; 0x924 <searchNextFreeCluster>
    1b48:	6b 01       	movw	r12, r22
    1b4a:	7c 01       	movw	r14, r24
    1b4c:	61 15       	cp	r22, r1
    1b4e:	71 05       	cpc	r23, r1
    1b50:	81 05       	cpc	r24, r1
    1b52:	91 05       	cpc	r25, r1
    1b54:	49 f4       	brne	.+18     	; 0x1b68 <writeFile+0x4a2>
    1b56:	8d e0       	ldi	r24, 0x0D	; 13
    1b58:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1b5c:	8a e0       	ldi	r24, 0x0A	; 10
    1b5e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1b62:	83 e5       	ldi	r24, 0x53	; 83
    1b64:	94 e0       	ldi	r25, 0x04	; 4
    1b66:	6f c1       	rjmp	.+734    	; 0x1e46 <writeFile+0x780>
    1b68:	c4 01       	movw	r24, r8
    1b6a:	b3 01       	movw	r22, r6
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	97 01       	movw	r18, r14
    1b70:	86 01       	movw	r16, r12
    1b72:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1b76:	c7 01       	movw	r24, r14
    1b78:	b6 01       	movw	r22, r12
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0f ef       	ldi	r16, 0xFF	; 255
    1b7e:	1f ef       	ldi	r17, 0xFF	; 255
    1b80:	2f ef       	ldi	r18, 0xFF	; 255
    1b82:	3f e0       	ldi	r19, 0x0F	; 15
    1b84:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	36 01       	movw	r6, r12
    1b8c:	47 01       	movw	r8, r14
    1b8e:	78 ce       	rjmp	.-784    	; 0x1880 <writeFile+0x1ba>
    1b90:	10 92 8c 00 	sts	0x008C, r1
    1b94:	10 92 8b 00 	sts	0x008B, r1
    1b98:	10 92 a0 00 	sts	0x00A0, r1
    1b9c:	10 92 9f 00 	sts	0x009F, r1
    1ba0:	aa 20       	and	r10, r10
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <writeFile+0x4e0>
    1ba4:	54 c0       	rjmp	.+168    	; 0x1c4e <writeFile+0x588>
    1ba6:	60 91 b8 02 	lds	r22, 0x02B8
    1baa:	70 91 b9 02 	lds	r23, 0x02B9
    1bae:	80 91 ba 02 	lds	r24, 0x02BA
    1bb2:	90 91 bb 02 	lds	r25, 0x02BB
    1bb6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    1bba:	e0 91 87 00 	lds	r30, 0x0087
    1bbe:	f0 91 88 00 	lds	r31, 0x0088
    1bc2:	eb 55       	subi	r30, 0x5B	; 91
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	13 8a       	std	Z+19, r1	; 0x13
    1bc8:	12 8a       	std	Z+18, r1	; 0x12
    1bca:	80 91 9f 00 	lds	r24, 0x009F
    1bce:	90 91 a0 00 	lds	r25, 0x00A0
    1bd2:	97 8b       	std	Z+23, r25	; 0x17
    1bd4:	86 8b       	std	Z+22, r24	; 0x16
    1bd6:	80 91 8b 00 	lds	r24, 0x008B
    1bda:	90 91 8c 00 	lds	r25, 0x008C
    1bde:	91 8f       	std	Z+25, r25	; 0x19
    1be0:	80 8f       	std	Z+24, r24	; 0x18
    1be2:	20 91 91 00 	lds	r18, 0x0091
    1be6:	30 91 92 00 	lds	r19, 0x0092
    1bea:	40 91 93 00 	lds	r20, 0x0093
    1bee:	50 91 94 00 	lds	r21, 0x0094
    1bf2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bf4:	95 8d       	ldd	r25, Z+29	; 0x1d
    1bf6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1bf8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1bfa:	79 01       	movw	r14, r18
    1bfc:	8a 01       	movw	r16, r20
    1bfe:	e8 1a       	sub	r14, r24
    1c00:	f9 0a       	sbc	r15, r25
    1c02:	0a 0b       	sbc	r16, r26
    1c04:	1b 0b       	sbc	r17, r27
    1c06:	24 8f       	std	Z+28, r18	; 0x1c
    1c08:	35 8f       	std	Z+29, r19	; 0x1d
    1c0a:	46 8f       	std	Z+30, r20	; 0x1e
    1c0c:	57 8f       	std	Z+31, r21	; 0x1f
    1c0e:	60 91 b8 02 	lds	r22, 0x02B8
    1c12:	70 91 b9 02 	lds	r23, 0x02B9
    1c16:	80 91 ba 02 	lds	r24, 0x02BA
    1c1a:	90 91 bb 02 	lds	r25, 0x02BB
    1c1e:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	b8 01       	movw	r22, r16
    1c26:	a7 01       	movw	r20, r14
    1c28:	0e 94 a3 05 	call	0xb46	; 0xb46 <freeMemoryUpdate>
    1c2c:	8d e0       	ldi	r24, 0x0D	; 13
    1c2e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1c32:	8a e0       	ldi	r24, 0x0A	; 10
    1c34:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1c38:	83 e4       	ldi	r24, 0x43	; 67
    1c3a:	94 e0       	ldi	r25, 0x04	; 4
    1c3c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1c40:	8d e0       	ldi	r24, 0x0D	; 13
    1c42:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1c46:	8a e0       	ldi	r24, 0x0A	; 10
    1c48:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1c4c:	fe c0       	rjmp	.+508    	; 0x1e4a <writeFile+0x784>
    1c4e:	80 90 9b 00 	lds	r8, 0x009B
    1c52:	90 90 9c 00 	lds	r9, 0x009C
    1c56:	a0 90 9d 00 	lds	r10, 0x009D
    1c5a:	b0 90 9e 00 	lds	r11, 0x009E
    1c5e:	22 24       	eor	r2, r2
    1c60:	20 91 a5 02 	lds	r18, 0x02A5
    1c64:	30 91 a6 02 	lds	r19, 0x02A6
    1c68:	e0 90 8d 00 	lds	r14, 0x008D
    1c6c:	f0 90 8e 00 	lds	r15, 0x008E
    1c70:	00 91 8f 00 	lds	r16, 0x008F
    1c74:	10 91 90 00 	lds	r17, 0x0090
    1c78:	c5 01       	movw	r24, r10
    1c7a:	b4 01       	movw	r22, r8
    1c7c:	62 50       	subi	r22, 0x02	; 2
    1c7e:	70 40       	sbci	r23, 0x00	; 0
    1c80:	80 40       	sbci	r24, 0x00	; 0
    1c82:	90 40       	sbci	r25, 0x00	; 0
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	0e 94 3d 18 	call	0x307a	; 0x307a <__mulsi3>
    1c8c:	2b 01       	movw	r4, r22
    1c8e:	3c 01       	movw	r6, r24
    1c90:	4e 0c       	add	r4, r14
    1c92:	5f 1c       	adc	r5, r15
    1c94:	60 1e       	adc	r6, r16
    1c96:	71 1e       	adc	r7, r17
    1c98:	33 24       	eor	r3, r3
    1c9a:	8c c0       	rjmp	.+280    	; 0x1db4 <writeFile+0x6ee>
    1c9c:	73 01       	movw	r14, r6
    1c9e:	62 01       	movw	r12, r4
    1ca0:	c3 0c       	add	r12, r3
    1ca2:	d1 1c       	adc	r13, r1
    1ca4:	e1 1c       	adc	r14, r1
    1ca6:	f1 1c       	adc	r15, r1
    1ca8:	c7 01       	movw	r24, r14
    1caa:	b6 01       	movw	r22, r12
    1cac:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    1cb0:	00 e2       	ldi	r16, 0x20	; 32
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
    1cb4:	74 c0       	rjmp	.+232    	; 0x1d9e <writeFile+0x6d8>
    1cb6:	22 20       	and	r2, r2
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <writeFile+0x5f6>
    1cba:	c7 c0       	rjmp	.+398    	; 0x1e4a <writeFile+0x784>
    1cbc:	af 01       	movw	r20, r30
    1cbe:	4b 55       	subi	r20, 0x5B	; 91
    1cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	eb 57       	subi	r30, 0x7B	; 123
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	e0 81       	ld	r30, Z
    1cca:	ee 23       	and	r30, r30
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <writeFile+0x60e>
    1cce:	e5 3e       	cpi	r30, 0xE5	; 229
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <writeFile+0x60e>
    1cd2:	63 c0       	rjmp	.+198    	; 0x1d9a <writeFile+0x6d4>
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	ba 01       	movw	r22, r20
    1cda:	62 0f       	add	r22, r18
    1cdc:	73 1f       	adc	r23, r19
    1cde:	ac 81       	ldd	r26, Y+4	; 0x04
    1ce0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ce2:	a2 0f       	add	r26, r18
    1ce4:	b3 1f       	adc	r27, r19
    1ce6:	8c 91       	ld	r24, X
    1ce8:	db 01       	movw	r26, r22
    1cea:	8c 93       	st	X, r24
    1cec:	2f 5f       	subi	r18, 0xFF	; 255
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	2b 30       	cpi	r18, 0x0B	; 11
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	89 f7       	brne	.-30     	; 0x1cd8 <writeFile+0x612>
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	eb 55       	subi	r30, 0x5B	; 91
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	75 97       	sbiw	r30, 0x15	; 21
    1cfe:	b0 e2       	ldi	r27, 0x20	; 32
    1d00:	b1 93       	st	Z+, r27
    1d02:	11 92       	st	Z+, r1
    1d04:	11 92       	st	Z+, r1
    1d06:	20 91 9f 00 	lds	r18, 0x009F
    1d0a:	30 91 a0 00 	lds	r19, 0x00A0
    1d0e:	21 93       	st	Z+, r18
    1d10:	31 93       	st	Z+, r19
    1d12:	80 91 8b 00 	lds	r24, 0x008B
    1d16:	90 91 8c 00 	lds	r25, 0x008C
    1d1a:	81 93       	st	Z+, r24
    1d1c:	91 93       	st	Z+, r25
    1d1e:	11 82       	std	Z+1, r1	; 0x01
    1d20:	10 82       	st	Z, r1
    1d22:	34 96       	adiw	r30, 0x04	; 4
    1d24:	21 93       	st	Z+, r18
    1d26:	31 93       	st	Z+, r19
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	34 97       	sbiw	r30, 0x04	; 4
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	36 96       	adiw	r30, 0x06	; 6
    1d38:	ae 81       	ldd	r26, Y+6	; 0x06
    1d3a:	bf 81       	ldd	r27, Y+7	; 0x07
    1d3c:	a1 93       	st	Z+, r26
    1d3e:	b1 93       	st	Z+, r27
    1d40:	80 91 91 00 	lds	r24, 0x0091
    1d44:	90 91 92 00 	lds	r25, 0x0092
    1d48:	a0 91 93 00 	lds	r26, 0x0093
    1d4c:	b0 91 94 00 	lds	r27, 0x0094
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
    1d58:	c7 01       	movw	r24, r14
    1d5a:	b6 01       	movw	r22, r12
    1d5c:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    1d60:	8d e0       	ldi	r24, 0x0D	; 13
    1d62:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1d66:	8a e0       	ldi	r24, 0x0A	; 10
    1d68:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1d6c:	8d e0       	ldi	r24, 0x0D	; 13
    1d6e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1d72:	8a e0       	ldi	r24, 0x0A	; 10
    1d74:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    1d78:	83 e3       	ldi	r24, 0x33	; 51
    1d7a:	94 e0       	ldi	r25, 0x04	; 4
    1d7c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1d80:	40 91 91 00 	lds	r20, 0x0091
    1d84:	50 91 92 00 	lds	r21, 0x0092
    1d88:	60 91 93 00 	lds	r22, 0x0093
    1d8c:	70 91 94 00 	lds	r23, 0x0094
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	0e 94 a3 05 	call	0xb46	; 0xb46 <freeMemoryUpdate>
    1d96:	22 24       	eor	r2, r2
    1d98:	23 94       	inc	r2
    1d9a:	00 5e       	subi	r16, 0xE0	; 224
    1d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9e:	80 91 95 00 	lds	r24, 0x0095
    1da2:	90 91 96 00 	lds	r25, 0x0096
    1da6:	f8 01       	movw	r30, r16
    1da8:	b0 97       	sbiw	r30, 0x20	; 32
    1daa:	e8 17       	cp	r30, r24
    1dac:	f9 07       	cpc	r31, r25
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <writeFile+0x6ec>
    1db0:	82 cf       	rjmp	.-252    	; 0x1cb6 <writeFile+0x5f0>
    1db2:	33 94       	inc	r3
    1db4:	20 91 a5 02 	lds	r18, 0x02A5
    1db8:	30 91 a6 02 	lds	r19, 0x02A6
    1dbc:	83 2d       	mov	r24, r3
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	82 17       	cp	r24, r18
    1dc2:	93 07       	cpc	r25, r19
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <writeFile+0x702>
    1dc6:	6a cf       	rjmp	.-300    	; 0x1c9c <writeFile+0x5d6>
    1dc8:	c5 01       	movw	r24, r10
    1dca:	b4 01       	movw	r22, r8
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	00 e0       	ldi	r16, 0x00	; 0
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1dda:	6b 01       	movw	r12, r22
    1ddc:	7c 01       	movw	r14, r24
    1dde:	67 3f       	cpi	r22, 0xF7	; 247
    1de0:	bf ef       	ldi	r27, 0xFF	; 255
    1de2:	7b 07       	cpc	r23, r27
    1de4:	bf ef       	ldi	r27, 0xFF	; 255
    1de6:	8b 07       	cpc	r24, r27
    1de8:	bf e0       	ldi	r27, 0x0F	; 15
    1dea:	9b 07       	cpc	r25, r27
    1dec:	10 f1       	brcs	.+68     	; 0x1e32 <writeFile+0x76c>
    1dee:	6f 3f       	cpi	r22, 0xFF	; 255
    1df0:	ef ef       	ldi	r30, 0xFF	; 255
    1df2:	7e 07       	cpc	r23, r30
    1df4:	ef ef       	ldi	r30, 0xFF	; 255
    1df6:	8e 07       	cpc	r24, r30
    1df8:	ef e0       	ldi	r30, 0x0F	; 15
    1dfa:	9e 07       	cpc	r25, r30
    1dfc:	b9 f4       	brne	.+46     	; 0x1e2c <writeFile+0x766>
    1dfe:	c5 01       	movw	r24, r10
    1e00:	b4 01       	movw	r22, r8
    1e02:	0e 94 92 04 	call	0x924	; 0x924 <searchNextFreeCluster>
    1e06:	6b 01       	movw	r12, r22
    1e08:	7c 01       	movw	r14, r24
    1e0a:	c5 01       	movw	r24, r10
    1e0c:	b4 01       	movw	r22, r8
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	97 01       	movw	r18, r14
    1e12:	86 01       	movw	r16, r12
    1e14:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1e18:	c7 01       	movw	r24, r14
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0f ef       	ldi	r16, 0xFF	; 255
    1e20:	1f ef       	ldi	r17, 0xFF	; 255
    1e22:	2f ef       	ldi	r18, 0xFF	; 255
    1e24:	3f e0       	ldi	r19, 0x0F	; 15
    1e26:	0e 94 1a 08 	call	0x1034	; 0x1034 <getSetNextCluster>
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <writeFile+0x76c>
    1e2c:	8e e1       	ldi	r24, 0x1E	; 30
    1e2e:	94 e0       	ldi	r25, 0x04	; 4
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <writeFile+0x780>
    1e32:	46 01       	movw	r8, r12
    1e34:	57 01       	movw	r10, r14
    1e36:	c1 14       	cp	r12, r1
    1e38:	d1 04       	cpc	r13, r1
    1e3a:	e1 04       	cpc	r14, r1
    1e3c:	f1 04       	cpc	r15, r1
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <writeFile+0x77c>
    1e40:	0f cf       	rjmp	.-482    	; 0x1c60 <writeFile+0x59a>
    1e42:	85 e0       	ldi	r24, 0x05	; 5
    1e44:	94 e0       	ldi	r25, 0x04	; 4
    1e46:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    1e4a:	27 96       	adiw	r28, 0x07	; 7
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	9f 90       	pop	r9
    1e6c:	8f 90       	pop	r8
    1e6e:	7f 90       	pop	r7
    1e70:	6f 90       	pop	r6
    1e72:	5f 90       	pop	r5
    1e74:	4f 90       	pop	r4
    1e76:	3f 90       	pop	r3
    1e78:	2f 90       	pop	r2
    1e7a:	08 95       	ret

00001e7c <twi_init>:
    1e7c:	16 be       	out	0x36, r1	; 54
    1e7e:	82 e1       	ldi	r24, 0x12	; 18
    1e80:	80 b9       	out	0x00, r24	; 0
    1e82:	11 b8       	out	0x01, r1	; 1
    1e84:	08 95       	ret

00001e86 <i2c_start>:
    1e86:	84 ea       	ldi	r24, 0xA4	; 164
    1e88:	86 bf       	out	0x36, r24	; 54
    1e8a:	06 b6       	in	r0, 0x36	; 54
    1e8c:	07 fe       	sbrs	r0, 7
    1e8e:	fd cf       	rjmp	.-6      	; 0x1e8a <i2c_start+0x4>
    1e90:	81 b1       	in	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	88 7f       	andi	r24, 0xF8	; 248
    1e96:	88 30       	cpi	r24, 0x08	; 8
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <i2c_start+0x16>
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	89 2f       	mov	r24, r25
    1e9e:	08 95       	ret

00001ea0 <i2c_repeatStart>:
    1ea0:	84 ea       	ldi	r24, 0xA4	; 164
    1ea2:	86 bf       	out	0x36, r24	; 54
    1ea4:	06 b6       	in	r0, 0x36	; 54
    1ea6:	07 fe       	sbrs	r0, 7
    1ea8:	fd cf       	rjmp	.-6      	; 0x1ea4 <i2c_repeatStart+0x4>
    1eaa:	81 b1       	in	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	88 7f       	andi	r24, 0xF8	; 248
    1eb0:	80 31       	cpi	r24, 0x10	; 16
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <i2c_repeatStart+0x16>
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	89 2f       	mov	r24, r25
    1eb8:	08 95       	ret

00001eba <i2c_sendAddress>:
    1eba:	80 fd       	sbrc	r24, 0
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <i2c_sendAddress+0x8>
    1ebe:	28 e1       	ldi	r18, 0x18	; 24
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <i2c_sendAddress+0xa>
    1ec2:	20 e4       	ldi	r18, 0x40	; 64
    1ec4:	83 b9       	out	0x03, r24	; 3
    1ec6:	84 e8       	ldi	r24, 0x84	; 132
    1ec8:	86 bf       	out	0x36, r24	; 54
    1eca:	06 b6       	in	r0, 0x36	; 54
    1ecc:	07 fe       	sbrs	r0, 7
    1ece:	fd cf       	rjmp	.-6      	; 0x1eca <i2c_sendAddress+0x10>
    1ed0:	81 b1       	in	r24, 0x01	; 1
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	88 7f       	andi	r24, 0xF8	; 248
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	82 17       	cp	r24, r18
    1ede:	93 07       	cpc	r25, r19
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <i2c_sendAddress+0x2a>
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	84 2f       	mov	r24, r20
    1ee6:	08 95       	ret

00001ee8 <i2c_sendData>:
    1ee8:	83 b9       	out	0x03, r24	; 3
    1eea:	84 e8       	ldi	r24, 0x84	; 132
    1eec:	86 bf       	out	0x36, r24	; 54
    1eee:	06 b6       	in	r0, 0x36	; 54
    1ef0:	07 fe       	sbrs	r0, 7
    1ef2:	fd cf       	rjmp	.-6      	; 0x1eee <i2c_sendData+0x6>
    1ef4:	81 b1       	in	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	88 7f       	andi	r24, 0xF8	; 248
    1efa:	88 32       	cpi	r24, 0x28	; 40
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <i2c_sendData+0x18>
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	89 2f       	mov	r24, r25
    1f02:	08 95       	ret

00001f04 <i2c_receiveData_ACK>:
    1f04:	84 ec       	ldi	r24, 0xC4	; 196
    1f06:	86 bf       	out	0x36, r24	; 54
    1f08:	06 b6       	in	r0, 0x36	; 54
    1f0a:	07 fe       	sbrs	r0, 7
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <i2c_receiveData_ACK+0x4>
    1f0e:	81 b1       	in	r24, 0x01	; 1
    1f10:	88 7f       	andi	r24, 0xF8	; 248
    1f12:	80 35       	cpi	r24, 0x50	; 80
    1f14:	11 f0       	breq	.+4      	; 0x1f1a <i2c_receiveData_ACK+0x16>
    1f16:	8e e7       	ldi	r24, 0x7E	; 126
    1f18:	08 95       	ret
    1f1a:	83 b1       	in	r24, 0x03	; 3
    1f1c:	08 95       	ret

00001f1e <i2c_receiveData_NACK>:
    1f1e:	84 e8       	ldi	r24, 0x84	; 132
    1f20:	86 bf       	out	0x36, r24	; 54
    1f22:	06 b6       	in	r0, 0x36	; 54
    1f24:	07 fe       	sbrs	r0, 7
    1f26:	fd cf       	rjmp	.-6      	; 0x1f22 <i2c_receiveData_NACK+0x4>
    1f28:	81 b1       	in	r24, 0x01	; 1
    1f2a:	88 7f       	andi	r24, 0xF8	; 248
    1f2c:	88 35       	cpi	r24, 0x58	; 88
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <i2c_receiveData_NACK+0x16>
    1f30:	8e e7       	ldi	r24, 0x7E	; 126
    1f32:	08 95       	ret
    1f34:	83 b1       	in	r24, 0x03	; 3
    1f36:	08 95       	ret

00001f38 <i2c_stop>:
    1f38:	84 e9       	ldi	r24, 0x94	; 148
    1f3a:	86 bf       	out	0x36, r24	; 54
    1f3c:	08 95       	ret

00001f3e <RTC_setStartAddress>:
//***************************************************************************
unsigned char RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
    1f3e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <i2c_start>
   if(errorStatus == 1)
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <RTC_setStartAddress+0x10>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    1f46:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	 return 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	08 95       	ret
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1f4e:	80 ed       	ldi	r24, 0xD0	; 208
    1f50:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <i2c_sendAddress>
   
   if(errorStatus == 1)
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	b9 f3       	breq	.-18     	; 0x1f46 <RTC_setStartAddress+0x8>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <i2c_sendData>
   if(errorStatus == 1)
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 f3       	breq	.-28     	; 0x1f46 <RTC_setStartAddress+0x8>
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
	 return 1;
   } 

   i2c_stop();
    1f62:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
   return 0;
    1f66:	80 e0       	ldi	r24, 0x00	; 0
}
    1f68:	08 95       	ret

00001f6a <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    1f70:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <i2c_start>
   if(errorStatus == 1)
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	f9 f0       	breq	.+62     	; 0x1fb6 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1f78:	80 ed       	ldi	r24, 0xD0	; 208
    1f7a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <i2c_sendAddress>
   
   if(errorStatus == 1)
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	d1 f0       	breq	.+52     	; 0x1fb6 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <i2c_sendData>
   if(errorStatus == 1)
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	a9 f0       	breq	.+42     	; 0x1fb6 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    1f8c:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <i2c_repeatStart>
   if(errorStatus == 1)
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	89 f0       	breq	.+34     	; 0x1fb6 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    1f94:	81 ed       	ldi	r24, 0xD1	; 209
    1f96:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <i2c_sendAddress>
   
   if(errorStatus == 1)
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	61 f0       	breq	.+24     	; 0x1fb6 <RTC_read+0x4c>
    1f9e:	c0 e8       	ldi	r28, 0x80	; 128
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	10 e0       	ldi	r17, 0x00	; 0
	 return 1;
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    1fa4:	16 30       	cpi	r17, 0x06	; 6
    1fa6:	19 f4       	brne	.+6      	; 0x1fae <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
    1fa8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <i2c_receiveData_NACK>
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
    1fae:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    1fb2:	8e 37       	cpi	r24, 0x7E	; 126
    1fb4:	21 f4       	brne	.+8      	; 0x1fbe <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    1fb6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	   		return 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	07 c0       	rjmp	.+14     	; 0x1fcc <RTC_read+0x62>
   	  }
	  
	  rtc_register[i] = data;
    1fbe:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    1fc0:	1f 5f       	subi	r17, 0xFF	; 255
    1fc2:	17 30       	cpi	r17, 0x07	; 7
    1fc4:	79 f7       	brne	.-34     	; 0x1fa4 <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    1fc6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	return 0;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
}	  
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	08 95       	ret

00001fd4 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    1fd4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <RTC_read>
   if(error) return 1;
    1fd8:	81 11       	cpse	r24, r1
    1fda:	32 c0       	rjmp	.+100    	; 0x2040 <RTC_getTime+0x6c>

   RTC_read();
    1fdc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <RTC_read>
   time[8] = 0x00;	  //NIL
    1fe0:	10 92 c4 02 	sts	0x02C4, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    1fe4:	80 91 80 00 	lds	r24, 0x0080
    1fe8:	98 2f       	mov	r25, r24
    1fea:	9f 70       	andi	r25, 0x0F	; 15
    1fec:	90 63       	ori	r25, 0x30	; 48
    1fee:	90 93 c3 02 	sts	0x02C3, r25
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    1ff2:	80 77       	andi	r24, 0x70	; 112
    1ff4:	82 95       	swap	r24
    1ff6:	8f 70       	andi	r24, 0x0F	; 15
    1ff8:	80 63       	ori	r24, 0x30	; 48
    1ffa:	80 93 c2 02 	sts	0x02C2, r24
   time[5] = ':';
    1ffe:	2a e3       	ldi	r18, 0x3A	; 58
    2000:	20 93 c1 02 	sts	0x02C1, r18
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    2004:	80 91 81 00 	lds	r24, 0x0081
    2008:	98 2f       	mov	r25, r24
    200a:	9f 70       	andi	r25, 0x0F	; 15
    200c:	90 63       	ori	r25, 0x30	; 48
    200e:	90 93 c0 02 	sts	0x02C0, r25
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    2012:	80 77       	andi	r24, 0x70	; 112
    2014:	82 95       	swap	r24
    2016:	8f 70       	andi	r24, 0x0F	; 15
    2018:	80 63       	ori	r24, 0x30	; 48
    201a:	80 93 bf 02 	sts	0x02BF, r24
   time[2] = ':'; 
    201e:	20 93 be 02 	sts	0x02BE, r18
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    2022:	80 91 82 00 	lds	r24, 0x0082
    2026:	98 2f       	mov	r25, r24
    2028:	9f 70       	andi	r25, 0x0F	; 15
    202a:	90 63       	ori	r25, 0x30	; 48
    202c:	90 93 bd 02 	sts	0x02BD, r25
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    2030:	80 73       	andi	r24, 0x30	; 48
    2032:	82 95       	swap	r24
    2034:	8f 70       	andi	r24, 0x0F	; 15
    2036:	80 63       	ori	r24, 0x30	; 48
    2038:	80 93 bc 02 	sts	0x02BC, r24

   return 0;
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
    2042:	08 95       	ret

00002044 <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    2044:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <RTC_read>
  if(error) return 1;
    2048:	81 11       	cpse	r24, r1
    204a:	36 c0       	rjmp	.+108    	; 0x20b8 <RTC_getDate+0x74>

  date[11] = 0x00;
    204c:	10 92 d2 02 	sts	0x02D2, r1
  date[10] = 0x00;
    2050:	10 92 d1 02 	sts	0x02D1, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    2054:	80 91 86 00 	lds	r24, 0x0086
    2058:	98 2f       	mov	r25, r24
    205a:	9f 70       	andi	r25, 0x0F	; 15
    205c:	90 63       	ori	r25, 0x30	; 48
    205e:	90 93 d0 02 	sts	0x02D0, r25
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    2062:	82 95       	swap	r24
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	80 63       	ori	r24, 0x30	; 48
    2068:	80 93 cf 02 	sts	0x02CF, r24
  date[7] = '0';
    206c:	80 e3       	ldi	r24, 0x30	; 48
    206e:	80 93 ce 02 	sts	0x02CE, r24
  date[6] = '2';
    2072:	82 e3       	ldi	r24, 0x32	; 50
    2074:	80 93 cd 02 	sts	0x02CD, r24
  date[5] = '/';
    2078:	9f e2       	ldi	r25, 0x2F	; 47
    207a:	90 93 cc 02 	sts	0x02CC, r25
  date[4] = (MONTH & 0x0f) | 0x30;
    207e:	20 91 85 00 	lds	r18, 0x0085
    2082:	82 2f       	mov	r24, r18
    2084:	8f 70       	andi	r24, 0x0F	; 15
    2086:	80 63       	ori	r24, 0x30	; 48
    2088:	80 93 cb 02 	sts	0x02CB, r24
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    208c:	22 95       	swap	r18
    208e:	21 70       	andi	r18, 0x01	; 1
    2090:	20 63       	ori	r18, 0x30	; 48
    2092:	20 93 ca 02 	sts	0x02CA, r18
  date[2] = '/';
    2096:	90 93 c9 02 	sts	0x02C9, r25
  date[1] = (DATE & 0x0f) | 0x30;
    209a:	80 91 84 00 	lds	r24, 0x0084
    209e:	98 2f       	mov	r25, r24
    20a0:	9f 70       	andi	r25, 0x0F	; 15
    20a2:	90 63       	ori	r25, 0x30	; 48
    20a4:	90 93 c8 02 	sts	0x02C8, r25
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    20a8:	80 73       	andi	r24, 0x30	; 48
    20aa:	82 95       	swap	r24
    20ac:	8f 70       	andi	r24, 0x0F	; 15
    20ae:	80 63       	ori	r24, 0x30	; 48
    20b0:	80 93 c7 02 	sts	0x02C7, r24
  return 0;
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
    20ba:	08 95       	ret

000020bc <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    20bc:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <RTC_getTime>
  if(error) return 1;
    20c0:	81 11       	cpse	r24, r1
    20c2:	10 c0       	rjmp	.+32     	; 0x20e4 <RTC_displayTime+0x28>
  
  TX_NEWLINE;
    20c4:	8d e0       	ldi	r24, 0x0D	; 13
    20c6:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    20ca:	8a e0       	ldi	r24, 0x0A	; 10
    20cc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F(PSTR("Time:"));
    20d0:	85 e8       	ldi	r24, 0x85	; 133
    20d2:	96 e0       	ldi	r25, 0x06	; 6
    20d4:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  transmitString(time);
    20d8:	8c eb       	ldi	r24, 0xBC	; 188
    20da:	92 e0       	ldi	r25, 0x02	; 2
    20dc:	0e 94 ca 14 	call	0x2994	; 0x2994 <transmitString>

  return 0;
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
    20e6:	08 95       	ret

000020e8 <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    20e8:	85 e7       	ldi	r24, 0x75	; 117
    20ea:	96 e0       	ldi	r25, 0x06	; 6
    20ec:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  
  switch(DAY)
    20f0:	80 91 83 00 	lds	r24, 0x0083
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	87 30       	cpi	r24, 0x07	; 7
    20f8:	91 05       	cpc	r25, r1
    20fa:	d0 f4       	brcc	.+52     	; 0x2130 <RTC_displayDay+0x48>
    20fc:	fc 01       	movw	r30, r24
    20fe:	e6 5d       	subi	r30, 0xD6	; 214
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__tablejump2__>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    2106:	8e e6       	ldi	r24, 0x6E	; 110
    2108:	96 e0       	ldi	r25, 0x06	; 6
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <RTC_displayDay+0x4c>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    210c:	87 e6       	ldi	r24, 0x67	; 103
    210e:	96 e0       	ldi	r25, 0x06	; 6
    2110:	11 c0       	rjmp	.+34     	; 0x2134 <RTC_displayDay+0x4c>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    2112:	8f e5       	ldi	r24, 0x5F	; 95
    2114:	96 e0       	ldi	r25, 0x06	; 6
    2116:	0e c0       	rjmp	.+28     	; 0x2134 <RTC_displayDay+0x4c>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    2118:	85 e5       	ldi	r24, 0x55	; 85
    211a:	96 e0       	ldi	r25, 0x06	; 6
    211c:	0b c0       	rjmp	.+22     	; 0x2134 <RTC_displayDay+0x4c>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    211e:	8c e4       	ldi	r24, 0x4C	; 76
    2120:	96 e0       	ldi	r25, 0x06	; 6
    2122:	08 c0       	rjmp	.+16     	; 0x2134 <RTC_displayDay+0x4c>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    2124:	85 e4       	ldi	r24, 0x45	; 69
    2126:	96 e0       	ldi	r25, 0x06	; 6
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <RTC_displayDay+0x4c>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
    212a:	8c e3       	ldi	r24, 0x3C	; 60
    212c:	96 e0       	ldi	r25, 0x06	; 6
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <RTC_displayDay+0x4c>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    2130:	84 e3       	ldi	r24, 0x34	; 52
    2132:	96 e0       	ldi	r25, 0x06	; 6
    2134:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <transmitString_F>

00002138 <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    2138:	0e 94 22 10 	call	0x2044	; 0x2044 <RTC_getDate>
  if(error) return 1;
    213c:	81 11       	cpse	r24, r1
    213e:	12 c0       	rjmp	.+36     	; 0x2164 <RTC_displayDate+0x2c>
  
  TX_NEWLINE;
    2140:	8d e0       	ldi	r24, 0x0D	; 13
    2142:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2146:	8a e0       	ldi	r24, 0x0A	; 10
    2148:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F(PSTR("Date:")); 
    214c:	8f e7       	ldi	r24, 0x7F	; 127
    214e:	96 e0       	ldi	r25, 0x06	; 6
    2150:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  transmitString(date);  
    2154:	87 ec       	ldi	r24, 0xC7	; 199
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	0e 94 ca 14 	call	0x2994	; 0x2994 <transmitString>
  RTC_displayDay();  
    215c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <RTC_displayDay>
  
  return 0; 
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
    2166:	08 95       	ret

00002168 <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    2168:	20 91 c2 02 	lds	r18, 0x02C2
    216c:	27 70       	andi	r18, 0x07	; 7
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	28 9f       	mul	r18, r24
    2172:	90 01       	movw	r18, r0
    2174:	11 24       	eor	r1, r1
    2176:	30 91 c3 02 	lds	r19, 0x02C3
    217a:	3f 70       	andi	r19, 0x0F	; 15
    217c:	32 2b       	or	r19, r18
    217e:	30 93 80 00 	sts	0x0080, r19
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    2182:	20 91 bf 02 	lds	r18, 0x02BF
    2186:	27 70       	andi	r18, 0x07	; 7
    2188:	80 e1       	ldi	r24, 0x10	; 16
    218a:	28 9f       	mul	r18, r24
    218c:	90 01       	movw	r18, r0
    218e:	11 24       	eor	r1, r1
    2190:	30 91 c0 02 	lds	r19, 0x02C0
    2194:	3f 70       	andi	r19, 0x0F	; 15
    2196:	32 2b       	or	r19, r18
    2198:	30 93 81 00 	sts	0x0081, r19
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    219c:	20 91 bc 02 	lds	r18, 0x02BC
    21a0:	23 70       	andi	r18, 0x03	; 3
    21a2:	80 e1       	ldi	r24, 0x10	; 16
    21a4:	28 9f       	mul	r18, r24
    21a6:	90 01       	movw	r18, r0
    21a8:	11 24       	eor	r1, r1
    21aa:	30 91 bd 02 	lds	r19, 0x02BD
    21ae:	3f 70       	andi	r19, 0x0F	; 15
    21b0:	32 2b       	or	r19, r18
    21b2:	30 93 82 00 	sts	0x0082, r19
  DAY = date[10];
    21b6:	20 91 d1 02 	lds	r18, 0x02D1
    21ba:	20 93 83 00 	sts	0x0083, r18
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    21be:	20 91 c7 02 	lds	r18, 0x02C7
    21c2:	23 70       	andi	r18, 0x03	; 3
    21c4:	80 e1       	ldi	r24, 0x10	; 16
    21c6:	28 9f       	mul	r18, r24
    21c8:	90 01       	movw	r18, r0
    21ca:	11 24       	eor	r1, r1
    21cc:	30 91 c8 02 	lds	r19, 0x02C8
    21d0:	3f 70       	andi	r19, 0x0F	; 15
    21d2:	32 2b       	or	r19, r18
    21d4:	30 93 84 00 	sts	0x0084, r19
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    21d8:	20 91 ca 02 	lds	r18, 0x02CA
    21dc:	82 2f       	mov	r24, r18
    21de:	81 70       	andi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	24 e0       	ldi	r18, 0x04	; 4
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	2a 95       	dec	r18
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <RTC_updateRegisters+0x7c>
    21ec:	90 91 cb 02 	lds	r25, 0x02CB
    21f0:	9f 70       	andi	r25, 0x0F	; 15
    21f2:	98 2b       	or	r25, r24
    21f4:	90 93 85 00 	sts	0x0085, r25
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    21f8:	80 91 cf 02 	lds	r24, 0x02CF
    21fc:	20 e1       	ldi	r18, 0x10	; 16
    21fe:	82 9f       	mul	r24, r18
    2200:	c0 01       	movw	r24, r0
    2202:	11 24       	eor	r1, r1
    2204:	90 91 d0 02 	lds	r25, 0x02D0
    2208:	9f 70       	andi	r25, 0x0F	; 15
    220a:	98 2b       	or	r25, r24
    220c:	90 93 86 00 	sts	0x0086, r25
    2210:	08 95       	ret

00002212 <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2216:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <i2c_start>
   if(errorStatus == 1)
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	21 f4       	brne	.+8      	; 0x2226 <RTC_writeTime+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    221e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	 return(1);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	18 c0       	rjmp	.+48     	; 0x2256 <RTC_writeTime+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2226:	80 ed       	ldi	r24, 0xD0	; 208
    2228:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <i2c_sendAddress>
   
   if(errorStatus == 1)
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	b9 f3       	breq	.-18     	; 0x221e <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <i2c_sendData>
   if(errorStatus == 1)
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 f3       	breq	.-28     	; 0x221e <RTC_writeTime+0xc>
    223a:	c0 e8       	ldi	r28, 0x80	; 128
    223c:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    223e:	89 91       	ld	r24, Y+
    2240:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <i2c_sendData>
   	  if(errorStatus == 1)
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	59 f3       	breq	.-42     	; 0x221e <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	c3 38       	cpi	r28, 0x83	; 131
    224c:	d8 07       	cpc	r29, r24
    224e:	b9 f7       	brne	.-18     	; 0x223e <RTC_writeTime+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2250:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	return(0);
    2254:	80 e0       	ldi	r24, 0x00	; 0
}
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2260:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <i2c_start>
   if(errorStatus == 1)
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	21 f4       	brne	.+8      	; 0x2270 <RTC_writeDate+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    2268:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	 return(1);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	18 c0       	rjmp	.+48     	; 0x22a0 <RTC_writeDate+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2270:	80 ed       	ldi	r24, 0xD0	; 208
    2272:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <i2c_sendAddress>
   
   if(errorStatus == 1)
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	b9 f3       	breq	.-18     	; 0x2268 <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <i2c_sendData>
   if(errorStatus == 1)
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	91 f3       	breq	.-28     	; 0x2268 <RTC_writeDate+0xc>
    2284:	c3 e8       	ldi	r28, 0x83	; 131
    2286:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2288:	89 91       	ld	r24, Y+
    228a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <i2c_sendData>
   	  if(errorStatus == 1)
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	59 f3       	breq	.-42     	; 0x2268 <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	c7 38       	cpi	r28, 0x87	; 135
    2296:	d8 07       	cpc	r29, r24
    2298:	b9 f7       	brne	.-18     	; 0x2288 <RTC_writeDate+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    229a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_stop>
	return(0);
    229e:	80 e0       	ldi	r24, 0x00	; 0
}
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    22a6:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
    22a8:	8d e0       	ldi	r24, 0x0D	; 13
    22aa:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    22ae:	8a e0       	ldi	r24, 0x0A	; 10
    22b0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    22b4:	80 e1       	ldi	r24, 0x10	; 16
    22b6:	96 e0       	ldi	r25, 0x06	; 6
    22b8:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    22bc:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    22c0:	c8 2f       	mov	r28, r24
	transmitByte(data);
    22c2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x32)
    22c6:	80 ed       	ldi	r24, 0xD0	; 208
    22c8:	8c 0f       	add	r24, r28
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <RTC_updateTime+0x2a>
    22ce:	65 c0       	rjmp	.+202    	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[0]= data;
    22d0:	c0 93 bc 02 	sts	0x02BC, r28
	 
	data = receiveByte();
    22d4:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    22d8:	c8 2f       	mov	r28, r24
	transmitByte(data);
    22da:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    22de:	80 ed       	ldi	r24, 0xD0	; 208
    22e0:	8c 0f       	add	r24, r28
    22e2:	8a 30       	cpi	r24, 0x0A	; 10
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <RTC_updateTime+0x42>
    22e6:	59 c0       	rjmp	.+178    	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	time[1]= data;
    22e8:	c0 93 bd 02 	sts	0x02BD, r28
	
	transmitByte(':');
    22ec:	8a e3       	ldi	r24, 0x3A	; 58
    22ee:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    22f2:	80 91 bc 02 	lds	r24, 0x02BC
    22f6:	83 70       	andi	r24, 0x03	; 3
    22f8:	20 91 bd 02 	lds	r18, 0x02BD
    22fc:	2f 70       	andi	r18, 0x0F	; 15
    22fe:	3a e0       	ldi	r19, 0x0A	; 10
    2300:	83 9f       	mul	r24, r19
    2302:	c0 01       	movw	r24, r0
    2304:	11 24       	eor	r1, r1
    2306:	82 0f       	add	r24, r18
    2308:	91 1d       	adc	r25, r1
    230a:	48 97       	sbiw	r24, 0x18	; 24
    230c:	0c f0       	brlt	.+2      	; 0x2310 <RTC_updateTime+0x6a>
    230e:	45 c0       	rjmp	.+138    	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    2310:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2314:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    2316:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x35)
    231a:	80 ed       	ldi	r24, 0xD0	; 208
    231c:	8c 0f       	add	r24, r28
    231e:	86 30       	cpi	r24, 0x06	; 6
    2320:	e0 f5       	brcc	.+120    	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    2322:	c0 93 bf 02 	sts	0x02BF, r28
	
	data = receiveByte();
    2326:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    232a:	c8 2f       	mov	r28, r24
	transmitByte(data);
    232c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2330:	80 ed       	ldi	r24, 0xD0	; 208
    2332:	8c 0f       	add	r24, r28
    2334:	8a 30       	cpi	r24, 0x0A	; 10
    2336:	88 f5       	brcc	.+98     	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    2338:	c0 93 c0 02 	sts	0x02C0, r28
	
	transmitByte(':');
    233c:	8a e3       	ldi	r24, 0x3A	; 58
    233e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    2342:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2346:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    2348:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x35)
    234c:	80 ed       	ldi	r24, 0xD0	; 208
    234e:	8c 0f       	add	r24, r28
    2350:	86 30       	cpi	r24, 0x06	; 6
    2352:	18 f5       	brcc	.+70     	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    2354:	c0 93 c2 02 	sts	0x02C2, r28
	
	data = receiveByte();
    2358:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    235c:	c8 2f       	mov	r28, r24
	transmitByte(data);
    235e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2362:	80 ed       	ldi	r24, 0xD0	; 208
    2364:	8c 0f       	add	r24, r28
    2366:	8a 30       	cpi	r24, 0x0A	; 10
    2368:	c0 f4       	brcc	.+48     	; 0x239a <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    236a:	c0 93 c3 02 	sts	0x02C3, r28
	
	 	  
  RTC_updateRegisters(); 
    236e:	0e 94 b4 10 	call	0x2168	; 0x2168 <RTC_updateRegisters>
  data = RTC_writeTime();
    2372:	0e 94 09 11 	call	0x2212	; 0x2212 <RTC_writeTime>
    2376:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    2378:	8d e0       	ldi	r24, 0x0D	; 13
    237a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    237e:	8a e0       	ldi	r24, 0x0A	; 10
    2380:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  if(data == 0)
    2384:	c1 11       	cpse	r28, r1
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <RTC_updateTime+0xee>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    2388:	86 ef       	ldi	r24, 0xF6	; 246
    238a:	95 e0       	ldi	r25, 0x05	; 5
    238c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
	 return 0;
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	0e c0       	rjmp	.+28     	; 0x23b0 <RTC_updateTime+0x10a>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    2394:	81 ee       	ldi	r24, 0xE1	; 225
    2396:	95 e0       	ldi	r25, 0x05	; 5
    2398:	08 c0       	rjmp	.+16     	; 0x23aa <RTC_updateTime+0x104>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    239a:	8d e0       	ldi	r24, 0x0D	; 13
    239c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    23a0:	8a e0       	ldi	r24, 0x0A	; 10
    23a2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    23a6:	81 ed       	ldi	r24, 0xD1	; 209
    23a8:	95 e0       	ldi	r25, 0x05	; 5
    23aa:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  return 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
}  
    23b0:	cf 91       	pop	r28
    23b2:	08 95       	ret

000023b4 <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
  unsigned char data;
  TX_NEWLINE;
    23b8:	8d e0       	ldi	r24, 0x0D	; 13
    23ba:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    23be:	8a e0       	ldi	r24, 0x0A	; 10
    23c0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    23c4:	8a eb       	ldi	r24, 0xBA	; 186
    23c6:	95 e0       	ldi	r25, 0x05	; 5
    23c8:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    23cc:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    23d0:	c8 2f       	mov	r28, r24
	transmitByte(data); 	   	  	  				
    23d2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x33)
    23d6:	80 ed       	ldi	r24, 0xD0	; 208
    23d8:	8c 0f       	add	r24, r28
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	08 f0       	brcs	.+2      	; 0x23e0 <RTC_updateDate+0x2c>
    23de:	95 c0       	rjmp	.+298    	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[0]= data;
    23e0:	c0 93 c7 02 	sts	0x02C7, r28
	 
	data = receiveByte();
    23e4:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    23e8:	c8 2f       	mov	r28, r24
	transmitByte(data);
    23ea:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    23ee:	80 ed       	ldi	r24, 0xD0	; 208
    23f0:	8c 0f       	add	r24, r28
    23f2:	8a 30       	cpi	r24, 0x0A	; 10
    23f4:	08 f0       	brcs	.+2      	; 0x23f8 <RTC_updateDate+0x44>
    23f6:	89 c0       	rjmp	.+274    	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[1]= data;
    23f8:	c0 93 c8 02 	sts	0x02C8, r28
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    23fc:	20 91 c7 02 	lds	r18, 0x02C7
    2400:	23 70       	andi	r18, 0x03	; 3
    2402:	cf 70       	andi	r28, 0x0F	; 15
    2404:	8a e0       	ldi	r24, 0x0A	; 10
    2406:	28 9f       	mul	r18, r24
    2408:	90 01       	movw	r18, r0
    240a:	11 24       	eor	r1, r1
    240c:	2c 0f       	add	r18, r28
    240e:	31 1d       	adc	r19, r1
    2410:	20 32       	cpi	r18, 0x20	; 32
    2412:	31 05       	cpc	r19, r1
    2414:	0c f0       	brlt	.+2      	; 0x2418 <RTC_updateDate+0x64>
    2416:	79 c0       	rjmp	.+242    	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
    transmitByte('/');
    2418:	8f e2       	ldi	r24, 0x2F	; 47
    241a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	
	date[2] = '/';
    241e:	df e2       	ldi	r29, 0x2F	; 47
    2420:	d0 93 c9 02 	sts	0x02C9, r29
	   
	
	data = receiveByte();			   			  //receive month
    2424:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2428:	c8 2f       	mov	r28, r24
	transmitByte(data);
    242a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x31)
    242e:	80 ed       	ldi	r24, 0xD0	; 208
    2430:	8c 0f       	add	r24, r28
    2432:	82 30       	cpi	r24, 0x02	; 2
    2434:	08 f0       	brcs	.+2      	; 0x2438 <RTC_updateDate+0x84>
    2436:	69 c0       	rjmp	.+210    	; 0x250a <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    2438:	c0 93 ca 02 	sts	0x02CA, r28
	
	data = receiveByte();
    243c:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2440:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2442:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2446:	80 ed       	ldi	r24, 0xD0	; 208
    2448:	8c 0f       	add	r24, r28
    244a:	8a 30       	cpi	r24, 0x0A	; 10
    244c:	08 f0       	brcs	.+2      	; 0x2450 <RTC_updateDate+0x9c>
    244e:	5d c0       	rjmp	.+186    	; 0x250a <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    2450:	c0 93 cb 02 	sts	0x02CB, r28
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    2454:	20 91 ca 02 	lds	r18, 0x02CA
    2458:	23 70       	andi	r18, 0x03	; 3
    245a:	cf 70       	andi	r28, 0x0F	; 15
    245c:	8a e0       	ldi	r24, 0x0A	; 10
    245e:	28 9f       	mul	r18, r24
    2460:	90 01       	movw	r18, r0
    2462:	11 24       	eor	r1, r1
    2464:	2c 0f       	add	r18, r28
    2466:	31 1d       	adc	r19, r1
    2468:	2d 30       	cpi	r18, 0x0D	; 13
    246a:	31 05       	cpc	r19, r1
    246c:	0c f0       	brlt	.+2      	; 0x2470 <RTC_updateDate+0xbc>
    246e:	4d c0       	rjmp	.+154    	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	transmitByte('/');
    2470:	8f e2       	ldi	r24, 0x2F	; 47
    2472:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	   
	
	date[5] = '/';
    2476:	d0 93 cc 02 	sts	0x02CC, r29
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    247a:	82 e3       	ldi	r24, 0x32	; 50
    247c:	80 93 cd 02 	sts	0x02CD, r24
	date[7] = '0';
    2480:	80 e3       	ldi	r24, 0x30	; 48
    2482:	80 93 ce 02 	sts	0x02CE, r24
	
	data = receiveByte();			   			 
    2486:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    248a:	c8 2f       	mov	r28, r24
	transmitByte(data);
    248c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2490:	80 ed       	ldi	r24, 0xD0	; 208
    2492:	8c 0f       	add	r24, r28
    2494:	8a 30       	cpi	r24, 0x0A	; 10
    2496:	c8 f5       	brcc	.+114    	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    2498:	c0 93 cf 02 	sts	0x02CF, r28
	
	data = receiveByte();
    249c:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    24a0:	c8 2f       	mov	r28, r24
	transmitByte(data);
    24a2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x39)
    24a6:	80 ed       	ldi	r24, 0xD0	; 208
    24a8:	8c 0f       	add	r24, r28
    24aa:	8a 30       	cpi	r24, 0x0A	; 10
    24ac:	70 f5       	brcc	.+92     	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    24ae:	c0 93 d0 02 	sts	0x02D0, r28
	
	TX_NEWLINE;
    24b2:	8d e0       	ldi	r24, 0x0D	; 13
    24b4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    24b8:	8a e0       	ldi	r24, 0x0A	; 10
    24ba:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    24be:	81 e9       	ldi	r24, 0x91	; 145
    24c0:	95 e0       	ldi	r25, 0x05	; 5
    24c2:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    24c6:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    24ca:	c8 2f       	mov	r28, r24
	transmitByte(data);
    24cc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	if(data < 0x30 || data > 0x36)
    24d0:	80 ed       	ldi	r24, 0xD0	; 208
    24d2:	8c 0f       	add	r24, r28
    24d4:	87 30       	cpi	r24, 0x07	; 7
    24d6:	c8 f4       	brcc	.+50     	; 0x250a <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    24d8:	cf 70       	andi	r28, 0x0F	; 15
    24da:	c0 93 d1 02 	sts	0x02D1, r28
		 	  
  RTC_updateRegisters(); 
    24de:	0e 94 b4 10 	call	0x2168	; 0x2168 <RTC_updateRegisters>
  data = RTC_writeDate();
    24e2:	0e 94 2e 11 	call	0x225c	; 0x225c <RTC_writeDate>
    24e6:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    24e8:	8d e0       	ldi	r24, 0x0D	; 13
    24ea:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    24ee:	8a e0       	ldi	r24, 0x0A	; 10
    24f0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  if(data == 0)
    24f4:	c1 11       	cpse	r28, r1
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <RTC_updateDate+0x150>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    24f8:	87 e7       	ldi	r24, 0x77	; 119
    24fa:	95 e0       	ldi	r25, 0x05	; 5
    24fc:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
	 return 0;
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	0e c0       	rjmp	.+28     	; 0x2520 <RTC_updateDate+0x16c>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    2504:	82 e6       	ldi	r24, 0x62	; 98
    2506:	95 e0       	ldi	r25, 0x05	; 5
    2508:	08 c0       	rjmp	.+16     	; 0x251a <RTC_updateDate+0x166>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    250a:	8d e0       	ldi	r24, 0x0D	; 13
    250c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2510:	8a e0       	ldi	r24, 0x0A	; 10
    2512:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2516:	82 e5       	ldi	r24, 0x52	; 82
    2518:	95 e0       	ldi	r25, 0x05	; 5
    251a:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  return 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
}  
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    2526:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <RTC_read>
   if(error) return 1;
    252a:	81 11       	cpse	r24, r1
    252c:	61 c0       	rjmp	.+194    	; 0x25f0 <getDateTime_FAT+0xca>

   yr = (YEAR & 0xf0) >> 4;
    252e:	80 91 86 00 	lds	r24, 0x0086
    2532:	68 2f       	mov	r22, r24
    2534:	62 95       	swap	r22
    2536:	6f 70       	andi	r22, 0x0F	; 15
   yr = (yr * 10)+(YEAR & 0x0f);
    2538:	8f 70       	andi	r24, 0x0F	; 15
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	44 96       	adiw	r24, 0x14	; 20
   yr = yr+2000;
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    253e:	30 91 85 00 	lds	r19, 0x0085
    2542:	53 2f       	mov	r21, r19
    2544:	52 95       	swap	r21
    2546:	5f 70       	andi	r21, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    2548:	20 91 84 00 	lds	r18, 0x0084
    254c:	42 2f       	mov	r20, r18
    254e:	42 95       	swap	r20
    2550:	4f 70       	andi	r20, 0x0F	; 15
   if(error) return 1;

   yr = (YEAR & 0xf0) >> 4;
   yr = (yr * 10)+(YEAR & 0x0f);
   yr = yr+2000;
   yr = yr - 1980;
    2552:	7a e0       	ldi	r23, 0x0A	; 10
    2554:	67 9f       	mul	r22, r23
    2556:	80 0d       	add	r24, r0
    2558:	91 1d       	adc	r25, r1
    255a:	11 24       	eor	r1, r1
   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;
    255c:	64 e0       	ldi	r22, 0x04	; 4
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	6a 95       	dec	r22
    2564:	e1 f7       	brne	.-8      	; 0x255e <getDateTime_FAT+0x38>
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);
    2566:	3f 70       	andi	r19, 0x0F	; 15
    2568:	6a e0       	ldi	r22, 0x0A	; 10
    256a:	56 9f       	mul	r21, r22
    256c:	30 0d       	add	r19, r0
    256e:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;
    2570:	83 2b       	or	r24, r19

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);

   dateFAT = (dateFAT << 5) | dt;
    2572:	75 e0       	ldi	r23, 0x05	; 5
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	7a 95       	dec	r23
    257a:	e1 f7       	brne	.-8      	; 0x2574 <getDateTime_FAT+0x4e>
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);
    257c:	2f 70       	andi	r18, 0x0F	; 15
    257e:	7a e0       	ldi	r23, 0x0A	; 10
    2580:	47 9f       	mul	r20, r23
    2582:	20 0d       	add	r18, r0
    2584:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
    2586:	82 2b       	or	r24, r18
    2588:	90 93 8c 00 	sts	0x008C, r25
    258c:	80 93 8b 00 	sts	0x008B, r24


   hr = (HOURS & 0xf0) >> 4;
    2590:	80 91 82 00 	lds	r24, 0x0082
    2594:	98 2f       	mov	r25, r24
    2596:	92 95       	swap	r25
    2598:	9f 70       	andi	r25, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    259a:	30 91 81 00 	lds	r19, 0x0081
    259e:	43 2f       	mov	r20, r19
    25a0:	42 95       	swap	r20
    25a2:	4f 70       	andi	r20, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    25a4:	20 91 80 00 	lds	r18, 0x0080
    25a8:	52 2f       	mov	r21, r18
    25aa:	52 95       	swap	r21
    25ac:	5f 70       	andi	r21, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
    25ae:	2f 70       	andi	r18, 0x0F	; 15
    25b0:	6a e0       	ldi	r22, 0x0A	; 10
    25b2:	56 9f       	mul	r21, r22
    25b4:	20 0d       	add	r18, r0
    25b6:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;


   hr = (HOURS & 0xf0) >> 4;
   hr = (hr * 10)+(HOURS & 0x0f);
    25b8:	8f 70       	andi	r24, 0x0F	; 15
    25ba:	7a e0       	ldi	r23, 0x0A	; 10
    25bc:	97 9f       	mul	r25, r23
    25be:	80 0d       	add	r24, r0
    25c0:	11 24       	eor	r1, r1
   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;
    25c2:	50 e4       	ldi	r21, 0x40	; 64
    25c4:	85 9f       	mul	r24, r21
    25c6:	c0 01       	movw	r24, r0
    25c8:	11 24       	eor	r1, r1
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);
    25ca:	3f 70       	andi	r19, 0x0F	; 15
    25cc:	6a e0       	ldi	r22, 0x0A	; 10
    25ce:	46 9f       	mul	r20, r22
    25d0:	30 0d       	add	r19, r0
    25d2:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;
    25d4:	83 2b       	or	r24, r19

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    25d6:	e5 e0       	ldi	r30, 0x05	; 5
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	ea 95       	dec	r30
    25de:	e1 f7       	brne	.-8      	; 0x25d8 <getDateTime_FAT+0xb2>

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    25e0:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    25e2:	82 2b       	or	r24, r18
    25e4:	90 93 a0 00 	sts	0x00A0, r25
    25e8:	80 93 9f 00 	sts	0x009F, r24

   
   return 0;
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    25f0:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    25f2:	08 95       	ret

000025f4 <SD_sendCommand>:
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	d8 2e       	mov	r13, r24
    2600:	7a 01       	movw	r14, r20
    2602:	8b 01       	movw	r16, r22
    2604:	80 91 ab 02 	lds	r24, 0x02AB
    2608:	88 23       	and	r24, r24
    260a:	b9 f4       	brne	.+46     	; 0x263a <SD_sendCommand+0x46>
    260c:	8d 2d       	mov	r24, r13
    260e:	81 51       	subi	r24, 0x11	; 17
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	60 f0       	brcs	.+24     	; 0x262c <SD_sendCommand+0x38>
    2614:	88 e1       	ldi	r24, 0x18	; 24
    2616:	d8 16       	cp	r13, r24
    2618:	49 f0       	breq	.+18     	; 0x262c <SD_sendCommand+0x38>
    261a:	89 e1       	ldi	r24, 0x19	; 25
    261c:	d8 16       	cp	r13, r24
    261e:	31 f0       	breq	.+12     	; 0x262c <SD_sendCommand+0x38>
    2620:	80 e2       	ldi	r24, 0x20	; 32
    2622:	d8 16       	cp	r13, r24
    2624:	19 f0       	breq	.+6      	; 0x262c <SD_sendCommand+0x38>
    2626:	81 e2       	ldi	r24, 0x21	; 33
    2628:	d8 16       	cp	r13, r24
    262a:	39 f4       	brne	.+14     	; 0x263a <SD_sendCommand+0x46>
    262c:	39 e0       	ldi	r19, 0x09	; 9
    262e:	ee 0c       	add	r14, r14
    2630:	ff 1c       	adc	r15, r15
    2632:	00 1f       	adc	r16, r16
    2634:	11 1f       	adc	r17, r17
    2636:	3a 95       	dec	r19
    2638:	d1 f7       	brne	.-12     	; 0x262e <SD_sendCommand+0x3a>
    263a:	c4 98       	cbi	0x18, 4	; 24
    263c:	8d 2d       	mov	r24, r13
    263e:	80 64       	ori	r24, 0x40	; 64
    2640:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2644:	81 2f       	mov	r24, r17
    2646:	99 27       	eor	r25, r25
    2648:	aa 27       	eor	r26, r26
    264a:	bb 27       	eor	r27, r27
    264c:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2650:	c8 01       	movw	r24, r16
    2652:	aa 27       	eor	r26, r26
    2654:	bb 27       	eor	r27, r27
    2656:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    265a:	bb 27       	eor	r27, r27
    265c:	a1 2f       	mov	r26, r17
    265e:	90 2f       	mov	r25, r16
    2660:	8f 2d       	mov	r24, r15
    2662:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2666:	8e 2d       	mov	r24, r14
    2668:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    266c:	88 e0       	ldi	r24, 0x08	; 8
    266e:	d8 16       	cp	r13, r24
    2670:	11 f4       	brne	.+4      	; 0x2676 <SD_sendCommand+0x82>
    2672:	87 e8       	ldi	r24, 0x87	; 135
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <SD_sendCommand+0x84>
    2676:	85 e9       	ldi	r24, 0x95	; 149
    2678:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    267c:	10 e0       	ldi	r17, 0x00	; 0
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <SD_sendCommand+0x90>
    2680:	11 50       	subi	r17, 0x01	; 1
    2682:	d1 f0       	breq	.+52     	; 0x26b8 <SD_sendCommand+0xc4>
    2684:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    2688:	08 2f       	mov	r16, r24
    268a:	8f 3f       	cpi	r24, 0xFF	; 255
    268c:	c9 f3       	breq	.-14     	; 0x2680 <SD_sendCommand+0x8c>
    268e:	88 23       	and	r24, r24
    2690:	99 f4       	brne	.+38     	; 0x26b8 <SD_sendCommand+0xc4>
    2692:	8a e3       	ldi	r24, 0x3A	; 58
    2694:	d8 16       	cp	r13, r24
    2696:	81 f4       	brne	.+32     	; 0x26b8 <SD_sendCommand+0xc4>
    2698:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    269c:	86 ff       	sbrs	r24, 6
    269e:	04 c0       	rjmp	.+8      	; 0x26a8 <SD_sendCommand+0xb4>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	80 93 ab 02 	sts	0x02AB, r24
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <SD_sendCommand+0xb8>
    26a8:	10 92 ab 02 	sts	0x02AB, r1
    26ac:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    26b0:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    26b4:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    26b8:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    26bc:	c4 9a       	sbi	0x18, 4	; 24
    26be:	80 2f       	mov	r24, r16
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	08 95       	ret

000026cc <SD_erase>:
    26cc:	af 92       	push	r10
    26ce:	bf 92       	push	r11
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	7b 01       	movw	r14, r22
    26de:	8c 01       	movw	r16, r24
    26e0:	59 01       	movw	r10, r18
    26e2:	6a 01       	movw	r12, r20
    26e4:	80 e2       	ldi	r24, 0x20	; 32
    26e6:	b8 01       	movw	r22, r16
    26e8:	a7 01       	movw	r20, r14
    26ea:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    26ee:	88 23       	and	r24, r24
    26f0:	b9 f4       	brne	.+46     	; 0x2720 <SD_erase+0x54>
    26f2:	08 94       	sec
    26f4:	e1 08       	sbc	r14, r1
    26f6:	f1 08       	sbc	r15, r1
    26f8:	01 09       	sbc	r16, r1
    26fa:	11 09       	sbc	r17, r1
    26fc:	ea 0c       	add	r14, r10
    26fe:	fb 1c       	adc	r15, r11
    2700:	0c 1d       	adc	r16, r12
    2702:	1d 1d       	adc	r17, r13
    2704:	81 e2       	ldi	r24, 0x21	; 33
    2706:	b8 01       	movw	r22, r16
    2708:	a7 01       	movw	r20, r14
    270a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    270e:	88 23       	and	r24, r24
    2710:	39 f4       	brne	.+14     	; 0x2720 <SD_erase+0x54>
    2712:	86 e2       	ldi	r24, 0x26	; 38
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	df 90       	pop	r13
    272a:	cf 90       	pop	r12
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	08 95       	ret

00002732 <SD_writeSingleBlock>:
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	ab 01       	movw	r20, r22
    2738:	bc 01       	movw	r22, r24
    273a:	88 e1       	ldi	r24, 0x18	; 24
    273c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    2740:	88 23       	and	r24, r24
    2742:	11 f0       	breq	.+4      	; 0x2748 <SD_writeSingleBlock+0x16>
    2744:	98 2f       	mov	r25, r24
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <SD_writeSingleBlock+0x94>
    2748:	c4 98       	cbi	0x18, 4	; 24
    274a:	8e ef       	ldi	r24, 0xFE	; 254
    274c:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2750:	c0 e0       	ldi	r28, 0x00	; 0
    2752:	d0 e0       	ldi	r29, 0x00	; 0
    2754:	fe 01       	movw	r30, r28
    2756:	eb 55       	subi	r30, 0x5B	; 91
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2760:	21 96       	adiw	r28, 0x01	; 1
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	c0 30       	cpi	r28, 0x00	; 0
    2766:	d8 07       	cpc	r29, r24
    2768:	a9 f7       	brne	.-22     	; 0x2754 <SD_writeSingleBlock+0x22>
    276a:	8f ef       	ldi	r24, 0xFF	; 255
    276c:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2770:	8f ef       	ldi	r24, 0xFF	; 255
    2772:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2776:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    277a:	98 2f       	mov	r25, r24
    277c:	8f 71       	andi	r24, 0x1F	; 31
    277e:	85 30       	cpi	r24, 0x05	; 5
    2780:	41 f0       	breq	.+16     	; 0x2792 <SD_writeSingleBlock+0x60>
    2782:	c4 9a       	sbi	0x18, 4	; 24
    2784:	20 c0       	rjmp	.+64     	; 0x27c6 <SD_writeSingleBlock+0x94>
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	cf 3f       	cpi	r28, 0xFF	; 255
    278a:	d8 07       	cpc	r29, r24
    278c:	91 f0       	breq	.+36     	; 0x27b2 <SD_writeSingleBlock+0x80>
    278e:	21 96       	adiw	r28, 0x01	; 1
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <SD_writeSingleBlock+0x64>
    2792:	c0 e0       	ldi	r28, 0x00	; 0
    2794:	d0 e0       	ldi	r29, 0x00	; 0
    2796:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    279a:	88 23       	and	r24, r24
    279c:	a1 f3       	breq	.-24     	; 0x2786 <SD_writeSingleBlock+0x54>
    279e:	c4 9a       	sbi	0x18, 4	; 24
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    27a6:	c4 98       	cbi	0x18, 4	; 24
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <SD_writeSingleBlock+0x88>
    27aa:	8f ef       	ldi	r24, 0xFF	; 255
    27ac:	cf 3f       	cpi	r28, 0xFF	; 255
    27ae:	d8 07       	cpc	r29, r24
    27b0:	19 f4       	brne	.+6      	; 0x27b8 <SD_writeSingleBlock+0x86>
    27b2:	c4 9a       	sbi	0x18, 4	; 24
    27b4:	91 e0       	ldi	r25, 0x01	; 1
    27b6:	07 c0       	rjmp	.+14     	; 0x27c6 <SD_writeSingleBlock+0x94>
    27b8:	21 96       	adiw	r28, 0x01	; 1
    27ba:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    27be:	88 23       	and	r24, r24
    27c0:	a1 f3       	breq	.-24     	; 0x27aa <SD_writeSingleBlock+0x78>
    27c2:	c4 9a       	sbi	0x18, 4	; 24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	89 2f       	mov	r24, r25
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <SD_readSingleBlock>:
    27ce:	1f 93       	push	r17
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	ab 01       	movw	r20, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	81 e1       	ldi	r24, 0x11	; 17
    27da:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    27de:	18 2f       	mov	r17, r24
    27e0:	88 23       	and	r24, r24
    27e2:	09 f5       	brne	.+66     	; 0x2826 <SD_readSingleBlock+0x58>
    27e4:	c4 98       	cbi	0x18, 4	; 24
    27e6:	c0 e0       	ldi	r28, 0x00	; 0
    27e8:	d0 e0       	ldi	r29, 0x00	; 0
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <SD_readSingleBlock+0x28>
    27ec:	21 97       	sbiw	r28, 0x01	; 1
    27ee:	19 f4       	brne	.+6      	; 0x27f6 <SD_readSingleBlock+0x28>
    27f0:	c4 9a       	sbi	0x18, 4	; 24
    27f2:	11 e0       	ldi	r17, 0x01	; 1
    27f4:	18 c0       	rjmp	.+48     	; 0x2826 <SD_readSingleBlock+0x58>
    27f6:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    27fa:	8e 3f       	cpi	r24, 0xFE	; 254
    27fc:	b9 f7       	brne	.-18     	; 0x27ec <SD_readSingleBlock+0x1e>
    27fe:	c0 e0       	ldi	r28, 0x00	; 0
    2800:	d0 e0       	ldi	r29, 0x00	; 0
    2802:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    2806:	fe 01       	movw	r30, r28
    2808:	eb 55       	subi	r30, 0x5B	; 91
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 83       	st	Z, r24
    280e:	21 96       	adiw	r28, 0x01	; 1
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	c0 30       	cpi	r28, 0x00	; 0
    2814:	d8 07       	cpc	r29, r24
    2816:	a9 f7       	brne	.-22     	; 0x2802 <SD_readSingleBlock+0x34>
    2818:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    281c:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    2820:	0e 94 a7 14 	call	0x294e	; 0x294e <SPI_receive>
    2824:	c4 9a       	sbi	0x18, 4	; 24
    2826:	81 2f       	mov	r24, r17
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	08 95       	ret

00002830 <SD_init>:
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	10 e0       	ldi	r17, 0x00	; 0
    2838:	8f ef       	ldi	r24, 0xFF	; 255
    283a:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    283e:	1f 5f       	subi	r17, 0xFF	; 255
    2840:	1a 30       	cpi	r17, 0x0A	; 10
    2842:	d1 f7       	brne	.-12     	; 0x2838 <SD_init+0x8>
    2844:	c4 98       	cbi	0x18, 4	; 24
    2846:	c0 e0       	ldi	r28, 0x00	; 0
    2848:	d0 e0       	ldi	r29, 0x00	; 0
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    2858:	21 96       	adiw	r28, 0x01	; 1
    285a:	c1 32       	cpi	r28, 0x21	; 33
    285c:	d1 05       	cpc	r29, r1
    285e:	11 f4       	brne	.+4      	; 0x2864 <SD_init+0x34>
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	68 c0       	rjmp	.+208    	; 0x2934 <SD_init+0x104>
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	89 f7       	brne	.-30     	; 0x284a <SD_init+0x1a>
    2868:	c4 9a       	sbi	0x18, 4	; 24
    286a:	8f ef       	ldi	r24, 0xFF	; 255
    286c:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2870:	8f ef       	ldi	r24, 0xFF	; 255
    2872:	0e 94 a2 14 	call	0x2944	; 0x2944 <SPI_transmit>
    2876:	c0 e0       	ldi	r28, 0x00	; 0
    2878:	d0 e0       	ldi	r29, 0x00	; 0
    287a:	88 e0       	ldi	r24, 0x08	; 8
    287c:	4a ea       	ldi	r20, 0xAA	; 170
    287e:	51 e0       	ldi	r21, 0x01	; 1
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    2888:	21 96       	adiw	r28, 0x01	; 1
    288a:	cf 3f       	cpi	r28, 0xFF	; 255
    288c:	d1 05       	cpc	r29, r1
    288e:	59 f4       	brne	.+22     	; 0x28a6 <SD_init+0x76>
    2890:	8d e0       	ldi	r24, 0x0D	; 13
    2892:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2896:	8a e0       	ldi	r24, 0x0A	; 10
    2898:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 b6 02 	sts	0x02B6, r24
    28a2:	11 e0       	ldi	r17, 0x01	; 1
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <SD_init+0x7c>
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	41 f7       	brne	.-48     	; 0x287a <SD_init+0x4a>
    28aa:	12 e0       	ldi	r17, 0x02	; 2
    28ac:	c0 e0       	ldi	r28, 0x00	; 0
    28ae:	d0 e0       	ldi	r29, 0x00	; 0
    28b0:	87 e3       	ldi	r24, 0x37	; 55
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	70 e0       	ldi	r23, 0x00	; 0
    28ba:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    28be:	89 e2       	ldi	r24, 0x29	; 41
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	70 e4       	ldi	r23, 0x40	; 64
    28c8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    28cc:	21 96       	adiw	r28, 0x01	; 1
    28ce:	cf 3f       	cpi	r28, 0xFF	; 255
    28d0:	d1 05       	cpc	r29, r1
    28d2:	41 f4       	brne	.+16     	; 0x28e4 <SD_init+0xb4>
    28d4:	8d e0       	ldi	r24, 0x0D	; 13
    28d6:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    28da:	8a e0       	ldi	r24, 0x0A	; 10
    28dc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	28 c0       	rjmp	.+80     	; 0x2934 <SD_init+0x104>
    28e4:	88 23       	and	r24, r24
    28e6:	21 f7       	brne	.-56     	; 0x28b0 <SD_init+0x80>
    28e8:	10 92 ab 02 	sts	0x02AB, r1
    28ec:	12 30       	cpi	r17, 0x02	; 2
    28ee:	11 f5       	brne	.+68     	; 0x2934 <SD_init+0x104>
    28f0:	c0 e0       	ldi	r28, 0x00	; 0
    28f2:	d0 e0       	ldi	r29, 0x00	; 0
    28f4:	8a e3       	ldi	r24, 0x3A	; 58
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <SD_sendCommand>
    2902:	21 96       	adiw	r28, 0x01	; 1
    2904:	cf 3f       	cpi	r28, 0xFF	; 255
    2906:	d1 05       	cpc	r29, r1
    2908:	49 f4       	brne	.+18     	; 0x291c <SD_init+0xec>
    290a:	8d e0       	ldi	r24, 0x0D	; 13
    290c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2910:	8a e0       	ldi	r24, 0x0A	; 10
    2912:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2916:	10 92 b6 02 	sts	0x02B6, r1
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <SD_init+0xf0>
    291c:	88 23       	and	r24, r24
    291e:	51 f7       	brne	.-44     	; 0x28f4 <SD_init+0xc4>
    2920:	80 91 ab 02 	lds	r24, 0x02AB
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	11 f4       	brne	.+4      	; 0x292c <SD_init+0xfc>
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	01 c0       	rjmp	.+2      	; 0x292e <SD_init+0xfe>
    292c:	83 e0       	ldi	r24, 0x03	; 3
    292e:	80 93 b6 02 	sts	0x02B6, r24
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	08 95       	ret

0000293c <spi_init>:
    293c:	82 e5       	ldi	r24, 0x52	; 82
    293e:	8d b9       	out	0x0d, r24	; 13
    2940:	1e b8       	out	0x0e, r1	; 14
    2942:	08 95       	ret

00002944 <SPI_transmit>:
    2944:	8f b9       	out	0x0f, r24	; 15
    2946:	77 9b       	sbis	0x0e, 7	; 14
    2948:	fe cf       	rjmp	.-4      	; 0x2946 <SPI_transmit+0x2>
    294a:	8f b1       	in	r24, 0x0f	; 15
    294c:	08 95       	ret

0000294e <SPI_receive>:
    294e:	8f ef       	ldi	r24, 0xFF	; 255
    2950:	8f b9       	out	0x0f, r24	; 15
    2952:	77 9b       	sbis	0x0e, 7	; 14
    2954:	fe cf       	rjmp	.-4      	; 0x2952 <SPI_receive+0x4>
    2956:	8f b1       	in	r24, 0x0f	; 15
    2958:	08 95       	ret

0000295a <uart0_init>:
    295a:	1a b8       	out	0x0a, r1	; 10
    295c:	1b b8       	out	0x0b, r1	; 11
    295e:	86 e8       	ldi	r24, 0x86	; 134
    2960:	80 bd       	out	0x20, r24	; 32
    2962:	89 e1       	ldi	r24, 0x19	; 25
    2964:	89 b9       	out	0x09, r24	; 9
    2966:	10 bc       	out	0x20, r1	; 32
    2968:	88 e1       	ldi	r24, 0x18	; 24
    296a:	8a b9       	out	0x0a, r24	; 10
    296c:	08 95       	ret

0000296e <receiveByte>:
    296e:	5f 9b       	sbis	0x0b, 7	; 11
    2970:	fe cf       	rjmp	.-4      	; 0x296e <receiveByte>
    2972:	8b b1       	in	r24, 0x0b	; 11
    2974:	8c b1       	in	r24, 0x0c	; 12
    2976:	08 95       	ret

00002978 <transmitByte>:
    2978:	5d 9b       	sbis	0x0b, 5	; 11
    297a:	fe cf       	rjmp	.-4      	; 0x2978 <transmitByte>
    297c:	8c b9       	out	0x0c, r24	; 12
    297e:	08 95       	ret

00002980 <transmitString_F>:
    2980:	fc 01       	movw	r30, r24
    2982:	04 c0       	rjmp	.+8      	; 0x298c <transmitString_F+0xc>
    2984:	5d 9b       	sbis	0x0b, 5	; 11
    2986:	fe cf       	rjmp	.-4      	; 0x2984 <transmitString_F+0x4>
    2988:	31 96       	adiw	r30, 0x01	; 1
    298a:	8c b9       	out	0x0c, r24	; 12
    298c:	84 91       	lpm	r24, Z
    298e:	88 23       	and	r24, r24
    2990:	c9 f7       	brne	.-14     	; 0x2984 <transmitString_F+0x4>
    2992:	08 95       	ret

00002994 <transmitString>:
    2994:	fc 01       	movw	r30, r24
    2996:	04 c0       	rjmp	.+8      	; 0x29a0 <transmitString+0xc>
    2998:	5d 9b       	sbis	0x0b, 5	; 11
    299a:	fe cf       	rjmp	.-4      	; 0x2998 <transmitString+0x4>
    299c:	31 96       	adiw	r30, 0x01	; 1
    299e:	8c b9       	out	0x0c, r24	; 12
    29a0:	80 81       	ld	r24, Z
    29a2:	88 23       	and	r24, r24
    29a4:	c9 f7       	brne	.-14     	; 0x2998 <transmitString+0x4>
    29a6:	08 95       	ret

000029a8 <transmitHex>:
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	2b 97       	sbiw	r28, 0x0b	; 11
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	11 f4       	brne	.+4      	; 0x29c4 <transmitHex+0x1c>
    29c0:	94 e0       	ldi	r25, 0x04	; 4
    29c2:	05 c0       	rjmp	.+10     	; 0x29ce <transmitHex+0x26>
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	11 f4       	brne	.+4      	; 0x29cc <transmitHex+0x24>
    29c8:	98 e0       	ldi	r25, 0x08	; 8
    29ca:	01 c0       	rjmp	.+2      	; 0x29ce <transmitHex+0x26>
    29cc:	92 e0       	ldi	r25, 0x02	; 2
    29ce:	de 01       	movw	r26, r28
    29d0:	11 96       	adiw	r26, 0x01	; 1
    29d2:	e4 e7       	ldi	r30, 0x74	; 116
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	8b e0       	ldi	r24, 0x0B	; 11
    29d8:	01 90       	ld	r0, Z+
    29da:	0d 92       	st	X+, r0
    29dc:	81 50       	subi	r24, 0x01	; 1
    29de:	e1 f7       	brne	.-8      	; 0x29d8 <transmitHex+0x30>
    29e0:	9e 01       	movw	r18, r28
    29e2:	2e 5f       	subi	r18, 0xFE	; 254
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	84 2f       	mov	r24, r20
    29e8:	8f 70       	andi	r24, 0x0F	; 15
    29ea:	e9 2f       	mov	r30, r25
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	8a 30       	cpi	r24, 0x0A	; 10
    29f0:	20 f4       	brcc	.+8      	; 0x29fa <transmitHex+0x52>
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    29f6:	80 5d       	subi	r24, 0xD0	; 208
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <transmitHex+0x58>
    29fa:	e2 0f       	add	r30, r18
    29fc:	f3 1f       	adc	r31, r19
    29fe:	89 5c       	subi	r24, 0xC9	; 201
    2a00:	80 83       	st	Z, r24
    2a02:	91 50       	subi	r25, 0x01	; 1
    2a04:	41 f0       	breq	.+16     	; 0x2a16 <transmitHex+0x6e>
    2a06:	84 e0       	ldi	r24, 0x04	; 4
    2a08:	76 95       	lsr	r23
    2a0a:	67 95       	ror	r22
    2a0c:	57 95       	ror	r21
    2a0e:	47 95       	ror	r20
    2a10:	8a 95       	dec	r24
    2a12:	d1 f7       	brne	.-12     	; 0x2a08 <transmitHex+0x60>
    2a14:	e8 cf       	rjmp	.-48     	; 0x29e6 <transmitHex+0x3e>
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	0e 94 ca 14 	call	0x2994	; 0x2994 <transmitString>
    2a1e:	2b 96       	adiw	r28, 0x0b	; 11
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <main>:
 //all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	2d 97       	sbiw	r28, 0x0d	; 13
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a44:	2f ef       	ldi	r18, 0xFF	; 255
    2a46:	81 ee       	ldi	r24, 0xE1	; 225
    2a48:	94 e0       	ldi	r25, 0x04	; 4
    2a4a:	21 50       	subi	r18, 0x01	; 1
    2a4c:	80 40       	sbci	r24, 0x00	; 0
    2a4e:	90 40       	sbci	r25, 0x00	; 0
    2a50:	e1 f7       	brne	.-8      	; 0x2a4a <main+0x1a>
    2a52:	00 c0       	rjmp	.+0      	; 0x2a54 <main+0x24>
    2a54:	00 00       	nop
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    2a56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    2a5a:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    2a5c:	8d e0       	ldi	r24, 0x0D	; 13
    2a5e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2a62:	8a e0       	ldi	r24, 0x0A	; 10
    2a64:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
TX_NEWLINE;
    2a68:	8d e0       	ldi	r24, 0x0D	; 13
    2a6a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2a6e:	8a e0       	ldi	r24, 0x0A	; 10
    2a70:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F (PSTR("****************************************************"));
    2a74:	82 eb       	ldi	r24, 0xB2	; 178
    2a76:	93 e0       	ldi	r25, 0x03	; 3
    2a78:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2a7c:	8d e0       	ldi	r24, 0x0D	; 13
    2a7e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2a82:	8a e0       	ldi	r24, 0x0A	; 10
    2a84:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    2a88:	8a e8       	ldi	r24, 0x8A	; 138
    2a8a:	93 e0       	ldi	r25, 0x03	; 3
    2a8c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2a90:	8d e0       	ldi	r24, 0x0D	; 13
    2a92:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2a96:	8a e0       	ldi	r24, 0x0A	; 10
    2a98:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F (PSTR("****************************************************"));
    2a9c:	85 e5       	ldi	r24, 0x55	; 85
    2a9e:	93 e0       	ldi	r25, 0x03	; 3
    2aa0:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2aa4:	8d e0       	ldi	r24, 0x0D	; 13
    2aa6:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2aaa:	8a e0       	ldi	r24, 0x0A	; 10
    2aac:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>

cardType = 0;
    2ab0:	10 92 b6 02 	sts	0x02B6, r1
    2ab4:	0a e0       	ldi	r16, 0x0A	; 10
    2ab6:	10 e0       	ldi	r17, 0x00	; 0

for (i=0; i<10; i++)
{
  error = SD_init();
    2ab8:	0e 94 18 14 	call	0x2830	; 0x2830 <SD_init>
  if(!error) break;
    2abc:	88 23       	and	r24, r24
    2abe:	a1 f0       	breq	.+40     	; 0x2ae8 <main+0xb8>
    2ac0:	01 50       	subi	r16, 0x01	; 1
    2ac2:	11 09       	sbc	r17, r1
transmitString_F (PSTR("****************************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    2ac4:	01 15       	cp	r16, r1
    2ac6:	11 05       	cpc	r17, r1
    2ac8:	b9 f7       	brne	.-18     	; 0x2ab8 <main+0x88>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	29 f4       	brne	.+10     	; 0x2ad8 <main+0xa8>
    2ace:	8e e3       	ldi	r24, 0x3E	; 62
    2ad0:	93 e0       	ldi	r25, 0x03	; 3
    2ad2:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <main+0xac>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    2ad8:	82 30       	cpi	r24, 0x02	; 2
    2ada:	09 f0       	breq	.+2      	; 0x2ade <main+0xae>
    2adc:	ff cf       	rjmp	.-2      	; 0x2adc <main+0xac>
    2ade:	81 e2       	ldi	r24, 0x21	; 33
    2ae0:	93 e0       	ldi	r25, 0x03	; 3
    2ae2:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    2ae6:	fa cf       	rjmp	.-12     	; 0x2adc <main+0xac>

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    2ae8:	80 91 b6 02 	lds	r24, 0x02B6
    2aec:	82 30       	cpi	r24, 0x02	; 2
    2aee:	39 f0       	breq	.+14     	; 0x2afe <main+0xce>
    2af0:	83 30       	cpi	r24, 0x03	; 3
    2af2:	41 f0       	breq	.+16     	; 0x2b04 <main+0xd4>
    2af4:	81 30       	cpi	r24, 0x01	; 1
    2af6:	49 f4       	brne	.+18     	; 0x2b0a <main+0xda>
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    2af8:	86 ef       	ldi	r24, 0xF6	; 246
    2afa:	92 e0       	ldi	r25, 0x02	; 2
    2afc:	08 c0       	rjmp	.+16     	; 0x2b0e <main+0xde>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    2afe:	89 ed       	ldi	r24, 0xD9	; 217
    2b00:	92 e0       	ldi	r25, 0x02	; 2
    2b02:	05 c0       	rjmp	.+10     	; 0x2b0e <main+0xde>
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    2b04:	8e ea       	ldi	r24, 0xAE	; 174
    2b06:	92 e0       	ldi	r25, 0x02	; 2
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <main+0xde>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    2b0a:	84 e9       	ldi	r24, 0x94	; 148
    2b0c:	92 e0       	ldi	r25, 0x02	; 2
    2b0e:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    2b12:	80 e5       	ldi	r24, 0x50	; 80
    2b14:	8d b9       	out	0x0d, r24	; 13
    2b16:	70 9a       	sbi	0x0e, 0	; 14
    2b18:	8f e9       	ldi	r24, 0x9F	; 159
    2b1a:	9f e0       	ldi	r25, 0x0F	; 15
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <main+0xec>
    2b20:	00 c0       	rjmp	.+0      	; 0x2b22 <main+0xf2>
    2b22:	00 00       	nop
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    2b24:	0e 94 34 07 	call	0xe68	; 0xe68 <getBootSectorData>
if(error) 	
    2b28:	88 23       	and	r24, r24
    2b2a:	61 f0       	breq	.+24     	; 0x2b44 <main+0x114>
{
  TX_NEWLINE;
    2b2c:	8d e0       	ldi	r24, 0x0D	; 13
    2b2e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2b32:	8a e0       	ldi	r24, 0x0A	; 10
    2b34:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    2b38:	83 e8       	ldi	r24, 0x83	; 131
    2b3a:	92 e0       	ldi	r25, 0x02	; 2
    2b3c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
  FAT32_active = 0;
    2b40:	d1 2c       	mov	r13, r1
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <main+0x118>

SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay


FAT32_active = 1;
    2b44:	dd 24       	eor	r13, r13
    2b46:	d3 94       	inc	r13
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    2b48:	81 2c       	mov	r8, r1
    2b4a:	91 2c       	mov	r9, r1
    2b4c:	54 01       	movw	r10, r8
    2b4e:	83 94       	inc	r8
    2b50:	1e 01       	movw	r2, r28
    2b52:	9e e0       	ldi	r25, 0x0E	; 14
    2b54:	29 0e       	add	r2, r25
    2b56:	31 1c       	adc	r3, r1
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    2b58:	98 ee       	ldi	r25, 0xE8	; 232
    2b5a:	e9 2e       	mov	r14, r25
    2b5c:	93 e0       	ldi	r25, 0x03	; 3
    2b5e:	f9 2e       	mov	r15, r25
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    2b60:	8d e0       	ldi	r24, 0x0D	; 13
    2b62:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2b66:	8a e0       	ldi	r24, 0x0A	; 10
    2b68:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    2b6c:	82 e7       	ldi	r24, 0x72	; 114
    2b6e:	92 e0       	ldi	r25, 0x02	; 2
    2b70:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2b74:	8d e0       	ldi	r24, 0x0D	; 13
    2b76:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2b7a:	8a e0       	ldi	r24, 0x0A	; 10
    2b7c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
option = receiveByte();
    2b80:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
TX_NEWLINE;
    2b84:	8d e0       	ldi	r24, 0x0D	; 13
    2b86:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2b8a:	8a e0       	ldi	r24, 0x0A	; 10
    2b8c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> 0: Erase Blocks "));
    2b90:	8f e5       	ldi	r24, 0x5F	; 95
    2b92:	92 e0       	ldi	r25, 0x02	; 2
    2b94:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2b98:	8d e0       	ldi	r24, 0x0D	; 13
    2b9a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2b9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ba0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> 1: Write single Block          2: Read single Block"));
    2ba4:	89 e2       	ldi	r24, 0x29	; 41
    2ba6:	92 e0       	ldi	r25, 0x02	; 2
    2ba8:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
#ifndef FAT_TESTING_ONLY
TX_NEWLINE;
transmitString_F(PSTR("> 3: Write multiple Blocks       4: Read multiple Blocks"));
#endif

TX_NEWLINE;
    2bac:	8d e0       	ldi	r24, 0x0D	; 13
    2bae:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2bb2:	8a e0       	ldi	r24, 0x0A	; 10
    2bb4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> 5: Get file list               6: Read File"));
    2bb8:	8b ef       	ldi	r24, 0xFB	; 251
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2bc0:	8d e0       	ldi	r24, 0x0D	; 13
    2bc2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2bc6:	8a e0       	ldi	r24, 0x0A	; 10
    2bc8:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> 7: Write File                  8: Delete File"));
    2bcc:	8b ec       	ldi	r24, 0xCB	; 203
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2bd4:	8d e0       	ldi	r24, 0x0D	; 13
    2bd6:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2bda:	8a e0       	ldi	r24, 0x0A	; 10
    2bdc:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> 9: Read SD Memory Capacity     a: Show Date & Time"));
    2be0:	86 e9       	ldi	r24, 0x96	; 150
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>

TX_NEWLINE;
    2be8:	8d e0       	ldi	r24, 0x0D	; 13
    2bea:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2bee:	8a e0       	ldi	r24, 0x0A	; 10
    2bf0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> b: Update Date                 c: Update Time"));
    2bf4:	86 e6       	ldi	r24, 0x66	; 102
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
TX_NEWLINE;
    2bfc:	8d e0       	ldi	r24, 0x0D	; 13
    2bfe:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c02:	8a e0       	ldi	r24, 0x0A	; 10
    2c04:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>

TX_NEWLINE;
    2c08:	8d e0       	ldi	r24, 0x0D	; 13
    2c0a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c0e:	8a e0       	ldi	r24, 0x0A	; 10
    2c10:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
TX_NEWLINE;
    2c14:	8d e0       	ldi	r24, 0x0D	; 13
    2c16:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c1a:	8a e0       	ldi	r24, 0x0A	; 10
    2c1c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9/a/b/c): "));
    2c20:	88 e4       	ldi	r24, 0x48	; 72
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card data may not be detected by PC/Laptop again,
as it may disturb the FAT format. In such a case you will need to format the card again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    2c28:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2c2c:	18 2f       	mov	r17, r24
transmitByte(option);
    2c2e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    2c32:	8b ec       	ldi	r24, 0xCB	; 203
    2c34:	81 0f       	add	r24, r17
    2c36:	85 30       	cpi	r24, 0x05	; 5
    2c38:	98 f4       	brcc	.+38     	; 0x2c60 <main+0x230>
{
  if(!FAT32_active) 
    2c3a:	d1 10       	cpse	r13, r1
    2c3c:	11 c0       	rjmp	.+34     	; 0x2c60 <main+0x230>
  {
    TX_NEWLINE;
    2c3e:	8d e0       	ldi	r24, 0x0D	; 13
    2c40:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c44:	8a e0       	ldi	r24, 0x0A	; 10
    2c46:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    TX_NEWLINE;
    2c4a:	8d e0       	ldi	r24, 0x0D	; 13
    2c4c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c50:	8a e0       	ldi	r24, 0x0A	; 10
    2c52:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    2c56:	80 e3       	ldi	r24, 0x30	; 48
    2c58:	91 e0       	ldi	r25, 0x01	; 1
    2c5a:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
	continue;
    2c5e:	80 cf       	rjmp	.-256    	; 0x2b60 <main+0x130>
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    2c60:	80 ed       	ldi	r24, 0xD0	; 208
    2c62:	81 0f       	add	r24, r17
    2c64:	85 30       	cpi	r24, 0x05	; 5
    2c66:	08 f0       	brcs	.+2      	; 0x2c6a <main+0x23a>
    2c68:	8f c0       	rjmp	.+286    	; 0x2d88 <main+0x358>
{
TX_NEWLINE;
    2c6a:	8d e0       	ldi	r24, 0x0D	; 13
    2c6c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c70:	8a e0       	ldi	r24, 0x0A	; 10
    2c72:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
TX_NEWLINE;
    2c76:	8d e0       	ldi	r24, 0x0D	; 13
    2c78:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2c7c:	8a e0       	ldi	r24, 0x0A	; 10
    2c7e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    2c82:	8c e0       	ldi	r24, 0x0C	; 12
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
data = receiveByte(); transmitByte(data);
    2c8a:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2c8e:	08 2f       	mov	r16, r24
    2c90:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    2c94:	30 2f       	mov	r19, r16
    2c96:	3f 70       	andi	r19, 0x0F	; 15
    2c98:	3e 9d       	mul	r19, r14
    2c9a:	c0 01       	movw	r24, r0
    2c9c:	3f 9d       	mul	r19, r15
    2c9e:	90 0d       	add	r25, r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	aa 27       	eor	r26, r26
    2ca4:	97 fd       	sbrc	r25, 7
    2ca6:	a0 95       	com	r26
    2ca8:	ba 2f       	mov	r27, r26
    2caa:	80 93 a1 00 	sts	0x00A1, r24
    2cae:	90 93 a2 00 	sts	0x00A2, r25
    2cb2:	a0 93 a3 00 	sts	0x00A3, r26
    2cb6:	b0 93 a4 00 	sts	0x00A4, r27
data = receiveByte(); transmitByte(data);
    2cba:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2cbe:	08 2f       	mov	r16, r24
    2cc0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
startBlock += (data & 0x0f) * 100;
    2cc4:	40 90 a1 00 	lds	r4, 0x00A1
    2cc8:	50 90 a2 00 	lds	r5, 0x00A2
    2ccc:	60 90 a3 00 	lds	r6, 0x00A3
    2cd0:	70 90 a4 00 	lds	r7, 0x00A4
    2cd4:	40 2f       	mov	r20, r16
    2cd6:	4f 70       	andi	r20, 0x0F	; 15
    2cd8:	24 e6       	ldi	r18, 0x64	; 100
    2cda:	42 9f       	mul	r20, r18
    2cdc:	a0 01       	movw	r20, r0
    2cde:	11 24       	eor	r1, r1
    2ce0:	66 27       	eor	r22, r22
    2ce2:	57 fd       	sbrc	r21, 7
    2ce4:	60 95       	com	r22
    2ce6:	76 2f       	mov	r23, r22
    2ce8:	44 0d       	add	r20, r4
    2cea:	55 1d       	adc	r21, r5
    2cec:	66 1d       	adc	r22, r6
    2cee:	77 1d       	adc	r23, r7
    2cf0:	40 93 a1 00 	sts	0x00A1, r20
    2cf4:	50 93 a2 00 	sts	0x00A2, r21
    2cf8:	60 93 a3 00 	sts	0x00A3, r22
    2cfc:	70 93 a4 00 	sts	0x00A4, r23
data = receiveByte(); transmitByte(data);
    2d00:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2d04:	08 2f       	mov	r16, r24
    2d06:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
startBlock += (data & 0x0f) * 10;
    2d0a:	40 90 a1 00 	lds	r4, 0x00A1
    2d0e:	50 90 a2 00 	lds	r5, 0x00A2
    2d12:	60 90 a3 00 	lds	r6, 0x00A3
    2d16:	70 90 a4 00 	lds	r7, 0x00A4
    2d1a:	40 2f       	mov	r20, r16
    2d1c:	4f 70       	andi	r20, 0x0F	; 15
    2d1e:	8a e0       	ldi	r24, 0x0A	; 10
    2d20:	48 9f       	mul	r20, r24
    2d22:	a0 01       	movw	r20, r0
    2d24:	11 24       	eor	r1, r1
    2d26:	66 27       	eor	r22, r22
    2d28:	57 fd       	sbrc	r21, 7
    2d2a:	60 95       	com	r22
    2d2c:	76 2f       	mov	r23, r22
    2d2e:	44 0d       	add	r20, r4
    2d30:	55 1d       	adc	r21, r5
    2d32:	66 1d       	adc	r22, r6
    2d34:	77 1d       	adc	r23, r7
    2d36:	40 93 a1 00 	sts	0x00A1, r20
    2d3a:	50 93 a2 00 	sts	0x00A2, r21
    2d3e:	60 93 a3 00 	sts	0x00A3, r22
    2d42:	70 93 a4 00 	sts	0x00A4, r23
data = receiveByte(); transmitByte(data);
    2d46:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2d4a:	08 2f       	mov	r16, r24
    2d4c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
startBlock += (data & 0x0f);
    2d50:	40 91 a1 00 	lds	r20, 0x00A1
    2d54:	50 91 a2 00 	lds	r21, 0x00A2
    2d58:	60 91 a3 00 	lds	r22, 0x00A3
    2d5c:	70 91 a4 00 	lds	r23, 0x00A4
    2d60:	80 2f       	mov	r24, r16
    2d62:	8f 70       	andi	r24, 0x0F	; 15
    2d64:	48 0f       	add	r20, r24
    2d66:	51 1d       	adc	r21, r1
    2d68:	61 1d       	adc	r22, r1
    2d6a:	71 1d       	adc	r23, r1
    2d6c:	40 93 a1 00 	sts	0x00A1, r20
    2d70:	50 93 a2 00 	sts	0x00A2, r21
    2d74:	60 93 a3 00 	sts	0x00A3, r22
    2d78:	70 93 a4 00 	sts	0x00A4, r23
TX_NEWLINE;
    2d7c:	8d e0       	ldi	r24, 0x0D	; 13
    2d7e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2d82:	8a e0       	ldi	r24, 0x0A	; 10
    2d84:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
}

totalBlocks = 1;
    2d88:	80 92 ac 02 	sts	0x02AC, r8
    2d8c:	90 92 ad 02 	sts	0x02AD, r9
    2d90:	a0 92 ae 02 	sts	0x02AE, r10
    2d94:	b0 92 af 02 	sts	0x02AF, r11
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2d98:	19 33       	cpi	r17, 0x39	; 57
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <main+0x36e>
    2d9c:	43 c1       	rjmp	.+646    	; 0x3024 <main+0x5f4>
    2d9e:	70 f5       	brcc	.+92     	; 0x2dfc <main+0x3cc>
    2da0:	12 33       	cpi	r17, 0x32	; 50
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <main+0x376>
    2da4:	a9 c0       	rjmp	.+338    	; 0x2ef8 <main+0x4c8>
    2da6:	90 f4       	brcc	.+36     	; 0x2dcc <main+0x39c>
    2da8:	10 33       	cpi	r17, 0x30	; 48
    2daa:	e9 f1       	breq	.+122    	; 0x2e26 <main+0x3f6>
    2dac:	11 33       	cpi	r17, 0x31	; 49
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <main+0x382>
    2db0:	47 c1       	rjmp	.+654    	; 0x3040 <main+0x610>
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
          break;

case '1': TX_NEWLINE;
    2db2:	8d e0       	ldi	r24, 0x0D	; 13
    2db4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2db8:	8a e0       	ldi	r24, 0x0A	; 10
    2dba:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    2dbe:	8b ed       	ldi	r24, 0xDB	; 219
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
          i=0;
    2dc6:	61 2c       	mov	r6, r1
    2dc8:	71 2c       	mov	r7, r1
    2dca:	5f c0       	rjmp	.+190    	; 0x2e8a <main+0x45a>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2dcc:	15 33       	cpi	r17, 0x35	; 53
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <main+0x3a2>
    2dd0:	ca c0       	rjmp	.+404    	; 0x2f66 <main+0x536>
    2dd2:	08 f4       	brcc	.+2      	; 0x2dd6 <main+0x3a6>
    2dd4:	35 c1       	rjmp	.+618    	; 0x3040 <main+0x610>
  		  findFiles(GET_LIST,0);
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    2dd6:	8d e0       	ldi	r24, 0x0D	; 13
    2dd8:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2ddc:	8a e0       	ldi	r24, 0x0A	; 10
    2dde:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
		  TX_NEWLINE;
    2de2:	8d e0       	ldi	r24, 0x0D	; 13
    2de4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2de8:	8a e0       	ldi	r24, 0x0A	; 10
    2dea:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    2dee:	89 e8       	ldi	r24, 0x89	; 137
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    2df6:	fe 01       	movw	r30, r28
    2df8:	31 96       	adiw	r30, 0x01	; 1
    2dfa:	c1 c0       	rjmp	.+386    	; 0x2f7e <main+0x54e>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2dfc:	13 34       	cpi	r17, 0x43	; 67
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <main+0x3d2>
    2e00:	1c c1       	rjmp	.+568    	; 0x303a <main+0x60a>
    2e02:	38 f4       	brcc	.+14     	; 0x2e12 <main+0x3e2>
    2e04:	11 34       	cpi	r17, 0x41	; 65
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <main+0x3da>
    2e08:	10 c1       	rjmp	.+544    	; 0x302a <main+0x5fa>
    2e0a:	12 34       	cpi	r17, 0x42	; 66
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <main+0x3e0>
    2e0e:	12 c1       	rjmp	.+548    	; 0x3034 <main+0x604>
    2e10:	17 c1       	rjmp	.+558    	; 0x3040 <main+0x610>
    2e12:	12 36       	cpi	r17, 0x62	; 98
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <main+0x3e8>
    2e16:	0e c1       	rjmp	.+540    	; 0x3034 <main+0x604>
    2e18:	13 36       	cpi	r17, 0x63	; 99
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <main+0x3ee>
    2e1c:	0e c1       	rjmp	.+540    	; 0x303a <main+0x60a>
    2e1e:	11 36       	cpi	r17, 0x61	; 97
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <main+0x3f4>
    2e22:	0e c1       	rjmp	.+540    	; 0x3040 <main+0x610>
    2e24:	02 c1       	rjmp	.+516    	; 0x302a <main+0x5fa>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    2e26:	20 91 ac 02 	lds	r18, 0x02AC
    2e2a:	30 91 ad 02 	lds	r19, 0x02AD
    2e2e:	40 91 ae 02 	lds	r20, 0x02AE
    2e32:	50 91 af 02 	lds	r21, 0x02AF
    2e36:	60 91 a1 00 	lds	r22, 0x00A1
    2e3a:	70 91 a2 00 	lds	r23, 0x00A2
    2e3e:	80 91 a3 00 	lds	r24, 0x00A3
    2e42:	90 91 a4 00 	lds	r25, 0x00A4
    2e46:	0e 94 66 13 	call	0x26cc	; 0x26cc <SD_erase>
    2e4a:	c8 2e       	mov	r12, r24
          TX_NEWLINE;
    2e4c:	8d e0       	ldi	r24, 0x0D	; 13
    2e4e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2e52:	8a e0       	ldi	r24, 0x0A	; 10
    2e54:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
          if(error)
    2e58:	cc 20       	and	r12, r12
    2e5a:	19 f0       	breq	.+6      	; 0x2e62 <main+0x432>
              transmitString_F(PSTR("Erase failed.."));
    2e5c:	8d ef       	ldi	r24, 0xFD	; 253
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	48 c0       	rjmp	.+144    	; 0x2ef2 <main+0x4c2>
          else
              transmitString_F(PSTR("Erased!"));
    2e62:	85 ef       	ldi	r24, 0xF5	; 245
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	45 c0       	rjmp	.+138    	; 0x2ef2 <main+0x4c2>
                data = receiveByte();
                transmitByte(data);
                buffer[i++] = data;
                if(data == 0x0d)
                {
                    transmitByte(0x0a);
    2e68:	8a e0       	ldi	r24, 0x0A	; 10
    2e6a:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
                    buffer[i++] = 0x0a;
    2e6e:	22 e0       	ldi	r18, 0x02	; 2
    2e70:	62 0e       	add	r6, r18
    2e72:	71 1c       	adc	r7, r1
    2e74:	f2 01       	movw	r30, r4
    2e76:	eb 55       	subi	r30, 0x5B	; 91
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	8a e0       	ldi	r24, 0x0A	; 10
    2e7c:	80 83       	st	Z, r24
                }
                if(i == 512) break;
    2e7e:	61 14       	cp	r6, r1
    2e80:	82 e0       	ldi	r24, 0x02	; 2
    2e82:	78 06       	cpc	r7, r24
    2e84:	a9 f0       	breq	.+42     	; 0x2eb0 <main+0x480>
    2e86:	23 01       	movw	r4, r6
    2e88:	32 01       	movw	r6, r4
case '1': TX_NEWLINE;
          transmitString_F(PSTR(" Enter text (End with ~):"));
          i=0;
            do
            {
                data = receiveByte();
    2e8a:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2e8e:	18 2f       	mov	r17, r24
                transmitByte(data);
    2e90:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
                buffer[i++] = data;
    2e94:	23 01       	movw	r4, r6
    2e96:	9f ef       	ldi	r25, 0xFF	; 255
    2e98:	49 1a       	sub	r4, r25
    2e9a:	59 0a       	sbc	r5, r25
    2e9c:	f3 01       	movw	r30, r6
    2e9e:	eb 55       	subi	r30, 0x5B	; 91
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	10 83       	st	Z, r17
                if(data == 0x0d)
    2ea4:	1d 30       	cpi	r17, 0x0D	; 13
    2ea6:	01 f3       	breq	.-64     	; 0x2e68 <main+0x438>
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
    2ea8:	41 14       	cp	r4, r1
    2eaa:	92 e0       	ldi	r25, 0x02	; 2
    2eac:	59 06       	cpc	r5, r25
    2eae:	e1 f4       	brne	.+56     	; 0x2ee8 <main+0x4b8>
            }while (data != '~');

            error = SD_writeSingleBlock (startBlock);
    2eb0:	60 91 a1 00 	lds	r22, 0x00A1
    2eb4:	70 91 a2 00 	lds	r23, 0x00A2
    2eb8:	80 91 a3 00 	lds	r24, 0x00A3
    2ebc:	90 91 a4 00 	lds	r25, 0x00A4
    2ec0:	0e 94 99 13 	call	0x2732	; 0x2732 <SD_writeSingleBlock>
    2ec4:	c8 2e       	mov	r12, r24
            TX_NEWLINE;
    2ec6:	8d e0       	ldi	r24, 0x0D	; 13
    2ec8:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2ecc:	8a e0       	ldi	r24, 0x0A	; 10
    2ece:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
            TX_NEWLINE;
    2ed2:	8d e0       	ldi	r24, 0x0D	; 13
    2ed4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2ed8:	8a e0       	ldi	r24, 0x0A	; 10
    2eda:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
            if(error)
    2ede:	cc 20       	and	r12, r12
    2ee0:	31 f0       	breq	.+12     	; 0x2eee <main+0x4be>
                transmitString_F(PSTR("Write failed.."));
    2ee2:	8c ec       	ldi	r24, 0xCC	; 204
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	05 c0       	rjmp	.+10     	; 0x2ef2 <main+0x4c2>
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
            }while (data != '~');
    2ee8:	1e 37       	cpi	r17, 0x7E	; 126
    2eea:	71 f6       	brne	.-100    	; 0x2e88 <main+0x458>
    2eec:	e1 cf       	rjmp	.-62     	; 0x2eb0 <main+0x480>
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
    2eee:	8a eb       	ldi	r24, 0xBA	; 186
    2ef0:	90 e0       	ldi	r25, 0x00	; 0

            error = SD_writeSingleBlock (startBlock);
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
    2ef2:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
    2ef6:	ba c0       	rjmp	.+372    	; 0x306c <main+0x63c>
            else
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
    2ef8:	60 91 a1 00 	lds	r22, 0x00A1
    2efc:	70 91 a2 00 	lds	r23, 0x00A2
    2f00:	80 91 a3 00 	lds	r24, 0x00A3
    2f04:	90 91 a4 00 	lds	r25, 0x00A4
    2f08:	0e 94 e7 13 	call	0x27ce	; 0x27ce <SD_readSingleBlock>
    2f0c:	c8 2e       	mov	r12, r24
          TX_NEWLINE;
    2f0e:	8d e0       	ldi	r24, 0x0D	; 13
    2f10:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2f14:	8a e0       	ldi	r24, 0x0A	; 10
    2f16:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
          if(error)
    2f1a:	cc 20       	and	r12, r12
    2f1c:	19 f0       	breq	.+6      	; 0x2f24 <main+0x4f4>
            transmitString_F(PSTR("Read failed.."));
    2f1e:	8c ea       	ldi	r24, 0xAC	; 172
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	e7 cf       	rjmp	.-50     	; 0x2ef2 <main+0x4c2>
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
    2f24:	00 e0       	ldi	r16, 0x00	; 0
    2f26:	10 e0       	ldi	r17, 0x00	; 0
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    2f28:	f8 01       	movw	r30, r16
    2f2a:	eb 55       	subi	r30, 0x5B	; 91
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	8e 37       	cpi	r24, 0x7E	; 126
    2f32:	79 f4       	brne	.+30     	; 0x2f52 <main+0x522>
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    2f34:	8d e0       	ldi	r24, 0x0D	; 13
    2f36:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2f3a:	8a e0       	ldi	r24, 0x0A	; 10
    2f3c:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
            TX_NEWLINE;
    2f40:	8d e0       	ldi	r24, 0x0D	; 13
    2f42:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2f46:	8a e0       	ldi	r24, 0x0A	; 10
    2f48:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    2f4c:	8b e9       	ldi	r24, 0x9B	; 155
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	d0 cf       	rjmp	.-96     	; 0x2ef2 <main+0x4c2>
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
    2f52:	80 81       	ld	r24, Z
    2f54:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    2f58:	0f 5f       	subi	r16, 0xFF	; 255
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	01 15       	cp	r16, r1
    2f5e:	22 e0       	ldi	r18, 0x02	; 2
    2f60:	12 07       	cpc	r17, r18
    2f62:	11 f7       	brne	.-60     	; 0x2f28 <main+0x4f8>
    2f64:	e7 cf       	rjmp	.-50     	; 0x2f34 <main+0x504>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    2f66:	8d e0       	ldi	r24, 0x0D	; 13
    2f68:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2f6c:	8a e0       	ldi	r24, 0x0A	; 10
    2f6e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
  		  findFiles(GET_LIST,0);
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	70 e0       	ldi	r23, 0x00	; 0
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	0e 94 97 08 	call	0x112e	; 0x112e <findFiles>
          break;
    2f7c:	77 c0       	rjmp	.+238    	; 0x306c <main+0x63c>
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    2f7e:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    2f80:	e2 15       	cp	r30, r2
    2f82:	f3 05       	cpc	r31, r3
    2f84:	e1 f7       	brne	.-8      	; 0x2f7e <main+0x54e>
    2f86:	61 2c       	mov	r6, r1
    2f88:	71 2c       	mov	r7, r1
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    2f8a:	0e 94 b7 14 	call	0x296e	; 0x296e <receiveByte>
    2f8e:	08 2f       	mov	r16, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    2f90:	8d 30       	cpi	r24, 0x0D	; 13
    2f92:	59 f1       	breq	.+86     	; 0x2fea <main+0x5ba>
			if(data == 0x08)	//'Back Space' key pressed
    2f94:	88 30       	cpi	r24, 0x08	; 8
    2f96:	81 f4       	brne	.+32     	; 0x2fb8 <main+0x588>
	 		{ 
	   			if(i != 0)
    2f98:	61 14       	cp	r6, r1
    2f9a:	71 04       	cpc	r7, r1
    2f9c:	b1 f3       	breq	.-20     	; 0x2f8a <main+0x55a>
	   			{ 
	     			transmitByte(data);
    2f9e:	88 e0       	ldi	r24, 0x08	; 8
    2fa0:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
					transmitByte(' '); 
    2fa4:	80 e2       	ldi	r24, 0x20	; 32
    2fa6:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	     			transmitByte(data); 
    2faa:	88 e0       	ldi	r24, 0x08	; 8
    2fac:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
	     			i--; 
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	68 1a       	sub	r6, r24
    2fb4:	71 08       	sbc	r7, r1
    2fb6:	e9 cf       	rjmp	.-46     	; 0x2f8a <main+0x55a>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    2fb8:	80 ee       	ldi	r24, 0xE0	; 224
    2fba:	80 0f       	add	r24, r16
    2fbc:	8f 35       	cpi	r24, 0x5F	; 95
    2fbe:	28 f7       	brcc	.-54     	; 0x2f8a <main+0x55a>
			transmitByte(data);
    2fc0:	80 2f       	mov	r24, r16
    2fc2:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
            fileName[i++] = data;
    2fc6:	a3 01       	movw	r20, r6
    2fc8:	4f 5f       	subi	r20, 0xFF	; 255
    2fca:	5f 4f       	sbci	r21, 0xFF	; 255
    2fcc:	e1 e0       	ldi	r30, 0x01	; 1
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	ec 0f       	add	r30, r28
    2fd2:	fd 1f       	adc	r31, r29
    2fd4:	e6 0d       	add	r30, r6
    2fd6:	f7 1d       	adc	r31, r7
    2fd8:	00 83       	st	Z, r16
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    2fda:	4d 30       	cpi	r20, 0x0D	; 13
    2fdc:	51 05       	cpc	r21, r1
    2fde:	11 f0       	breq	.+4      	; 0x2fe4 <main+0x5b4>
    2fe0:	3a 01       	movw	r6, r20
    2fe2:	d3 cf       	rjmp	.-90     	; 0x2f8a <main+0x55a>
    2fe4:	83 e7       	ldi	r24, 0x73	; 115
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	84 cf       	rjmp	.-248    	; 0x2ef2 <main+0x4c2>
          }
          if(i>12) break;
    2fea:	9d e0       	ldi	r25, 0x0D	; 13
    2fec:	69 16       	cp	r6, r25
    2fee:	71 04       	cpc	r7, r1
    2ff0:	e8 f5       	brcc	.+122    	; 0x306c <main+0x63c>
       
	      TX_NEWLINE;
    2ff2:	8d e0       	ldi	r24, 0x0D	; 13
    2ff4:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    2ff8:	8a e0       	ldi	r24, 0x0A	; 10
    2ffa:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
		  if(option == '6')
    2ffe:	16 33       	cpi	r17, 0x36	; 54
    3000:	39 f4       	brne	.+14     	; 0x3010 <main+0x5e0>
		     readFile( READ, fileName);
    3002:	be 01       	movw	r22, r28
    3004:	6f 5f       	subi	r22, 0xFF	; 255
    3006:	7f 4f       	sbci	r23, 0xFF	; 255
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	0e 94 92 0a 	call	0x1524	; 0x1524 <readFile>
    300e:	2e c0       	rjmp	.+92     	; 0x306c <main+0x63c>
		  if(option == '7')
		  	 writeFile(fileName);
    3010:	ce 01       	movw	r24, r28
    3012:	01 96       	adiw	r24, 0x01	; 1
          if(i>12) break;
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
		  if(option == '7')
    3014:	17 33       	cpi	r17, 0x37	; 55
    3016:	19 f4       	brne	.+6      	; 0x301e <main+0x5ee>
		  	 writeFile(fileName);
    3018:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <writeFile>
    301c:	27 c0       	rjmp	.+78     	; 0x306c <main+0x63c>
 		  if(option == '8')
		     deleteFile(fileName);
    301e:	0e 94 84 0a 	call	0x1508	; 0x1508 <deleteFile>
    3022:	24 c0       	rjmp	.+72     	; 0x306c <main+0x63c>
          break;

case '9': memoryStatistics();
    3024:	0e 94 04 06 	call	0xc08	; 0xc08 <memoryStatistics>
          break;
    3028:	21 c0       	rjmp	.+66     	; 0x306c <main+0x63c>

case 'a': 
case 'A': RTC_displayDate();
    302a:	0e 94 9c 10 	call	0x2138	; 0x2138 <RTC_displayDate>
		  RTC_displayTime();
    302e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <RTC_displayTime>
		  break;
    3032:	1c c0       	rjmp	.+56     	; 0x306c <main+0x63c>
case 'b': 
case 'B': RTC_updateDate();
    3034:	0e 94 da 11 	call	0x23b4	; 0x23b4 <RTC_updateDate>
		  break;
    3038:	19 c0       	rjmp	.+50     	; 0x306c <main+0x63c>
case 'c': 
case 'C': RTC_updateTime();
    303a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <RTC_updateTime>
	      break;
    303e:	16 c0       	rjmp	.+44     	; 0x306c <main+0x63c>

default: TX_NEWLINE;
    3040:	8d e0       	ldi	r24, 0x0D	; 13
    3042:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    3046:	8a e0       	ldi	r24, 0x0A	; 10
    3048:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
         TX_NEWLINE;
    304c:	8d e0       	ldi	r24, 0x0D	; 13
    304e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    3052:	8a e0       	ldi	r24, 0x0A	; 10
    3054:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    3058:	82 e6       	ldi	r24, 0x62	; 98
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 c0 14 	call	0x2980	; 0x2980 <transmitString_F>
         TX_NEWLINE;
    3060:	8d e0       	ldi	r24, 0x0D	; 13
    3062:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    3066:	8a e0       	ldi	r24, 0x0A	; 10
    3068:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
}

TX_NEWLINE;
    306c:	8d e0       	ldi	r24, 0x0D	; 13
    306e:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    3072:	8a e0       	ldi	r24, 0x0A	; 10
    3074:	0e 94 bc 14 	call	0x2978	; 0x2978 <transmitByte>
    3078:	73 cd       	rjmp	.-1306   	; 0x2b60 <main+0x130>

0000307a <__mulsi3>:
    307a:	db 01       	movw	r26, r22
    307c:	8f 93       	push	r24
    307e:	9f 93       	push	r25
    3080:	0e 94 75 18 	call	0x30ea	; 0x30ea <__muluhisi3>
    3084:	bf 91       	pop	r27
    3086:	af 91       	pop	r26
    3088:	a2 9f       	mul	r26, r18
    308a:	80 0d       	add	r24, r0
    308c:	91 1d       	adc	r25, r1
    308e:	a3 9f       	mul	r26, r19
    3090:	90 0d       	add	r25, r0
    3092:	b2 9f       	mul	r27, r18
    3094:	90 0d       	add	r25, r0
    3096:	11 24       	eor	r1, r1
    3098:	08 95       	ret

0000309a <__udivmodsi4>:
    309a:	a1 e2       	ldi	r26, 0x21	; 33
    309c:	1a 2e       	mov	r1, r26
    309e:	aa 1b       	sub	r26, r26
    30a0:	bb 1b       	sub	r27, r27
    30a2:	fd 01       	movw	r30, r26
    30a4:	0d c0       	rjmp	.+26     	; 0x30c0 <__udivmodsi4_ep>

000030a6 <__udivmodsi4_loop>:
    30a6:	aa 1f       	adc	r26, r26
    30a8:	bb 1f       	adc	r27, r27
    30aa:	ee 1f       	adc	r30, r30
    30ac:	ff 1f       	adc	r31, r31
    30ae:	a2 17       	cp	r26, r18
    30b0:	b3 07       	cpc	r27, r19
    30b2:	e4 07       	cpc	r30, r20
    30b4:	f5 07       	cpc	r31, r21
    30b6:	20 f0       	brcs	.+8      	; 0x30c0 <__udivmodsi4_ep>
    30b8:	a2 1b       	sub	r26, r18
    30ba:	b3 0b       	sbc	r27, r19
    30bc:	e4 0b       	sbc	r30, r20
    30be:	f5 0b       	sbc	r31, r21

000030c0 <__udivmodsi4_ep>:
    30c0:	66 1f       	adc	r22, r22
    30c2:	77 1f       	adc	r23, r23
    30c4:	88 1f       	adc	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	1a 94       	dec	r1
    30ca:	69 f7       	brne	.-38     	; 0x30a6 <__udivmodsi4_loop>
    30cc:	60 95       	com	r22
    30ce:	70 95       	com	r23
    30d0:	80 95       	com	r24
    30d2:	90 95       	com	r25
    30d4:	9b 01       	movw	r18, r22
    30d6:	ac 01       	movw	r20, r24
    30d8:	bd 01       	movw	r22, r26
    30da:	cf 01       	movw	r24, r30
    30dc:	08 95       	ret

000030de <__tablejump2__>:
    30de:	ee 0f       	add	r30, r30
    30e0:	ff 1f       	adc	r31, r31

000030e2 <__tablejump__>:
    30e2:	05 90       	lpm	r0, Z+
    30e4:	f4 91       	lpm	r31, Z
    30e6:	e0 2d       	mov	r30, r0
    30e8:	09 94       	ijmp

000030ea <__muluhisi3>:
    30ea:	0e 94 80 18 	call	0x3100	; 0x3100 <__umulhisi3>
    30ee:	a5 9f       	mul	r26, r21
    30f0:	90 0d       	add	r25, r0
    30f2:	b4 9f       	mul	r27, r20
    30f4:	90 0d       	add	r25, r0
    30f6:	a4 9f       	mul	r26, r20
    30f8:	80 0d       	add	r24, r0
    30fa:	91 1d       	adc	r25, r1
    30fc:	11 24       	eor	r1, r1
    30fe:	08 95       	ret

00003100 <__umulhisi3>:
    3100:	a2 9f       	mul	r26, r18
    3102:	b0 01       	movw	r22, r0
    3104:	b3 9f       	mul	r27, r19
    3106:	c0 01       	movw	r24, r0
    3108:	a3 9f       	mul	r26, r19
    310a:	70 0d       	add	r23, r0
    310c:	81 1d       	adc	r24, r1
    310e:	11 24       	eor	r1, r1
    3110:	91 1d       	adc	r25, r1
    3112:	b2 9f       	mul	r27, r18
    3114:	70 0d       	add	r23, r0
    3116:	81 1d       	adc	r24, r1
    3118:	11 24       	eor	r1, r1
    311a:	91 1d       	adc	r25, r1
    311c:	08 95       	ret

0000311e <_exit>:
    311e:	f8 94       	cli

00003120 <__stop_program>:
    3120:	ff cf       	rjmp	.-2      	; 0x3120 <__stop_program>
