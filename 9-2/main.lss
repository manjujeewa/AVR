
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000246  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  000002ee  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002be  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001da  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000ce  00000000  00000000  00000ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000094  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000183  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000153  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
		
	return 0;
}

void init(void){
	DDRC = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRA = 1<<3 | 1<<4| 1<<5| 1<<6 | 1<<7;
  96:	88 ef       	ldi	r24, 0xF8	; 248
  98:	8a bb       	out	0x1a, r24	; 26
	
	DDRD = DDRD | ~(1<<2);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8b 6f       	ori	r24, 0xFB	; 251
  9e:	81 bb       	out	0x11, r24	; 17
	PORTA = 1<<3;
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	8b bb       	out	0x1b, r24	; 27
	
	TCCR0 = 1<<FOC0 | 1<<WGM01 | 0<<WGM00 | 0<<CS02 | 1<<CS01 | 0<<CS00 ;  //prescaler 8
  a4:	8a e8       	ldi	r24, 0x8A	; 138
  a6:	83 bf       	out	0x33, r24	; 51
	
	OCR0=249; // compare value 250 * 8 * 1/8 MHz = 250us
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= 1<<OCIE0; //enable interrupt on compare
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	89 bf       	out	0x39, r24	; 57
  b2:	08 95       	ret

000000b4 <__vector_10>:
	
}

ISR(TIMER0_COMP_vect){ //compare match timer0 at each 250us
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	
	
	if (--countU==0){
  c6:	80 91 62 00 	lds	r24, 0x0062
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	80 93 62 00 	sts	0x0062, r24
  d0:	81 11       	cpse	r24, r1
  d2:	26 c0       	rjmp	.+76     	; 0x120 <__vector_10+0x6c>
		countU=4;
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	80 93 62 00 	sts	0x0062, r24
		
		if(--countMS==0){
  da:	80 91 60 00 	lds	r24, 0x0060
  de:	90 91 61 00 	lds	r25, 0x0061
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	90 93 61 00 	sts	0x0061, r25
  e8:	80 93 60 00 	sts	0x0060, r24
  ec:	89 2b       	or	r24, r25
  ee:	c1 f4       	brne	.+48     	; 0x120 <__vector_10+0x6c>
			countMS =1000;			
  f0:	88 ee       	ldi	r24, 0xE8	; 232
  f2:	93 e0       	ldi	r25, 0x03	; 3
  f4:	90 93 61 00 	sts	0x0061, r25
  f8:	80 93 60 00 	sts	0x0060, r24
			
			if (++valS==60) {
  fc:	80 91 75 00 	lds	r24, 0x0075
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 75 00 	sts	0x0075, r24
 106:	8c 33       	cpi	r24, 0x3C	; 60
 108:	59 f4       	brne	.+22     	; 0x120 <__vector_10+0x6c>
				valS=0;
 10a:	10 92 75 00 	sts	0x0075, r1
				
				if(++valM==60){
 10e:	80 91 74 00 	lds	r24, 0x0074
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 74 00 	sts	0x0074, r24
 118:	8c 33       	cpi	r24, 0x3C	; 60
 11a:	11 f4       	brne	.+4      	; 0x120 <__vector_10+0x6c>
					valM=0;
 11c:	10 92 74 00 	sts	0x0074, r1
				}
			}
		}
	}
	
	count=valM*100 + valS;
 120:	20 91 74 00 	lds	r18, 0x0074
 124:	80 91 75 00 	lds	r24, 0x0075
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	34 e6       	ldi	r19, 0x64	; 100
 12c:	23 9f       	mul	r18, r19
 12e:	80 0d       	add	r24, r0
 130:	91 1d       	adc	r25, r1
 132:	11 24       	eor	r1, r1
 134:	90 93 64 00 	sts	0x0064, r25
 138:	80 93 63 00 	sts	0x0063, r24
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <getDigi>:



void getDigi(unsigned int val){
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	9c 01       	movw	r18, r24

	dig[0] = val%10;
 154:	ea e0       	ldi	r30, 0x0A	; 10
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	bf 01       	movw	r22, r30
 15a:	0e 94 0d 01 	call	0x21a	; 0x21a <__udivmodhi4>
 15e:	80 93 65 00 	sts	0x0065, r24
	
	dig[1] = (val%100)/10;
 162:	c9 01       	movw	r24, r18
 164:	64 e6       	ldi	r22, 0x64	; 100
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	0e 94 0d 01 	call	0x21a	; 0x21a <__udivmodhi4>
 16c:	eb 01       	movw	r28, r22
 16e:	bf 01       	movw	r22, r30
 170:	0e 94 0d 01 	call	0x21a	; 0x21a <__udivmodhi4>
 174:	60 93 66 00 	sts	0x0066, r22
	
	dig[2] = (val/100)%10;
 178:	ce 01       	movw	r24, r28
 17a:	bf 01       	movw	r22, r30
 17c:	0e 94 0d 01 	call	0x21a	; 0x21a <__udivmodhi4>
 180:	80 93 67 00 	sts	0x0067, r24
	
	dig[3] = val/1000;
 184:	c9 01       	movw	r24, r18
 186:	68 ee       	ldi	r22, 0xE8	; 232
 188:	73 e0       	ldi	r23, 0x03	; 3
 18a:	0e 94 0d 01 	call	0x21a	; 0x21a <__udivmodhi4>
 18e:	60 93 68 00 	sts	0x0068, r22
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <displaySSD>:

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
			if(i==2) {
				PORTC=SSD[dig[i]] + 128; //Displaying Dot
			}else{
				PORTC=SSD[dig[i]];
			}
			PORTA = 1<<i+4;
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	70 e0       	ldi	r23, 0x00	; 0

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 1a0:	48 17       	cp	r20, r24
 1a2:	59 07       	cpc	r21, r25
 1a4:	59 f1       	breq	.+86     	; 0x1fc <displaySSD+0x64>
 1a6:	24 e0       	ldi	r18, 0x04	; 4
 1a8:	30 e0       	ldi	r19, 0x00	; 0
		unsigned char i ;
	
		for(i=0;i != 4;i++){
		
			
			if(i==2) {
 1aa:	26 30       	cpi	r18, 0x06	; 6
 1ac:	41 f4       	brne	.+16     	; 0x1be <displaySSD+0x26>
				PORTC=SSD[dig[i]] + 128; //Displaying Dot
 1ae:	e0 91 67 00 	lds	r30, 0x0067
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e7 59       	subi	r30, 0x97	; 151
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	e0 81       	ld	r30, Z
 1ba:	e0 58       	subi	r30, 0x80	; 128
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <displaySSD+0x36>
 1be:	f9 01       	movw	r30, r18
 1c0:	ef 59       	subi	r30, 0x9F	; 159
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
			}else{
				PORTC=SSD[dig[i]];
 1c4:	e0 81       	ld	r30, Z
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e7 59       	subi	r30, 0x97	; 151
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	e0 81       	ld	r30, Z
 1ce:	e5 bb       	out	0x15, r30	; 21
			}
			PORTA = 1<<i+4;
 1d0:	fb 01       	movw	r30, r22
 1d2:	02 2e       	mov	r0, r18
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <displaySSD+0x40>
 1d6:	ee 0f       	add	r30, r30
 1d8:	0a 94       	dec	r0
 1da:	ea f7       	brpl	.-6      	; 0x1d6 <displaySSD+0x3e>
 1dc:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	ef ec       	ldi	r30, 0xCF	; 207
 1e0:	f7 e0       	ldi	r31, 0x07	; 7
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <displaySSD+0x4a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <displaySSD+0x50>
 1e8:	00 00       	nop
			_delay_ms(1);
			PORTA=0;
 1ea:	1b ba       	out	0x1b, r1	; 27
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int j;
	
	for(j=0;j<n;j++){
		unsigned char i ;
	
		for(i=0;i != 4;i++){
 1f0:	28 30       	cpi	r18, 0x08	; 8
 1f2:	31 05       	cpc	r19, r1
 1f4:	d1 f6       	brne	.-76     	; 0x1aa <displaySSD+0x12>

void displaySSD(unsigned int n){
	
	unsigned int j;
	
	for(j=0;j<n;j++){
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	d2 cf       	rjmp	.-92     	; 0x1a0 <displaySSD+0x8>
 1fc:	08 95       	ret

000001fe <main>:
volatile unsigned char countU =4, valS=0, valM=0;
volatile unsigned int countMS =1000;

int main(void){
		
	init();
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <init>
	
	sei();// Global interrupt enable
 202:	78 94       	sei
	
	while(1){
				
		getDigi(count);
 204:	80 91 63 00 	lds	r24, 0x0063
 208:	90 91 64 00 	lds	r25, 0x0064
 20c:	0e 94 a7 00 	call	0x14e	; 0x14e <getDigi>
		displaySSD(1);		
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 cc 00 	call	0x198	; 0x198 <displaySSD>
 218:	f5 cf       	rjmp	.-22     	; 0x204 <main+0x6>

0000021a <__udivmodhi4>:
 21a:	aa 1b       	sub	r26, r26
 21c:	bb 1b       	sub	r27, r27
 21e:	51 e1       	ldi	r21, 0x11	; 17
 220:	07 c0       	rjmp	.+14     	; 0x230 <__udivmodhi4_ep>

00000222 <__udivmodhi4_loop>:
 222:	aa 1f       	adc	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	a6 17       	cp	r26, r22
 228:	b7 07       	cpc	r27, r23
 22a:	10 f0       	brcs	.+4      	; 0x230 <__udivmodhi4_ep>
 22c:	a6 1b       	sub	r26, r22
 22e:	b7 0b       	sbc	r27, r23

00000230 <__udivmodhi4_ep>:
 230:	88 1f       	adc	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	5a 95       	dec	r21
 236:	a9 f7       	brne	.-22     	; 0x222 <__udivmodhi4_loop>
 238:	80 95       	com	r24
 23a:	90 95       	com	r25
 23c:	bc 01       	movw	r22, r24
 23e:	cd 01       	movw	r24, r26
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
